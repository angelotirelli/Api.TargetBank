// ************************************************************************ //
// The types declared in this file were generated from data read from the
// WSDL File described below:
// WSDL     : https://dev.transportesbra.com.br/frete/TMS/FreteService.svc?singleWsdl
//  >Import : https://dev.transportesbra.com.br/frete/TMS/FreteService.svc?singleWsdl>0
//  >Import : https://dev.transportesbra.com.br/frete/TMS/FreteService.svc?singleWsdl>1
//  >Import : https://dev.transportesbra.com.br/frete/TMS/FreteService.svc?singleWsdl>2
//  >Import : https://dev.transportesbra.com.br/frete/TMS/FreteService.svc?singleWsdl>3
// Encoding : utf-8
// Codegen  : [wfAutoDestroyMembers-, wfUseSettersAndGetters+]
// Version  : 1.0
// (25/10/2023 11:18:04 - - $Rev: 112483 $)
// ************************************************************************ //

unit FreteService;

interface

uses Soap.InvokeRegistry, Soap.SOAPHTTPClient, System.Types, Soap.XSBuiltIns;

const
  IS_OPTN = $0001;
  IS_UNBD = $0002;
  IS_NLBL = $0004;
  IS_REF  = $0080;


type

  // ************************************************************************ //
  // The following types, referred to in the WSDL document are not being represented
  // in this file. They are either aliases[@] of other types represented or were referred
  // to but never[!] declared in the document. The types from the latter category
  // typically map to predefined/known XML or Embarcadero types; however, they could also 
  // indicate incorrect WSDL documents that failed to declare or import a schema type.
  // ************************************************************************ //
  // !:decimal         - "http://www.w3.org/2001/XMLSchema"[Gbl]
  // !:long            - "http://www.w3.org/2001/XMLSchema"[Gbl]
  // !:dateTime        - "http://www.w3.org/2001/XMLSchema"[Gbl]
  // !:int             - "http://www.w3.org/2001/XMLSchema"[Gbl]
  // !:string          - "http://www.w3.org/2001/XMLSchema"[Gbl]
  // !:boolean         - "http://www.w3.org/2001/XMLSchema"[Gbl]
  // !:double          - "http://www.w3.org/2001/XMLSchema"[Gbl]
  // !:base64Binary    - "http://www.w3.org/2001/XMLSchema"[Gbl]

  BuscarCartoesResponse2 = class;               { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  BuscarCartoesResponse = class;                { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  RetificacaoEncerramentoOperacaoTransporteRequest2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  RetificacaoEncerramentoOperacaoTransporteRequest = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  ResultadoPaginadoMotoristaResponse2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  ResultadoPaginadoCentroDeCustoResponse2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  DadosCompraValePedagioViaFacilPosCancelamento2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  DadosCompraValePedagioViaFacilPosCancelamento = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  DadosCompraValePedagioPosCancelamento2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  DadosCompraValePedagioPosCancelamento = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  ListarRotaClienteRequest2 = class;            { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  ListarRotaClienteRequest = class;             { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  ResultadoPaginadoListarRotasClienteResponse2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  ResultadoPaginadoListarRotasClienteResponse = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  ConfirmacaoPedagioRequest2 = class;           { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  ConfirmacaoPedagioRequest = class;            { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  FinalizacaoOperacaoTransporteRequest2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  FinalizacaoOperacaoTransporteRequest = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  RetificacaoOperacaoTransporteResponse2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  RetificacaoOperacaoTransporteResponse = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  CadastroAtualizacaoDadosQuitacaoRequest2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  CadastroAtualizacaoDadosQuitacaoRequest = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  ObterDetalhesQuitacaoRequest2 = class;        { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  ObterDetalhesQuitacaoRequest = class;         { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  ResultadoPaginadoOperacaoTransporteResponse2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  DeclaracaoOperacaoTransporteRequest2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  DeclaracaoOperacaoTransporteRequest = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  PagamentoParcelaRequest2 = class;             { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  PagamentoParcelaRequest = class;              { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  AutenticacaoRequest2 = class;                 { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  ErroResponse2        = class;                 { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  TransportadorResponse2 = class;               { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  BuscaTransportadorRequest2 = class;           { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  OperacaoTransporteViagemRequest2 = class;     { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  OperacaoTransporteViagemRequest = class;      { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  EncerramentoOperacaoTransporteResponse2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  EncerramentoOperacaoTransporteResponse = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  BuscaCartoesRequest2 = class;                 { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  BuscaCartoesRequest  = class;                 { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  EncerramentoOperacaoTransporteRequest2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  EncerramentoOperacaoTransporteRequest = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  CancelamentoOperacaoResponse2 = class;        { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  CancelamentoOperacaoResponse = class;         { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  CancelamentoOperacaoRequest2 = class;         { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  CancelamentoOperacaoRequest = class;          { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  AssociacaoSubstituicaoCartaoResponse2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  AssociacaoSubstituicaoCartaoResponse = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  CancelaCompraValePedagioResponse2 = class;    { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  CancelaCompraValePedagioResponse = class;     { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  ListarRotasClienteResponse2 = class;          { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  ListarRotasClienteResponse = class;           { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  ConfirmarPedagioResponse2 = class;            { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  ConfirmarPedagioResponse = class;             { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  DadosComplementaresCompraValePedagio2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  DadosComplementaresCompraValePedagio = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  CompraValePedagioResponse2 = class;           { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  CompraValePedagioResponse = class;            { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  AtualizaCompraValePedagioResponse2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  AtualizaCompraValePedagioResponse = class;    { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  FinalizacaoOperacaoTransporteResponse2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  FinalizacaoOperacaoTransporteResponse = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  DetalhesQuitacaoResponse2 = class;            { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  DetalhesQuitacaoResponse = class;             { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  CadastroAtualizacaoDadosQuitacaoResponse2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  CadastroAtualizacaoDadosQuitacaoResponse = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  OperacaoTransporteVeiculoResponse2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  BuscaOperacaoTransporteRequest2 = class;      { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  InfoPortadorResponse2 = class;                { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  InfoPortadorResponse = class;                 { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  InformacaoCartaoRequest2 = class;             { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  InformacaoCartaoRequest = class;              { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  AssociacaoSubstituicaoCartaoRequest2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  AssociacaoSubstituicaoCartaoRequest = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  ParcelaAdicionalResponse2 = class;            { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  ParcelaAdicionalResponse = class;             { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  InformacaoServicoResponse2 = class;           { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  GeraTokenParaAcessoResponse2 = class;         { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  ResultadoPaginadoParticipanteResponse2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  ParticipanteRequest2 = class;                 { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  BuscaParticipanteRequest2 = class;            { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  CentroDeCustoRequest2 = class;                { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  TransportadorRequest2 = class;                { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  PagamentoAvulsoCartaoRequest2 = class;        { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  BuscaCentroDeCustoRequest2 = class;           { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  CentroDeCustoResponse2 = class;               { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  BuscaMotoristaRequest2 = class;               { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  MotoristaResponse2   = class;                 { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  MotoristaRequest2    = class;                 { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  OperacaoTransporteParcelasResponse2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  CancelaCompraValePedagioRequest2 = class;     { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  CancelaCompraValePedagioRequest = class;      { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  CompraValePedagioRequest2 = class;            { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  CompraValePedagioRequest = class;             { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  ItemBuscarCartoesResponse2 = class;           { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  ItemBuscarCartoesResponse = class;            { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  AtualizaCompraValePedagioRequest2 = class;    { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  AtualizaCompraValePedagioRequest = class;     { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  DadosQuitacaoFreteDocumentosResponse2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  InformacaoCartaoResponse2 = class;            { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  InformacaoCartaoResponse = class;             { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  InformacoesParcelasResponse2 = class;         { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  InformacoesParcelasResponse = class;          { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  ParcelaAdicionalRequest2 = class;             { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  ParcelaAdicionalRequest = class;              { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  PagamentoParcelaIndividualResponse2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  PagamentoParcelaIndividualResponse = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  ParticipanteResponse2 = class;                { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  OperacaoTransporteParcelaRequest2 = class;    { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  OperacaoTransporteVeiculoRequest2 = class;    { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  RetificacaoValoresRequest2 = class;           { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  OperacaoTransporteRequest2 = class;           { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  RetificacaoOperacaoTransporteRequest2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  ParticipanteDestinatarioAdicionalRequest2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  OperacaoTransporteResponse2 = class;          { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  DadosQuitacaoFreteResponse2 = class;          { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  DadosQuitacaoFreteRequest2 = class;           { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  DeclaracaoOperacaoTransporteResponse2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  DeclaracaoOperacaoTransporteResponse = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  DadosQuitacaoFreteDocumentosRequest2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  BuscaPagamentoAvulsoCartaoResponse2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  CombustivelAvulsoCartaoRequest2 = class;      { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  CombustivelAvulsoCartaoResponse2 = class;     { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  PagamentoAvulsoCartaoResponse2 = class;       { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  BuscaPagamentoAvulsoCartaoRequest2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  ResultadoPaginadoBuscaPagamentoAvulsoCartaoResponse2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  BuscaCombustivelAvulsoCartaoRequest2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  ResultadoPaginadoBuscaCompraValePedagioResponse2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  BuscaCompraValePedagioResponse2 = class;      { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  BuscaCompraValePedagioRequest2 = class;       { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  ResultadoPaginadoBuscaCombustivelAvulsoCartaoResponse2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  BuscaCombustivelAvulsoCartaoResponse2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  BuscaParticipanteRequest = class;             { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  ResultadoPaginadoParticipanteResponse = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  CentroDeCustoRequest = class;                 { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  ParticipanteResponse = class;                 { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  ErroResponse         = class;                 { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  GeraTokenParaAcessoResponse = class;          { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  ParticipanteRequest  = class;                 { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  CentroDeCustoResponse = class;                { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  BuscaMotoristaRequest = class;                { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  ResultadoPaginadoMotoristaResponse = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  TransportadorRequest = class;                 { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  MotoristaResponse    = class;                 { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  BuscaCentroDeCustoRequest = class;            { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  ResultadoPaginadoCentroDeCustoResponse = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  MotoristaRequest     = class;                 { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  RotaDetalhadaInfoPedagio2 = class;            { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  RotaDetalhadaInfoPedagio = class;             { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  CompraValePedagioPorPracaRequest2 = class;    { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  CompraValePedagioPorPracaRequest = class;     { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  RotaDetalhadaResponse2 = class;               { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  RotaDetalhadaResponse = class;                { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  DadosPagamentoPedagioCartao2 = class;         { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  DadosPagamentoPedagioCartao = class;          { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  ResumoPracaPedagio2  = class;                 { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  ResumoPracaPedagio   = class;                 { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  AutenticacaoRequest  = class;                 { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  InformacaoServicoResponse = class;            { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  IdentificadorPracaPedagio2 = class;           { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  IdentificadorPracaPedagio = class;            { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  ObtencaoCustoRotaPorPracasRequest2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  ObtencaoCustoRotaPorPracasRequest = class;    { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  ObtencaoCustoRotaPorPracaResponse2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  ObtencaoCustoRotaPorPracaResponse = class;    { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  DadosQuitacaoFreteRequest = class;            { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  DadosQuitacaoFreteDocumentosRequest = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  OperacaoTransporteResponse = class;           { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  ParticipanteDestinatarioAdicionalRequest = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  OperacaoTransporteRequest = class;            { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  OperacaoTransporteParcelaRequest = class;     { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  OperacaoTransporteVeiculoRequest = class;     { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  OperacaoTransporteParcelasResponse = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  ResultadoPaginadoOperacaoTransporteResponse = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  RetificacaoOperacaoTransporteRequest = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  RetificacaoValoresRequest = class;            { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  BuscaOperacaoTransporteRequest = class;       { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  OperacaoTransporteVeiculoResponse = class;    { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  DadosQuitacaoFreteResponse = class;           { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  DadosQuitacaoFreteDocumentosResponse = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  BuscaPagamentoAvulsoCartaoRequest = class;    { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  ResultadoPaginadoBuscaPagamentoAvulsoCartaoResponse = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  BuscaPagamentoAvulsoCartaoResponse = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  PagamentoAvulsoCartaoResponse = class;        { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  TransportadorResponse = class;                { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  BuscaTransportadorRequest = class;            { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  PagamentoAvulsoCartaoRequest = class;         { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  CombustivelAvulsoCartaoRequest = class;       { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  BuscaCompraValePedagioRequest = class;        { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  ResultadoPaginadoBuscaCompraValePedagioResponse = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  BuscaCompraValePedagioResponse = class;       { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  BuscaCombustivelAvulsoCartaoResponse = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  CombustivelAvulsoCartaoResponse = class;      { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  BuscaCombustivelAvulsoCartaoRequest = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  ResultadoPaginadoBuscaCombustivelAvulsoCartaoResponse = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  CondutorResponse2    = class;                 { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  CondutorResponse     = class;                 { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  BuscaTransacoesFinanceirasRequest2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  BuscaTransacoesFinanceirasRequest = class;    { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  BuscaInformacoesContratacaoRequest2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  BuscaInformacoesContratacaoRequest = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  BuscaInformacoesContratacaoResponse2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  BuscaInformacoesContratacaoResponse = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  DadosContaBancariaResponse2 = class;          { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  DadosContaBancariaResponse = class;           { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  ResultadoPaginadoBuscaTransacoesFinanceirasResponse2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  ResultadoPaginadoBuscaTransacoesFinanceirasResponse = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  ConsultaTaxasCalculadasResponse2 = class;     { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  ConsultaTaxasCalculadasResponse = class;      { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  TrocaPlacaCompraValePedagioTAGRequest2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  TrocaPlacaCompraValePedagioTAGRequest = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  TrocaPlacaCompraValePedagioTAGResponse2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  TrocaPlacaCompraValePedagioTAGResponse = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  BuscaTransacoesFinanceirasResponse2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  BuscaTransacoesFinanceirasResponse = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  ConsultaTaxasCalculadasRequest2 = class;      { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  ConsultaTaxasCalculadasRequest = class;       { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  ResultadoPaginadoConsultaTaxasCalculadasResponse2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  ResultadoPaginadoConsultaTaxasCalculadasResponse = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  ConsultaRotaMapLinkPedagiosResponse2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  ConsultaRotaMapLinkPedagiosResponse = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  ConsultaRotaMapLinkParadaResponse2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  ConsultaRotaMapLinkParadaResponse = class;    { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  RotaDetalhadaParada2 = class;                 { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  RotaDetalhadaParada  = class;                 { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  RotaDetalhadaInfoParada2 = class;             { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  RotaDetalhadaInfoParada = class;              { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  RotaResponse2        = class;                 { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  RotaResponse         = class;                 { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  ObtencaoCustoRotaRequest2 = class;            { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  ObtencaoCustoRotaRequest = class;             { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  ObtencaoCustoRotaResponse2 = class;           { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  ObtencaoCustoRotaResponse = class;            { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  RoteiroRequest2      = class;                 { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  RoteiroRequest       = class;                 { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  EmissaoDocumentoRequest2 = class;             { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  EmissaoDocumentoRequest = class;              { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  EmissaoDocumentoResponse2 = class;            { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  EmissaoDocumentoResponse = class;             { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  RoteiroResponse2     = class;                 { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  RoteiroResponse      = class;                 { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  BuscaRoteiroRequest2 = class;                 { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  BuscaRoteiroRequest  = class;                 { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  ResultadoPaginadoRoteiroResponse2 = class;    { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  ResultadoPaginadoRoteiroResponse = class;     { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  CancelamentoSolicitacaoPagamentoAvulsoCartaoRequest2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  CancelamentoSolicitacaoPagamentoAvulsoCartaoRequest = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  CancelamentoSolicitacaoPagamentoAvulsoCartaoResponse2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  CancelamentoSolicitacaoPagamentoAvulsoCartaoResponse = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  PagamentoCombustivelAvulsoCartaoManualmenteRequest2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  PagamentoCombustivelAvulsoCartaoManualmenteRequest = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  PagamentoAvulsoCartaoManualmenteResponse2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  PagamentoAvulsoCartaoManualmenteResponse = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  CalculoValoresPisCofinsRequest2 = class;      { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  CalculoValoresPisCofinsRequest = class;       { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  CalculoValoresPisCofinsResponse2 = class;     { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  CalculoValoresPisCofinsResponse = class;      { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  PagamentoAvulsoCartaoManualmenteRequest2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  PagamentoAvulsoCartaoManualmenteRequest = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  PagamentoCombustivelAvulsoCartaoManualmenteResponse2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  PagamentoCombustivelAvulsoCartaoManualmenteResponse = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  TerminalCarregamentoResponse2 = class;        { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  TerminalCarregamentoResponse = class;         { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  RotaDetalhadaRequest2 = class;                { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  RotaDetalhadaRequest = class;                 { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  CancelamentoSolicitacaoPagamentoCombustivelAvulsoCartaoRequest2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  CancelamentoSolicitacaoPagamentoCombustivelAvulsoCartaoRequest = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  CancelamentoSolicitacaoPagamentoCombustivelAvulsoCartaoResponse2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  CancelamentoSolicitacaoPagamentoCombustivelAvulsoCartaoResponse = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  BuscaTerminaisCarregamentoAutorizadosResponse2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  BuscaTerminaisCarregamentoAutorizadosResponse = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  CadastroRoteiroCustomizadoResponse2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  CadastroRoteiroCustomizadoResponse = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  ConsultaSituacaoEmpresaTransportadorAnttRequest2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  ConsultaSituacaoEmpresaTransportadorAnttRequest = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  CadastroRoteiroCustomizadoRequest2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  CadastroRoteiroCustomizadoRequest = class;    { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  ConsultaSituacaoTransportadorAnttRequest2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  ConsultaSituacaoTransportadorAnttRequest = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  ConsultaSituacaoTransportadorAnttResponse2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  ConsultaSituacaoTransportadorAnttResponse = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  ConsultaSituacaoEmpresaTransportadorAnttResponse2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  ConsultaSituacaoEmpresaTransportadorAnttResponse = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  CadastroAtualizacaoDadosItemReguaImpostoRequest2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  CadastroAtualizacaoDadosItemReguaImpostoRequest = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  ResultadoPaginadoBuscaItemReguaImpostoResponse2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  ResultadoPaginadoBuscaItemReguaImpostoResponse = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  BuscaItemReguaImpostoResponse2 = class;       { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  BuscaItemReguaImpostoResponse = class;        { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  BuscaItemReguaImpostoRequest2 = class;        { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  BuscaItemReguaImpostoRequest = class;         { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  CadastroAtualizacaoDadosItemReguaImpostoResponse2 = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  CadastroAtualizacaoDadosItemReguaImpostoResponse = class;   { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  CalculoImpostosFreteRequest2 = class;         { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  CalculoImpostosFreteRequest = class;          { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }
  CalculoImpostosFreteResponse2 = class;        { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  CalculoImpostosFreteResponse = class;         { "http://tmsfrete.v2.targetmp.com.br"[GblElm] }

  {$SCOPEDENUMS ON}
  { "http://schemas.datacontract.org/2004/07/TARGET.VectioFrete.InterfaceTMS.Data"[GblSmpl] }
  TipoPessoaProdutoCartao = (NaoDefinido, Fisica, Juridica);

  { "http://schemas.datacontract.org/2004/07/TARGET.VectioFrete.InterfaceTMS.Data"[GblSmpl] }
  StatusCartao = (Ativo, RouboFurto, PerdaRoubo, Remessa, Bloqueado, Cancelado, BloqueadoPreventivo, ImpedidoBanco);

  { "http://schemas.datacontract.org/2004/07/TARGET.VectioFrete.InterfaceTMS.Data"[GblSmpl] }
  LiberacaoCarga = (Liberado, ImpedidoNaoVinculado, ImpedidoStatus, ImpedidoAdministradora, ImpedidoInexistente, ImpedidoVencimento, ImpedidoAdministradoraExcetoPedagio, ImpedidoWhiteListOut);

  { "http://tmsfrete.v2.targetmp.com.br"[GblSmpl] }
  StatusServico = (Disponivel, Indisponivel, Manutencao);

  { "http://schemas.datacontract.org/2004/07/TARGET.VectioFrete.InterfaceTMS.Data"[GblSmpl] }
  TipoTransportador = (TAC, ETC, CTC, TER);

  {$SCOPEDENUMS OFF}

  ArrayOfInformacoesParcelasResponse = array of InformacoesParcelasResponse2;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  ArrayOfOperacaoTransporteResponse = array of OperacaoTransporteResponse2;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  ArrayOfDadosQuitacaoFreteDocumentosResponse = array of DadosQuitacaoFreteDocumentosResponse2;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  ArrayOfListarRotasClienteResponse = array of ListarRotasClienteResponse2;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  ArrayOfRotaResponse = array of RotaResponse2;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  ArrayOfDadosCompraValePedagioViaFacilPosCancelamento = array of DadosCompraValePedagioViaFacilPosCancelamento2;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  ArrayOfDadosCompraValePedagioPosCancelamento = array of DadosCompraValePedagioPosCancelamento2;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  ArrayOfItemBuscarCartoesResponse = array of ItemBuscarCartoesResponse2;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }


  // ************************************************************************ //
  // XML       : BuscarCartoesResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  BuscarCartoesResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FListaCartoesAtivos: ArrayOfItemBuscarCartoesResponse;
    FListaCartoesAtivos_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetListaCartoesAtivos(Index: Integer): ArrayOfItemBuscarCartoesResponse;
    procedure SetListaCartoesAtivos(Index: Integer; const AArrayOfItemBuscarCartoesResponse: ArrayOfItemBuscarCartoesResponse);
    function  ListaCartoesAtivos_Specified(Index: Integer): boolean;
  published
    property Erro:               ErroResponse2                     Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property ListaCartoesAtivos: ArrayOfItemBuscarCartoesResponse  Index (IS_OPTN or IS_NLBL) read GetListaCartoesAtivos write SetListaCartoesAtivos stored ListaCartoesAtivos_Specified;
  end;



  // ************************************************************************ //
  // XML       : BuscarCartoesResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  BuscarCartoesResponse = class(BuscarCartoesResponse2)
  private
  published
  end;

  ArrayOfOperacaoTransporteViagemRequest = array of OperacaoTransporteViagemRequest2;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  ArrayOfCentroDeCustoResponse = array of CentroDeCustoResponse2;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }


  // ************************************************************************ //
  // XML       : RetificacaoEncerramentoOperacaoTransporteRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  RetificacaoEncerramentoOperacaoTransporteRequest2 = class(TRemotable)
  private
    FPesoCarga: TXSDecimal;
    FPesoCarga_Specified: boolean;
    FValores: RetificacaoValoresRequest2;
    FValores_Specified: boolean;
    function  GetPesoCarga(Index: Integer): TXSDecimal;
    procedure SetPesoCarga(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  PesoCarga_Specified(Index: Integer): boolean;
    function  GetValores(Index: Integer): RetificacaoValoresRequest2;
    procedure SetValores(Index: Integer; const ARetificacaoValoresRequest2: RetificacaoValoresRequest2);
    function  Valores_Specified(Index: Integer): boolean;
  published
    property PesoCarga: TXSDecimal                  Index (IS_OPTN or IS_NLBL) read GetPesoCarga write SetPesoCarga stored PesoCarga_Specified;
    property Valores:   RetificacaoValoresRequest2  Index (IS_OPTN or IS_NLBL) read GetValores write SetValores stored Valores_Specified;
  end;



  // ************************************************************************ //
  // XML       : RetificacaoEncerramentoOperacaoTransporteRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  RetificacaoEncerramentoOperacaoTransporteRequest = class(RetificacaoEncerramentoOperacaoTransporteRequest2)
  private
  published
  end;

  ArrayOfMotoristaResponse = array of MotoristaResponse2;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }


  // ************************************************************************ //
  // XML       : ResultadoPaginadoMotoristaResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ResultadoPaginadoMotoristaResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FItens: ArrayOfMotoristaResponse;
    FItens_Specified: boolean;
    FNumeroPagina: Integer;
    FNumeroPagina_Specified: boolean;
    FQuantidadeItensPorPagina: Integer;
    FQuantidadeItensPorPagina_Specified: boolean;
    FQuantidadeTotalItens: Integer;
    FQuantidadeTotalItens_Specified: boolean;
    FQuantidadeTotalPaginas: Integer;
    FQuantidadeTotalPaginas_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetItens(Index: Integer): ArrayOfMotoristaResponse;
    procedure SetItens(Index: Integer; const AArrayOfMotoristaResponse: ArrayOfMotoristaResponse);
    function  Itens_Specified(Index: Integer): boolean;
    function  GetNumeroPagina(Index: Integer): Integer;
    procedure SetNumeroPagina(Index: Integer; const AInteger: Integer);
    function  NumeroPagina_Specified(Index: Integer): boolean;
    function  GetQuantidadeItensPorPagina(Index: Integer): Integer;
    procedure SetQuantidadeItensPorPagina(Index: Integer; const AInteger: Integer);
    function  QuantidadeItensPorPagina_Specified(Index: Integer): boolean;
    function  GetQuantidadeTotalItens(Index: Integer): Integer;
    procedure SetQuantidadeTotalItens(Index: Integer; const AInteger: Integer);
    function  QuantidadeTotalItens_Specified(Index: Integer): boolean;
    function  GetQuantidadeTotalPaginas(Index: Integer): Integer;
    procedure SetQuantidadeTotalPaginas(Index: Integer; const AInteger: Integer);
    function  QuantidadeTotalPaginas_Specified(Index: Integer): boolean;
  published
    property Erro:                     ErroResponse2             Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property Itens:                    ArrayOfMotoristaResponse  Index (IS_OPTN or IS_NLBL) read GetItens write SetItens stored Itens_Specified;
    property NumeroPagina:             Integer                   Index (IS_OPTN) read GetNumeroPagina write SetNumeroPagina stored NumeroPagina_Specified;
    property QuantidadeItensPorPagina: Integer                   Index (IS_OPTN) read GetQuantidadeItensPorPagina write SetQuantidadeItensPorPagina stored QuantidadeItensPorPagina_Specified;
    property QuantidadeTotalItens:     Integer                   Index (IS_OPTN) read GetQuantidadeTotalItens write SetQuantidadeTotalItens stored QuantidadeTotalItens_Specified;
    property QuantidadeTotalPaginas:   Integer                   Index (IS_OPTN) read GetQuantidadeTotalPaginas write SetQuantidadeTotalPaginas stored QuantidadeTotalPaginas_Specified;
  end;



  // ************************************************************************ //
  // XML       : ResultadoPaginadoCentroDeCustoResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ResultadoPaginadoCentroDeCustoResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FItens: ArrayOfCentroDeCustoResponse;
    FItens_Specified: boolean;
    FNumeroPagina: Integer;
    FNumeroPagina_Specified: boolean;
    FQuantidadeItensPorPagina: Integer;
    FQuantidadeItensPorPagina_Specified: boolean;
    FQuantidadeTotalItens: Integer;
    FQuantidadeTotalItens_Specified: boolean;
    FQuantidadeTotalPaginas: Integer;
    FQuantidadeTotalPaginas_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetItens(Index: Integer): ArrayOfCentroDeCustoResponse;
    procedure SetItens(Index: Integer; const AArrayOfCentroDeCustoResponse: ArrayOfCentroDeCustoResponse);
    function  Itens_Specified(Index: Integer): boolean;
    function  GetNumeroPagina(Index: Integer): Integer;
    procedure SetNumeroPagina(Index: Integer; const AInteger: Integer);
    function  NumeroPagina_Specified(Index: Integer): boolean;
    function  GetQuantidadeItensPorPagina(Index: Integer): Integer;
    procedure SetQuantidadeItensPorPagina(Index: Integer; const AInteger: Integer);
    function  QuantidadeItensPorPagina_Specified(Index: Integer): boolean;
    function  GetQuantidadeTotalItens(Index: Integer): Integer;
    procedure SetQuantidadeTotalItens(Index: Integer; const AInteger: Integer);
    function  QuantidadeTotalItens_Specified(Index: Integer): boolean;
    function  GetQuantidadeTotalPaginas(Index: Integer): Integer;
    procedure SetQuantidadeTotalPaginas(Index: Integer; const AInteger: Integer);
    function  QuantidadeTotalPaginas_Specified(Index: Integer): boolean;
  published
    property Erro:                     ErroResponse2                 Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property Itens:                    ArrayOfCentroDeCustoResponse  Index (IS_OPTN or IS_NLBL) read GetItens write SetItens stored Itens_Specified;
    property NumeroPagina:             Integer                       Index (IS_OPTN) read GetNumeroPagina write SetNumeroPagina stored NumeroPagina_Specified;
    property QuantidadeItensPorPagina: Integer                       Index (IS_OPTN) read GetQuantidadeItensPorPagina write SetQuantidadeItensPorPagina stored QuantidadeItensPorPagina_Specified;
    property QuantidadeTotalItens:     Integer                       Index (IS_OPTN) read GetQuantidadeTotalItens write SetQuantidadeTotalItens stored QuantidadeTotalItens_Specified;
    property QuantidadeTotalPaginas:   Integer                       Index (IS_OPTN) read GetQuantidadeTotalPaginas write SetQuantidadeTotalPaginas stored QuantidadeTotalPaginas_Specified;
  end;



  // ************************************************************************ //
  // XML       : DadosCompraValePedagioViaFacilPosCancelamento, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  DadosCompraValePedagioViaFacilPosCancelamento2 = class(TRemotable)
  private
    FIdCompraValePedagioViaFacil: Integer;
    FIdCompraValePedagioViaFacil_Specified: boolean;
    FValor: TXSDecimal;
    FValor_Specified: boolean;
    FIdStatusCompraValePedagioViaFacilPosCancelamento: Integer;
    FIdStatusCompraValePedagioViaFacilPosCancelamento_Specified: boolean;
    function  GetIdCompraValePedagioViaFacil(Index: Integer): Integer;
    procedure SetIdCompraValePedagioViaFacil(Index: Integer; const AInteger: Integer);
    function  IdCompraValePedagioViaFacil_Specified(Index: Integer): boolean;
    function  GetValor(Index: Integer): TXSDecimal;
    procedure SetValor(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  Valor_Specified(Index: Integer): boolean;
    function  GetIdStatusCompraValePedagioViaFacilPosCancelamento(Index: Integer): Integer;
    procedure SetIdStatusCompraValePedagioViaFacilPosCancelamento(Index: Integer; const AInteger: Integer);
    function  IdStatusCompraValePedagioViaFacilPosCancelamento_Specified(Index: Integer): boolean;
  published
    property IdCompraValePedagioViaFacil:                      Integer     Index (IS_OPTN) read GetIdCompraValePedagioViaFacil write SetIdCompraValePedagioViaFacil stored IdCompraValePedagioViaFacil_Specified;
    property Valor:                                            TXSDecimal  Index (IS_OPTN) read GetValor write SetValor stored Valor_Specified;
    property IdStatusCompraValePedagioViaFacilPosCancelamento: Integer     Index (IS_OPTN or IS_NLBL) read GetIdStatusCompraValePedagioViaFacilPosCancelamento write SetIdStatusCompraValePedagioViaFacilPosCancelamento stored IdStatusCompraValePedagioViaFacilPosCancelamento_Specified;
  end;



  // ************************************************************************ //
  // XML       : DadosCompraValePedagioViaFacilPosCancelamento, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  DadosCompraValePedagioViaFacilPosCancelamento = class(DadosCompraValePedagioViaFacilPosCancelamento2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : DadosCompraValePedagioPosCancelamento, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  DadosCompraValePedagioPosCancelamento2 = class(TRemotable)
  private
    FIdCompraValePedagio: Integer;
    FIdCompraValePedagio_Specified: boolean;
    FValor: TXSDecimal;
    FValor_Specified: boolean;
    FIdStatusCompraValePedagioPosCancelamento: Integer;
    FIdStatusCompraValePedagioPosCancelamento_Specified: boolean;
    function  GetIdCompraValePedagio(Index: Integer): Integer;
    procedure SetIdCompraValePedagio(Index: Integer; const AInteger: Integer);
    function  IdCompraValePedagio_Specified(Index: Integer): boolean;
    function  GetValor(Index: Integer): TXSDecimal;
    procedure SetValor(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  Valor_Specified(Index: Integer): boolean;
    function  GetIdStatusCompraValePedagioPosCancelamento(Index: Integer): Integer;
    procedure SetIdStatusCompraValePedagioPosCancelamento(Index: Integer; const AInteger: Integer);
    function  IdStatusCompraValePedagioPosCancelamento_Specified(Index: Integer): boolean;
  published
    property IdCompraValePedagio:                      Integer     Index (IS_OPTN) read GetIdCompraValePedagio write SetIdCompraValePedagio stored IdCompraValePedagio_Specified;
    property Valor:                                    TXSDecimal  Index (IS_OPTN) read GetValor write SetValor stored Valor_Specified;
    property IdStatusCompraValePedagioPosCancelamento: Integer     Index (IS_OPTN or IS_NLBL) read GetIdStatusCompraValePedagioPosCancelamento write SetIdStatusCompraValePedagioPosCancelamento stored IdStatusCompraValePedagioPosCancelamento_Specified;
  end;



  // ************************************************************************ //
  // XML       : DadosCompraValePedagioPosCancelamento, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  DadosCompraValePedagioPosCancelamento = class(DadosCompraValePedagioPosCancelamento2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ListarRotaClienteRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ListarRotaClienteRequest2 = class(TRemotable)
  private
    FCodigoIBGEOrigem: Integer;
    FCodigoIBGEOrigem_Specified: boolean;
    FCodigoIBGEDestino: Integer;
    FCodigoIBGEDestino_Specified: boolean;
    FNumeroPagina: Integer;
    FNumeroPagina_Specified: boolean;
    FQuantidadeItensPorPagina: Integer;
    FQuantidadeItensPorPagina_Specified: boolean;
    function  GetCodigoIBGEOrigem(Index: Integer): Integer;
    procedure SetCodigoIBGEOrigem(Index: Integer; const AInteger: Integer);
    function  CodigoIBGEOrigem_Specified(Index: Integer): boolean;
    function  GetCodigoIBGEDestino(Index: Integer): Integer;
    procedure SetCodigoIBGEDestino(Index: Integer; const AInteger: Integer);
    function  CodigoIBGEDestino_Specified(Index: Integer): boolean;
    function  GetNumeroPagina(Index: Integer): Integer;
    procedure SetNumeroPagina(Index: Integer; const AInteger: Integer);
    function  NumeroPagina_Specified(Index: Integer): boolean;
    function  GetQuantidadeItensPorPagina(Index: Integer): Integer;
    procedure SetQuantidadeItensPorPagina(Index: Integer; const AInteger: Integer);
    function  QuantidadeItensPorPagina_Specified(Index: Integer): boolean;
  published
    property CodigoIBGEOrigem:         Integer  Index (IS_OPTN or IS_NLBL) read GetCodigoIBGEOrigem write SetCodigoIBGEOrigem stored CodigoIBGEOrigem_Specified;
    property CodigoIBGEDestino:        Integer  Index (IS_OPTN or IS_NLBL) read GetCodigoIBGEDestino write SetCodigoIBGEDestino stored CodigoIBGEDestino_Specified;
    property NumeroPagina:             Integer  Index (IS_OPTN or IS_NLBL) read GetNumeroPagina write SetNumeroPagina stored NumeroPagina_Specified;
    property QuantidadeItensPorPagina: Integer  Index (IS_OPTN or IS_NLBL) read GetQuantidadeItensPorPagina write SetQuantidadeItensPorPagina stored QuantidadeItensPorPagina_Specified;
  end;



  // ************************************************************************ //
  // XML       : ListarRotaClienteRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ListarRotaClienteRequest = class(ListarRotaClienteRequest2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ResultadoPaginadoListarRotasClienteResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ResultadoPaginadoListarRotasClienteResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FItens: ArrayOfListarRotasClienteResponse;
    FItens_Specified: boolean;
    FNumeroPagina: Integer;
    FNumeroPagina_Specified: boolean;
    FQuantidadeItensPorPagina: Integer;
    FQuantidadeItensPorPagina_Specified: boolean;
    FQuantidadeTotalItens: Integer;
    FQuantidadeTotalItens_Specified: boolean;
    FQuantidadeTotalPaginas: Integer;
    FQuantidadeTotalPaginas_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetItens(Index: Integer): ArrayOfListarRotasClienteResponse;
    procedure SetItens(Index: Integer; const AArrayOfListarRotasClienteResponse: ArrayOfListarRotasClienteResponse);
    function  Itens_Specified(Index: Integer): boolean;
    function  GetNumeroPagina(Index: Integer): Integer;
    procedure SetNumeroPagina(Index: Integer; const AInteger: Integer);
    function  NumeroPagina_Specified(Index: Integer): boolean;
    function  GetQuantidadeItensPorPagina(Index: Integer): Integer;
    procedure SetQuantidadeItensPorPagina(Index: Integer; const AInteger: Integer);
    function  QuantidadeItensPorPagina_Specified(Index: Integer): boolean;
    function  GetQuantidadeTotalItens(Index: Integer): Integer;
    procedure SetQuantidadeTotalItens(Index: Integer; const AInteger: Integer);
    function  QuantidadeTotalItens_Specified(Index: Integer): boolean;
    function  GetQuantidadeTotalPaginas(Index: Integer): Integer;
    procedure SetQuantidadeTotalPaginas(Index: Integer; const AInteger: Integer);
    function  QuantidadeTotalPaginas_Specified(Index: Integer): boolean;
  published
    property Erro:                     ErroResponse2                      Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property Itens:                    ArrayOfListarRotasClienteResponse  Index (IS_OPTN or IS_NLBL) read GetItens write SetItens stored Itens_Specified;
    property NumeroPagina:             Integer                            Index (IS_OPTN) read GetNumeroPagina write SetNumeroPagina stored NumeroPagina_Specified;
    property QuantidadeItensPorPagina: Integer                            Index (IS_OPTN) read GetQuantidadeItensPorPagina write SetQuantidadeItensPorPagina stored QuantidadeItensPorPagina_Specified;
    property QuantidadeTotalItens:     Integer                            Index (IS_OPTN) read GetQuantidadeTotalItens write SetQuantidadeTotalItens stored QuantidadeTotalItens_Specified;
    property QuantidadeTotalPaginas:   Integer                            Index (IS_OPTN) read GetQuantidadeTotalPaginas write SetQuantidadeTotalPaginas stored QuantidadeTotalPaginas_Specified;
  end;



  // ************************************************************************ //
  // XML       : ResultadoPaginadoListarRotasClienteResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ResultadoPaginadoListarRotasClienteResponse = class(ResultadoPaginadoListarRotasClienteResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ConfirmacaoPedagioRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ConfirmacaoPedagioRequest2 = class(TRemotable)
  private
    FIdCompraValePedagioViaFacil: Integer;
    FIdCompraValePedagioViaFacil_Specified: boolean;
    function  GetIdCompraValePedagioViaFacil(Index: Integer): Integer;
    procedure SetIdCompraValePedagioViaFacil(Index: Integer; const AInteger: Integer);
    function  IdCompraValePedagioViaFacil_Specified(Index: Integer): boolean;
  published
    property IdCompraValePedagioViaFacil: Integer  Index (IS_OPTN) read GetIdCompraValePedagioViaFacil write SetIdCompraValePedagioViaFacil stored IdCompraValePedagioViaFacil_Specified;
  end;



  // ************************************************************************ //
  // XML       : ConfirmacaoPedagioRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ConfirmacaoPedagioRequest = class(ConfirmacaoPedagioRequest2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : FinalizacaoOperacaoTransporteRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  FinalizacaoOperacaoTransporteRequest2 = class(TRemotable)
  private
    FIdOperacaoTransporte: Integer;
    FIdOperacaoTransporte_Specified: boolean;
    function  GetIdOperacaoTransporte(Index: Integer): Integer;
    procedure SetIdOperacaoTransporte(Index: Integer; const AInteger: Integer);
    function  IdOperacaoTransporte_Specified(Index: Integer): boolean;
  published
    property IdOperacaoTransporte: Integer  Index (IS_OPTN) read GetIdOperacaoTransporte write SetIdOperacaoTransporte stored IdOperacaoTransporte_Specified;
  end;



  // ************************************************************************ //
  // XML       : FinalizacaoOperacaoTransporteRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  FinalizacaoOperacaoTransporteRequest = class(FinalizacaoOperacaoTransporteRequest2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : RetificacaoOperacaoTransporteResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  RetificacaoOperacaoTransporteResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FIdOperacaoTransporte: Integer;
    FIdOperacaoTransporte_Specified: boolean;
    FIdRetificacaoOperacaoTransporte: Integer;
    FIdRetificacaoOperacaoTransporte_Specified: boolean;
    FDataHoraRetificacao: TXSDateTime;
    FDataHoraRetificacao_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetIdOperacaoTransporte(Index: Integer): Integer;
    procedure SetIdOperacaoTransporte(Index: Integer; const AInteger: Integer);
    function  IdOperacaoTransporte_Specified(Index: Integer): boolean;
    function  GetIdRetificacaoOperacaoTransporte(Index: Integer): Integer;
    procedure SetIdRetificacaoOperacaoTransporte(Index: Integer; const AInteger: Integer);
    function  IdRetificacaoOperacaoTransporte_Specified(Index: Integer): boolean;
    function  GetDataHoraRetificacao(Index: Integer): TXSDateTime;
    procedure SetDataHoraRetificacao(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DataHoraRetificacao_Specified(Index: Integer): boolean;
  published
    property Erro:                            ErroResponse2  Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property IdOperacaoTransporte:            Integer        Index (IS_OPTN) read GetIdOperacaoTransporte write SetIdOperacaoTransporte stored IdOperacaoTransporte_Specified;
    property IdRetificacaoOperacaoTransporte: Integer        Index (IS_OPTN) read GetIdRetificacaoOperacaoTransporte write SetIdRetificacaoOperacaoTransporte stored IdRetificacaoOperacaoTransporte_Specified;
    property DataHoraRetificacao:             TXSDateTime    Index (IS_OPTN) read GetDataHoraRetificacao write SetDataHoraRetificacao stored DataHoraRetificacao_Specified;
  end;



  // ************************************************************************ //
  // XML       : RetificacaoOperacaoTransporteResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  RetificacaoOperacaoTransporteResponse = class(RetificacaoOperacaoTransporteResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : CadastroAtualizacaoDadosQuitacaoRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  CadastroAtualizacaoDadosQuitacaoRequest2 = class(TRemotable)
  private
    FIdOperacaoTransporte: Integer;
    FIdOperacaoTransporte_Specified: boolean;
    FDadosQuitacao: DadosQuitacaoFreteRequest2;
    FDadosQuitacao_Specified: boolean;
    function  GetIdOperacaoTransporte(Index: Integer): Integer;
    procedure SetIdOperacaoTransporte(Index: Integer; const AInteger: Integer);
    function  IdOperacaoTransporte_Specified(Index: Integer): boolean;
    function  GetDadosQuitacao(Index: Integer): DadosQuitacaoFreteRequest2;
    procedure SetDadosQuitacao(Index: Integer; const ADadosQuitacaoFreteRequest2: DadosQuitacaoFreteRequest2);
    function  DadosQuitacao_Specified(Index: Integer): boolean;
  published
    property IdOperacaoTransporte: Integer                     Index (IS_OPTN) read GetIdOperacaoTransporte write SetIdOperacaoTransporte stored IdOperacaoTransporte_Specified;
    property DadosQuitacao:        DadosQuitacaoFreteRequest2  Index (IS_OPTN or IS_NLBL) read GetDadosQuitacao write SetDadosQuitacao stored DadosQuitacao_Specified;
  end;



  // ************************************************************************ //
  // XML       : CadastroAtualizacaoDadosQuitacaoRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  CadastroAtualizacaoDadosQuitacaoRequest = class(CadastroAtualizacaoDadosQuitacaoRequest2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ObterDetalhesQuitacaoRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ObterDetalhesQuitacaoRequest2 = class(TRemotable)
  private
    FIdOperacao: Integer;
    FIdOperacao_Specified: boolean;
    function  GetIdOperacao(Index: Integer): Integer;
    procedure SetIdOperacao(Index: Integer; const AInteger: Integer);
    function  IdOperacao_Specified(Index: Integer): boolean;
  published
    property IdOperacao: Integer  Index (IS_OPTN) read GetIdOperacao write SetIdOperacao stored IdOperacao_Specified;
  end;



  // ************************************************************************ //
  // XML       : ObterDetalhesQuitacaoRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ObterDetalhesQuitacaoRequest = class(ObterDetalhesQuitacaoRequest2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ResultadoPaginadoOperacaoTransporteResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ResultadoPaginadoOperacaoTransporteResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FItens: ArrayOfOperacaoTransporteResponse;
    FItens_Specified: boolean;
    FNumeroPagina: Integer;
    FNumeroPagina_Specified: boolean;
    FQuantidadeItensPorPagina: Integer;
    FQuantidadeItensPorPagina_Specified: boolean;
    FQuantidadeTotalItens: Integer;
    FQuantidadeTotalItens_Specified: boolean;
    FQuantidadeTotalPaginas: Integer;
    FQuantidadeTotalPaginas_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetItens(Index: Integer): ArrayOfOperacaoTransporteResponse;
    procedure SetItens(Index: Integer; const AArrayOfOperacaoTransporteResponse: ArrayOfOperacaoTransporteResponse);
    function  Itens_Specified(Index: Integer): boolean;
    function  GetNumeroPagina(Index: Integer): Integer;
    procedure SetNumeroPagina(Index: Integer; const AInteger: Integer);
    function  NumeroPagina_Specified(Index: Integer): boolean;
    function  GetQuantidadeItensPorPagina(Index: Integer): Integer;
    procedure SetQuantidadeItensPorPagina(Index: Integer; const AInteger: Integer);
    function  QuantidadeItensPorPagina_Specified(Index: Integer): boolean;
    function  GetQuantidadeTotalItens(Index: Integer): Integer;
    procedure SetQuantidadeTotalItens(Index: Integer; const AInteger: Integer);
    function  QuantidadeTotalItens_Specified(Index: Integer): boolean;
    function  GetQuantidadeTotalPaginas(Index: Integer): Integer;
    procedure SetQuantidadeTotalPaginas(Index: Integer; const AInteger: Integer);
    function  QuantidadeTotalPaginas_Specified(Index: Integer): boolean;
  published
    property Erro:                     ErroResponse2                      Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property Itens:                    ArrayOfOperacaoTransporteResponse  Index (IS_OPTN or IS_NLBL) read GetItens write SetItens stored Itens_Specified;
    property NumeroPagina:             Integer                            Index (IS_OPTN) read GetNumeroPagina write SetNumeroPagina stored NumeroPagina_Specified;
    property QuantidadeItensPorPagina: Integer                            Index (IS_OPTN) read GetQuantidadeItensPorPagina write SetQuantidadeItensPorPagina stored QuantidadeItensPorPagina_Specified;
    property QuantidadeTotalItens:     Integer                            Index (IS_OPTN) read GetQuantidadeTotalItens write SetQuantidadeTotalItens stored QuantidadeTotalItens_Specified;
    property QuantidadeTotalPaginas:   Integer                            Index (IS_OPTN) read GetQuantidadeTotalPaginas write SetQuantidadeTotalPaginas stored QuantidadeTotalPaginas_Specified;
  end;



  // ************************************************************************ //
  // XML       : DeclaracaoOperacaoTransporteRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  DeclaracaoOperacaoTransporteRequest2 = class(TRemotable)
  private
    FIdOperacaoTransporte: Integer;
    FIdOperacaoTransporte_Specified: boolean;
    function  GetIdOperacaoTransporte(Index: Integer): Integer;
    procedure SetIdOperacaoTransporte(Index: Integer; const AInteger: Integer);
    function  IdOperacaoTransporte_Specified(Index: Integer): boolean;
  published
    property IdOperacaoTransporte: Integer  Index (IS_OPTN) read GetIdOperacaoTransporte write SetIdOperacaoTransporte stored IdOperacaoTransporte_Specified;
  end;



  // ************************************************************************ //
  // XML       : DeclaracaoOperacaoTransporteRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  DeclaracaoOperacaoTransporteRequest = class(DeclaracaoOperacaoTransporteRequest2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : PagamentoParcelaRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  PagamentoParcelaRequest2 = class(TRemotable)
  private
    FidOperacaoTransporteParcela: Integer;
    FidOperacaoTransporteParcela_Specified: boolean;
    function  GetidOperacaoTransporteParcela(Index: Integer): Integer;
    procedure SetidOperacaoTransporteParcela(Index: Integer; const AInteger: Integer);
    function  idOperacaoTransporteParcela_Specified(Index: Integer): boolean;
  published
    property idOperacaoTransporteParcela: Integer  Index (IS_OPTN) read GetidOperacaoTransporteParcela write SetidOperacaoTransporteParcela stored idOperacaoTransporteParcela_Specified;
  end;



  // ************************************************************************ //
  // XML       : PagamentoParcelaRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  PagamentoParcelaRequest = class(PagamentoParcelaRequest2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AutenticacaoRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  AutenticacaoRequest2 = class(TRemotable)
  private
    FUsuario: string;
    FUsuario_Specified: boolean;
    FSenha: string;
    FSenha_Specified: boolean;
    FToken: string;
    FToken_Specified: boolean;
    function  GetUsuario(Index: Integer): string;
    procedure SetUsuario(Index: Integer; const Astring: string);
    function  Usuario_Specified(Index: Integer): boolean;
    function  GetSenha(Index: Integer): string;
    procedure SetSenha(Index: Integer; const Astring: string);
    function  Senha_Specified(Index: Integer): boolean;
    function  GetToken(Index: Integer): string;
    procedure SetToken(Index: Integer; const Astring: string);
    function  Token_Specified(Index: Integer): boolean;
  published
    property Usuario: string  Index (IS_OPTN or IS_NLBL) read GetUsuario write SetUsuario stored Usuario_Specified;
    property Senha:   string  Index (IS_OPTN or IS_NLBL) read GetSenha write SetSenha stored Senha_Specified;
    property Token:   string  Index (IS_OPTN or IS_NLBL) read GetToken write SetToken stored Token_Specified;
  end;



  // ************************************************************************ //
  // XML       : ErroResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ErroResponse2 = class(TRemotable)
  private
    FCodigoErro: Integer;
    FCodigoErro_Specified: boolean;
    FMensagemErro: string;
    FMensagemErro_Specified: boolean;
    FCodigoErroEspecifico: string;
    FCodigoErroEspecifico_Specified: boolean;
    FBusinessRequestId: string;
    FBusinessRequestId_Specified: boolean;
    function  GetCodigoErro(Index: Integer): Integer;
    procedure SetCodigoErro(Index: Integer; const AInteger: Integer);
    function  CodigoErro_Specified(Index: Integer): boolean;
    function  GetMensagemErro(Index: Integer): string;
    procedure SetMensagemErro(Index: Integer; const Astring: string);
    function  MensagemErro_Specified(Index: Integer): boolean;
    function  GetCodigoErroEspecifico(Index: Integer): string;
    procedure SetCodigoErroEspecifico(Index: Integer; const Astring: string);
    function  CodigoErroEspecifico_Specified(Index: Integer): boolean;
    function  GetBusinessRequestId(Index: Integer): string;
    procedure SetBusinessRequestId(Index: Integer; const Astring: string);
    function  BusinessRequestId_Specified(Index: Integer): boolean;
  published
    property CodigoErro:           Integer  Index (IS_OPTN) read GetCodigoErro write SetCodigoErro stored CodigoErro_Specified;
    property MensagemErro:         string   Index (IS_OPTN or IS_NLBL) read GetMensagemErro write SetMensagemErro stored MensagemErro_Specified;
    property CodigoErroEspecifico: string   Index (IS_OPTN or IS_NLBL) read GetCodigoErroEspecifico write SetCodigoErroEspecifico stored CodigoErroEspecifico_Specified;
    property BusinessRequestId:    string   Index (IS_OPTN or IS_NLBL) read GetBusinessRequestId write SetBusinessRequestId stored BusinessRequestId_Specified;
  end;



  // ************************************************************************ //
  // XML       : TransportadorResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  TransportadorResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FCPFCNPJ: string;
    FCPFCNPJ_Specified: boolean;
    FDataAtualizacao: TXSDateTime;
    FDataAtualizacao_Specified: boolean;
    FDataRegistro: TXSDateTime;
    FDataRegistro_Specified: boolean;
    FIdCliente: Integer;
    FIdCliente_Specified: boolean;
    FIdDmTipoPessoa: Integer;
    FIdDmTipoPessoa_Specified: boolean;
    FIdDmTipoTransportador: Integer;
    FIdDmTipoTransportador_Specified: boolean;
    FNomeRazaoSocial: string;
    FNomeRazaoSocial_Specified: boolean;
    FRNTRC: string;
    FRNTRC_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetCPFCNPJ(Index: Integer): string;
    procedure SetCPFCNPJ(Index: Integer; const Astring: string);
    function  CPFCNPJ_Specified(Index: Integer): boolean;
    function  GetDataAtualizacao(Index: Integer): TXSDateTime;
    procedure SetDataAtualizacao(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DataAtualizacao_Specified(Index: Integer): boolean;
    function  GetDataRegistro(Index: Integer): TXSDateTime;
    procedure SetDataRegistro(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DataRegistro_Specified(Index: Integer): boolean;
    function  GetIdCliente(Index: Integer): Integer;
    procedure SetIdCliente(Index: Integer; const AInteger: Integer);
    function  IdCliente_Specified(Index: Integer): boolean;
    function  GetIdDmTipoPessoa(Index: Integer): Integer;
    procedure SetIdDmTipoPessoa(Index: Integer; const AInteger: Integer);
    function  IdDmTipoPessoa_Specified(Index: Integer): boolean;
    function  GetIdDmTipoTransportador(Index: Integer): Integer;
    procedure SetIdDmTipoTransportador(Index: Integer; const AInteger: Integer);
    function  IdDmTipoTransportador_Specified(Index: Integer): boolean;
    function  GetNomeRazaoSocial(Index: Integer): string;
    procedure SetNomeRazaoSocial(Index: Integer; const Astring: string);
    function  NomeRazaoSocial_Specified(Index: Integer): boolean;
    function  GetRNTRC(Index: Integer): string;
    procedure SetRNTRC(Index: Integer; const Astring: string);
    function  RNTRC_Specified(Index: Integer): boolean;
  published
    property Erro:                  ErroResponse2  Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property CPFCNPJ:               string         Index (IS_OPTN or IS_NLBL) read GetCPFCNPJ write SetCPFCNPJ stored CPFCNPJ_Specified;
    property DataAtualizacao:       TXSDateTime    Index (IS_OPTN or IS_NLBL) read GetDataAtualizacao write SetDataAtualizacao stored DataAtualizacao_Specified;
    property DataRegistro:          TXSDateTime    Index (IS_OPTN) read GetDataRegistro write SetDataRegistro stored DataRegistro_Specified;
    property IdCliente:             Integer        Index (IS_OPTN) read GetIdCliente write SetIdCliente stored IdCliente_Specified;
    property IdDmTipoPessoa:        Integer        Index (IS_OPTN) read GetIdDmTipoPessoa write SetIdDmTipoPessoa stored IdDmTipoPessoa_Specified;
    property IdDmTipoTransportador: Integer        Index (IS_OPTN) read GetIdDmTipoTransportador write SetIdDmTipoTransportador stored IdDmTipoTransportador_Specified;
    property NomeRazaoSocial:       string         Index (IS_OPTN or IS_NLBL) read GetNomeRazaoSocial write SetNomeRazaoSocial stored NomeRazaoSocial_Specified;
    property RNTRC:                 string         Index (IS_OPTN or IS_NLBL) read GetRNTRC write SetRNTRC stored RNTRC_Specified;
  end;



  // ************************************************************************ //
  // XML       : BuscaTransportadorRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  BuscaTransportadorRequest2 = class(TRemotable)
  private
    FQuantidadeItensPorPagina: Integer;
    FQuantidadeItensPorPagina_Specified: boolean;
    FNumeroPagina: Integer;
    FNumeroPagina_Specified: boolean;
    FCPFCNPJ: string;
    FCPFCNPJ_Specified: boolean;
    function  GetQuantidadeItensPorPagina(Index: Integer): Integer;
    procedure SetQuantidadeItensPorPagina(Index: Integer; const AInteger: Integer);
    function  QuantidadeItensPorPagina_Specified(Index: Integer): boolean;
    function  GetNumeroPagina(Index: Integer): Integer;
    procedure SetNumeroPagina(Index: Integer; const AInteger: Integer);
    function  NumeroPagina_Specified(Index: Integer): boolean;
    function  GetCPFCNPJ(Index: Integer): string;
    procedure SetCPFCNPJ(Index: Integer; const Astring: string);
    function  CPFCNPJ_Specified(Index: Integer): boolean;
  published
    property QuantidadeItensPorPagina: Integer  Index (IS_OPTN) read GetQuantidadeItensPorPagina write SetQuantidadeItensPorPagina stored QuantidadeItensPorPagina_Specified;
    property NumeroPagina:             Integer  Index (IS_OPTN) read GetNumeroPagina write SetNumeroPagina stored NumeroPagina_Specified;
    property CPFCNPJ:                  string   Index (IS_OPTN or IS_NLBL) read GetCPFCNPJ write SetCPFCNPJ stored CPFCNPJ_Specified;
  end;



  // ************************************************************************ //
  // XML       : OperacaoTransporteViagemRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  OperacaoTransporteViagemRequest2 = class(TRemotable)
  private
    FMunicipioOrigemCodigoIBGE: Integer;
    FMunicipioOrigemCodigoIBGE_Specified: boolean;
    FMunicipioDestinoCodigoIBGE: Integer;
    FMunicipioDestinoCodigoIBGE_Specified: boolean;
    FNCM: string;
    FNCM_Specified: boolean;
    FPesoCarga: TXSDecimal;
    FPesoCarga_Specified: boolean;
    FQuantidadeViagens: Integer;
    FQuantidadeViagens_Specified: boolean;
    function  GetMunicipioOrigemCodigoIBGE(Index: Integer): Integer;
    procedure SetMunicipioOrigemCodigoIBGE(Index: Integer; const AInteger: Integer);
    function  MunicipioOrigemCodigoIBGE_Specified(Index: Integer): boolean;
    function  GetMunicipioDestinoCodigoIBGE(Index: Integer): Integer;
    procedure SetMunicipioDestinoCodigoIBGE(Index: Integer; const AInteger: Integer);
    function  MunicipioDestinoCodigoIBGE_Specified(Index: Integer): boolean;
    function  GetNCM(Index: Integer): string;
    procedure SetNCM(Index: Integer; const Astring: string);
    function  NCM_Specified(Index: Integer): boolean;
    function  GetPesoCarga(Index: Integer): TXSDecimal;
    procedure SetPesoCarga(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  PesoCarga_Specified(Index: Integer): boolean;
    function  GetQuantidadeViagens(Index: Integer): Integer;
    procedure SetQuantidadeViagens(Index: Integer; const AInteger: Integer);
    function  QuantidadeViagens_Specified(Index: Integer): boolean;
  published
    property MunicipioOrigemCodigoIBGE:  Integer     Index (IS_OPTN) read GetMunicipioOrigemCodigoIBGE write SetMunicipioOrigemCodigoIBGE stored MunicipioOrigemCodigoIBGE_Specified;
    property MunicipioDestinoCodigoIBGE: Integer     Index (IS_OPTN) read GetMunicipioDestinoCodigoIBGE write SetMunicipioDestinoCodigoIBGE stored MunicipioDestinoCodigoIBGE_Specified;
    property NCM:                        string      Index (IS_OPTN or IS_NLBL) read GetNCM write SetNCM stored NCM_Specified;
    property PesoCarga:                  TXSDecimal  Index (IS_OPTN) read GetPesoCarga write SetPesoCarga stored PesoCarga_Specified;
    property QuantidadeViagens:          Integer     Index (IS_OPTN) read GetQuantidadeViagens write SetQuantidadeViagens stored QuantidadeViagens_Specified;
  end;



  // ************************************************************************ //
  // XML       : OperacaoTransporteViagemRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  OperacaoTransporteViagemRequest = class(OperacaoTransporteViagemRequest2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : EncerramentoOperacaoTransporteResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  EncerramentoOperacaoTransporteResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FIdEncerramentoOperacaoTransporte: Integer;
    FIdEncerramentoOperacaoTransporte_Specified: boolean;
    FDataEncerramento: TXSDateTime;
    FDataEncerramento_Specified: boolean;
    FProtocoloEncerramento: string;
    FProtocoloEncerramento_Specified: boolean;
    FTipoOperacao: string;
    FTipoOperacao_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetIdEncerramentoOperacaoTransporte(Index: Integer): Integer;
    procedure SetIdEncerramentoOperacaoTransporte(Index: Integer; const AInteger: Integer);
    function  IdEncerramentoOperacaoTransporte_Specified(Index: Integer): boolean;
    function  GetDataEncerramento(Index: Integer): TXSDateTime;
    procedure SetDataEncerramento(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DataEncerramento_Specified(Index: Integer): boolean;
    function  GetProtocoloEncerramento(Index: Integer): string;
    procedure SetProtocoloEncerramento(Index: Integer; const Astring: string);
    function  ProtocoloEncerramento_Specified(Index: Integer): boolean;
    function  GetTipoOperacao(Index: Integer): string;
    procedure SetTipoOperacao(Index: Integer; const Astring: string);
    function  TipoOperacao_Specified(Index: Integer): boolean;
  published
    property Erro:                             ErroResponse2  Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property IdEncerramentoOperacaoTransporte: Integer        Index (IS_OPTN) read GetIdEncerramentoOperacaoTransporte write SetIdEncerramentoOperacaoTransporte stored IdEncerramentoOperacaoTransporte_Specified;
    property DataEncerramento:                 TXSDateTime    Index (IS_OPTN) read GetDataEncerramento write SetDataEncerramento stored DataEncerramento_Specified;
    property ProtocoloEncerramento:            string         Index (IS_OPTN or IS_NLBL) read GetProtocoloEncerramento write SetProtocoloEncerramento stored ProtocoloEncerramento_Specified;
    property TipoOperacao:                     string         Index (IS_OPTN or IS_NLBL) read GetTipoOperacao write SetTipoOperacao stored TipoOperacao_Specified;
  end;



  // ************************************************************************ //
  // XML       : EncerramentoOperacaoTransporteResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  EncerramentoOperacaoTransporteResponse = class(EncerramentoOperacaoTransporteResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : BuscaCartoesRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  BuscaCartoesRequest2 = class(TRemotable)
  private
    FCPFCNPJ: string;
    FCPFCNPJ_Specified: boolean;
    function  GetCPFCNPJ(Index: Integer): string;
    procedure SetCPFCNPJ(Index: Integer; const Astring: string);
    function  CPFCNPJ_Specified(Index: Integer): boolean;
  published
    property CPFCNPJ: string  Index (IS_OPTN or IS_NLBL) read GetCPFCNPJ write SetCPFCNPJ stored CPFCNPJ_Specified;
  end;



  // ************************************************************************ //
  // XML       : BuscaCartoesRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  BuscaCartoesRequest = class(BuscaCartoesRequest2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : EncerramentoOperacaoTransporteRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  EncerramentoOperacaoTransporteRequest2 = class(TRemotable)
  private
    FCodigoOperacao: Integer;
    FCodigoOperacao_Specified: boolean;
    FObservacaoAvariaContratante: string;
    FObservacaoAvariaContratante_Specified: boolean;
    FViagens: ArrayOfOperacaoTransporteViagemRequest;
    FViagens_Specified: boolean;
    FRetificacao: RetificacaoEncerramentoOperacaoTransporteRequest2;
    FRetificacao_Specified: boolean;
    function  GetCodigoOperacao(Index: Integer): Integer;
    procedure SetCodigoOperacao(Index: Integer; const AInteger: Integer);
    function  CodigoOperacao_Specified(Index: Integer): boolean;
    function  GetObservacaoAvariaContratante(Index: Integer): string;
    procedure SetObservacaoAvariaContratante(Index: Integer; const Astring: string);
    function  ObservacaoAvariaContratante_Specified(Index: Integer): boolean;
    function  GetViagens(Index: Integer): ArrayOfOperacaoTransporteViagemRequest;
    procedure SetViagens(Index: Integer; const AArrayOfOperacaoTransporteViagemRequest: ArrayOfOperacaoTransporteViagemRequest);
    function  Viagens_Specified(Index: Integer): boolean;
    function  GetRetificacao(Index: Integer): RetificacaoEncerramentoOperacaoTransporteRequest2;
    procedure SetRetificacao(Index: Integer; const ARetificacaoEncerramentoOperacaoTransporteRequest2: RetificacaoEncerramentoOperacaoTransporteRequest2);
    function  Retificacao_Specified(Index: Integer): boolean;
  published
    property CodigoOperacao:              Integer                                            Index (IS_OPTN) read GetCodigoOperacao write SetCodigoOperacao stored CodigoOperacao_Specified;
    property ObservacaoAvariaContratante: string                                             Index (IS_OPTN or IS_NLBL) read GetObservacaoAvariaContratante write SetObservacaoAvariaContratante stored ObservacaoAvariaContratante_Specified;
    property Viagens:                     ArrayOfOperacaoTransporteViagemRequest             Index (IS_OPTN or IS_NLBL) read GetViagens write SetViagens stored Viagens_Specified;
    property Retificacao:                 RetificacaoEncerramentoOperacaoTransporteRequest2  Index (IS_OPTN or IS_NLBL) read GetRetificacao write SetRetificacao stored Retificacao_Specified;
  end;



  // ************************************************************************ //
  // XML       : EncerramentoOperacaoTransporteRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  EncerramentoOperacaoTransporteRequest = class(EncerramentoOperacaoTransporteRequest2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : CancelamentoOperacaoResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  CancelamentoOperacaoResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FIdCancelamentoOperacaoTransporte: Integer;
    FIdCancelamentoOperacaoTransporte_Specified: boolean;
    FDataCancelamento: TXSDateTime;
    FDataCancelamento_Specified: boolean;
    FProtocoloCancelamento: string;
    FProtocoloCancelamento_Specified: boolean;
    FDadosCompraValePedagioRelacionadas: ArrayOfDadosCompraValePedagioPosCancelamento;
    FDadosCompraValePedagioRelacionadas_Specified: boolean;
    FDadosCompraValePedagioViaFacilRelacionadas: ArrayOfDadosCompraValePedagioViaFacilPosCancelamento;
    FDadosCompraValePedagioViaFacilRelacionadas_Specified: boolean;
    FMensagemCancelamentoViaFacil: string;
    FMensagemCancelamentoViaFacil_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetIdCancelamentoOperacaoTransporte(Index: Integer): Integer;
    procedure SetIdCancelamentoOperacaoTransporte(Index: Integer; const AInteger: Integer);
    function  IdCancelamentoOperacaoTransporte_Specified(Index: Integer): boolean;
    function  GetDataCancelamento(Index: Integer): TXSDateTime;
    procedure SetDataCancelamento(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DataCancelamento_Specified(Index: Integer): boolean;
    function  GetProtocoloCancelamento(Index: Integer): string;
    procedure SetProtocoloCancelamento(Index: Integer; const Astring: string);
    function  ProtocoloCancelamento_Specified(Index: Integer): boolean;
    function  GetDadosCompraValePedagioRelacionadas(Index: Integer): ArrayOfDadosCompraValePedagioPosCancelamento;
    procedure SetDadosCompraValePedagioRelacionadas(Index: Integer; const AArrayOfDadosCompraValePedagioPosCancelamento: ArrayOfDadosCompraValePedagioPosCancelamento);
    function  DadosCompraValePedagioRelacionadas_Specified(Index: Integer): boolean;
    function  GetDadosCompraValePedagioViaFacilRelacionadas(Index: Integer): ArrayOfDadosCompraValePedagioViaFacilPosCancelamento;
    procedure SetDadosCompraValePedagioViaFacilRelacionadas(Index: Integer; const AArrayOfDadosCompraValePedagioViaFacilPosCancelamento: ArrayOfDadosCompraValePedagioViaFacilPosCancelamento);
    function  DadosCompraValePedagioViaFacilRelacionadas_Specified(Index: Integer): boolean;
    function  GetMensagemCancelamentoViaFacil(Index: Integer): string;
    procedure SetMensagemCancelamentoViaFacil(Index: Integer; const Astring: string);
    function  MensagemCancelamentoViaFacil_Specified(Index: Integer): boolean;
  published
    property Erro:                                       ErroResponse2                                         Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property IdCancelamentoOperacaoTransporte:           Integer                                               Index (IS_OPTN) read GetIdCancelamentoOperacaoTransporte write SetIdCancelamentoOperacaoTransporte stored IdCancelamentoOperacaoTransporte_Specified;
    property DataCancelamento:                           TXSDateTime                                           Index (IS_OPTN) read GetDataCancelamento write SetDataCancelamento stored DataCancelamento_Specified;
    property ProtocoloCancelamento:                      string                                                Index (IS_OPTN or IS_NLBL) read GetProtocoloCancelamento write SetProtocoloCancelamento stored ProtocoloCancelamento_Specified;
    property DadosCompraValePedagioRelacionadas:         ArrayOfDadosCompraValePedagioPosCancelamento          Index (IS_OPTN or IS_NLBL) read GetDadosCompraValePedagioRelacionadas write SetDadosCompraValePedagioRelacionadas stored DadosCompraValePedagioRelacionadas_Specified;
    property DadosCompraValePedagioViaFacilRelacionadas: ArrayOfDadosCompraValePedagioViaFacilPosCancelamento  Index (IS_OPTN or IS_NLBL) read GetDadosCompraValePedagioViaFacilRelacionadas write SetDadosCompraValePedagioViaFacilRelacionadas stored DadosCompraValePedagioViaFacilRelacionadas_Specified;
    property MensagemCancelamentoViaFacil:               string                                                Index (IS_OPTN or IS_NLBL) read GetMensagemCancelamentoViaFacil write SetMensagemCancelamentoViaFacil stored MensagemCancelamentoViaFacil_Specified;
  end;



  // ************************************************************************ //
  // XML       : CancelamentoOperacaoResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  CancelamentoOperacaoResponse = class(CancelamentoOperacaoResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : CancelamentoOperacaoRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  CancelamentoOperacaoRequest2 = class(TRemotable)
  private
    FIdOperacao: Integer;
    FIdOperacao_Specified: boolean;
    FMotivoCancelamento: string;
    FMotivoCancelamento_Specified: boolean;
    function  GetIdOperacao(Index: Integer): Integer;
    procedure SetIdOperacao(Index: Integer; const AInteger: Integer);
    function  IdOperacao_Specified(Index: Integer): boolean;
    function  GetMotivoCancelamento(Index: Integer): string;
    procedure SetMotivoCancelamento(Index: Integer; const Astring: string);
    function  MotivoCancelamento_Specified(Index: Integer): boolean;
  published
    property IdOperacao:         Integer  Index (IS_OPTN) read GetIdOperacao write SetIdOperacao stored IdOperacao_Specified;
    property MotivoCancelamento: string   Index (IS_OPTN or IS_NLBL) read GetMotivoCancelamento write SetMotivoCancelamento stored MotivoCancelamento_Specified;
  end;



  // ************************************************************************ //
  // XML       : CancelamentoOperacaoRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  CancelamentoOperacaoRequest = class(CancelamentoOperacaoRequest2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AssociacaoSubstituicaoCartaoResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  AssociacaoSubstituicaoCartaoResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FMensagem: string;
    FMensagem_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetMensagem(Index: Integer): string;
    procedure SetMensagem(Index: Integer; const Astring: string);
    function  Mensagem_Specified(Index: Integer): boolean;
  published
    property Erro:     ErroResponse2  Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property Mensagem: string         Index (IS_OPTN or IS_NLBL) read GetMensagem write SetMensagem stored Mensagem_Specified;
  end;



  // ************************************************************************ //
  // XML       : AssociacaoSubstituicaoCartaoResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  AssociacaoSubstituicaoCartaoResponse = class(AssociacaoSubstituicaoCartaoResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : CancelaCompraValePedagioResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  CancelaCompraValePedagioResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FMensagem: string;
    FMensagem_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetMensagem(Index: Integer): string;
    procedure SetMensagem(Index: Integer; const Astring: string);
    function  Mensagem_Specified(Index: Integer): boolean;
  published
    property Erro:     ErroResponse2  Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property Mensagem: string         Index (IS_OPTN or IS_NLBL) read GetMensagem write SetMensagem stored Mensagem_Specified;
  end;



  // ************************************************************************ //
  // XML       : CancelaCompraValePedagioResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  CancelaCompraValePedagioResponse = class(CancelaCompraValePedagioResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ListarRotasClienteResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ListarRotasClienteResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FMensagem: string;
    FMensagem_Specified: boolean;
    FRotas: ArrayOfRotaResponse;
    FRotas_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetMensagem(Index: Integer): string;
    procedure SetMensagem(Index: Integer; const Astring: string);
    function  Mensagem_Specified(Index: Integer): boolean;
    function  GetRotas(Index: Integer): ArrayOfRotaResponse;
    procedure SetRotas(Index: Integer; const AArrayOfRotaResponse: ArrayOfRotaResponse);
    function  Rotas_Specified(Index: Integer): boolean;
  published
    property Erro:     ErroResponse2        Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property Mensagem: string               Index (IS_OPTN or IS_NLBL) read GetMensagem write SetMensagem stored Mensagem_Specified;
    property Rotas:    ArrayOfRotaResponse  Index (IS_OPTN or IS_NLBL) read GetRotas write SetRotas stored Rotas_Specified;
  end;



  // ************************************************************************ //
  // XML       : ListarRotasClienteResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ListarRotasClienteResponse = class(ListarRotasClienteResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ConfirmarPedagioResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ConfirmarPedagioResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FMensagem: string;
    FMensagem_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetMensagem(Index: Integer): string;
    procedure SetMensagem(Index: Integer; const Astring: string);
    function  Mensagem_Specified(Index: Integer): boolean;
  published
    property Erro:     ErroResponse2  Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property Mensagem: string         Index (IS_OPTN or IS_NLBL) read GetMensagem write SetMensagem stored Mensagem_Specified;
  end;



  // ************************************************************************ //
  // XML       : ConfirmarPedagioResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ConfirmarPedagioResponse = class(ConfirmarPedagioResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : DadosComplementaresCompraValePedagio, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  DadosComplementaresCompraValePedagio2 = class(TRemotable)
  private
    FNomeUsuarioOperador: string;
    FNomeUsuarioOperador_Specified: boolean;
    FCpfUsuarioOperador: string;
    FCpfUsuarioOperador_Specified: boolean;
    FNomeFilialOperador: string;
    FNomeFilialOperador_Specified: boolean;
    FCnpjFilialOperador: string;
    FCnpjFilialOperador_Specified: boolean;
    FLoginUsuarioOperador: string;
    FLoginUsuarioOperador_Specified: boolean;
    function  GetNomeUsuarioOperador(Index: Integer): string;
    procedure SetNomeUsuarioOperador(Index: Integer; const Astring: string);
    function  NomeUsuarioOperador_Specified(Index: Integer): boolean;
    function  GetCpfUsuarioOperador(Index: Integer): string;
    procedure SetCpfUsuarioOperador(Index: Integer; const Astring: string);
    function  CpfUsuarioOperador_Specified(Index: Integer): boolean;
    function  GetNomeFilialOperador(Index: Integer): string;
    procedure SetNomeFilialOperador(Index: Integer; const Astring: string);
    function  NomeFilialOperador_Specified(Index: Integer): boolean;
    function  GetCnpjFilialOperador(Index: Integer): string;
    procedure SetCnpjFilialOperador(Index: Integer; const Astring: string);
    function  CnpjFilialOperador_Specified(Index: Integer): boolean;
    function  GetLoginUsuarioOperador(Index: Integer): string;
    procedure SetLoginUsuarioOperador(Index: Integer; const Astring: string);
    function  LoginUsuarioOperador_Specified(Index: Integer): boolean;
  published
    property NomeUsuarioOperador:  string  Index (IS_OPTN or IS_NLBL) read GetNomeUsuarioOperador write SetNomeUsuarioOperador stored NomeUsuarioOperador_Specified;
    property CpfUsuarioOperador:   string  Index (IS_OPTN or IS_NLBL) read GetCpfUsuarioOperador write SetCpfUsuarioOperador stored CpfUsuarioOperador_Specified;
    property NomeFilialOperador:   string  Index (IS_OPTN or IS_NLBL) read GetNomeFilialOperador write SetNomeFilialOperador stored NomeFilialOperador_Specified;
    property CnpjFilialOperador:   string  Index (IS_OPTN or IS_NLBL) read GetCnpjFilialOperador write SetCnpjFilialOperador stored CnpjFilialOperador_Specified;
    property LoginUsuarioOperador: string  Index (IS_OPTN or IS_NLBL) read GetLoginUsuarioOperador write SetLoginUsuarioOperador stored LoginUsuarioOperador_Specified;
  end;



  // ************************************************************************ //
  // XML       : DadosComplementaresCompraValePedagio, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  DadosComplementaresCompraValePedagio = class(DadosComplementaresCompraValePedagio2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : CompraValePedagioResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  CompraValePedagioResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FMensagem: string;
    FMensagem_Specified: boolean;
    FIdCompraValePedagio: Integer;
    FIdCompraValePedagio_Specified: boolean;
    FValorCompra: TXSDecimal;
    FValorCompra_Specified: boolean;
    FCodigoRegistroValePedagio: Int64;
    FCodigoRegistroValePedagio_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetMensagem(Index: Integer): string;
    procedure SetMensagem(Index: Integer; const Astring: string);
    function  Mensagem_Specified(Index: Integer): boolean;
    function  GetIdCompraValePedagio(Index: Integer): Integer;
    procedure SetIdCompraValePedagio(Index: Integer; const AInteger: Integer);
    function  IdCompraValePedagio_Specified(Index: Integer): boolean;
    function  GetValorCompra(Index: Integer): TXSDecimal;
    procedure SetValorCompra(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorCompra_Specified(Index: Integer): boolean;
    function  GetCodigoRegistroValePedagio(Index: Integer): Int64;
    procedure SetCodigoRegistroValePedagio(Index: Integer; const AInt64: Int64);
    function  CodigoRegistroValePedagio_Specified(Index: Integer): boolean;
  published
    property Erro:                      ErroResponse2  Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property Mensagem:                  string         Index (IS_OPTN or IS_NLBL) read GetMensagem write SetMensagem stored Mensagem_Specified;
    property IdCompraValePedagio:       Integer        Index (IS_OPTN) read GetIdCompraValePedagio write SetIdCompraValePedagio stored IdCompraValePedagio_Specified;
    property ValorCompra:               TXSDecimal     Index (IS_OPTN) read GetValorCompra write SetValorCompra stored ValorCompra_Specified;
    property CodigoRegistroValePedagio: Int64          Index (IS_OPTN) read GetCodigoRegistroValePedagio write SetCodigoRegistroValePedagio stored CodigoRegistroValePedagio_Specified;
  end;



  // ************************************************************************ //
  // XML       : CompraValePedagioResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  CompraValePedagioResponse = class(CompraValePedagioResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AtualizaCompraValePedagioResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  AtualizaCompraValePedagioResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FMensagem: string;
    FMensagem_Specified: boolean;
    FIdCompraValePedagio: Integer;
    FIdCompraValePedagio_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetMensagem(Index: Integer): string;
    procedure SetMensagem(Index: Integer; const Astring: string);
    function  Mensagem_Specified(Index: Integer): boolean;
    function  GetIdCompraValePedagio(Index: Integer): Integer;
    procedure SetIdCompraValePedagio(Index: Integer; const AInteger: Integer);
    function  IdCompraValePedagio_Specified(Index: Integer): boolean;
  published
    property Erro:                ErroResponse2  Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property Mensagem:            string         Index (IS_OPTN or IS_NLBL) read GetMensagem write SetMensagem stored Mensagem_Specified;
    property IdCompraValePedagio: Integer        Index (IS_OPTN) read GetIdCompraValePedagio write SetIdCompraValePedagio stored IdCompraValePedagio_Specified;
  end;



  // ************************************************************************ //
  // XML       : AtualizaCompraValePedagioResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  AtualizaCompraValePedagioResponse = class(AtualizaCompraValePedagioResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : FinalizacaoOperacaoTransporteResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  FinalizacaoOperacaoTransporteResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FMensagemRetorno: string;
    FMensagemRetorno_Specified: boolean;
    FDataHoraFinalizacao: TXSDateTime;
    FDataHoraFinalizacao_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetMensagemRetorno(Index: Integer): string;
    procedure SetMensagemRetorno(Index: Integer; const Astring: string);
    function  MensagemRetorno_Specified(Index: Integer): boolean;
    function  GetDataHoraFinalizacao(Index: Integer): TXSDateTime;
    procedure SetDataHoraFinalizacao(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DataHoraFinalizacao_Specified(Index: Integer): boolean;
  published
    property Erro:                ErroResponse2  Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property MensagemRetorno:     string         Index (IS_OPTN or IS_NLBL) read GetMensagemRetorno write SetMensagemRetorno stored MensagemRetorno_Specified;
    property DataHoraFinalizacao: TXSDateTime    Index (IS_OPTN) read GetDataHoraFinalizacao write SetDataHoraFinalizacao stored DataHoraFinalizacao_Specified;
  end;



  // ************************************************************************ //
  // XML       : FinalizacaoOperacaoTransporteResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  FinalizacaoOperacaoTransporteResponse = class(FinalizacaoOperacaoTransporteResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : DetalhesQuitacaoResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  DetalhesQuitacaoResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FIdOperacaoTransporte: Integer;
    FIdOperacaoTransporte_Specified: boolean;
    FCIOT: string;
    FCIOT_Specified: boolean;
    FMunicipioOrigem: string;
    FMunicipioOrigem_Specified: boolean;
    FMunicipioDestino: string;
    FMunicipioDestino_Specified: boolean;
    FDataHoraInicio: TXSDateTime;
    FDataHoraInicio_Specified: boolean;
    FDataHoraTermino: TXSDateTime;
    FDataHoraTermino_Specified: boolean;
    FCPFCNPJContratado: string;
    FCPFCNPJContratado_Specified: boolean;
    FValorFrete: TXSDecimal;
    FValorFrete_Specified: boolean;
    FNomeMotorista: string;
    FNomeMotorista_Specified: boolean;
    FCPFMotorista: string;
    FCPFMotorista_Specified: boolean;
    FValorContratado: TXSDecimal;
    FValorContratado_Specified: boolean;
    FStatusOperacao: string;
    FStatusOperacao_Specified: boolean;
    FParcelas: ArrayOfInformacoesParcelasResponse;
    FParcelas_Specified: boolean;
    FDadosQuitacao: DadosQuitacaoFreteResponse2;
    FDadosQuitacao_Specified: boolean;
    FMensagemRetorno: string;
    FMensagemRetorno_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetIdOperacaoTransporte(Index: Integer): Integer;
    procedure SetIdOperacaoTransporte(Index: Integer; const AInteger: Integer);
    function  IdOperacaoTransporte_Specified(Index: Integer): boolean;
    function  GetCIOT(Index: Integer): string;
    procedure SetCIOT(Index: Integer; const Astring: string);
    function  CIOT_Specified(Index: Integer): boolean;
    function  GetMunicipioOrigem(Index: Integer): string;
    procedure SetMunicipioOrigem(Index: Integer; const Astring: string);
    function  MunicipioOrigem_Specified(Index: Integer): boolean;
    function  GetMunicipioDestino(Index: Integer): string;
    procedure SetMunicipioDestino(Index: Integer; const Astring: string);
    function  MunicipioDestino_Specified(Index: Integer): boolean;
    function  GetDataHoraInicio(Index: Integer): TXSDateTime;
    procedure SetDataHoraInicio(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DataHoraInicio_Specified(Index: Integer): boolean;
    function  GetDataHoraTermino(Index: Integer): TXSDateTime;
    procedure SetDataHoraTermino(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DataHoraTermino_Specified(Index: Integer): boolean;
    function  GetCPFCNPJContratado(Index: Integer): string;
    procedure SetCPFCNPJContratado(Index: Integer; const Astring: string);
    function  CPFCNPJContratado_Specified(Index: Integer): boolean;
    function  GetValorFrete(Index: Integer): TXSDecimal;
    procedure SetValorFrete(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorFrete_Specified(Index: Integer): boolean;
    function  GetNomeMotorista(Index: Integer): string;
    procedure SetNomeMotorista(Index: Integer; const Astring: string);
    function  NomeMotorista_Specified(Index: Integer): boolean;
    function  GetCPFMotorista(Index: Integer): string;
    procedure SetCPFMotorista(Index: Integer; const Astring: string);
    function  CPFMotorista_Specified(Index: Integer): boolean;
    function  GetValorContratado(Index: Integer): TXSDecimal;
    procedure SetValorContratado(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorContratado_Specified(Index: Integer): boolean;
    function  GetStatusOperacao(Index: Integer): string;
    procedure SetStatusOperacao(Index: Integer; const Astring: string);
    function  StatusOperacao_Specified(Index: Integer): boolean;
    function  GetParcelas(Index: Integer): ArrayOfInformacoesParcelasResponse;
    procedure SetParcelas(Index: Integer; const AArrayOfInformacoesParcelasResponse: ArrayOfInformacoesParcelasResponse);
    function  Parcelas_Specified(Index: Integer): boolean;
    function  GetDadosQuitacao(Index: Integer): DadosQuitacaoFreteResponse2;
    procedure SetDadosQuitacao(Index: Integer; const ADadosQuitacaoFreteResponse2: DadosQuitacaoFreteResponse2);
    function  DadosQuitacao_Specified(Index: Integer): boolean;
    function  GetMensagemRetorno(Index: Integer): string;
    procedure SetMensagemRetorno(Index: Integer; const Astring: string);
    function  MensagemRetorno_Specified(Index: Integer): boolean;
  published
    property Erro:                 ErroResponse2                       Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property IdOperacaoTransporte: Integer                             Index (IS_OPTN) read GetIdOperacaoTransporte write SetIdOperacaoTransporte stored IdOperacaoTransporte_Specified;
    property CIOT:                 string                              Index (IS_OPTN or IS_NLBL) read GetCIOT write SetCIOT stored CIOT_Specified;
    property MunicipioOrigem:      string                              Index (IS_OPTN or IS_NLBL) read GetMunicipioOrigem write SetMunicipioOrigem stored MunicipioOrigem_Specified;
    property MunicipioDestino:     string                              Index (IS_OPTN or IS_NLBL) read GetMunicipioDestino write SetMunicipioDestino stored MunicipioDestino_Specified;
    property DataHoraInicio:       TXSDateTime                         Index (IS_OPTN or IS_NLBL) read GetDataHoraInicio write SetDataHoraInicio stored DataHoraInicio_Specified;
    property DataHoraTermino:      TXSDateTime                         Index (IS_OPTN or IS_NLBL) read GetDataHoraTermino write SetDataHoraTermino stored DataHoraTermino_Specified;
    property CPFCNPJContratado:    string                              Index (IS_OPTN or IS_NLBL) read GetCPFCNPJContratado write SetCPFCNPJContratado stored CPFCNPJContratado_Specified;
    property ValorFrete:           TXSDecimal                          Index (IS_OPTN or IS_NLBL) read GetValorFrete write SetValorFrete stored ValorFrete_Specified;
    property NomeMotorista:        string                              Index (IS_OPTN or IS_NLBL) read GetNomeMotorista write SetNomeMotorista stored NomeMotorista_Specified;
    property CPFMotorista:         string                              Index (IS_OPTN or IS_NLBL) read GetCPFMotorista write SetCPFMotorista stored CPFMotorista_Specified;
    property ValorContratado:      TXSDecimal                          Index (IS_OPTN or IS_NLBL) read GetValorContratado write SetValorContratado stored ValorContratado_Specified;
    property StatusOperacao:       string                              Index (IS_OPTN or IS_NLBL) read GetStatusOperacao write SetStatusOperacao stored StatusOperacao_Specified;
    property Parcelas:             ArrayOfInformacoesParcelasResponse  Index (IS_OPTN or IS_NLBL) read GetParcelas write SetParcelas stored Parcelas_Specified;
    property DadosQuitacao:        DadosQuitacaoFreteResponse2         Index (IS_OPTN or IS_NLBL) read GetDadosQuitacao write SetDadosQuitacao stored DadosQuitacao_Specified;
    property MensagemRetorno:      string                              Index (IS_OPTN or IS_NLBL) read GetMensagemRetorno write SetMensagemRetorno stored MensagemRetorno_Specified;
  end;



  // ************************************************************************ //
  // XML       : DetalhesQuitacaoResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  DetalhesQuitacaoResponse = class(DetalhesQuitacaoResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : CadastroAtualizacaoDadosQuitacaoResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  CadastroAtualizacaoDadosQuitacaoResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FMensagemRetorno: string;
    FMensagemRetorno_Specified: boolean;
    FIdOperacao: Integer;
    FIdOperacao_Specified: boolean;
    FdadosQuitacao: DadosQuitacaoFreteResponse2;
    FdadosQuitacao_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetMensagemRetorno(Index: Integer): string;
    procedure SetMensagemRetorno(Index: Integer; const Astring: string);
    function  MensagemRetorno_Specified(Index: Integer): boolean;
    function  GetIdOperacao(Index: Integer): Integer;
    procedure SetIdOperacao(Index: Integer; const AInteger: Integer);
    function  IdOperacao_Specified(Index: Integer): boolean;
    function  GetdadosQuitacao(Index: Integer): DadosQuitacaoFreteResponse2;
    procedure SetdadosQuitacao(Index: Integer; const ADadosQuitacaoFreteResponse2: DadosQuitacaoFreteResponse2);
    function  dadosQuitacao_Specified(Index: Integer): boolean;
  published
    property Erro:            ErroResponse2                Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property MensagemRetorno: string                       Index (IS_OPTN or IS_NLBL) read GetMensagemRetorno write SetMensagemRetorno stored MensagemRetorno_Specified;
    property IdOperacao:      Integer                      Index (IS_OPTN) read GetIdOperacao write SetIdOperacao stored IdOperacao_Specified;
    property dadosQuitacao:   DadosQuitacaoFreteResponse2  Index (IS_OPTN or IS_NLBL) read GetdadosQuitacao write SetdadosQuitacao stored dadosQuitacao_Specified;
  end;



  // ************************************************************************ //
  // XML       : CadastroAtualizacaoDadosQuitacaoResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  CadastroAtualizacaoDadosQuitacaoResponse = class(CadastroAtualizacaoDadosQuitacaoResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : OperacaoTransporteVeiculoResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  OperacaoTransporteVeiculoResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FPlaca: string;
    FPlaca_Specified: boolean;
    FRNTRC: string;
    FRNTRC_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetPlaca(Index: Integer): string;
    procedure SetPlaca(Index: Integer; const Astring: string);
    function  Placa_Specified(Index: Integer): boolean;
    function  GetRNTRC(Index: Integer): string;
    procedure SetRNTRC(Index: Integer; const Astring: string);
    function  RNTRC_Specified(Index: Integer): boolean;
  published
    property Erro:  ErroResponse2  Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property Placa: string         Index (IS_OPTN or IS_NLBL) read GetPlaca write SetPlaca stored Placa_Specified;
    property RNTRC: string         Index (IS_OPTN or IS_NLBL) read GetRNTRC write SetRNTRC stored RNTRC_Specified;
  end;



  // ************************************************************************ //
  // XML       : BuscaOperacaoTransporteRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  BuscaOperacaoTransporteRequest2 = class(TRemotable)
  private
    FQuantidadeItensPorPagina: Integer;
    FQuantidadeItensPorPagina_Specified: boolean;
    FNumeroPagina: Integer;
    FNumeroPagina_Specified: boolean;
    FIdOperacao: Integer;
    FIdOperacao_Specified: boolean;
    FCIOT: string;
    FCIOT_Specified: boolean;
    FItemFinanceiro: string;
    FItemFinanceiro_Specified: boolean;
    FStatusOperacao: Integer;
    FStatusOperacao_Specified: boolean;
    function  GetQuantidadeItensPorPagina(Index: Integer): Integer;
    procedure SetQuantidadeItensPorPagina(Index: Integer; const AInteger: Integer);
    function  QuantidadeItensPorPagina_Specified(Index: Integer): boolean;
    function  GetNumeroPagina(Index: Integer): Integer;
    procedure SetNumeroPagina(Index: Integer; const AInteger: Integer);
    function  NumeroPagina_Specified(Index: Integer): boolean;
    function  GetIdOperacao(Index: Integer): Integer;
    procedure SetIdOperacao(Index: Integer; const AInteger: Integer);
    function  IdOperacao_Specified(Index: Integer): boolean;
    function  GetCIOT(Index: Integer): string;
    procedure SetCIOT(Index: Integer; const Astring: string);
    function  CIOT_Specified(Index: Integer): boolean;
    function  GetItemFinanceiro(Index: Integer): string;
    procedure SetItemFinanceiro(Index: Integer; const Astring: string);
    function  ItemFinanceiro_Specified(Index: Integer): boolean;
    function  GetStatusOperacao(Index: Integer): Integer;
    procedure SetStatusOperacao(Index: Integer; const AInteger: Integer);
    function  StatusOperacao_Specified(Index: Integer): boolean;
  published
    property QuantidadeItensPorPagina: Integer  Index (IS_OPTN) read GetQuantidadeItensPorPagina write SetQuantidadeItensPorPagina stored QuantidadeItensPorPagina_Specified;
    property NumeroPagina:             Integer  Index (IS_OPTN) read GetNumeroPagina write SetNumeroPagina stored NumeroPagina_Specified;
    property IdOperacao:               Integer  Index (IS_OPTN or IS_NLBL) read GetIdOperacao write SetIdOperacao stored IdOperacao_Specified;
    property CIOT:                     string   Index (IS_OPTN or IS_NLBL) read GetCIOT write SetCIOT stored CIOT_Specified;
    property ItemFinanceiro:           string   Index (IS_OPTN or IS_NLBL) read GetItemFinanceiro write SetItemFinanceiro stored ItemFinanceiro_Specified;
    property StatusOperacao:           Integer  Index (IS_OPTN or IS_NLBL) read GetStatusOperacao write SetStatusOperacao stored StatusOperacao_Specified;
  end;



  // ************************************************************************ //
  // XML       : InfoPortadorResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  InfoPortadorResponse2 = class(TRemotable)
  private
    FCpf: string;
    FCpf_Specified: boolean;
    FDataNascimento: TXSDateTime;
    FDataNascimento_Specified: boolean;
    FNomeCompleto: string;
    FNomeCompleto_Specified: boolean;
    FRntrc: string;
    FRntrc_Specified: boolean;
    FTelefone: string;
    FTelefone_Specified: boolean;
    FUf: string;
    FUf_Specified: boolean;
    function  GetCpf(Index: Integer): string;
    procedure SetCpf(Index: Integer; const Astring: string);
    function  Cpf_Specified(Index: Integer): boolean;
    function  GetDataNascimento(Index: Integer): TXSDateTime;
    procedure SetDataNascimento(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DataNascimento_Specified(Index: Integer): boolean;
    function  GetNomeCompleto(Index: Integer): string;
    procedure SetNomeCompleto(Index: Integer; const Astring: string);
    function  NomeCompleto_Specified(Index: Integer): boolean;
    function  GetRntrc(Index: Integer): string;
    procedure SetRntrc(Index: Integer; const Astring: string);
    function  Rntrc_Specified(Index: Integer): boolean;
    function  GetTelefone(Index: Integer): string;
    procedure SetTelefone(Index: Integer; const Astring: string);
    function  Telefone_Specified(Index: Integer): boolean;
    function  GetUf(Index: Integer): string;
    procedure SetUf(Index: Integer; const Astring: string);
    function  Uf_Specified(Index: Integer): boolean;
  published
    property Cpf:            string       Index (IS_OPTN or IS_NLBL) read GetCpf write SetCpf stored Cpf_Specified;
    property DataNascimento: TXSDateTime  Index (IS_OPTN or IS_NLBL) read GetDataNascimento write SetDataNascimento stored DataNascimento_Specified;
    property NomeCompleto:   string       Index (IS_OPTN or IS_NLBL) read GetNomeCompleto write SetNomeCompleto stored NomeCompleto_Specified;
    property Rntrc:          string       Index (IS_OPTN or IS_NLBL) read GetRntrc write SetRntrc stored Rntrc_Specified;
    property Telefone:       string       Index (IS_OPTN or IS_NLBL) read GetTelefone write SetTelefone stored Telefone_Specified;
    property Uf:             string       Index (IS_OPTN or IS_NLBL) read GetUf write SetUf stored Uf_Specified;
  end;



  // ************************************************************************ //
  // XML       : InfoPortadorResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  InfoPortadorResponse = class(InfoPortadorResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : InformacaoCartaoRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  InformacaoCartaoRequest2 = class(TRemotable)
  private
    FNumeroCartao: string;
    FNumeroCartao_Specified: boolean;
    function  GetNumeroCartao(Index: Integer): string;
    procedure SetNumeroCartao(Index: Integer; const Astring: string);
    function  NumeroCartao_Specified(Index: Integer): boolean;
  published
    property NumeroCartao: string  Index (IS_OPTN or IS_NLBL) read GetNumeroCartao write SetNumeroCartao stored NumeroCartao_Specified;
  end;



  // ************************************************************************ //
  // XML       : InformacaoCartaoRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  InformacaoCartaoRequest = class(InformacaoCartaoRequest2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AssociacaoSubstituicaoCartaoRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  AssociacaoSubstituicaoCartaoRequest2 = class(TRemotable)
  private
    FNumeroNovoCartao: string;
    FNumeroNovoCartao_Specified: boolean;
    FCpfPortadorCartao: string;
    FCpfPortadorCartao_Specified: boolean;
    FCnpjCartaoEmpresarial: string;
    FCnpjCartaoEmpresarial_Specified: boolean;
    FNumeroCartaoAnterior: string;
    FNumeroCartaoAnterior_Specified: boolean;
    FMotivoCancelamento: Integer;
    FMotivoCancelamento_Specified: boolean;
    function  GetNumeroNovoCartao(Index: Integer): string;
    procedure SetNumeroNovoCartao(Index: Integer; const Astring: string);
    function  NumeroNovoCartao_Specified(Index: Integer): boolean;
    function  GetCpfPortadorCartao(Index: Integer): string;
    procedure SetCpfPortadorCartao(Index: Integer; const Astring: string);
    function  CpfPortadorCartao_Specified(Index: Integer): boolean;
    function  GetCnpjCartaoEmpresarial(Index: Integer): string;
    procedure SetCnpjCartaoEmpresarial(Index: Integer; const Astring: string);
    function  CnpjCartaoEmpresarial_Specified(Index: Integer): boolean;
    function  GetNumeroCartaoAnterior(Index: Integer): string;
    procedure SetNumeroCartaoAnterior(Index: Integer; const Astring: string);
    function  NumeroCartaoAnterior_Specified(Index: Integer): boolean;
    function  GetMotivoCancelamento(Index: Integer): Integer;
    procedure SetMotivoCancelamento(Index: Integer; const AInteger: Integer);
    function  MotivoCancelamento_Specified(Index: Integer): boolean;
  published
    property NumeroNovoCartao:      string   Index (IS_OPTN or IS_NLBL) read GetNumeroNovoCartao write SetNumeroNovoCartao stored NumeroNovoCartao_Specified;
    property CpfPortadorCartao:     string   Index (IS_OPTN or IS_NLBL) read GetCpfPortadorCartao write SetCpfPortadorCartao stored CpfPortadorCartao_Specified;
    property CnpjCartaoEmpresarial: string   Index (IS_OPTN or IS_NLBL) read GetCnpjCartaoEmpresarial write SetCnpjCartaoEmpresarial stored CnpjCartaoEmpresarial_Specified;
    property NumeroCartaoAnterior:  string   Index (IS_OPTN or IS_NLBL) read GetNumeroCartaoAnterior write SetNumeroCartaoAnterior stored NumeroCartaoAnterior_Specified;
    property MotivoCancelamento:    Integer  Index (IS_OPTN or IS_NLBL) read GetMotivoCancelamento write SetMotivoCancelamento stored MotivoCancelamento_Specified;
  end;



  // ************************************************************************ //
  // XML       : AssociacaoSubstituicaoCartaoRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  AssociacaoSubstituicaoCartaoRequest = class(AssociacaoSubstituicaoCartaoRequest2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ParcelaAdicionalResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ParcelaAdicionalResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FMensagem: string;
    FMensagem_Specified: boolean;
    FIdOperacaoTransporteParcela: Integer;
    FIdOperacaoTransporteParcela_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetMensagem(Index: Integer): string;
    procedure SetMensagem(Index: Integer; const Astring: string);
    function  Mensagem_Specified(Index: Integer): boolean;
    function  GetIdOperacaoTransporteParcela(Index: Integer): Integer;
    procedure SetIdOperacaoTransporteParcela(Index: Integer; const AInteger: Integer);
    function  IdOperacaoTransporteParcela_Specified(Index: Integer): boolean;
  published
    property Erro:                        ErroResponse2  Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property Mensagem:                    string         Index (IS_OPTN or IS_NLBL) read GetMensagem write SetMensagem stored Mensagem_Specified;
    property IdOperacaoTransporteParcela: Integer        Index (IS_OPTN) read GetIdOperacaoTransporteParcela write SetIdOperacaoTransporteParcela stored IdOperacaoTransporteParcela_Specified;
  end;



  // ************************************************************************ //
  // XML       : ParcelaAdicionalResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ParcelaAdicionalResponse = class(ParcelaAdicionalResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : InformacaoServicoResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  InformacaoServicoResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FDataHoraResposta: TXSDateTime;
    FDataHoraResposta_Specified: boolean;
    FStatus: StatusServico;
    FStatus_Specified: boolean;
    FVersao: string;
    FVersao_Specified: boolean;
    FManutencaoProgramada: TXSDateTime;
    FManutencaoProgramada_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetDataHoraResposta(Index: Integer): TXSDateTime;
    procedure SetDataHoraResposta(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DataHoraResposta_Specified(Index: Integer): boolean;
    function  GetStatus(Index: Integer): StatusServico;
    procedure SetStatus(Index: Integer; const AStatusServico: StatusServico);
    function  Status_Specified(Index: Integer): boolean;
    function  GetVersao(Index: Integer): string;
    procedure SetVersao(Index: Integer; const Astring: string);
    function  Versao_Specified(Index: Integer): boolean;
    function  GetManutencaoProgramada(Index: Integer): TXSDateTime;
    procedure SetManutencaoProgramada(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  ManutencaoProgramada_Specified(Index: Integer): boolean;
  published
    property Erro:                 ErroResponse2  Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property DataHoraResposta:     TXSDateTime    Index (IS_OPTN) read GetDataHoraResposta write SetDataHoraResposta stored DataHoraResposta_Specified;
    property Status:               StatusServico  Index (IS_OPTN) read GetStatus write SetStatus stored Status_Specified;
    property Versao:               string         Index (IS_OPTN or IS_NLBL) read GetVersao write SetVersao stored Versao_Specified;
    property ManutencaoProgramada: TXSDateTime    Index (IS_OPTN or IS_NLBL) read GetManutencaoProgramada write SetManutencaoProgramada stored ManutencaoProgramada_Specified;
  end;



  // ************************************************************************ //
  // XML       : GeraTokenParaAcessoResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  GeraTokenParaAcessoResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FToken: string;
    FToken_Specified: boolean;
    FDataValidade: TXSDateTime;
    FDataValidade_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetToken(Index: Integer): string;
    procedure SetToken(Index: Integer; const Astring: string);
    function  Token_Specified(Index: Integer): boolean;
    function  GetDataValidade(Index: Integer): TXSDateTime;
    procedure SetDataValidade(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DataValidade_Specified(Index: Integer): boolean;
  published
    property Erro:         ErroResponse2  Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property Token:        string         Index (IS_OPTN or IS_NLBL) read GetToken write SetToken stored Token_Specified;
    property DataValidade: TXSDateTime    Index (IS_OPTN) read GetDataValidade write SetDataValidade stored DataValidade_Specified;
  end;

  ArrayOfParticipanteResponse = array of ParticipanteResponse2;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }


  // ************************************************************************ //
  // XML       : ResultadoPaginadoParticipanteResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ResultadoPaginadoParticipanteResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FItens: ArrayOfParticipanteResponse;
    FItens_Specified: boolean;
    FNumeroPagina: Integer;
    FNumeroPagina_Specified: boolean;
    FQuantidadeItensPorPagina: Integer;
    FQuantidadeItensPorPagina_Specified: boolean;
    FQuantidadeTotalItens: Integer;
    FQuantidadeTotalItens_Specified: boolean;
    FQuantidadeTotalPaginas: Integer;
    FQuantidadeTotalPaginas_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetItens(Index: Integer): ArrayOfParticipanteResponse;
    procedure SetItens(Index: Integer; const AArrayOfParticipanteResponse: ArrayOfParticipanteResponse);
    function  Itens_Specified(Index: Integer): boolean;
    function  GetNumeroPagina(Index: Integer): Integer;
    procedure SetNumeroPagina(Index: Integer; const AInteger: Integer);
    function  NumeroPagina_Specified(Index: Integer): boolean;
    function  GetQuantidadeItensPorPagina(Index: Integer): Integer;
    procedure SetQuantidadeItensPorPagina(Index: Integer; const AInteger: Integer);
    function  QuantidadeItensPorPagina_Specified(Index: Integer): boolean;
    function  GetQuantidadeTotalItens(Index: Integer): Integer;
    procedure SetQuantidadeTotalItens(Index: Integer; const AInteger: Integer);
    function  QuantidadeTotalItens_Specified(Index: Integer): boolean;
    function  GetQuantidadeTotalPaginas(Index: Integer): Integer;
    procedure SetQuantidadeTotalPaginas(Index: Integer; const AInteger: Integer);
    function  QuantidadeTotalPaginas_Specified(Index: Integer): boolean;
  published
    property Erro:                     ErroResponse2                Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property Itens:                    ArrayOfParticipanteResponse  Index (IS_OPTN or IS_NLBL) read GetItens write SetItens stored Itens_Specified;
    property NumeroPagina:             Integer                      Index (IS_OPTN) read GetNumeroPagina write SetNumeroPagina stored NumeroPagina_Specified;
    property QuantidadeItensPorPagina: Integer                      Index (IS_OPTN) read GetQuantidadeItensPorPagina write SetQuantidadeItensPorPagina stored QuantidadeItensPorPagina_Specified;
    property QuantidadeTotalItens:     Integer                      Index (IS_OPTN) read GetQuantidadeTotalItens write SetQuantidadeTotalItens stored QuantidadeTotalItens_Specified;
    property QuantidadeTotalPaginas:   Integer                      Index (IS_OPTN) read GetQuantidadeTotalPaginas write SetQuantidadeTotalPaginas stored QuantidadeTotalPaginas_Specified;
  end;



  // ************************************************************************ //
  // XML       : ParticipanteRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ParticipanteRequest2 = class(TRemotable)
  private
    FInstrucao: Integer;
    FInstrucao_Specified: boolean;
    FIdParticipante: Integer;
    FIdParticipante_Specified: boolean;
    FIdDmTipoPessoa: Integer;
    FIdDmTipoPessoa_Specified: boolean;
    FNome: string;
    FNome_Specified: boolean;
    FRazaoSocial: string;
    FRazaoSocial_Specified: boolean;
    FCPFCNPJ: string;
    FCPFCNPJ_Specified: boolean;
    FEndereco: string;
    FEndereco_Specified: boolean;
    FBairro: string;
    FBairro_Specified: boolean;
    FCEP: string;
    FCEP_Specified: boolean;
    FMunicipioCodigoIBGE: Integer;
    FMunicipioCodigoIBGE_Specified: boolean;
    FRNTRC: string;
    FRNTRC_Specified: boolean;
    FAtivo: Boolean;
    FAtivo_Specified: boolean;
    FEmail: string;
    FEmail_Specified: boolean;
    FTelefone: string;
    FTelefone_Specified: boolean;
    FTelefoneCelular: string;
    FTelefoneCelular_Specified: boolean;
    function  GetInstrucao(Index: Integer): Integer;
    procedure SetInstrucao(Index: Integer; const AInteger: Integer);
    function  Instrucao_Specified(Index: Integer): boolean;
    function  GetIdParticipante(Index: Integer): Integer;
    procedure SetIdParticipante(Index: Integer; const AInteger: Integer);
    function  IdParticipante_Specified(Index: Integer): boolean;
    function  GetIdDmTipoPessoa(Index: Integer): Integer;
    procedure SetIdDmTipoPessoa(Index: Integer; const AInteger: Integer);
    function  IdDmTipoPessoa_Specified(Index: Integer): boolean;
    function  GetNome(Index: Integer): string;
    procedure SetNome(Index: Integer; const Astring: string);
    function  Nome_Specified(Index: Integer): boolean;
    function  GetRazaoSocial(Index: Integer): string;
    procedure SetRazaoSocial(Index: Integer; const Astring: string);
    function  RazaoSocial_Specified(Index: Integer): boolean;
    function  GetCPFCNPJ(Index: Integer): string;
    procedure SetCPFCNPJ(Index: Integer; const Astring: string);
    function  CPFCNPJ_Specified(Index: Integer): boolean;
    function  GetEndereco(Index: Integer): string;
    procedure SetEndereco(Index: Integer; const Astring: string);
    function  Endereco_Specified(Index: Integer): boolean;
    function  GetBairro(Index: Integer): string;
    procedure SetBairro(Index: Integer; const Astring: string);
    function  Bairro_Specified(Index: Integer): boolean;
    function  GetCEP(Index: Integer): string;
    procedure SetCEP(Index: Integer; const Astring: string);
    function  CEP_Specified(Index: Integer): boolean;
    function  GetMunicipioCodigoIBGE(Index: Integer): Integer;
    procedure SetMunicipioCodigoIBGE(Index: Integer; const AInteger: Integer);
    function  MunicipioCodigoIBGE_Specified(Index: Integer): boolean;
    function  GetRNTRC(Index: Integer): string;
    procedure SetRNTRC(Index: Integer; const Astring: string);
    function  RNTRC_Specified(Index: Integer): boolean;
    function  GetAtivo(Index: Integer): Boolean;
    procedure SetAtivo(Index: Integer; const ABoolean: Boolean);
    function  Ativo_Specified(Index: Integer): boolean;
    function  GetEmail(Index: Integer): string;
    procedure SetEmail(Index: Integer; const Astring: string);
    function  Email_Specified(Index: Integer): boolean;
    function  GetTelefone(Index: Integer): string;
    procedure SetTelefone(Index: Integer; const Astring: string);
    function  Telefone_Specified(Index: Integer): boolean;
    function  GetTelefoneCelular(Index: Integer): string;
    procedure SetTelefoneCelular(Index: Integer; const Astring: string);
    function  TelefoneCelular_Specified(Index: Integer): boolean;
  published
    property Instrucao:           Integer  Index (IS_OPTN) read GetInstrucao write SetInstrucao stored Instrucao_Specified;
    property IdParticipante:      Integer  Index (IS_OPTN or IS_NLBL) read GetIdParticipante write SetIdParticipante stored IdParticipante_Specified;
    property IdDmTipoPessoa:      Integer  Index (IS_OPTN or IS_NLBL) read GetIdDmTipoPessoa write SetIdDmTipoPessoa stored IdDmTipoPessoa_Specified;
    property Nome:                string   Index (IS_OPTN or IS_NLBL) read GetNome write SetNome stored Nome_Specified;
    property RazaoSocial:         string   Index (IS_OPTN or IS_NLBL) read GetRazaoSocial write SetRazaoSocial stored RazaoSocial_Specified;
    property CPFCNPJ:             string   Index (IS_OPTN or IS_NLBL) read GetCPFCNPJ write SetCPFCNPJ stored CPFCNPJ_Specified;
    property Endereco:            string   Index (IS_OPTN or IS_NLBL) read GetEndereco write SetEndereco stored Endereco_Specified;
    property Bairro:              string   Index (IS_OPTN or IS_NLBL) read GetBairro write SetBairro stored Bairro_Specified;
    property CEP:                 string   Index (IS_OPTN or IS_NLBL) read GetCEP write SetCEP stored CEP_Specified;
    property MunicipioCodigoIBGE: Integer  Index (IS_OPTN or IS_NLBL) read GetMunicipioCodigoIBGE write SetMunicipioCodigoIBGE stored MunicipioCodigoIBGE_Specified;
    property RNTRC:               string   Index (IS_OPTN or IS_NLBL) read GetRNTRC write SetRNTRC stored RNTRC_Specified;
    property Ativo:               Boolean  Index (IS_OPTN or IS_NLBL) read GetAtivo write SetAtivo stored Ativo_Specified;
    property Email:               string   Index (IS_OPTN or IS_NLBL) read GetEmail write SetEmail stored Email_Specified;
    property Telefone:            string   Index (IS_OPTN or IS_NLBL) read GetTelefone write SetTelefone stored Telefone_Specified;
    property TelefoneCelular:     string   Index (IS_OPTN or IS_NLBL) read GetTelefoneCelular write SetTelefoneCelular stored TelefoneCelular_Specified;
  end;



  // ************************************************************************ //
  // XML       : BuscaParticipanteRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  BuscaParticipanteRequest2 = class(TRemotable)
  private
    FQuantidadeItensPorPagina: Integer;
    FQuantidadeItensPorPagina_Specified: boolean;
    FNumeroPagina: Integer;
    FNumeroPagina_Specified: boolean;
    FIdParticipante: Integer;
    FIdParticipante_Specified: boolean;
    FCPFCNPJ: string;
    FCPFCNPJ_Specified: boolean;
    FAtivo: Boolean;
    FAtivo_Specified: boolean;
    function  GetQuantidadeItensPorPagina(Index: Integer): Integer;
    procedure SetQuantidadeItensPorPagina(Index: Integer; const AInteger: Integer);
    function  QuantidadeItensPorPagina_Specified(Index: Integer): boolean;
    function  GetNumeroPagina(Index: Integer): Integer;
    procedure SetNumeroPagina(Index: Integer; const AInteger: Integer);
    function  NumeroPagina_Specified(Index: Integer): boolean;
    function  GetIdParticipante(Index: Integer): Integer;
    procedure SetIdParticipante(Index: Integer; const AInteger: Integer);
    function  IdParticipante_Specified(Index: Integer): boolean;
    function  GetCPFCNPJ(Index: Integer): string;
    procedure SetCPFCNPJ(Index: Integer; const Astring: string);
    function  CPFCNPJ_Specified(Index: Integer): boolean;
    function  GetAtivo(Index: Integer): Boolean;
    procedure SetAtivo(Index: Integer; const ABoolean: Boolean);
    function  Ativo_Specified(Index: Integer): boolean;
  published
    property QuantidadeItensPorPagina: Integer  Index (IS_OPTN) read GetQuantidadeItensPorPagina write SetQuantidadeItensPorPagina stored QuantidadeItensPorPagina_Specified;
    property NumeroPagina:             Integer  Index (IS_OPTN) read GetNumeroPagina write SetNumeroPagina stored NumeroPagina_Specified;
    property IdParticipante:           Integer  Index (IS_OPTN or IS_NLBL) read GetIdParticipante write SetIdParticipante stored IdParticipante_Specified;
    property CPFCNPJ:                  string   Index (IS_OPTN or IS_NLBL) read GetCPFCNPJ write SetCPFCNPJ stored CPFCNPJ_Specified;
    property Ativo:                    Boolean  Index (IS_OPTN or IS_NLBL) read GetAtivo write SetAtivo stored Ativo_Specified;
  end;



  // ************************************************************************ //
  // XML       : CentroDeCustoRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  CentroDeCustoRequest2 = class(TRemotable)
  private
    FInstrucao: Integer;
    FInstrucao_Specified: boolean;
    FIdCentroDeCusto: Integer;
    FIdCentroDeCusto_Specified: boolean;
    FCodigo: string;
    FCodigo_Specified: boolean;
    FDescricao: string;
    FDescricao_Specified: boolean;
    FComentario: string;
    FComentario_Specified: boolean;
    FAtivo: Boolean;
    FAtivo_Specified: boolean;
    function  GetInstrucao(Index: Integer): Integer;
    procedure SetInstrucao(Index: Integer; const AInteger: Integer);
    function  Instrucao_Specified(Index: Integer): boolean;
    function  GetIdCentroDeCusto(Index: Integer): Integer;
    procedure SetIdCentroDeCusto(Index: Integer; const AInteger: Integer);
    function  IdCentroDeCusto_Specified(Index: Integer): boolean;
    function  GetCodigo(Index: Integer): string;
    procedure SetCodigo(Index: Integer; const Astring: string);
    function  Codigo_Specified(Index: Integer): boolean;
    function  GetDescricao(Index: Integer): string;
    procedure SetDescricao(Index: Integer; const Astring: string);
    function  Descricao_Specified(Index: Integer): boolean;
    function  GetComentario(Index: Integer): string;
    procedure SetComentario(Index: Integer; const Astring: string);
    function  Comentario_Specified(Index: Integer): boolean;
    function  GetAtivo(Index: Integer): Boolean;
    procedure SetAtivo(Index: Integer; const ABoolean: Boolean);
    function  Ativo_Specified(Index: Integer): boolean;
  published
    property Instrucao:       Integer  Index (IS_OPTN) read GetInstrucao write SetInstrucao stored Instrucao_Specified;
    property IdCentroDeCusto: Integer  Index (IS_OPTN or IS_NLBL) read GetIdCentroDeCusto write SetIdCentroDeCusto stored IdCentroDeCusto_Specified;
    property Codigo:          string   Index (IS_OPTN or IS_NLBL) read GetCodigo write SetCodigo stored Codigo_Specified;
    property Descricao:       string   Index (IS_OPTN or IS_NLBL) read GetDescricao write SetDescricao stored Descricao_Specified;
    property Comentario:      string   Index (IS_OPTN or IS_NLBL) read GetComentario write SetComentario stored Comentario_Specified;
    property Ativo:           Boolean  Index (IS_OPTN or IS_NLBL) read GetAtivo write SetAtivo stored Ativo_Specified;
  end;



  // ************************************************************************ //
  // XML       : TransportadorRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  TransportadorRequest2 = class(TRemotable)
  private
    FInstrucao: Integer;
    FInstrucao_Specified: boolean;
    FRNTRC: string;
    FRNTRC_Specified: boolean;
    FCPFCNPJ: string;
    FCPFCNPJ_Specified: boolean;
    FNome: string;
    FNome_Specified: boolean;
    FSobrenome: string;
    FSobrenome_Specified: boolean;
    FRazaoSocial: string;
    FRazaoSocial_Specified: boolean;
    FDataNascimento: TXSDateTime;
    FDataNascimento_Specified: boolean;
    FRG: string;
    FRG_Specified: boolean;
    FOrgaoEmissorRg: string;
    FOrgaoEmissorRg_Specified: boolean;
    FCNH: string;
    FCNH_Specified: boolean;
    FTipoCNH: string;
    FTipoCNH_Specified: boolean;
    FDataValidadeCNH: TXSDateTime;
    FDataValidadeCNH_Specified: boolean;
    FSexo: string;
    FSexo_Specified: boolean;
    FNaturalidade: string;
    FNaturalidade_Specified: boolean;
    FNacionalidade: string;
    FNacionalidade_Specified: boolean;
    FInscricaoEstadual: string;
    FInscricaoEstadual_Specified: boolean;
    FInscricaoMunicipal: string;
    FInscricaoMunicipal_Specified: boolean;
    FNomeFantasia: string;
    FNomeFantasia_Specified: boolean;
    FDataInscricao: TXSDateTime;
    FDataInscricao_Specified: boolean;
    FIdDmAtividadeEconomica: Integer;
    FIdDmAtividadeEconomica_Specified: boolean;
    FEndereco: string;
    FEndereco_Specified: boolean;
    FNumeroEndereco: string;
    FNumeroEndereco_Specified: boolean;
    FEnderecoComplemento: string;
    FEnderecoComplemento_Specified: boolean;
    FBairro: string;
    FBairro_Specified: boolean;
    FCEP: string;
    FCEP_Specified: boolean;
    FCodigoIBGEMunicipio: Integer;
    FCodigoIBGEMunicipio_Specified: boolean;
    FIdentificadorEndereco: string;
    FIdentificadorEndereco_Specified: boolean;
    FTelefoneFixo: Int64;
    FTelefoneFixo_Specified: boolean;
    FTelefoneCelular: Int64;
    FTelefoneCelular_Specified: boolean;
    FEstadoCivil: Integer;
    FEstadoCivil_Specified: boolean;
    FEmail: string;
    FEmail_Specified: boolean;
    FUsuario: string;
    FUsuario_Specified: boolean;
    FCodigoBanco: string;
    FCodigoBanco_Specified: boolean;
    FCodigoAgencia: string;
    FCodigoAgencia_Specified: boolean;
    FDigitoAgencia: string;
    FDigitoAgencia_Specified: boolean;
    FContaCorrente: string;
    FContaCorrente_Specified: boolean;
    FDigitoContaCorrente: string;
    FDigitoContaCorrente_Specified: boolean;
    FFlagContaPoupanca: Boolean;
    FFlagContaPoupanca_Specified: boolean;
    FVariacaoContaPoupanca: string;
    FVariacaoContaPoupanca_Specified: boolean;
    FNomeContato: string;
    FNomeContato_Specified: boolean;
    FCargoContato: string;
    FCargoContato_Specified: boolean;
    FCPFCNPJContato: string;
    FCPFCNPJContato_Specified: boolean;
    FTelefoneFixoContato: Int64;
    FTelefoneFixoContato_Specified: boolean;
    FTelefoneCelularContato: Int64;
    FTelefoneCelularContato_Specified: boolean;
    FEmailContato: string;
    FEmailContato_Specified: boolean;
    FDataNascimentoContato: TXSDateTime;
    FDataNascimentoContato_Specified: boolean;
    FRGContato: string;
    FRGContato_Specified: boolean;
    FOrgaoEmissorRgContato: string;
    FOrgaoEmissorRgContato_Specified: boolean;
    FPisPasep: string;
    FPisPasep_Specified: boolean;
    function  GetInstrucao(Index: Integer): Integer;
    procedure SetInstrucao(Index: Integer; const AInteger: Integer);
    function  Instrucao_Specified(Index: Integer): boolean;
    function  GetRNTRC(Index: Integer): string;
    procedure SetRNTRC(Index: Integer; const Astring: string);
    function  RNTRC_Specified(Index: Integer): boolean;
    function  GetCPFCNPJ(Index: Integer): string;
    procedure SetCPFCNPJ(Index: Integer; const Astring: string);
    function  CPFCNPJ_Specified(Index: Integer): boolean;
    function  GetNome(Index: Integer): string;
    procedure SetNome(Index: Integer; const Astring: string);
    function  Nome_Specified(Index: Integer): boolean;
    function  GetSobrenome(Index: Integer): string;
    procedure SetSobrenome(Index: Integer; const Astring: string);
    function  Sobrenome_Specified(Index: Integer): boolean;
    function  GetRazaoSocial(Index: Integer): string;
    procedure SetRazaoSocial(Index: Integer; const Astring: string);
    function  RazaoSocial_Specified(Index: Integer): boolean;
    function  GetDataNascimento(Index: Integer): TXSDateTime;
    procedure SetDataNascimento(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DataNascimento_Specified(Index: Integer): boolean;
    function  GetRG(Index: Integer): string;
    procedure SetRG(Index: Integer; const Astring: string);
    function  RG_Specified(Index: Integer): boolean;
    function  GetOrgaoEmissorRg(Index: Integer): string;
    procedure SetOrgaoEmissorRg(Index: Integer; const Astring: string);
    function  OrgaoEmissorRg_Specified(Index: Integer): boolean;
    function  GetCNH(Index: Integer): string;
    procedure SetCNH(Index: Integer; const Astring: string);
    function  CNH_Specified(Index: Integer): boolean;
    function  GetTipoCNH(Index: Integer): string;
    procedure SetTipoCNH(Index: Integer; const Astring: string);
    function  TipoCNH_Specified(Index: Integer): boolean;
    function  GetDataValidadeCNH(Index: Integer): TXSDateTime;
    procedure SetDataValidadeCNH(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DataValidadeCNH_Specified(Index: Integer): boolean;
    function  GetSexo(Index: Integer): string;
    procedure SetSexo(Index: Integer; const Astring: string);
    function  Sexo_Specified(Index: Integer): boolean;
    function  GetNaturalidade(Index: Integer): string;
    procedure SetNaturalidade(Index: Integer; const Astring: string);
    function  Naturalidade_Specified(Index: Integer): boolean;
    function  GetNacionalidade(Index: Integer): string;
    procedure SetNacionalidade(Index: Integer; const Astring: string);
    function  Nacionalidade_Specified(Index: Integer): boolean;
    function  GetInscricaoEstadual(Index: Integer): string;
    procedure SetInscricaoEstadual(Index: Integer; const Astring: string);
    function  InscricaoEstadual_Specified(Index: Integer): boolean;
    function  GetInscricaoMunicipal(Index: Integer): string;
    procedure SetInscricaoMunicipal(Index: Integer; const Astring: string);
    function  InscricaoMunicipal_Specified(Index: Integer): boolean;
    function  GetNomeFantasia(Index: Integer): string;
    procedure SetNomeFantasia(Index: Integer; const Astring: string);
    function  NomeFantasia_Specified(Index: Integer): boolean;
    function  GetDataInscricao(Index: Integer): TXSDateTime;
    procedure SetDataInscricao(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DataInscricao_Specified(Index: Integer): boolean;
    function  GetIdDmAtividadeEconomica(Index: Integer): Integer;
    procedure SetIdDmAtividadeEconomica(Index: Integer; const AInteger: Integer);
    function  IdDmAtividadeEconomica_Specified(Index: Integer): boolean;
    function  GetEndereco(Index: Integer): string;
    procedure SetEndereco(Index: Integer; const Astring: string);
    function  Endereco_Specified(Index: Integer): boolean;
    function  GetNumeroEndereco(Index: Integer): string;
    procedure SetNumeroEndereco(Index: Integer; const Astring: string);
    function  NumeroEndereco_Specified(Index: Integer): boolean;
    function  GetEnderecoComplemento(Index: Integer): string;
    procedure SetEnderecoComplemento(Index: Integer; const Astring: string);
    function  EnderecoComplemento_Specified(Index: Integer): boolean;
    function  GetBairro(Index: Integer): string;
    procedure SetBairro(Index: Integer; const Astring: string);
    function  Bairro_Specified(Index: Integer): boolean;
    function  GetCEP(Index: Integer): string;
    procedure SetCEP(Index: Integer; const Astring: string);
    function  CEP_Specified(Index: Integer): boolean;
    function  GetCodigoIBGEMunicipio(Index: Integer): Integer;
    procedure SetCodigoIBGEMunicipio(Index: Integer; const AInteger: Integer);
    function  CodigoIBGEMunicipio_Specified(Index: Integer): boolean;
    function  GetIdentificadorEndereco(Index: Integer): string;
    procedure SetIdentificadorEndereco(Index: Integer; const Astring: string);
    function  IdentificadorEndereco_Specified(Index: Integer): boolean;
    function  GetTelefoneFixo(Index: Integer): Int64;
    procedure SetTelefoneFixo(Index: Integer; const AInt64: Int64);
    function  TelefoneFixo_Specified(Index: Integer): boolean;
    function  GetTelefoneCelular(Index: Integer): Int64;
    procedure SetTelefoneCelular(Index: Integer; const AInt64: Int64);
    function  TelefoneCelular_Specified(Index: Integer): boolean;
    function  GetEstadoCivil(Index: Integer): Integer;
    procedure SetEstadoCivil(Index: Integer; const AInteger: Integer);
    function  EstadoCivil_Specified(Index: Integer): boolean;
    function  GetEmail(Index: Integer): string;
    procedure SetEmail(Index: Integer; const Astring: string);
    function  Email_Specified(Index: Integer): boolean;
    function  GetUsuario(Index: Integer): string;
    procedure SetUsuario(Index: Integer; const Astring: string);
    function  Usuario_Specified(Index: Integer): boolean;
    function  GetCodigoBanco(Index: Integer): string;
    procedure SetCodigoBanco(Index: Integer; const Astring: string);
    function  CodigoBanco_Specified(Index: Integer): boolean;
    function  GetCodigoAgencia(Index: Integer): string;
    procedure SetCodigoAgencia(Index: Integer; const Astring: string);
    function  CodigoAgencia_Specified(Index: Integer): boolean;
    function  GetDigitoAgencia(Index: Integer): string;
    procedure SetDigitoAgencia(Index: Integer; const Astring: string);
    function  DigitoAgencia_Specified(Index: Integer): boolean;
    function  GetContaCorrente(Index: Integer): string;
    procedure SetContaCorrente(Index: Integer; const Astring: string);
    function  ContaCorrente_Specified(Index: Integer): boolean;
    function  GetDigitoContaCorrente(Index: Integer): string;
    procedure SetDigitoContaCorrente(Index: Integer; const Astring: string);
    function  DigitoContaCorrente_Specified(Index: Integer): boolean;
    function  GetFlagContaPoupanca(Index: Integer): Boolean;
    procedure SetFlagContaPoupanca(Index: Integer; const ABoolean: Boolean);
    function  FlagContaPoupanca_Specified(Index: Integer): boolean;
    function  GetVariacaoContaPoupanca(Index: Integer): string;
    procedure SetVariacaoContaPoupanca(Index: Integer; const Astring: string);
    function  VariacaoContaPoupanca_Specified(Index: Integer): boolean;
    function  GetNomeContato(Index: Integer): string;
    procedure SetNomeContato(Index: Integer; const Astring: string);
    function  NomeContato_Specified(Index: Integer): boolean;
    function  GetCargoContato(Index: Integer): string;
    procedure SetCargoContato(Index: Integer; const Astring: string);
    function  CargoContato_Specified(Index: Integer): boolean;
    function  GetCPFCNPJContato(Index: Integer): string;
    procedure SetCPFCNPJContato(Index: Integer; const Astring: string);
    function  CPFCNPJContato_Specified(Index: Integer): boolean;
    function  GetTelefoneFixoContato(Index: Integer): Int64;
    procedure SetTelefoneFixoContato(Index: Integer; const AInt64: Int64);
    function  TelefoneFixoContato_Specified(Index: Integer): boolean;
    function  GetTelefoneCelularContato(Index: Integer): Int64;
    procedure SetTelefoneCelularContato(Index: Integer; const AInt64: Int64);
    function  TelefoneCelularContato_Specified(Index: Integer): boolean;
    function  GetEmailContato(Index: Integer): string;
    procedure SetEmailContato(Index: Integer; const Astring: string);
    function  EmailContato_Specified(Index: Integer): boolean;
    function  GetDataNascimentoContato(Index: Integer): TXSDateTime;
    procedure SetDataNascimentoContato(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DataNascimentoContato_Specified(Index: Integer): boolean;
    function  GetRGContato(Index: Integer): string;
    procedure SetRGContato(Index: Integer; const Astring: string);
    function  RGContato_Specified(Index: Integer): boolean;
    function  GetOrgaoEmissorRgContato(Index: Integer): string;
    procedure SetOrgaoEmissorRgContato(Index: Integer; const Astring: string);
    function  OrgaoEmissorRgContato_Specified(Index: Integer): boolean;
    function  GetPisPasep(Index: Integer): string;
    procedure SetPisPasep(Index: Integer; const Astring: string);
    function  PisPasep_Specified(Index: Integer): boolean;
  published
    property Instrucao:              Integer      Index (IS_OPTN) read GetInstrucao write SetInstrucao stored Instrucao_Specified;
    property RNTRC:                  string       Index (IS_OPTN or IS_NLBL) read GetRNTRC write SetRNTRC stored RNTRC_Specified;
    property CPFCNPJ:                string       Index (IS_OPTN or IS_NLBL) read GetCPFCNPJ write SetCPFCNPJ stored CPFCNPJ_Specified;
    property Nome:                   string       Index (IS_OPTN or IS_NLBL) read GetNome write SetNome stored Nome_Specified;
    property Sobrenome:              string       Index (IS_OPTN or IS_NLBL) read GetSobrenome write SetSobrenome stored Sobrenome_Specified;
    property RazaoSocial:            string       Index (IS_OPTN or IS_NLBL) read GetRazaoSocial write SetRazaoSocial stored RazaoSocial_Specified;
    property DataNascimento:         TXSDateTime  Index (IS_OPTN or IS_NLBL) read GetDataNascimento write SetDataNascimento stored DataNascimento_Specified;
    property RG:                     string       Index (IS_OPTN or IS_NLBL) read GetRG write SetRG stored RG_Specified;
    property OrgaoEmissorRg:         string       Index (IS_OPTN or IS_NLBL) read GetOrgaoEmissorRg write SetOrgaoEmissorRg stored OrgaoEmissorRg_Specified;
    property CNH:                    string       Index (IS_OPTN or IS_NLBL) read GetCNH write SetCNH stored CNH_Specified;
    property TipoCNH:                string       Index (IS_OPTN or IS_NLBL) read GetTipoCNH write SetTipoCNH stored TipoCNH_Specified;
    property DataValidadeCNH:        TXSDateTime  Index (IS_OPTN or IS_NLBL) read GetDataValidadeCNH write SetDataValidadeCNH stored DataValidadeCNH_Specified;
    property Sexo:                   string       Index (IS_OPTN or IS_NLBL) read GetSexo write SetSexo stored Sexo_Specified;
    property Naturalidade:           string       Index (IS_OPTN or IS_NLBL) read GetNaturalidade write SetNaturalidade stored Naturalidade_Specified;
    property Nacionalidade:          string       Index (IS_OPTN or IS_NLBL) read GetNacionalidade write SetNacionalidade stored Nacionalidade_Specified;
    property InscricaoEstadual:      string       Index (IS_OPTN or IS_NLBL) read GetInscricaoEstadual write SetInscricaoEstadual stored InscricaoEstadual_Specified;
    property InscricaoMunicipal:     string       Index (IS_OPTN or IS_NLBL) read GetInscricaoMunicipal write SetInscricaoMunicipal stored InscricaoMunicipal_Specified;
    property NomeFantasia:           string       Index (IS_OPTN or IS_NLBL) read GetNomeFantasia write SetNomeFantasia stored NomeFantasia_Specified;
    property DataInscricao:          TXSDateTime  Index (IS_OPTN or IS_NLBL) read GetDataInscricao write SetDataInscricao stored DataInscricao_Specified;
    property IdDmAtividadeEconomica: Integer      Index (IS_OPTN or IS_NLBL) read GetIdDmAtividadeEconomica write SetIdDmAtividadeEconomica stored IdDmAtividadeEconomica_Specified;
    property Endereco:               string       Index (IS_OPTN or IS_NLBL) read GetEndereco write SetEndereco stored Endereco_Specified;
    property NumeroEndereco:         string       Index (IS_OPTN or IS_NLBL) read GetNumeroEndereco write SetNumeroEndereco stored NumeroEndereco_Specified;
    property EnderecoComplemento:    string       Index (IS_OPTN or IS_NLBL) read GetEnderecoComplemento write SetEnderecoComplemento stored EnderecoComplemento_Specified;
    property Bairro:                 string       Index (IS_OPTN or IS_NLBL) read GetBairro write SetBairro stored Bairro_Specified;
    property CEP:                    string       Index (IS_OPTN or IS_NLBL) read GetCEP write SetCEP stored CEP_Specified;
    property CodigoIBGEMunicipio:    Integer      Index (IS_OPTN or IS_NLBL) read GetCodigoIBGEMunicipio write SetCodigoIBGEMunicipio stored CodigoIBGEMunicipio_Specified;
    property IdentificadorEndereco:  string       Index (IS_OPTN or IS_NLBL) read GetIdentificadorEndereco write SetIdentificadorEndereco stored IdentificadorEndereco_Specified;
    property TelefoneFixo:           Int64        Index (IS_OPTN or IS_NLBL) read GetTelefoneFixo write SetTelefoneFixo stored TelefoneFixo_Specified;
    property TelefoneCelular:        Int64        Index (IS_OPTN or IS_NLBL) read GetTelefoneCelular write SetTelefoneCelular stored TelefoneCelular_Specified;
    property EstadoCivil:            Integer      Index (IS_OPTN or IS_NLBL) read GetEstadoCivil write SetEstadoCivil stored EstadoCivil_Specified;
    property Email:                  string       Index (IS_OPTN or IS_NLBL) read GetEmail write SetEmail stored Email_Specified;
    property Usuario:                string       Index (IS_OPTN or IS_NLBL) read GetUsuario write SetUsuario stored Usuario_Specified;
    property CodigoBanco:            string       Index (IS_OPTN or IS_NLBL) read GetCodigoBanco write SetCodigoBanco stored CodigoBanco_Specified;
    property CodigoAgencia:          string       Index (IS_OPTN or IS_NLBL) read GetCodigoAgencia write SetCodigoAgencia stored CodigoAgencia_Specified;
    property DigitoAgencia:          string       Index (IS_OPTN or IS_NLBL) read GetDigitoAgencia write SetDigitoAgencia stored DigitoAgencia_Specified;
    property ContaCorrente:          string       Index (IS_OPTN or IS_NLBL) read GetContaCorrente write SetContaCorrente stored ContaCorrente_Specified;
    property DigitoContaCorrente:    string       Index (IS_OPTN or IS_NLBL) read GetDigitoContaCorrente write SetDigitoContaCorrente stored DigitoContaCorrente_Specified;
    property FlagContaPoupanca:      Boolean      Index (IS_OPTN or IS_NLBL) read GetFlagContaPoupanca write SetFlagContaPoupanca stored FlagContaPoupanca_Specified;
    property VariacaoContaPoupanca:  string       Index (IS_OPTN or IS_NLBL) read GetVariacaoContaPoupanca write SetVariacaoContaPoupanca stored VariacaoContaPoupanca_Specified;
    property NomeContato:            string       Index (IS_OPTN or IS_NLBL) read GetNomeContato write SetNomeContato stored NomeContato_Specified;
    property CargoContato:           string       Index (IS_OPTN or IS_NLBL) read GetCargoContato write SetCargoContato stored CargoContato_Specified;
    property CPFCNPJContato:         string       Index (IS_OPTN or IS_NLBL) read GetCPFCNPJContato write SetCPFCNPJContato stored CPFCNPJContato_Specified;
    property TelefoneFixoContato:    Int64        Index (IS_OPTN or IS_NLBL) read GetTelefoneFixoContato write SetTelefoneFixoContato stored TelefoneFixoContato_Specified;
    property TelefoneCelularContato: Int64        Index (IS_OPTN or IS_NLBL) read GetTelefoneCelularContato write SetTelefoneCelularContato stored TelefoneCelularContato_Specified;
    property EmailContato:           string       Index (IS_OPTN or IS_NLBL) read GetEmailContato write SetEmailContato stored EmailContato_Specified;
    property DataNascimentoContato:  TXSDateTime  Index (IS_OPTN or IS_NLBL) read GetDataNascimentoContato write SetDataNascimentoContato stored DataNascimentoContato_Specified;
    property RGContato:              string       Index (IS_OPTN or IS_NLBL) read GetRGContato write SetRGContato stored RGContato_Specified;
    property OrgaoEmissorRgContato:  string       Index (IS_OPTN or IS_NLBL) read GetOrgaoEmissorRgContato write SetOrgaoEmissorRgContato stored OrgaoEmissorRgContato_Specified;
    property PisPasep:               string       Index (IS_OPTN or IS_NLBL) read GetPisPasep write SetPisPasep stored PisPasep_Specified;
  end;



  // ************************************************************************ //
  // XML       : PagamentoAvulsoCartaoRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  PagamentoAvulsoCartaoRequest2 = class(TRemotable)
  private
    FNumeroCartao: string;
    FNumeroCartao_Specified: boolean;
    FValor: TXSDecimal;
    FValor_Specified: boolean;
    FComentario: string;
    FComentario_Specified: boolean;
    FIdCentroDeCusto: Integer;
    FIdCentroDeCusto_Specified: boolean;
    FNSU: Int64;
    FNSU_Specified: boolean;
    FIdIntegrador: string;
    FIdIntegrador_Specified: boolean;
    FItemFinanceiro: string;
    FItemFinanceiro_Specified: boolean;
    FProcessarManualmente: Boolean;
    FProcessarManualmente_Specified: boolean;
    FNumeroDocumentoEmbarque: string;
    FNumeroDocumentoEmbarque_Specified: boolean;
    FPlaca: string;
    FPlaca_Specified: boolean;
    function  GetNumeroCartao(Index: Integer): string;
    procedure SetNumeroCartao(Index: Integer; const Astring: string);
    function  NumeroCartao_Specified(Index: Integer): boolean;
    function  GetValor(Index: Integer): TXSDecimal;
    procedure SetValor(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  Valor_Specified(Index: Integer): boolean;
    function  GetComentario(Index: Integer): string;
    procedure SetComentario(Index: Integer; const Astring: string);
    function  Comentario_Specified(Index: Integer): boolean;
    function  GetIdCentroDeCusto(Index: Integer): Integer;
    procedure SetIdCentroDeCusto(Index: Integer; const AInteger: Integer);
    function  IdCentroDeCusto_Specified(Index: Integer): boolean;
    function  GetNSU(Index: Integer): Int64;
    procedure SetNSU(Index: Integer; const AInt64: Int64);
    function  NSU_Specified(Index: Integer): boolean;
    function  GetIdIntegrador(Index: Integer): string;
    procedure SetIdIntegrador(Index: Integer; const Astring: string);
    function  IdIntegrador_Specified(Index: Integer): boolean;
    function  GetItemFinanceiro(Index: Integer): string;
    procedure SetItemFinanceiro(Index: Integer; const Astring: string);
    function  ItemFinanceiro_Specified(Index: Integer): boolean;
    function  GetProcessarManualmente(Index: Integer): Boolean;
    procedure SetProcessarManualmente(Index: Integer; const ABoolean: Boolean);
    function  ProcessarManualmente_Specified(Index: Integer): boolean;
    function  GetNumeroDocumentoEmbarque(Index: Integer): string;
    procedure SetNumeroDocumentoEmbarque(Index: Integer; const Astring: string);
    function  NumeroDocumentoEmbarque_Specified(Index: Integer): boolean;
    function  GetPlaca(Index: Integer): string;
    procedure SetPlaca(Index: Integer; const Astring: string);
    function  Placa_Specified(Index: Integer): boolean;
  published
    property NumeroCartao:            string      Index (IS_OPTN or IS_NLBL) read GetNumeroCartao write SetNumeroCartao stored NumeroCartao_Specified;
    property Valor:                   TXSDecimal  Index (IS_OPTN) read GetValor write SetValor stored Valor_Specified;
    property Comentario:              string      Index (IS_OPTN or IS_NLBL) read GetComentario write SetComentario stored Comentario_Specified;
    property IdCentroDeCusto:         Integer     Index (IS_OPTN or IS_NLBL) read GetIdCentroDeCusto write SetIdCentroDeCusto stored IdCentroDeCusto_Specified;
    property NSU:                     Int64       Index (IS_OPTN or IS_NLBL) read GetNSU write SetNSU stored NSU_Specified;
    property IdIntegrador:            string      Index (IS_OPTN or IS_NLBL) read GetIdIntegrador write SetIdIntegrador stored IdIntegrador_Specified;
    property ItemFinanceiro:          string      Index (IS_OPTN or IS_NLBL) read GetItemFinanceiro write SetItemFinanceiro stored ItemFinanceiro_Specified;
    property ProcessarManualmente:    Boolean     Index (IS_OPTN or IS_NLBL) read GetProcessarManualmente write SetProcessarManualmente stored ProcessarManualmente_Specified;
    property NumeroDocumentoEmbarque: string      Index (IS_OPTN or IS_NLBL) read GetNumeroDocumentoEmbarque write SetNumeroDocumentoEmbarque stored NumeroDocumentoEmbarque_Specified;
    property Placa:                   string      Index (IS_OPTN or IS_NLBL) read GetPlaca write SetPlaca stored Placa_Specified;
  end;



  // ************************************************************************ //
  // XML       : BuscaCentroDeCustoRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  BuscaCentroDeCustoRequest2 = class(TRemotable)
  private
    FQuantidadeItensPorPagina: Integer;
    FQuantidadeItensPorPagina_Specified: boolean;
    FNumeroPagina: Integer;
    FNumeroPagina_Specified: boolean;
    FIdCentroDeCusto: Integer;
    FIdCentroDeCusto_Specified: boolean;
    FCodigo: string;
    FCodigo_Specified: boolean;
    FAtivo: Boolean;
    FAtivo_Specified: boolean;
    function  GetQuantidadeItensPorPagina(Index: Integer): Integer;
    procedure SetQuantidadeItensPorPagina(Index: Integer; const AInteger: Integer);
    function  QuantidadeItensPorPagina_Specified(Index: Integer): boolean;
    function  GetNumeroPagina(Index: Integer): Integer;
    procedure SetNumeroPagina(Index: Integer; const AInteger: Integer);
    function  NumeroPagina_Specified(Index: Integer): boolean;
    function  GetIdCentroDeCusto(Index: Integer): Integer;
    procedure SetIdCentroDeCusto(Index: Integer; const AInteger: Integer);
    function  IdCentroDeCusto_Specified(Index: Integer): boolean;
    function  GetCodigo(Index: Integer): string;
    procedure SetCodigo(Index: Integer; const Astring: string);
    function  Codigo_Specified(Index: Integer): boolean;
    function  GetAtivo(Index: Integer): Boolean;
    procedure SetAtivo(Index: Integer; const ABoolean: Boolean);
    function  Ativo_Specified(Index: Integer): boolean;
  published
    property QuantidadeItensPorPagina: Integer  Index (IS_OPTN) read GetQuantidadeItensPorPagina write SetQuantidadeItensPorPagina stored QuantidadeItensPorPagina_Specified;
    property NumeroPagina:             Integer  Index (IS_OPTN) read GetNumeroPagina write SetNumeroPagina stored NumeroPagina_Specified;
    property IdCentroDeCusto:          Integer  Index (IS_OPTN or IS_NLBL) read GetIdCentroDeCusto write SetIdCentroDeCusto stored IdCentroDeCusto_Specified;
    property Codigo:                   string   Index (IS_OPTN or IS_NLBL) read GetCodigo write SetCodigo stored Codigo_Specified;
    property Ativo:                    Boolean  Index (IS_OPTN or IS_NLBL) read GetAtivo write SetAtivo stored Ativo_Specified;
  end;



  // ************************************************************************ //
  // XML       : CentroDeCustoResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  CentroDeCustoResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FIdCentroDeCusto: Integer;
    FIdCentroDeCusto_Specified: boolean;
    FCodigo: string;
    FCodigo_Specified: boolean;
    FDescricao: string;
    FDescricao_Specified: boolean;
    FComentario: string;
    FComentario_Specified: boolean;
    FAtivo: Boolean;
    FAtivo_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetIdCentroDeCusto(Index: Integer): Integer;
    procedure SetIdCentroDeCusto(Index: Integer; const AInteger: Integer);
    function  IdCentroDeCusto_Specified(Index: Integer): boolean;
    function  GetCodigo(Index: Integer): string;
    procedure SetCodigo(Index: Integer; const Astring: string);
    function  Codigo_Specified(Index: Integer): boolean;
    function  GetDescricao(Index: Integer): string;
    procedure SetDescricao(Index: Integer; const Astring: string);
    function  Descricao_Specified(Index: Integer): boolean;
    function  GetComentario(Index: Integer): string;
    procedure SetComentario(Index: Integer; const Astring: string);
    function  Comentario_Specified(Index: Integer): boolean;
    function  GetAtivo(Index: Integer): Boolean;
    procedure SetAtivo(Index: Integer; const ABoolean: Boolean);
    function  Ativo_Specified(Index: Integer): boolean;
  published
    property Erro:            ErroResponse2  Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property IdCentroDeCusto: Integer        Index (IS_OPTN) read GetIdCentroDeCusto write SetIdCentroDeCusto stored IdCentroDeCusto_Specified;
    property Codigo:          string         Index (IS_OPTN or IS_NLBL) read GetCodigo write SetCodigo stored Codigo_Specified;
    property Descricao:       string         Index (IS_OPTN or IS_NLBL) read GetDescricao write SetDescricao stored Descricao_Specified;
    property Comentario:      string         Index (IS_OPTN or IS_NLBL) read GetComentario write SetComentario stored Comentario_Specified;
    property Ativo:           Boolean        Index (IS_OPTN) read GetAtivo write SetAtivo stored Ativo_Specified;
  end;



  // ************************************************************************ //
  // XML       : BuscaMotoristaRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  BuscaMotoristaRequest2 = class(TRemotable)
  private
    FQuantidadeItensPorPagina: Integer;
    FQuantidadeItensPorPagina_Specified: boolean;
    FNumeroPagina: Integer;
    FNumeroPagina_Specified: boolean;
    FCPFCNPJTransportador: string;
    FCPFCNPJTransportador_Specified: boolean;
    FIdMotorista: Integer;
    FIdMotorista_Specified: boolean;
    FCPF: string;
    FCPF_Specified: boolean;
    FAtivo: Boolean;
    FAtivo_Specified: boolean;
    function  GetQuantidadeItensPorPagina(Index: Integer): Integer;
    procedure SetQuantidadeItensPorPagina(Index: Integer; const AInteger: Integer);
    function  QuantidadeItensPorPagina_Specified(Index: Integer): boolean;
    function  GetNumeroPagina(Index: Integer): Integer;
    procedure SetNumeroPagina(Index: Integer; const AInteger: Integer);
    function  NumeroPagina_Specified(Index: Integer): boolean;
    function  GetCPFCNPJTransportador(Index: Integer): string;
    procedure SetCPFCNPJTransportador(Index: Integer; const Astring: string);
    function  CPFCNPJTransportador_Specified(Index: Integer): boolean;
    function  GetIdMotorista(Index: Integer): Integer;
    procedure SetIdMotorista(Index: Integer; const AInteger: Integer);
    function  IdMotorista_Specified(Index: Integer): boolean;
    function  GetCPF(Index: Integer): string;
    procedure SetCPF(Index: Integer; const Astring: string);
    function  CPF_Specified(Index: Integer): boolean;
    function  GetAtivo(Index: Integer): Boolean;
    procedure SetAtivo(Index: Integer; const ABoolean: Boolean);
    function  Ativo_Specified(Index: Integer): boolean;
  published
    property QuantidadeItensPorPagina: Integer  Index (IS_OPTN) read GetQuantidadeItensPorPagina write SetQuantidadeItensPorPagina stored QuantidadeItensPorPagina_Specified;
    property NumeroPagina:             Integer  Index (IS_OPTN) read GetNumeroPagina write SetNumeroPagina stored NumeroPagina_Specified;
    property CPFCNPJTransportador:     string   Index (IS_OPTN or IS_NLBL) read GetCPFCNPJTransportador write SetCPFCNPJTransportador stored CPFCNPJTransportador_Specified;
    property IdMotorista:              Integer  Index (IS_OPTN or IS_NLBL) read GetIdMotorista write SetIdMotorista stored IdMotorista_Specified;
    property CPF:                      string   Index (IS_OPTN or IS_NLBL) read GetCPF write SetCPF stored CPF_Specified;
    property Ativo:                    Boolean  Index (IS_OPTN or IS_NLBL) read GetAtivo write SetAtivo stored Ativo_Specified;
  end;



  // ************************************************************************ //
  // XML       : MotoristaResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  MotoristaResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FIdMotorista: Integer;
    FIdMotorista_Specified: boolean;
    FNome: string;
    FNome_Specified: boolean;
    FSobrenome: string;
    FSobrenome_Specified: boolean;
    FCPF: string;
    FCPF_Specified: boolean;
    FNumeroRG: string;
    FNumeroRG_Specified: boolean;
    FOrgaoEmissorRg: string;
    FOrgaoEmissorRg_Specified: boolean;
    FDataNascimento: TXSDateTime;
    FDataNascimento_Specified: boolean;
    FSexo: string;
    FSexo_Specified: boolean;
    FEstadoCivil: string;
    FEstadoCivil_Specified: boolean;
    FNomePai: string;
    FNomePai_Specified: boolean;
    FNomeMae: string;
    FNomeMae_Specified: boolean;
    FEmail: string;
    FEmail_Specified: boolean;
    FTelefone: string;
    FTelefone_Specified: boolean;
    FTelefoneCelular: string;
    FTelefoneCelular_Specified: boolean;
    FNacionalidade: string;
    FNacionalidade_Specified: boolean;
    FEndereco: string;
    FEndereco_Specified: boolean;
    FNumeroPorta: string;
    FNumeroPorta_Specified: boolean;
    FEnderecoComplemento: string;
    FEnderecoComplemento_Specified: boolean;
    FCEP: string;
    FCEP_Specified: boolean;
    FBairro: string;
    FBairro_Specified: boolean;
    FCidade: string;
    FCidade_Specified: boolean;
    FUF: string;
    FUF_Specified: boolean;
    FCodigoBanco: string;
    FCodigoBanco_Specified: boolean;
    FCodigoAgencia: string;
    FCodigoAgencia_Specified: boolean;
    FDigitoAgencia: string;
    FDigitoAgencia_Specified: boolean;
    FContaCorrente: string;
    FContaCorrente_Specified: boolean;
    FDigitoContaCorrente: string;
    FDigitoContaCorrente_Specified: boolean;
    FFlagContaPoupanca: Boolean;
    FFlagContaPoupanca_Specified: boolean;
    FVariacaoContaPoupanca: string;
    FVariacaoContaPoupanca_Specified: boolean;
    FAtivo: Boolean;
    FAtivo_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetIdMotorista(Index: Integer): Integer;
    procedure SetIdMotorista(Index: Integer; const AInteger: Integer);
    function  IdMotorista_Specified(Index: Integer): boolean;
    function  GetNome(Index: Integer): string;
    procedure SetNome(Index: Integer; const Astring: string);
    function  Nome_Specified(Index: Integer): boolean;
    function  GetSobrenome(Index: Integer): string;
    procedure SetSobrenome(Index: Integer; const Astring: string);
    function  Sobrenome_Specified(Index: Integer): boolean;
    function  GetCPF(Index: Integer): string;
    procedure SetCPF(Index: Integer; const Astring: string);
    function  CPF_Specified(Index: Integer): boolean;
    function  GetNumeroRG(Index: Integer): string;
    procedure SetNumeroRG(Index: Integer; const Astring: string);
    function  NumeroRG_Specified(Index: Integer): boolean;
    function  GetOrgaoEmissorRg(Index: Integer): string;
    procedure SetOrgaoEmissorRg(Index: Integer; const Astring: string);
    function  OrgaoEmissorRg_Specified(Index: Integer): boolean;
    function  GetDataNascimento(Index: Integer): TXSDateTime;
    procedure SetDataNascimento(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DataNascimento_Specified(Index: Integer): boolean;
    function  GetSexo(Index: Integer): string;
    procedure SetSexo(Index: Integer; const Astring: string);
    function  Sexo_Specified(Index: Integer): boolean;
    function  GetEstadoCivil(Index: Integer): string;
    procedure SetEstadoCivil(Index: Integer; const Astring: string);
    function  EstadoCivil_Specified(Index: Integer): boolean;
    function  GetNomePai(Index: Integer): string;
    procedure SetNomePai(Index: Integer; const Astring: string);
    function  NomePai_Specified(Index: Integer): boolean;
    function  GetNomeMae(Index: Integer): string;
    procedure SetNomeMae(Index: Integer; const Astring: string);
    function  NomeMae_Specified(Index: Integer): boolean;
    function  GetEmail(Index: Integer): string;
    procedure SetEmail(Index: Integer; const Astring: string);
    function  Email_Specified(Index: Integer): boolean;
    function  GetTelefone(Index: Integer): string;
    procedure SetTelefone(Index: Integer; const Astring: string);
    function  Telefone_Specified(Index: Integer): boolean;
    function  GetTelefoneCelular(Index: Integer): string;
    procedure SetTelefoneCelular(Index: Integer; const Astring: string);
    function  TelefoneCelular_Specified(Index: Integer): boolean;
    function  GetNacionalidade(Index: Integer): string;
    procedure SetNacionalidade(Index: Integer; const Astring: string);
    function  Nacionalidade_Specified(Index: Integer): boolean;
    function  GetEndereco(Index: Integer): string;
    procedure SetEndereco(Index: Integer; const Astring: string);
    function  Endereco_Specified(Index: Integer): boolean;
    function  GetNumeroPorta(Index: Integer): string;
    procedure SetNumeroPorta(Index: Integer; const Astring: string);
    function  NumeroPorta_Specified(Index: Integer): boolean;
    function  GetEnderecoComplemento(Index: Integer): string;
    procedure SetEnderecoComplemento(Index: Integer; const Astring: string);
    function  EnderecoComplemento_Specified(Index: Integer): boolean;
    function  GetCEP(Index: Integer): string;
    procedure SetCEP(Index: Integer; const Astring: string);
    function  CEP_Specified(Index: Integer): boolean;
    function  GetBairro(Index: Integer): string;
    procedure SetBairro(Index: Integer; const Astring: string);
    function  Bairro_Specified(Index: Integer): boolean;
    function  GetCidade(Index: Integer): string;
    procedure SetCidade(Index: Integer; const Astring: string);
    function  Cidade_Specified(Index: Integer): boolean;
    function  GetUF(Index: Integer): string;
    procedure SetUF(Index: Integer; const Astring: string);
    function  UF_Specified(Index: Integer): boolean;
    function  GetCodigoBanco(Index: Integer): string;
    procedure SetCodigoBanco(Index: Integer; const Astring: string);
    function  CodigoBanco_Specified(Index: Integer): boolean;
    function  GetCodigoAgencia(Index: Integer): string;
    procedure SetCodigoAgencia(Index: Integer; const Astring: string);
    function  CodigoAgencia_Specified(Index: Integer): boolean;
    function  GetDigitoAgencia(Index: Integer): string;
    procedure SetDigitoAgencia(Index: Integer; const Astring: string);
    function  DigitoAgencia_Specified(Index: Integer): boolean;
    function  GetContaCorrente(Index: Integer): string;
    procedure SetContaCorrente(Index: Integer; const Astring: string);
    function  ContaCorrente_Specified(Index: Integer): boolean;
    function  GetDigitoContaCorrente(Index: Integer): string;
    procedure SetDigitoContaCorrente(Index: Integer; const Astring: string);
    function  DigitoContaCorrente_Specified(Index: Integer): boolean;
    function  GetFlagContaPoupanca(Index: Integer): Boolean;
    procedure SetFlagContaPoupanca(Index: Integer; const ABoolean: Boolean);
    function  FlagContaPoupanca_Specified(Index: Integer): boolean;
    function  GetVariacaoContaPoupanca(Index: Integer): string;
    procedure SetVariacaoContaPoupanca(Index: Integer; const Astring: string);
    function  VariacaoContaPoupanca_Specified(Index: Integer): boolean;
    function  GetAtivo(Index: Integer): Boolean;
    procedure SetAtivo(Index: Integer; const ABoolean: Boolean);
    function  Ativo_Specified(Index: Integer): boolean;
  published
    property Erro:                  ErroResponse2  Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property IdMotorista:           Integer        Index (IS_OPTN) read GetIdMotorista write SetIdMotorista stored IdMotorista_Specified;
    property Nome:                  string         Index (IS_OPTN or IS_NLBL) read GetNome write SetNome stored Nome_Specified;
    property Sobrenome:             string         Index (IS_OPTN or IS_NLBL) read GetSobrenome write SetSobrenome stored Sobrenome_Specified;
    property CPF:                   string         Index (IS_OPTN or IS_NLBL) read GetCPF write SetCPF stored CPF_Specified;
    property NumeroRG:              string         Index (IS_OPTN or IS_NLBL) read GetNumeroRG write SetNumeroRG stored NumeroRG_Specified;
    property OrgaoEmissorRg:        string         Index (IS_OPTN or IS_NLBL) read GetOrgaoEmissorRg write SetOrgaoEmissorRg stored OrgaoEmissorRg_Specified;
    property DataNascimento:        TXSDateTime    Index (IS_OPTN) read GetDataNascimento write SetDataNascimento stored DataNascimento_Specified;
    property Sexo:                  string         Index (IS_OPTN or IS_NLBL) read GetSexo write SetSexo stored Sexo_Specified;
    property EstadoCivil:           string         Index (IS_OPTN or IS_NLBL) read GetEstadoCivil write SetEstadoCivil stored EstadoCivil_Specified;
    property NomePai:               string         Index (IS_OPTN or IS_NLBL) read GetNomePai write SetNomePai stored NomePai_Specified;
    property NomeMae:               string         Index (IS_OPTN or IS_NLBL) read GetNomeMae write SetNomeMae stored NomeMae_Specified;
    property Email:                 string         Index (IS_OPTN or IS_NLBL) read GetEmail write SetEmail stored Email_Specified;
    property Telefone:              string         Index (IS_OPTN or IS_NLBL) read GetTelefone write SetTelefone stored Telefone_Specified;
    property TelefoneCelular:       string         Index (IS_OPTN or IS_NLBL) read GetTelefoneCelular write SetTelefoneCelular stored TelefoneCelular_Specified;
    property Nacionalidade:         string         Index (IS_OPTN or IS_NLBL) read GetNacionalidade write SetNacionalidade stored Nacionalidade_Specified;
    property Endereco:              string         Index (IS_OPTN or IS_NLBL) read GetEndereco write SetEndereco stored Endereco_Specified;
    property NumeroPorta:           string         Index (IS_OPTN or IS_NLBL) read GetNumeroPorta write SetNumeroPorta stored NumeroPorta_Specified;
    property EnderecoComplemento:   string         Index (IS_OPTN or IS_NLBL) read GetEnderecoComplemento write SetEnderecoComplemento stored EnderecoComplemento_Specified;
    property CEP:                   string         Index (IS_OPTN or IS_NLBL) read GetCEP write SetCEP stored CEP_Specified;
    property Bairro:                string         Index (IS_OPTN or IS_NLBL) read GetBairro write SetBairro stored Bairro_Specified;
    property Cidade:                string         Index (IS_OPTN or IS_NLBL) read GetCidade write SetCidade stored Cidade_Specified;
    property UF:                    string         Index (IS_OPTN or IS_NLBL) read GetUF write SetUF stored UF_Specified;
    property CodigoBanco:           string         Index (IS_OPTN or IS_NLBL) read GetCodigoBanco write SetCodigoBanco stored CodigoBanco_Specified;
    property CodigoAgencia:         string         Index (IS_OPTN or IS_NLBL) read GetCodigoAgencia write SetCodigoAgencia stored CodigoAgencia_Specified;
    property DigitoAgencia:         string         Index (IS_OPTN or IS_NLBL) read GetDigitoAgencia write SetDigitoAgencia stored DigitoAgencia_Specified;
    property ContaCorrente:         string         Index (IS_OPTN or IS_NLBL) read GetContaCorrente write SetContaCorrente stored ContaCorrente_Specified;
    property DigitoContaCorrente:   string         Index (IS_OPTN or IS_NLBL) read GetDigitoContaCorrente write SetDigitoContaCorrente stored DigitoContaCorrente_Specified;
    property FlagContaPoupanca:     Boolean        Index (IS_OPTN) read GetFlagContaPoupanca write SetFlagContaPoupanca stored FlagContaPoupanca_Specified;
    property VariacaoContaPoupanca: string         Index (IS_OPTN or IS_NLBL) read GetVariacaoContaPoupanca write SetVariacaoContaPoupanca stored VariacaoContaPoupanca_Specified;
    property Ativo:                 Boolean        Index (IS_OPTN) read GetAtivo write SetAtivo stored Ativo_Specified;
  end;



  // ************************************************************************ //
  // XML       : MotoristaRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  MotoristaRequest2 = class(TRemotable)
  private
    FInstrucao: Integer;
    FInstrucao_Specified: boolean;
    FCPFCNPJTransportador: string;
    FCPFCNPJTransportador_Specified: boolean;
    FIdMotorista: Integer;
    FIdMotorista_Specified: boolean;
    FNome: string;
    FNome_Specified: boolean;
    FSobrenome: string;
    FSobrenome_Specified: boolean;
    FCPF: string;
    FCPF_Specified: boolean;
    FNumeroRG: string;
    FNumeroRG_Specified: boolean;
    FOrgaoEmissorRg: string;
    FOrgaoEmissorRg_Specified: boolean;
    FDataNascimento: TXSDateTime;
    FDataNascimento_Specified: boolean;
    FSexo: string;
    FSexo_Specified: boolean;
    FEstadoCivil: string;
    FEstadoCivil_Specified: boolean;
    FNomePai: string;
    FNomePai_Specified: boolean;
    FNomeMae: string;
    FNomeMae_Specified: boolean;
    FEmail: string;
    FEmail_Specified: boolean;
    FTelefone: string;
    FTelefone_Specified: boolean;
    FTelefoneCelular: string;
    FTelefoneCelular_Specified: boolean;
    FNacionalidade: string;
    FNacionalidade_Specified: boolean;
    FEndereco: string;
    FEndereco_Specified: boolean;
    FNumeroEndereco: string;
    FNumeroEndereco_Specified: boolean;
    FEnderecoComplemento: string;
    FEnderecoComplemento_Specified: boolean;
    FCEP: string;
    FCEP_Specified: boolean;
    FBairro: string;
    FBairro_Specified: boolean;
    FCodigoIBGEMunicipio: Integer;
    FCodigoIBGEMunicipio_Specified: boolean;
    FCodigoBanco: string;
    FCodigoBanco_Specified: boolean;
    FCodigoAgencia: string;
    FCodigoAgencia_Specified: boolean;
    FDigitoAgencia: string;
    FDigitoAgencia_Specified: boolean;
    FContaCorrente: string;
    FContaCorrente_Specified: boolean;
    FDigitoContaCorrente: string;
    FDigitoContaCorrente_Specified: boolean;
    FFlagContaPoupanca: Boolean;
    FFlagContaPoupanca_Specified: boolean;
    FVariacaoContaPoupanca: string;
    FVariacaoContaPoupanca_Specified: boolean;
    FAtivo: Boolean;
    FAtivo_Specified: boolean;
    function  GetInstrucao(Index: Integer): Integer;
    procedure SetInstrucao(Index: Integer; const AInteger: Integer);
    function  Instrucao_Specified(Index: Integer): boolean;
    function  GetCPFCNPJTransportador(Index: Integer): string;
    procedure SetCPFCNPJTransportador(Index: Integer; const Astring: string);
    function  CPFCNPJTransportador_Specified(Index: Integer): boolean;
    function  GetIdMotorista(Index: Integer): Integer;
    procedure SetIdMotorista(Index: Integer; const AInteger: Integer);
    function  IdMotorista_Specified(Index: Integer): boolean;
    function  GetNome(Index: Integer): string;
    procedure SetNome(Index: Integer; const Astring: string);
    function  Nome_Specified(Index: Integer): boolean;
    function  GetSobrenome(Index: Integer): string;
    procedure SetSobrenome(Index: Integer; const Astring: string);
    function  Sobrenome_Specified(Index: Integer): boolean;
    function  GetCPF(Index: Integer): string;
    procedure SetCPF(Index: Integer; const Astring: string);
    function  CPF_Specified(Index: Integer): boolean;
    function  GetNumeroRG(Index: Integer): string;
    procedure SetNumeroRG(Index: Integer; const Astring: string);
    function  NumeroRG_Specified(Index: Integer): boolean;
    function  GetOrgaoEmissorRg(Index: Integer): string;
    procedure SetOrgaoEmissorRg(Index: Integer; const Astring: string);
    function  OrgaoEmissorRg_Specified(Index: Integer): boolean;
    function  GetDataNascimento(Index: Integer): TXSDateTime;
    procedure SetDataNascimento(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DataNascimento_Specified(Index: Integer): boolean;
    function  GetSexo(Index: Integer): string;
    procedure SetSexo(Index: Integer; const Astring: string);
    function  Sexo_Specified(Index: Integer): boolean;
    function  GetEstadoCivil(Index: Integer): string;
    procedure SetEstadoCivil(Index: Integer; const Astring: string);
    function  EstadoCivil_Specified(Index: Integer): boolean;
    function  GetNomePai(Index: Integer): string;
    procedure SetNomePai(Index: Integer; const Astring: string);
    function  NomePai_Specified(Index: Integer): boolean;
    function  GetNomeMae(Index: Integer): string;
    procedure SetNomeMae(Index: Integer; const Astring: string);
    function  NomeMae_Specified(Index: Integer): boolean;
    function  GetEmail(Index: Integer): string;
    procedure SetEmail(Index: Integer; const Astring: string);
    function  Email_Specified(Index: Integer): boolean;
    function  GetTelefone(Index: Integer): string;
    procedure SetTelefone(Index: Integer; const Astring: string);
    function  Telefone_Specified(Index: Integer): boolean;
    function  GetTelefoneCelular(Index: Integer): string;
    procedure SetTelefoneCelular(Index: Integer; const Astring: string);
    function  TelefoneCelular_Specified(Index: Integer): boolean;
    function  GetNacionalidade(Index: Integer): string;
    procedure SetNacionalidade(Index: Integer; const Astring: string);
    function  Nacionalidade_Specified(Index: Integer): boolean;
    function  GetEndereco(Index: Integer): string;
    procedure SetEndereco(Index: Integer; const Astring: string);
    function  Endereco_Specified(Index: Integer): boolean;
    function  GetNumeroEndereco(Index: Integer): string;
    procedure SetNumeroEndereco(Index: Integer; const Astring: string);
    function  NumeroEndereco_Specified(Index: Integer): boolean;
    function  GetEnderecoComplemento(Index: Integer): string;
    procedure SetEnderecoComplemento(Index: Integer; const Astring: string);
    function  EnderecoComplemento_Specified(Index: Integer): boolean;
    function  GetCEP(Index: Integer): string;
    procedure SetCEP(Index: Integer; const Astring: string);
    function  CEP_Specified(Index: Integer): boolean;
    function  GetBairro(Index: Integer): string;
    procedure SetBairro(Index: Integer; const Astring: string);
    function  Bairro_Specified(Index: Integer): boolean;
    function  GetCodigoIBGEMunicipio(Index: Integer): Integer;
    procedure SetCodigoIBGEMunicipio(Index: Integer; const AInteger: Integer);
    function  CodigoIBGEMunicipio_Specified(Index: Integer): boolean;
    function  GetCodigoBanco(Index: Integer): string;
    procedure SetCodigoBanco(Index: Integer; const Astring: string);
    function  CodigoBanco_Specified(Index: Integer): boolean;
    function  GetCodigoAgencia(Index: Integer): string;
    procedure SetCodigoAgencia(Index: Integer; const Astring: string);
    function  CodigoAgencia_Specified(Index: Integer): boolean;
    function  GetDigitoAgencia(Index: Integer): string;
    procedure SetDigitoAgencia(Index: Integer; const Astring: string);
    function  DigitoAgencia_Specified(Index: Integer): boolean;
    function  GetContaCorrente(Index: Integer): string;
    procedure SetContaCorrente(Index: Integer; const Astring: string);
    function  ContaCorrente_Specified(Index: Integer): boolean;
    function  GetDigitoContaCorrente(Index: Integer): string;
    procedure SetDigitoContaCorrente(Index: Integer; const Astring: string);
    function  DigitoContaCorrente_Specified(Index: Integer): boolean;
    function  GetFlagContaPoupanca(Index: Integer): Boolean;
    procedure SetFlagContaPoupanca(Index: Integer; const ABoolean: Boolean);
    function  FlagContaPoupanca_Specified(Index: Integer): boolean;
    function  GetVariacaoContaPoupanca(Index: Integer): string;
    procedure SetVariacaoContaPoupanca(Index: Integer; const Astring: string);
    function  VariacaoContaPoupanca_Specified(Index: Integer): boolean;
    function  GetAtivo(Index: Integer): Boolean;
    procedure SetAtivo(Index: Integer; const ABoolean: Boolean);
    function  Ativo_Specified(Index: Integer): boolean;
  published
    property Instrucao:             Integer      Index (IS_OPTN) read GetInstrucao write SetInstrucao stored Instrucao_Specified;
    property CPFCNPJTransportador:  string       Index (IS_OPTN or IS_NLBL) read GetCPFCNPJTransportador write SetCPFCNPJTransportador stored CPFCNPJTransportador_Specified;
    property IdMotorista:           Integer      Index (IS_OPTN or IS_NLBL) read GetIdMotorista write SetIdMotorista stored IdMotorista_Specified;
    property Nome:                  string       Index (IS_OPTN or IS_NLBL) read GetNome write SetNome stored Nome_Specified;
    property Sobrenome:             string       Index (IS_OPTN or IS_NLBL) read GetSobrenome write SetSobrenome stored Sobrenome_Specified;
    property CPF:                   string       Index (IS_OPTN or IS_NLBL) read GetCPF write SetCPF stored CPF_Specified;
    property NumeroRG:              string       Index (IS_OPTN or IS_NLBL) read GetNumeroRG write SetNumeroRG stored NumeroRG_Specified;
    property OrgaoEmissorRg:        string       Index (IS_OPTN or IS_NLBL) read GetOrgaoEmissorRg write SetOrgaoEmissorRg stored OrgaoEmissorRg_Specified;
    property DataNascimento:        TXSDateTime  Index (IS_OPTN or IS_NLBL) read GetDataNascimento write SetDataNascimento stored DataNascimento_Specified;
    property Sexo:                  string       Index (IS_OPTN or IS_NLBL) read GetSexo write SetSexo stored Sexo_Specified;
    property EstadoCivil:           string       Index (IS_OPTN or IS_NLBL) read GetEstadoCivil write SetEstadoCivil stored EstadoCivil_Specified;
    property NomePai:               string       Index (IS_OPTN or IS_NLBL) read GetNomePai write SetNomePai stored NomePai_Specified;
    property NomeMae:               string       Index (IS_OPTN or IS_NLBL) read GetNomeMae write SetNomeMae stored NomeMae_Specified;
    property Email:                 string       Index (IS_OPTN or IS_NLBL) read GetEmail write SetEmail stored Email_Specified;
    property Telefone:              string       Index (IS_OPTN or IS_NLBL) read GetTelefone write SetTelefone stored Telefone_Specified;
    property TelefoneCelular:       string       Index (IS_OPTN or IS_NLBL) read GetTelefoneCelular write SetTelefoneCelular stored TelefoneCelular_Specified;
    property Nacionalidade:         string       Index (IS_OPTN or IS_NLBL) read GetNacionalidade write SetNacionalidade stored Nacionalidade_Specified;
    property Endereco:              string       Index (IS_OPTN or IS_NLBL) read GetEndereco write SetEndereco stored Endereco_Specified;
    property NumeroEndereco:        string       Index (IS_OPTN or IS_NLBL) read GetNumeroEndereco write SetNumeroEndereco stored NumeroEndereco_Specified;
    property EnderecoComplemento:   string       Index (IS_OPTN or IS_NLBL) read GetEnderecoComplemento write SetEnderecoComplemento stored EnderecoComplemento_Specified;
    property CEP:                   string       Index (IS_OPTN or IS_NLBL) read GetCEP write SetCEP stored CEP_Specified;
    property Bairro:                string       Index (IS_OPTN or IS_NLBL) read GetBairro write SetBairro stored Bairro_Specified;
    property CodigoIBGEMunicipio:   Integer      Index (IS_OPTN or IS_NLBL) read GetCodigoIBGEMunicipio write SetCodigoIBGEMunicipio stored CodigoIBGEMunicipio_Specified;
    property CodigoBanco:           string       Index (IS_OPTN or IS_NLBL) read GetCodigoBanco write SetCodigoBanco stored CodigoBanco_Specified;
    property CodigoAgencia:         string       Index (IS_OPTN or IS_NLBL) read GetCodigoAgencia write SetCodigoAgencia stored CodigoAgencia_Specified;
    property DigitoAgencia:         string       Index (IS_OPTN or IS_NLBL) read GetDigitoAgencia write SetDigitoAgencia stored DigitoAgencia_Specified;
    property ContaCorrente:         string       Index (IS_OPTN or IS_NLBL) read GetContaCorrente write SetContaCorrente stored ContaCorrente_Specified;
    property DigitoContaCorrente:   string       Index (IS_OPTN or IS_NLBL) read GetDigitoContaCorrente write SetDigitoContaCorrente stored DigitoContaCorrente_Specified;
    property FlagContaPoupanca:     Boolean      Index (IS_OPTN or IS_NLBL) read GetFlagContaPoupanca write SetFlagContaPoupanca stored FlagContaPoupanca_Specified;
    property VariacaoContaPoupanca: string       Index (IS_OPTN or IS_NLBL) read GetVariacaoContaPoupanca write SetVariacaoContaPoupanca stored VariacaoContaPoupanca_Specified;
    property Ativo:                 Boolean      Index (IS_OPTN or IS_NLBL) read GetAtivo write SetAtivo stored Ativo_Specified;
  end;



  // ************************************************************************ //
  // XML       : OperacaoTransporteParcelasResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  OperacaoTransporteParcelasResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FIdOperacaoTransporteParcela: Integer;
    FIdOperacaoTransporteParcela_Specified: boolean;
    FCIOTCompleto: string;
    FCIOTCompleto_Specified: boolean;
    FValor: TXSDecimal;
    FValor_Specified: boolean;
    FDataVencimento: TXSDateTime;
    FDataVencimento_Specified: boolean;
    FDataPagamento: TXSDateTime;
    FDataPagamento_Specified: boolean;
    FNumeroParcela: Integer;
    FNumeroParcela_Specified: boolean;
    FQuantidadeParcelas: Integer;
    FQuantidadeParcelas_Specified: boolean;
    FDataHoraRegistro: TXSDateTime;
    FDataHoraRegistro_Specified: boolean;
    FDescricaoParcela: string;
    FDescricaoParcela_Specified: boolean;
    FCancelada: Boolean;
    FCancelada_Specified: boolean;
    FFormaPagamento: Integer;
    FFormaPagamento_Specified: boolean;
    FCartaoPagamento: string;
    FCartaoPagamento_Specified: boolean;
    FCodigoBanco: string;
    FCodigoBanco_Specified: boolean;
    FAgenciaDeposito: string;
    FAgenciaDeposito_Specified: boolean;
    FContaDeposito: string;
    FContaDeposito_Specified: boolean;
    FDigitoContaDeposito: string;
    FDigitoContaDeposito_Specified: boolean;
    FStatusParcela: Integer;
    FStatusParcela_Specified: boolean;
    FTipoParcelaOperacaoTransporte: Integer;
    FTipoParcelaOperacaoTransporte_Specified: boolean;
    FFlagContaPoupanca: Boolean;
    FFlagContaPoupanca_Specified: boolean;
    FVariacaoContaPoupanca: string;
    FVariacaoContaPoupanca_Specified: boolean;
    FItemFinanceiroParcela: string;
    FItemFinanceiroParcela_Specified: boolean;
    FObservacao: string;
    FObservacao_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetIdOperacaoTransporteParcela(Index: Integer): Integer;
    procedure SetIdOperacaoTransporteParcela(Index: Integer; const AInteger: Integer);
    function  IdOperacaoTransporteParcela_Specified(Index: Integer): boolean;
    function  GetCIOTCompleto(Index: Integer): string;
    procedure SetCIOTCompleto(Index: Integer; const Astring: string);
    function  CIOTCompleto_Specified(Index: Integer): boolean;
    function  GetValor(Index: Integer): TXSDecimal;
    procedure SetValor(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  Valor_Specified(Index: Integer): boolean;
    function  GetDataVencimento(Index: Integer): TXSDateTime;
    procedure SetDataVencimento(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DataVencimento_Specified(Index: Integer): boolean;
    function  GetDataPagamento(Index: Integer): TXSDateTime;
    procedure SetDataPagamento(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DataPagamento_Specified(Index: Integer): boolean;
    function  GetNumeroParcela(Index: Integer): Integer;
    procedure SetNumeroParcela(Index: Integer; const AInteger: Integer);
    function  NumeroParcela_Specified(Index: Integer): boolean;
    function  GetQuantidadeParcelas(Index: Integer): Integer;
    procedure SetQuantidadeParcelas(Index: Integer; const AInteger: Integer);
    function  QuantidadeParcelas_Specified(Index: Integer): boolean;
    function  GetDataHoraRegistro(Index: Integer): TXSDateTime;
    procedure SetDataHoraRegistro(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DataHoraRegistro_Specified(Index: Integer): boolean;
    function  GetDescricaoParcela(Index: Integer): string;
    procedure SetDescricaoParcela(Index: Integer; const Astring: string);
    function  DescricaoParcela_Specified(Index: Integer): boolean;
    function  GetCancelada(Index: Integer): Boolean;
    procedure SetCancelada(Index: Integer; const ABoolean: Boolean);
    function  Cancelada_Specified(Index: Integer): boolean;
    function  GetFormaPagamento(Index: Integer): Integer;
    procedure SetFormaPagamento(Index: Integer; const AInteger: Integer);
    function  FormaPagamento_Specified(Index: Integer): boolean;
    function  GetCartaoPagamento(Index: Integer): string;
    procedure SetCartaoPagamento(Index: Integer; const Astring: string);
    function  CartaoPagamento_Specified(Index: Integer): boolean;
    function  GetCodigoBanco(Index: Integer): string;
    procedure SetCodigoBanco(Index: Integer; const Astring: string);
    function  CodigoBanco_Specified(Index: Integer): boolean;
    function  GetAgenciaDeposito(Index: Integer): string;
    procedure SetAgenciaDeposito(Index: Integer; const Astring: string);
    function  AgenciaDeposito_Specified(Index: Integer): boolean;
    function  GetContaDeposito(Index: Integer): string;
    procedure SetContaDeposito(Index: Integer; const Astring: string);
    function  ContaDeposito_Specified(Index: Integer): boolean;
    function  GetDigitoContaDeposito(Index: Integer): string;
    procedure SetDigitoContaDeposito(Index: Integer; const Astring: string);
    function  DigitoContaDeposito_Specified(Index: Integer): boolean;
    function  GetStatusParcela(Index: Integer): Integer;
    procedure SetStatusParcela(Index: Integer; const AInteger: Integer);
    function  StatusParcela_Specified(Index: Integer): boolean;
    function  GetTipoParcelaOperacaoTransporte(Index: Integer): Integer;
    procedure SetTipoParcelaOperacaoTransporte(Index: Integer; const AInteger: Integer);
    function  TipoParcelaOperacaoTransporte_Specified(Index: Integer): boolean;
    function  GetFlagContaPoupanca(Index: Integer): Boolean;
    procedure SetFlagContaPoupanca(Index: Integer; const ABoolean: Boolean);
    function  FlagContaPoupanca_Specified(Index: Integer): boolean;
    function  GetVariacaoContaPoupanca(Index: Integer): string;
    procedure SetVariacaoContaPoupanca(Index: Integer; const Astring: string);
    function  VariacaoContaPoupanca_Specified(Index: Integer): boolean;
    function  GetItemFinanceiroParcela(Index: Integer): string;
    procedure SetItemFinanceiroParcela(Index: Integer; const Astring: string);
    function  ItemFinanceiroParcela_Specified(Index: Integer): boolean;
    function  GetObservacao(Index: Integer): string;
    procedure SetObservacao(Index: Integer; const Astring: string);
    function  Observacao_Specified(Index: Integer): boolean;
  published
    property Erro:                          ErroResponse2  Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property IdOperacaoTransporteParcela:   Integer        Index (IS_OPTN) read GetIdOperacaoTransporteParcela write SetIdOperacaoTransporteParcela stored IdOperacaoTransporteParcela_Specified;
    property CIOTCompleto:                  string         Index (IS_OPTN or IS_NLBL) read GetCIOTCompleto write SetCIOTCompleto stored CIOTCompleto_Specified;
    property Valor:                         TXSDecimal     Index (IS_OPTN) read GetValor write SetValor stored Valor_Specified;
    property DataVencimento:                TXSDateTime    Index (IS_OPTN) read GetDataVencimento write SetDataVencimento stored DataVencimento_Specified;
    property DataPagamento:                 TXSDateTime    Index (IS_OPTN or IS_NLBL) read GetDataPagamento write SetDataPagamento stored DataPagamento_Specified;
    property NumeroParcela:                 Integer        Index (IS_OPTN) read GetNumeroParcela write SetNumeroParcela stored NumeroParcela_Specified;
    property QuantidadeParcelas:            Integer        Index (IS_OPTN) read GetQuantidadeParcelas write SetQuantidadeParcelas stored QuantidadeParcelas_Specified;
    property DataHoraRegistro:              TXSDateTime    Index (IS_OPTN) read GetDataHoraRegistro write SetDataHoraRegistro stored DataHoraRegistro_Specified;
    property DescricaoParcela:              string         Index (IS_OPTN or IS_NLBL) read GetDescricaoParcela write SetDescricaoParcela stored DescricaoParcela_Specified;
    property Cancelada:                     Boolean        Index (IS_OPTN) read GetCancelada write SetCancelada stored Cancelada_Specified;
    property FormaPagamento:                Integer        Index (IS_OPTN) read GetFormaPagamento write SetFormaPagamento stored FormaPagamento_Specified;
    property CartaoPagamento:               string         Index (IS_OPTN or IS_NLBL) read GetCartaoPagamento write SetCartaoPagamento stored CartaoPagamento_Specified;
    property CodigoBanco:                   string         Index (IS_OPTN or IS_NLBL) read GetCodigoBanco write SetCodigoBanco stored CodigoBanco_Specified;
    property AgenciaDeposito:               string         Index (IS_OPTN or IS_NLBL) read GetAgenciaDeposito write SetAgenciaDeposito stored AgenciaDeposito_Specified;
    property ContaDeposito:                 string         Index (IS_OPTN or IS_NLBL) read GetContaDeposito write SetContaDeposito stored ContaDeposito_Specified;
    property DigitoContaDeposito:           string         Index (IS_OPTN or IS_NLBL) read GetDigitoContaDeposito write SetDigitoContaDeposito stored DigitoContaDeposito_Specified;
    property StatusParcela:                 Integer        Index (IS_OPTN) read GetStatusParcela write SetStatusParcela stored StatusParcela_Specified;
    property TipoParcelaOperacaoTransporte: Integer        Index (IS_OPTN) read GetTipoParcelaOperacaoTransporte write SetTipoParcelaOperacaoTransporte stored TipoParcelaOperacaoTransporte_Specified;
    property FlagContaPoupanca:             Boolean        Index (IS_OPTN or IS_NLBL) read GetFlagContaPoupanca write SetFlagContaPoupanca stored FlagContaPoupanca_Specified;
    property VariacaoContaPoupanca:         string         Index (IS_OPTN or IS_NLBL) read GetVariacaoContaPoupanca write SetVariacaoContaPoupanca stored VariacaoContaPoupanca_Specified;
    property ItemFinanceiroParcela:         string         Index (IS_OPTN or IS_NLBL) read GetItemFinanceiroParcela write SetItemFinanceiroParcela stored ItemFinanceiroParcela_Specified;
    property Observacao:                    string         Index (IS_OPTN or IS_NLBL) read GetObservacao write SetObservacao stored Observacao_Specified;
  end;



  // ************************************************************************ //
  // XML       : CancelaCompraValePedagioRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  CancelaCompraValePedagioRequest2 = class(TRemotable)
  private
    FIdCompraValePedagio: Integer;
    FIdCompraValePedagio_Specified: boolean;
    FViaFacil: Boolean;
    FViaFacil_Specified: boolean;
    function  GetIdCompraValePedagio(Index: Integer): Integer;
    procedure SetIdCompraValePedagio(Index: Integer; const AInteger: Integer);
    function  IdCompraValePedagio_Specified(Index: Integer): boolean;
    function  GetViaFacil(Index: Integer): Boolean;
    procedure SetViaFacil(Index: Integer; const ABoolean: Boolean);
    function  ViaFacil_Specified(Index: Integer): boolean;
  published
    property IdCompraValePedagio: Integer  Index (IS_OPTN) read GetIdCompraValePedagio write SetIdCompraValePedagio stored IdCompraValePedagio_Specified;
    property ViaFacil:            Boolean  Index (IS_OPTN or IS_NLBL) read GetViaFacil write SetViaFacil stored ViaFacil_Specified;
  end;



  // ************************************************************************ //
  // XML       : CancelaCompraValePedagioRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  CancelaCompraValePedagioRequest = class(CancelaCompraValePedagioRequest2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : CompraValePedagioRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  CompraValePedagioRequest2 = class(TRemotable)
  private
    FIdModoCompraValePedagio: Integer;
    FIdModoCompraValePedagio_Specified: boolean;
    FIdRotaModelo: Integer;
    FIdRotaModelo_Specified: boolean;
    FCodigoCategoriaVeiculo: Integer;
    FCodigoCategoriaVeiculo_Specified: boolean;
    FMunicipioOrigemCodigoIBGE: Integer;
    FMunicipioOrigemCodigoIBGE_Specified: boolean;
    FMunicipioDestinoCodigoIBGE: Integer;
    FMunicipioDestinoCodigoIBGE_Specified: boolean;
    FPlaca: string;
    FPlaca_Specified: boolean;
    FNumeroCartao: string;
    FNumeroCartao_Specified: boolean;
    FMotoristaNome: string;
    FMotoristaNome_Specified: boolean;
    FMotoristaCPF: string;
    FMotoristaCPF_Specified: boolean;
    FMotoristaRNTRC: string;
    FMotoristaRNTRC_Specified: boolean;
    FIdIntegrador: string;
    FIdIntegrador_Specified: boolean;
    FCodigoCentroDeCusto: Integer;
    FCodigoCentroDeCusto_Specified: boolean;
    FNumeroDocumentoEmbarque: string;
    FNumeroDocumentoEmbarque_Specified: boolean;
    FItemFinanceiro: string;
    FItemFinanceiro_Specified: boolean;
    FInicioVigencia: TXSDateTime;
    FInicioVigencia_Specified: boolean;
    FFimVigencia: TXSDateTime;
    FFimVigencia_Specified: boolean;
    FValorPrevioCalculado: TXSDecimal;
    FValorPrevioCalculado_Specified: boolean;
    FCompraSimples: Boolean;
    FCompraSimples_Specified: boolean;
    FIdOperacaoTransporte: Integer;
    FIdOperacaoTransporte_Specified: boolean;
    FDadosComplementares: DadosComplementaresCompraValePedagio2;
    FDadosComplementares_Specified: boolean;
    FCargaDiferencial: Boolean;
    FCargaDiferencial_Specified: boolean;
    function  GetIdModoCompraValePedagio(Index: Integer): Integer;
    procedure SetIdModoCompraValePedagio(Index: Integer; const AInteger: Integer);
    function  IdModoCompraValePedagio_Specified(Index: Integer): boolean;
    function  GetIdRotaModelo(Index: Integer): Integer;
    procedure SetIdRotaModelo(Index: Integer; const AInteger: Integer);
    function  IdRotaModelo_Specified(Index: Integer): boolean;
    function  GetCodigoCategoriaVeiculo(Index: Integer): Integer;
    procedure SetCodigoCategoriaVeiculo(Index: Integer; const AInteger: Integer);
    function  CodigoCategoriaVeiculo_Specified(Index: Integer): boolean;
    function  GetMunicipioOrigemCodigoIBGE(Index: Integer): Integer;
    procedure SetMunicipioOrigemCodigoIBGE(Index: Integer; const AInteger: Integer);
    function  MunicipioOrigemCodigoIBGE_Specified(Index: Integer): boolean;
    function  GetMunicipioDestinoCodigoIBGE(Index: Integer): Integer;
    procedure SetMunicipioDestinoCodigoIBGE(Index: Integer; const AInteger: Integer);
    function  MunicipioDestinoCodigoIBGE_Specified(Index: Integer): boolean;
    function  GetPlaca(Index: Integer): string;
    procedure SetPlaca(Index: Integer; const Astring: string);
    function  Placa_Specified(Index: Integer): boolean;
    function  GetNumeroCartao(Index: Integer): string;
    procedure SetNumeroCartao(Index: Integer; const Astring: string);
    function  NumeroCartao_Specified(Index: Integer): boolean;
    function  GetMotoristaNome(Index: Integer): string;
    procedure SetMotoristaNome(Index: Integer; const Astring: string);
    function  MotoristaNome_Specified(Index: Integer): boolean;
    function  GetMotoristaCPF(Index: Integer): string;
    procedure SetMotoristaCPF(Index: Integer; const Astring: string);
    function  MotoristaCPF_Specified(Index: Integer): boolean;
    function  GetMotoristaRNTRC(Index: Integer): string;
    procedure SetMotoristaRNTRC(Index: Integer; const Astring: string);
    function  MotoristaRNTRC_Specified(Index: Integer): boolean;
    function  GetIdIntegrador(Index: Integer): string;
    procedure SetIdIntegrador(Index: Integer; const Astring: string);
    function  IdIntegrador_Specified(Index: Integer): boolean;
    function  GetCodigoCentroDeCusto(Index: Integer): Integer;
    procedure SetCodigoCentroDeCusto(Index: Integer; const AInteger: Integer);
    function  CodigoCentroDeCusto_Specified(Index: Integer): boolean;
    function  GetNumeroDocumentoEmbarque(Index: Integer): string;
    procedure SetNumeroDocumentoEmbarque(Index: Integer; const Astring: string);
    function  NumeroDocumentoEmbarque_Specified(Index: Integer): boolean;
    function  GetItemFinanceiro(Index: Integer): string;
    procedure SetItemFinanceiro(Index: Integer; const Astring: string);
    function  ItemFinanceiro_Specified(Index: Integer): boolean;
    function  GetInicioVigencia(Index: Integer): TXSDateTime;
    procedure SetInicioVigencia(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  InicioVigencia_Specified(Index: Integer): boolean;
    function  GetFimVigencia(Index: Integer): TXSDateTime;
    procedure SetFimVigencia(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  FimVigencia_Specified(Index: Integer): boolean;
    function  GetValorPrevioCalculado(Index: Integer): TXSDecimal;
    procedure SetValorPrevioCalculado(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorPrevioCalculado_Specified(Index: Integer): boolean;
    function  GetCompraSimples(Index: Integer): Boolean;
    procedure SetCompraSimples(Index: Integer; const ABoolean: Boolean);
    function  CompraSimples_Specified(Index: Integer): boolean;
    function  GetIdOperacaoTransporte(Index: Integer): Integer;
    procedure SetIdOperacaoTransporte(Index: Integer; const AInteger: Integer);
    function  IdOperacaoTransporte_Specified(Index: Integer): boolean;
    function  GetDadosComplementares(Index: Integer): DadosComplementaresCompraValePedagio2;
    procedure SetDadosComplementares(Index: Integer; const ADadosComplementaresCompraValePedagio2: DadosComplementaresCompraValePedagio2);
    function  DadosComplementares_Specified(Index: Integer): boolean;
    function  GetCargaDiferencial(Index: Integer): Boolean;
    procedure SetCargaDiferencial(Index: Integer; const ABoolean: Boolean);
    function  CargaDiferencial_Specified(Index: Integer): boolean;
  published
    property IdModoCompraValePedagio:    Integer                                Index (IS_OPTN) read GetIdModoCompraValePedagio write SetIdModoCompraValePedagio stored IdModoCompraValePedagio_Specified;
    property IdRotaModelo:               Integer                                Index (IS_OPTN or IS_NLBL) read GetIdRotaModelo write SetIdRotaModelo stored IdRotaModelo_Specified;
    property CodigoCategoriaVeiculo:     Integer                                Index (IS_OPTN) read GetCodigoCategoriaVeiculo write SetCodigoCategoriaVeiculo stored CodigoCategoriaVeiculo_Specified;
    property MunicipioOrigemCodigoIBGE:  Integer                                Index (IS_OPTN or IS_NLBL) read GetMunicipioOrigemCodigoIBGE write SetMunicipioOrigemCodigoIBGE stored MunicipioOrigemCodigoIBGE_Specified;
    property MunicipioDestinoCodigoIBGE: Integer                                Index (IS_OPTN or IS_NLBL) read GetMunicipioDestinoCodigoIBGE write SetMunicipioDestinoCodigoIBGE stored MunicipioDestinoCodigoIBGE_Specified;
    property Placa:                      string                                 Index (IS_OPTN or IS_NLBL) read GetPlaca write SetPlaca stored Placa_Specified;
    property NumeroCartao:               string                                 Index (IS_OPTN or IS_NLBL) read GetNumeroCartao write SetNumeroCartao stored NumeroCartao_Specified;
    property MotoristaNome:              string                                 Index (IS_OPTN or IS_NLBL) read GetMotoristaNome write SetMotoristaNome stored MotoristaNome_Specified;
    property MotoristaCPF:               string                                 Index (IS_OPTN or IS_NLBL) read GetMotoristaCPF write SetMotoristaCPF stored MotoristaCPF_Specified;
    property MotoristaRNTRC:             string                                 Index (IS_OPTN or IS_NLBL) read GetMotoristaRNTRC write SetMotoristaRNTRC stored MotoristaRNTRC_Specified;
    property IdIntegrador:               string                                 Index (IS_OPTN or IS_NLBL) read GetIdIntegrador write SetIdIntegrador stored IdIntegrador_Specified;
    property CodigoCentroDeCusto:        Integer                                Index (IS_OPTN or IS_NLBL) read GetCodigoCentroDeCusto write SetCodigoCentroDeCusto stored CodigoCentroDeCusto_Specified;
    property NumeroDocumentoEmbarque:    string                                 Index (IS_OPTN or IS_NLBL) read GetNumeroDocumentoEmbarque write SetNumeroDocumentoEmbarque stored NumeroDocumentoEmbarque_Specified;
    property ItemFinanceiro:             string                                 Index (IS_OPTN or IS_NLBL) read GetItemFinanceiro write SetItemFinanceiro stored ItemFinanceiro_Specified;
    property InicioVigencia:             TXSDateTime                            Index (IS_OPTN or IS_NLBL) read GetInicioVigencia write SetInicioVigencia stored InicioVigencia_Specified;
    property FimVigencia:                TXSDateTime                            Index (IS_OPTN or IS_NLBL) read GetFimVigencia write SetFimVigencia stored FimVigencia_Specified;
    property ValorPrevioCalculado:       TXSDecimal                             Index (IS_OPTN or IS_NLBL) read GetValorPrevioCalculado write SetValorPrevioCalculado stored ValorPrevioCalculado_Specified;
    property CompraSimples:              Boolean                                Index (IS_OPTN or IS_NLBL) read GetCompraSimples write SetCompraSimples stored CompraSimples_Specified;
    property IdOperacaoTransporte:       Integer                                Index (IS_OPTN or IS_NLBL) read GetIdOperacaoTransporte write SetIdOperacaoTransporte stored IdOperacaoTransporte_Specified;
    property DadosComplementares:        DadosComplementaresCompraValePedagio2  Index (IS_OPTN or IS_NLBL) read GetDadosComplementares write SetDadosComplementares stored DadosComplementares_Specified;
    property CargaDiferencial:           Boolean                                Index (IS_OPTN or IS_NLBL) read GetCargaDiferencial write SetCargaDiferencial stored CargaDiferencial_Specified;
  end;



  // ************************************************************************ //
  // XML       : CompraValePedagioRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  CompraValePedagioRequest = class(CompraValePedagioRequest2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ItemBuscarCartoesResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ItemBuscarCartoesResponse2 = class(TRemotable)
  private
    FNumeroCartao: string;
    FNumeroCartao_Specified: boolean;
    FVinculado: Boolean;
    FVinculado_Specified: boolean;
    FCnpjEmpresarial: string;
    FCnpjEmpresarial_Specified: boolean;
    FCpfPortador: string;
    FCpfPortador_Specified: boolean;
    FNomePortador: string;
    FNomePortador_Specified: boolean;
    FAtivo: Boolean;
    FAtivo_Specified: boolean;
    FStatusCartao: StatusCartao;
    FStatusCartao_Specified: boolean;
    FValidade: TXSDateTime;
    FValidade_Specified: boolean;
    FDescricaoProdutoCartao: string;
    FDescricaoProdutoCartao_Specified: boolean;
    FLiberacaoCarga: LiberacaoCarga;
    FLiberacaoCarga_Specified: boolean;
    function  GetNumeroCartao(Index: Integer): string;
    procedure SetNumeroCartao(Index: Integer; const Astring: string);
    function  NumeroCartao_Specified(Index: Integer): boolean;
    function  GetVinculado(Index: Integer): Boolean;
    procedure SetVinculado(Index: Integer; const ABoolean: Boolean);
    function  Vinculado_Specified(Index: Integer): boolean;
    function  GetCnpjEmpresarial(Index: Integer): string;
    procedure SetCnpjEmpresarial(Index: Integer; const Astring: string);
    function  CnpjEmpresarial_Specified(Index: Integer): boolean;
    function  GetCpfPortador(Index: Integer): string;
    procedure SetCpfPortador(Index: Integer; const Astring: string);
    function  CpfPortador_Specified(Index: Integer): boolean;
    function  GetNomePortador(Index: Integer): string;
    procedure SetNomePortador(Index: Integer; const Astring: string);
    function  NomePortador_Specified(Index: Integer): boolean;
    function  GetAtivo(Index: Integer): Boolean;
    procedure SetAtivo(Index: Integer; const ABoolean: Boolean);
    function  Ativo_Specified(Index: Integer): boolean;
    function  GetStatusCartao(Index: Integer): StatusCartao;
    procedure SetStatusCartao(Index: Integer; const AStatusCartao: StatusCartao);
    function  StatusCartao_Specified(Index: Integer): boolean;
    function  GetValidade(Index: Integer): TXSDateTime;
    procedure SetValidade(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  Validade_Specified(Index: Integer): boolean;
    function  GetDescricaoProdutoCartao(Index: Integer): string;
    procedure SetDescricaoProdutoCartao(Index: Integer; const Astring: string);
    function  DescricaoProdutoCartao_Specified(Index: Integer): boolean;
    function  GetLiberacaoCarga(Index: Integer): LiberacaoCarga;
    procedure SetLiberacaoCarga(Index: Integer; const ALiberacaoCarga: LiberacaoCarga);
    function  LiberacaoCarga_Specified(Index: Integer): boolean;
  published
    property NumeroCartao:           string          Index (IS_OPTN or IS_NLBL) read GetNumeroCartao write SetNumeroCartao stored NumeroCartao_Specified;
    property Vinculado:              Boolean         Index (IS_OPTN) read GetVinculado write SetVinculado stored Vinculado_Specified;
    property CnpjEmpresarial:        string          Index (IS_OPTN or IS_NLBL) read GetCnpjEmpresarial write SetCnpjEmpresarial stored CnpjEmpresarial_Specified;
    property CpfPortador:            string          Index (IS_OPTN or IS_NLBL) read GetCpfPortador write SetCpfPortador stored CpfPortador_Specified;
    property NomePortador:           string          Index (IS_OPTN or IS_NLBL) read GetNomePortador write SetNomePortador stored NomePortador_Specified;
    property Ativo:                  Boolean         Index (IS_OPTN) read GetAtivo write SetAtivo stored Ativo_Specified;
    property StatusCartao:           StatusCartao    Index (IS_OPTN) read GetStatusCartao write SetStatusCartao stored StatusCartao_Specified;
    property Validade:               TXSDateTime     Index (IS_OPTN or IS_NLBL) read GetValidade write SetValidade stored Validade_Specified;
    property DescricaoProdutoCartao: string          Index (IS_OPTN or IS_NLBL) read GetDescricaoProdutoCartao write SetDescricaoProdutoCartao stored DescricaoProdutoCartao_Specified;
    property LiberacaoCarga:         LiberacaoCarga  Index (IS_OPTN) read GetLiberacaoCarga write SetLiberacaoCarga stored LiberacaoCarga_Specified;
  end;



  // ************************************************************************ //
  // XML       : ItemBuscarCartoesResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ItemBuscarCartoesResponse = class(ItemBuscarCartoesResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AtualizaCompraValePedagioRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  AtualizaCompraValePedagioRequest2 = class(TRemotable)
  private
    FIdModoCompraValePedagio: Integer;
    FIdModoCompraValePedagio_Specified: boolean;
    FIdRotaModelo: Integer;
    FIdRotaModelo_Specified: boolean;
    FCodigoCategoriaVeiculo: Integer;
    FCodigoCategoriaVeiculo_Specified: boolean;
    FMunicipioOrigemCodigoIBGE: Integer;
    FMunicipioOrigemCodigoIBGE_Specified: boolean;
    FMunicipioDestinoCodigoIBGE: Integer;
    FMunicipioDestinoCodigoIBGE_Specified: boolean;
    FPlaca: string;
    FPlaca_Specified: boolean;
    FNumeroCartao: string;
    FNumeroCartao_Specified: boolean;
    FMotoristaNome: string;
    FMotoristaNome_Specified: boolean;
    FMotoristaCPF: string;
    FMotoristaCPF_Specified: boolean;
    FMotoristaRNTRC: string;
    FMotoristaRNTRC_Specified: boolean;
    FIdIntegrador: string;
    FIdIntegrador_Specified: boolean;
    FCodigoCentroDeCusto: Integer;
    FCodigoCentroDeCusto_Specified: boolean;
    FNumeroDocumentoEmbarque: string;
    FNumeroDocumentoEmbarque_Specified: boolean;
    FItemFinanceiro: string;
    FItemFinanceiro_Specified: boolean;
    FInicioVigencia: TXSDateTime;
    FInicioVigencia_Specified: boolean;
    FFimVigencia: TXSDateTime;
    FFimVigencia_Specified: boolean;
    FValorPrevioCalculado: TXSDecimal;
    FValorPrevioCalculado_Specified: boolean;
    FCompraSimples: Boolean;
    FCompraSimples_Specified: boolean;
    FIdCompraValePedagio: Integer;
    FIdCompraValePedagio_Specified: boolean;
    FIdOperacaoTransporte: Integer;
    FIdOperacaoTransporte_Specified: boolean;
    function  GetIdModoCompraValePedagio(Index: Integer): Integer;
    procedure SetIdModoCompraValePedagio(Index: Integer; const AInteger: Integer);
    function  IdModoCompraValePedagio_Specified(Index: Integer): boolean;
    function  GetIdRotaModelo(Index: Integer): Integer;
    procedure SetIdRotaModelo(Index: Integer; const AInteger: Integer);
    function  IdRotaModelo_Specified(Index: Integer): boolean;
    function  GetCodigoCategoriaVeiculo(Index: Integer): Integer;
    procedure SetCodigoCategoriaVeiculo(Index: Integer; const AInteger: Integer);
    function  CodigoCategoriaVeiculo_Specified(Index: Integer): boolean;
    function  GetMunicipioOrigemCodigoIBGE(Index: Integer): Integer;
    procedure SetMunicipioOrigemCodigoIBGE(Index: Integer; const AInteger: Integer);
    function  MunicipioOrigemCodigoIBGE_Specified(Index: Integer): boolean;
    function  GetMunicipioDestinoCodigoIBGE(Index: Integer): Integer;
    procedure SetMunicipioDestinoCodigoIBGE(Index: Integer; const AInteger: Integer);
    function  MunicipioDestinoCodigoIBGE_Specified(Index: Integer): boolean;
    function  GetPlaca(Index: Integer): string;
    procedure SetPlaca(Index: Integer; const Astring: string);
    function  Placa_Specified(Index: Integer): boolean;
    function  GetNumeroCartao(Index: Integer): string;
    procedure SetNumeroCartao(Index: Integer; const Astring: string);
    function  NumeroCartao_Specified(Index: Integer): boolean;
    function  GetMotoristaNome(Index: Integer): string;
    procedure SetMotoristaNome(Index: Integer; const Astring: string);
    function  MotoristaNome_Specified(Index: Integer): boolean;
    function  GetMotoristaCPF(Index: Integer): string;
    procedure SetMotoristaCPF(Index: Integer; const Astring: string);
    function  MotoristaCPF_Specified(Index: Integer): boolean;
    function  GetMotoristaRNTRC(Index: Integer): string;
    procedure SetMotoristaRNTRC(Index: Integer; const Astring: string);
    function  MotoristaRNTRC_Specified(Index: Integer): boolean;
    function  GetIdIntegrador(Index: Integer): string;
    procedure SetIdIntegrador(Index: Integer; const Astring: string);
    function  IdIntegrador_Specified(Index: Integer): boolean;
    function  GetCodigoCentroDeCusto(Index: Integer): Integer;
    procedure SetCodigoCentroDeCusto(Index: Integer; const AInteger: Integer);
    function  CodigoCentroDeCusto_Specified(Index: Integer): boolean;
    function  GetNumeroDocumentoEmbarque(Index: Integer): string;
    procedure SetNumeroDocumentoEmbarque(Index: Integer; const Astring: string);
    function  NumeroDocumentoEmbarque_Specified(Index: Integer): boolean;
    function  GetItemFinanceiro(Index: Integer): string;
    procedure SetItemFinanceiro(Index: Integer; const Astring: string);
    function  ItemFinanceiro_Specified(Index: Integer): boolean;
    function  GetInicioVigencia(Index: Integer): TXSDateTime;
    procedure SetInicioVigencia(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  InicioVigencia_Specified(Index: Integer): boolean;
    function  GetFimVigencia(Index: Integer): TXSDateTime;
    procedure SetFimVigencia(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  FimVigencia_Specified(Index: Integer): boolean;
    function  GetValorPrevioCalculado(Index: Integer): TXSDecimal;
    procedure SetValorPrevioCalculado(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorPrevioCalculado_Specified(Index: Integer): boolean;
    function  GetCompraSimples(Index: Integer): Boolean;
    procedure SetCompraSimples(Index: Integer; const ABoolean: Boolean);
    function  CompraSimples_Specified(Index: Integer): boolean;
    function  GetIdCompraValePedagio(Index: Integer): Integer;
    procedure SetIdCompraValePedagio(Index: Integer; const AInteger: Integer);
    function  IdCompraValePedagio_Specified(Index: Integer): boolean;
    function  GetIdOperacaoTransporte(Index: Integer): Integer;
    procedure SetIdOperacaoTransporte(Index: Integer; const AInteger: Integer);
    function  IdOperacaoTransporte_Specified(Index: Integer): boolean;
  published
    property IdModoCompraValePedagio:    Integer      Index (IS_OPTN) read GetIdModoCompraValePedagio write SetIdModoCompraValePedagio stored IdModoCompraValePedagio_Specified;
    property IdRotaModelo:               Integer      Index (IS_OPTN or IS_NLBL) read GetIdRotaModelo write SetIdRotaModelo stored IdRotaModelo_Specified;
    property CodigoCategoriaVeiculo:     Integer      Index (IS_OPTN) read GetCodigoCategoriaVeiculo write SetCodigoCategoriaVeiculo stored CodigoCategoriaVeiculo_Specified;
    property MunicipioOrigemCodigoIBGE:  Integer      Index (IS_OPTN or IS_NLBL) read GetMunicipioOrigemCodigoIBGE write SetMunicipioOrigemCodigoIBGE stored MunicipioOrigemCodigoIBGE_Specified;
    property MunicipioDestinoCodigoIBGE: Integer      Index (IS_OPTN or IS_NLBL) read GetMunicipioDestinoCodigoIBGE write SetMunicipioDestinoCodigoIBGE stored MunicipioDestinoCodigoIBGE_Specified;
    property Placa:                      string       Index (IS_OPTN or IS_NLBL) read GetPlaca write SetPlaca stored Placa_Specified;
    property NumeroCartao:               string       Index (IS_OPTN or IS_NLBL) read GetNumeroCartao write SetNumeroCartao stored NumeroCartao_Specified;
    property MotoristaNome:              string       Index (IS_OPTN or IS_NLBL) read GetMotoristaNome write SetMotoristaNome stored MotoristaNome_Specified;
    property MotoristaCPF:               string       Index (IS_OPTN or IS_NLBL) read GetMotoristaCPF write SetMotoristaCPF stored MotoristaCPF_Specified;
    property MotoristaRNTRC:             string       Index (IS_OPTN or IS_NLBL) read GetMotoristaRNTRC write SetMotoristaRNTRC stored MotoristaRNTRC_Specified;
    property IdIntegrador:               string       Index (IS_OPTN or IS_NLBL) read GetIdIntegrador write SetIdIntegrador stored IdIntegrador_Specified;
    property CodigoCentroDeCusto:        Integer      Index (IS_OPTN or IS_NLBL) read GetCodigoCentroDeCusto write SetCodigoCentroDeCusto stored CodigoCentroDeCusto_Specified;
    property NumeroDocumentoEmbarque:    string       Index (IS_OPTN or IS_NLBL) read GetNumeroDocumentoEmbarque write SetNumeroDocumentoEmbarque stored NumeroDocumentoEmbarque_Specified;
    property ItemFinanceiro:             string       Index (IS_OPTN or IS_NLBL) read GetItemFinanceiro write SetItemFinanceiro stored ItemFinanceiro_Specified;
    property InicioVigencia:             TXSDateTime  Index (IS_OPTN or IS_NLBL) read GetInicioVigencia write SetInicioVigencia stored InicioVigencia_Specified;
    property FimVigencia:                TXSDateTime  Index (IS_OPTN or IS_NLBL) read GetFimVigencia write SetFimVigencia stored FimVigencia_Specified;
    property ValorPrevioCalculado:       TXSDecimal   Index (IS_OPTN or IS_NLBL) read GetValorPrevioCalculado write SetValorPrevioCalculado stored ValorPrevioCalculado_Specified;
    property CompraSimples:              Boolean      Index (IS_OPTN or IS_NLBL) read GetCompraSimples write SetCompraSimples stored CompraSimples_Specified;
    property IdCompraValePedagio:        Integer      Index (IS_OPTN) read GetIdCompraValePedagio write SetIdCompraValePedagio stored IdCompraValePedagio_Specified;
    property IdOperacaoTransporte:       Integer      Index (IS_OPTN or IS_NLBL) read GetIdOperacaoTransporte write SetIdOperacaoTransporte stored IdOperacaoTransporte_Specified;
  end;



  // ************************************************************************ //
  // XML       : AtualizaCompraValePedagioRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  AtualizaCompraValePedagioRequest = class(AtualizaCompraValePedagioRequest2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : DadosQuitacaoFreteDocumentosResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  DadosQuitacaoFreteDocumentosResponse2 = class(TRemotable)
  private
    FNomeDocumento: string;
    FNomeDocumento_Specified: boolean;
    FNumeroIdentificadorDocumento: string;
    FNumeroIdentificadorDocumento_Specified: boolean;
    FObrigatorio: Boolean;
    FObrigatorio_Specified: boolean;
    function  GetNomeDocumento(Index: Integer): string;
    procedure SetNomeDocumento(Index: Integer; const Astring: string);
    function  NomeDocumento_Specified(Index: Integer): boolean;
    function  GetNumeroIdentificadorDocumento(Index: Integer): string;
    procedure SetNumeroIdentificadorDocumento(Index: Integer; const Astring: string);
    function  NumeroIdentificadorDocumento_Specified(Index: Integer): boolean;
    function  GetObrigatorio(Index: Integer): Boolean;
    procedure SetObrigatorio(Index: Integer; const ABoolean: Boolean);
    function  Obrigatorio_Specified(Index: Integer): boolean;
  published
    property NomeDocumento:                string   Index (IS_OPTN or IS_NLBL) read GetNomeDocumento write SetNomeDocumento stored NomeDocumento_Specified;
    property NumeroIdentificadorDocumento: string   Index (IS_OPTN or IS_NLBL) read GetNumeroIdentificadorDocumento write SetNumeroIdentificadorDocumento stored NumeroIdentificadorDocumento_Specified;
    property Obrigatorio:                  Boolean  Index (IS_OPTN) read GetObrigatorio write SetObrigatorio stored Obrigatorio_Specified;
  end;



  // ************************************************************************ //
  // XML       : InformacaoCartaoResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  InformacaoCartaoResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FAtivo: Boolean;
    FAtivo_Specified: boolean;
    FBloqueado: Boolean;
    FBloqueado_Specified: boolean;
    FCnpjEmpresarial: string;
    FCnpjEmpresarial_Specified: boolean;
    FVinculado: Boolean;
    FVinculado_Specified: boolean;
    FInfoPortador: InfoPortadorResponse2;
    FInfoPortador_Specified: boolean;
    FLiberacaoCarga: LiberacaoCarga;
    FLiberacaoCarga_Specified: boolean;
    FAdministradoraCartao: string;
    FAdministradoraCartao_Specified: boolean;
    FTipoPessoaCartao: TipoPessoaProdutoCartao;
    FTipoPessoaCartao_Specified: boolean;
    FInfoProdutoCartao: string;
    FInfoProdutoCartao_Specified: boolean;
    FNumeroCartao: string;
    FNumeroCartao_Specified: boolean;
    FStatusCartao: StatusCartao;
    FStatusCartao_Specified: boolean;
    FValidade: TXSDateTime;
    FValidade_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetAtivo(Index: Integer): Boolean;
    procedure SetAtivo(Index: Integer; const ABoolean: Boolean);
    function  Ativo_Specified(Index: Integer): boolean;
    function  GetBloqueado(Index: Integer): Boolean;
    procedure SetBloqueado(Index: Integer; const ABoolean: Boolean);
    function  Bloqueado_Specified(Index: Integer): boolean;
    function  GetCnpjEmpresarial(Index: Integer): string;
    procedure SetCnpjEmpresarial(Index: Integer; const Astring: string);
    function  CnpjEmpresarial_Specified(Index: Integer): boolean;
    function  GetVinculado(Index: Integer): Boolean;
    procedure SetVinculado(Index: Integer; const ABoolean: Boolean);
    function  Vinculado_Specified(Index: Integer): boolean;
    function  GetInfoPortador(Index: Integer): InfoPortadorResponse2;
    procedure SetInfoPortador(Index: Integer; const AInfoPortadorResponse2: InfoPortadorResponse2);
    function  InfoPortador_Specified(Index: Integer): boolean;
    function  GetLiberacaoCarga(Index: Integer): LiberacaoCarga;
    procedure SetLiberacaoCarga(Index: Integer; const ALiberacaoCarga: LiberacaoCarga);
    function  LiberacaoCarga_Specified(Index: Integer): boolean;
    function  GetAdministradoraCartao(Index: Integer): string;
    procedure SetAdministradoraCartao(Index: Integer; const Astring: string);
    function  AdministradoraCartao_Specified(Index: Integer): boolean;
    function  GetTipoPessoaCartao(Index: Integer): TipoPessoaProdutoCartao;
    procedure SetTipoPessoaCartao(Index: Integer; const ATipoPessoaProdutoCartao: TipoPessoaProdutoCartao);
    function  TipoPessoaCartao_Specified(Index: Integer): boolean;
    function  GetInfoProdutoCartao(Index: Integer): string;
    procedure SetInfoProdutoCartao(Index: Integer; const Astring: string);
    function  InfoProdutoCartao_Specified(Index: Integer): boolean;
    function  GetNumeroCartao(Index: Integer): string;
    procedure SetNumeroCartao(Index: Integer; const Astring: string);
    function  NumeroCartao_Specified(Index: Integer): boolean;
    function  GetStatusCartao(Index: Integer): StatusCartao;
    procedure SetStatusCartao(Index: Integer; const AStatusCartao: StatusCartao);
    function  StatusCartao_Specified(Index: Integer): boolean;
    function  GetValidade(Index: Integer): TXSDateTime;
    procedure SetValidade(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  Validade_Specified(Index: Integer): boolean;
  published
    property Erro:                 ErroResponse2            Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property Ativo:                Boolean                  Index (IS_OPTN) read GetAtivo write SetAtivo stored Ativo_Specified;
    property Bloqueado:            Boolean                  Index (IS_OPTN) read GetBloqueado write SetBloqueado stored Bloqueado_Specified;
    property CnpjEmpresarial:      string                   Index (IS_OPTN or IS_NLBL) read GetCnpjEmpresarial write SetCnpjEmpresarial stored CnpjEmpresarial_Specified;
    property Vinculado:            Boolean                  Index (IS_OPTN) read GetVinculado write SetVinculado stored Vinculado_Specified;
    property InfoPortador:         InfoPortadorResponse2    Index (IS_OPTN or IS_NLBL) read GetInfoPortador write SetInfoPortador stored InfoPortador_Specified;
    property LiberacaoCarga:       LiberacaoCarga           Index (IS_OPTN) read GetLiberacaoCarga write SetLiberacaoCarga stored LiberacaoCarga_Specified;
    property AdministradoraCartao: string                   Index (IS_OPTN or IS_NLBL) read GetAdministradoraCartao write SetAdministradoraCartao stored AdministradoraCartao_Specified;
    property TipoPessoaCartao:     TipoPessoaProdutoCartao  Index (IS_OPTN) read GetTipoPessoaCartao write SetTipoPessoaCartao stored TipoPessoaCartao_Specified;
    property InfoProdutoCartao:    string                   Index (IS_OPTN or IS_NLBL) read GetInfoProdutoCartao write SetInfoProdutoCartao stored InfoProdutoCartao_Specified;
    property NumeroCartao:         string                   Index (IS_OPTN or IS_NLBL) read GetNumeroCartao write SetNumeroCartao stored NumeroCartao_Specified;
    property StatusCartao:         StatusCartao             Index (IS_OPTN) read GetStatusCartao write SetStatusCartao stored StatusCartao_Specified;
    property Validade:             TXSDateTime              Index (IS_OPTN or IS_NLBL) read GetValidade write SetValidade stored Validade_Specified;
  end;



  // ************************************************************************ //
  // XML       : InformacaoCartaoResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  InformacaoCartaoResponse = class(InformacaoCartaoResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : InformacoesParcelasResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  InformacoesParcelasResponse2 = class(TRemotable)
  private
    FValor: TXSDecimal;
    FValor_Specified: boolean;
    FDataVencimento: TXSDateTime;
    FDataVencimento_Specified: boolean;
    FDataPagamento: TXSDateTime;
    FDataPagamento_Specified: boolean;
    FNumeroParcela: Integer;
    FNumeroParcela_Specified: boolean;
    FDescricaoParcela: string;
    FDescricaoParcela_Specified: boolean;
    FCancelada: Boolean;
    FCancelada_Specified: boolean;
    FFormaPagamento: string;
    FFormaPagamento_Specified: boolean;
    FStatusParcela: string;
    FStatusParcela_Specified: boolean;
    FObservacao: string;
    FObservacao_Specified: boolean;
    function  GetValor(Index: Integer): TXSDecimal;
    procedure SetValor(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  Valor_Specified(Index: Integer): boolean;
    function  GetDataVencimento(Index: Integer): TXSDateTime;
    procedure SetDataVencimento(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DataVencimento_Specified(Index: Integer): boolean;
    function  GetDataPagamento(Index: Integer): TXSDateTime;
    procedure SetDataPagamento(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DataPagamento_Specified(Index: Integer): boolean;
    function  GetNumeroParcela(Index: Integer): Integer;
    procedure SetNumeroParcela(Index: Integer; const AInteger: Integer);
    function  NumeroParcela_Specified(Index: Integer): boolean;
    function  GetDescricaoParcela(Index: Integer): string;
    procedure SetDescricaoParcela(Index: Integer; const Astring: string);
    function  DescricaoParcela_Specified(Index: Integer): boolean;
    function  GetCancelada(Index: Integer): Boolean;
    procedure SetCancelada(Index: Integer; const ABoolean: Boolean);
    function  Cancelada_Specified(Index: Integer): boolean;
    function  GetFormaPagamento(Index: Integer): string;
    procedure SetFormaPagamento(Index: Integer; const Astring: string);
    function  FormaPagamento_Specified(Index: Integer): boolean;
    function  GetStatusParcela(Index: Integer): string;
    procedure SetStatusParcela(Index: Integer; const Astring: string);
    function  StatusParcela_Specified(Index: Integer): boolean;
    function  GetObservacao(Index: Integer): string;
    procedure SetObservacao(Index: Integer; const Astring: string);
    function  Observacao_Specified(Index: Integer): boolean;
  published
    property Valor:            TXSDecimal   Index (IS_OPTN) read GetValor write SetValor stored Valor_Specified;
    property DataVencimento:   TXSDateTime  Index (IS_OPTN) read GetDataVencimento write SetDataVencimento stored DataVencimento_Specified;
    property DataPagamento:    TXSDateTime  Index (IS_OPTN or IS_NLBL) read GetDataPagamento write SetDataPagamento stored DataPagamento_Specified;
    property NumeroParcela:    Integer      Index (IS_OPTN) read GetNumeroParcela write SetNumeroParcela stored NumeroParcela_Specified;
    property DescricaoParcela: string       Index (IS_OPTN or IS_NLBL) read GetDescricaoParcela write SetDescricaoParcela stored DescricaoParcela_Specified;
    property Cancelada:        Boolean      Index (IS_OPTN) read GetCancelada write SetCancelada stored Cancelada_Specified;
    property FormaPagamento:   string       Index (IS_OPTN or IS_NLBL) read GetFormaPagamento write SetFormaPagamento stored FormaPagamento_Specified;
    property StatusParcela:    string       Index (IS_OPTN or IS_NLBL) read GetStatusParcela write SetStatusParcela stored StatusParcela_Specified;
    property Observacao:       string       Index (IS_OPTN or IS_NLBL) read GetObservacao write SetObservacao stored Observacao_Specified;
  end;



  // ************************************************************************ //
  // XML       : InformacoesParcelasResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  InformacoesParcelasResponse = class(InformacoesParcelasResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ParcelaAdicionalRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ParcelaAdicionalRequest2 = class(TRemotable)
  private
    FIdOperacaoTransporte: Integer;
    FIdOperacaoTransporte_Specified: boolean;
    FNumeroCartao: string;
    FNumeroCartao_Specified: boolean;
    FValor: TXSDecimal;
    FValor_Specified: boolean;
    FDataVencimento: TXSDateTime;
    FDataVencimento_Specified: boolean;
    FDescricao: string;
    FDescricao_Specified: boolean;
    FAutomatica: Boolean;
    FAutomatica_Specified: boolean;
    FObservacao: string;
    FObservacao_Specified: boolean;
    FDeduzirImpostos: Boolean;
    FDeduzirImpostos_Specified: boolean;
    FValorImpostoSestSenat: TXSDecimal;
    FValorImpostoSestSenat_Specified: boolean;
    FValorImpostoIRRF: TXSDecimal;
    FValorImpostoIRRF_Specified: boolean;
    FValorImpostoINSS: TXSDecimal;
    FValorImpostoINSS_Specified: boolean;
    FValorImpostoISS: TXSDecimal;
    FValorImpostoISS_Specified: boolean;
    function  GetIdOperacaoTransporte(Index: Integer): Integer;
    procedure SetIdOperacaoTransporte(Index: Integer; const AInteger: Integer);
    function  IdOperacaoTransporte_Specified(Index: Integer): boolean;
    function  GetNumeroCartao(Index: Integer): string;
    procedure SetNumeroCartao(Index: Integer; const Astring: string);
    function  NumeroCartao_Specified(Index: Integer): boolean;
    function  GetValor(Index: Integer): TXSDecimal;
    procedure SetValor(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  Valor_Specified(Index: Integer): boolean;
    function  GetDataVencimento(Index: Integer): TXSDateTime;
    procedure SetDataVencimento(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DataVencimento_Specified(Index: Integer): boolean;
    function  GetDescricao(Index: Integer): string;
    procedure SetDescricao(Index: Integer; const Astring: string);
    function  Descricao_Specified(Index: Integer): boolean;
    function  GetAutomatica(Index: Integer): Boolean;
    procedure SetAutomatica(Index: Integer; const ABoolean: Boolean);
    function  Automatica_Specified(Index: Integer): boolean;
    function  GetObservacao(Index: Integer): string;
    procedure SetObservacao(Index: Integer; const Astring: string);
    function  Observacao_Specified(Index: Integer): boolean;
    function  GetDeduzirImpostos(Index: Integer): Boolean;
    procedure SetDeduzirImpostos(Index: Integer; const ABoolean: Boolean);
    function  DeduzirImpostos_Specified(Index: Integer): boolean;
    function  GetValorImpostoSestSenat(Index: Integer): TXSDecimal;
    procedure SetValorImpostoSestSenat(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorImpostoSestSenat_Specified(Index: Integer): boolean;
    function  GetValorImpostoIRRF(Index: Integer): TXSDecimal;
    procedure SetValorImpostoIRRF(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorImpostoIRRF_Specified(Index: Integer): boolean;
    function  GetValorImpostoINSS(Index: Integer): TXSDecimal;
    procedure SetValorImpostoINSS(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorImpostoINSS_Specified(Index: Integer): boolean;
    function  GetValorImpostoISS(Index: Integer): TXSDecimal;
    procedure SetValorImpostoISS(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorImpostoISS_Specified(Index: Integer): boolean;
  published
    property IdOperacaoTransporte:  Integer      Index (IS_OPTN) read GetIdOperacaoTransporte write SetIdOperacaoTransporte stored IdOperacaoTransporte_Specified;
    property NumeroCartao:          string       Index (IS_OPTN or IS_NLBL) read GetNumeroCartao write SetNumeroCartao stored NumeroCartao_Specified;
    property Valor:                 TXSDecimal   Index (IS_OPTN) read GetValor write SetValor stored Valor_Specified;
    property DataVencimento:        TXSDateTime  Index (IS_OPTN) read GetDataVencimento write SetDataVencimento stored DataVencimento_Specified;
    property Descricao:             string       Index (IS_OPTN or IS_NLBL) read GetDescricao write SetDescricao stored Descricao_Specified;
    property Automatica:            Boolean      Index (IS_OPTN) read GetAutomatica write SetAutomatica stored Automatica_Specified;
    property Observacao:            string       Index (IS_OPTN or IS_NLBL) read GetObservacao write SetObservacao stored Observacao_Specified;
    property DeduzirImpostos:       Boolean      Index (IS_OPTN or IS_NLBL) read GetDeduzirImpostos write SetDeduzirImpostos stored DeduzirImpostos_Specified;
    property ValorImpostoSestSenat: TXSDecimal   Index (IS_OPTN or IS_NLBL) read GetValorImpostoSestSenat write SetValorImpostoSestSenat stored ValorImpostoSestSenat_Specified;
    property ValorImpostoIRRF:      TXSDecimal   Index (IS_OPTN or IS_NLBL) read GetValorImpostoIRRF write SetValorImpostoIRRF stored ValorImpostoIRRF_Specified;
    property ValorImpostoINSS:      TXSDecimal   Index (IS_OPTN or IS_NLBL) read GetValorImpostoINSS write SetValorImpostoINSS stored ValorImpostoINSS_Specified;
    property ValorImpostoISS:       TXSDecimal   Index (IS_OPTN or IS_NLBL) read GetValorImpostoISS write SetValorImpostoISS stored ValorImpostoISS_Specified;
  end;



  // ************************************************************************ //
  // XML       : ParcelaAdicionalRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ParcelaAdicionalRequest = class(ParcelaAdicionalRequest2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : PagamentoParcelaIndividualResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  PagamentoParcelaIndividualResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FMensagem: string;
    FMensagem_Specified: boolean;
    FAgendadoAutomaticamente: Boolean;
    FAgendadoAutomaticamente_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetMensagem(Index: Integer): string;
    procedure SetMensagem(Index: Integer; const Astring: string);
    function  Mensagem_Specified(Index: Integer): boolean;
    function  GetAgendadoAutomaticamente(Index: Integer): Boolean;
    procedure SetAgendadoAutomaticamente(Index: Integer; const ABoolean: Boolean);
    function  AgendadoAutomaticamente_Specified(Index: Integer): boolean;
  published
    property Erro:                    ErroResponse2  Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property Mensagem:                string         Index (IS_OPTN or IS_NLBL) read GetMensagem write SetMensagem stored Mensagem_Specified;
    property AgendadoAutomaticamente: Boolean        Index (IS_OPTN) read GetAgendadoAutomaticamente write SetAgendadoAutomaticamente stored AgendadoAutomaticamente_Specified;
  end;



  // ************************************************************************ //
  // XML       : PagamentoParcelaIndividualResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  PagamentoParcelaIndividualResponse = class(PagamentoParcelaIndividualResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ParticipanteResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ParticipanteResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FIdParticipante: Integer;
    FIdParticipante_Specified: boolean;
    FIdDmTipoPessoa: Integer;
    FIdDmTipoPessoa_Specified: boolean;
    FNome: string;
    FNome_Specified: boolean;
    FRazaoSocial: string;
    FRazaoSocial_Specified: boolean;
    FCPFCNPJ: string;
    FCPFCNPJ_Specified: boolean;
    FEndereco: string;
    FEndereco_Specified: boolean;
    FBairro: string;
    FBairro_Specified: boolean;
    FCEP: string;
    FCEP_Specified: boolean;
    FMunicipioCodigoIBGE: Integer;
    FMunicipioCodigoIBGE_Specified: boolean;
    FRNTRC: string;
    FRNTRC_Specified: boolean;
    FAtivo: Boolean;
    FAtivo_Specified: boolean;
    FEmail: string;
    FEmail_Specified: boolean;
    FTelefone: string;
    FTelefone_Specified: boolean;
    FTelefoneCelular: string;
    FTelefoneCelular_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetIdParticipante(Index: Integer): Integer;
    procedure SetIdParticipante(Index: Integer; const AInteger: Integer);
    function  IdParticipante_Specified(Index: Integer): boolean;
    function  GetIdDmTipoPessoa(Index: Integer): Integer;
    procedure SetIdDmTipoPessoa(Index: Integer; const AInteger: Integer);
    function  IdDmTipoPessoa_Specified(Index: Integer): boolean;
    function  GetNome(Index: Integer): string;
    procedure SetNome(Index: Integer; const Astring: string);
    function  Nome_Specified(Index: Integer): boolean;
    function  GetRazaoSocial(Index: Integer): string;
    procedure SetRazaoSocial(Index: Integer; const Astring: string);
    function  RazaoSocial_Specified(Index: Integer): boolean;
    function  GetCPFCNPJ(Index: Integer): string;
    procedure SetCPFCNPJ(Index: Integer; const Astring: string);
    function  CPFCNPJ_Specified(Index: Integer): boolean;
    function  GetEndereco(Index: Integer): string;
    procedure SetEndereco(Index: Integer; const Astring: string);
    function  Endereco_Specified(Index: Integer): boolean;
    function  GetBairro(Index: Integer): string;
    procedure SetBairro(Index: Integer; const Astring: string);
    function  Bairro_Specified(Index: Integer): boolean;
    function  GetCEP(Index: Integer): string;
    procedure SetCEP(Index: Integer; const Astring: string);
    function  CEP_Specified(Index: Integer): boolean;
    function  GetMunicipioCodigoIBGE(Index: Integer): Integer;
    procedure SetMunicipioCodigoIBGE(Index: Integer; const AInteger: Integer);
    function  MunicipioCodigoIBGE_Specified(Index: Integer): boolean;
    function  GetRNTRC(Index: Integer): string;
    procedure SetRNTRC(Index: Integer; const Astring: string);
    function  RNTRC_Specified(Index: Integer): boolean;
    function  GetAtivo(Index: Integer): Boolean;
    procedure SetAtivo(Index: Integer; const ABoolean: Boolean);
    function  Ativo_Specified(Index: Integer): boolean;
    function  GetEmail(Index: Integer): string;
    procedure SetEmail(Index: Integer; const Astring: string);
    function  Email_Specified(Index: Integer): boolean;
    function  GetTelefone(Index: Integer): string;
    procedure SetTelefone(Index: Integer; const Astring: string);
    function  Telefone_Specified(Index: Integer): boolean;
    function  GetTelefoneCelular(Index: Integer): string;
    procedure SetTelefoneCelular(Index: Integer; const Astring: string);
    function  TelefoneCelular_Specified(Index: Integer): boolean;
  published
    property Erro:                ErroResponse2  Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property IdParticipante:      Integer        Index (IS_OPTN or IS_NLBL) read GetIdParticipante write SetIdParticipante stored IdParticipante_Specified;
    property IdDmTipoPessoa:      Integer        Index (IS_OPTN or IS_NLBL) read GetIdDmTipoPessoa write SetIdDmTipoPessoa stored IdDmTipoPessoa_Specified;
    property Nome:                string         Index (IS_OPTN or IS_NLBL) read GetNome write SetNome stored Nome_Specified;
    property RazaoSocial:         string         Index (IS_OPTN or IS_NLBL) read GetRazaoSocial write SetRazaoSocial stored RazaoSocial_Specified;
    property CPFCNPJ:             string         Index (IS_OPTN or IS_NLBL) read GetCPFCNPJ write SetCPFCNPJ stored CPFCNPJ_Specified;
    property Endereco:            string         Index (IS_OPTN or IS_NLBL) read GetEndereco write SetEndereco stored Endereco_Specified;
    property Bairro:              string         Index (IS_OPTN or IS_NLBL) read GetBairro write SetBairro stored Bairro_Specified;
    property CEP:                 string         Index (IS_OPTN or IS_NLBL) read GetCEP write SetCEP stored CEP_Specified;
    property MunicipioCodigoIBGE: Integer        Index (IS_OPTN or IS_NLBL) read GetMunicipioCodigoIBGE write SetMunicipioCodigoIBGE stored MunicipioCodigoIBGE_Specified;
    property RNTRC:               string         Index (IS_OPTN or IS_NLBL) read GetRNTRC write SetRNTRC stored RNTRC_Specified;
    property Ativo:               Boolean        Index (IS_OPTN or IS_NLBL) read GetAtivo write SetAtivo stored Ativo_Specified;
    property Email:               string         Index (IS_OPTN or IS_NLBL) read GetEmail write SetEmail stored Email_Specified;
    property Telefone:            string         Index (IS_OPTN or IS_NLBL) read GetTelefone write SetTelefone stored Telefone_Specified;
    property TelefoneCelular:     string         Index (IS_OPTN or IS_NLBL) read GetTelefoneCelular write SetTelefoneCelular stored TelefoneCelular_Specified;
  end;



  // ************************************************************************ //
  // XML       : OperacaoTransporteParcelaRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  OperacaoTransporteParcelaRequest2 = class(TRemotable)
  private
    FDescricaoParcela: string;
    FDescricaoParcela_Specified: boolean;
    FValor: TXSDecimal;
    FValor_Specified: boolean;
    FNumeroParcela: Integer;
    FNumeroParcela_Specified: boolean;
    FDataVencimento: TXSDateTime;
    FDataVencimento_Specified: boolean;
    FTipoDaParcela: Integer;
    FTipoDaParcela_Specified: boolean;
    FFormaPagamento: Integer;
    FFormaPagamento_Specified: boolean;
    FCartaoPagamento: string;
    FCartaoPagamento_Specified: boolean;
    FCodigoBanco: string;
    FCodigoBanco_Specified: boolean;
    FAgenciaDeposito: string;
    FAgenciaDeposito_Specified: boolean;
    FContaDeposito: string;
    FContaDeposito_Specified: boolean;
    FDigitoContaDeposito: string;
    FDigitoContaDeposito_Specified: boolean;
    FProcessarAutomaticamente: Boolean;
    FProcessarAutomaticamente_Specified: boolean;
    FIdOperacaoTransporteParcela: Integer;
    FIdOperacaoTransporteParcela_Specified: boolean;
    FFlagContaPoupanca: Boolean;
    FFlagContaPoupanca_Specified: boolean;
    FVariacaoContaPoupanca: string;
    FVariacaoContaPoupanca_Specified: boolean;
    FItemFinanceiroParcela: string;
    FItemFinanceiroParcela_Specified: boolean;
    FObservacao: string;
    FObservacao_Specified: boolean;
    function  GetDescricaoParcela(Index: Integer): string;
    procedure SetDescricaoParcela(Index: Integer; const Astring: string);
    function  DescricaoParcela_Specified(Index: Integer): boolean;
    function  GetValor(Index: Integer): TXSDecimal;
    procedure SetValor(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  Valor_Specified(Index: Integer): boolean;
    function  GetNumeroParcela(Index: Integer): Integer;
    procedure SetNumeroParcela(Index: Integer; const AInteger: Integer);
    function  NumeroParcela_Specified(Index: Integer): boolean;
    function  GetDataVencimento(Index: Integer): TXSDateTime;
    procedure SetDataVencimento(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DataVencimento_Specified(Index: Integer): boolean;
    function  GetTipoDaParcela(Index: Integer): Integer;
    procedure SetTipoDaParcela(Index: Integer; const AInteger: Integer);
    function  TipoDaParcela_Specified(Index: Integer): boolean;
    function  GetFormaPagamento(Index: Integer): Integer;
    procedure SetFormaPagamento(Index: Integer; const AInteger: Integer);
    function  FormaPagamento_Specified(Index: Integer): boolean;
    function  GetCartaoPagamento(Index: Integer): string;
    procedure SetCartaoPagamento(Index: Integer; const Astring: string);
    function  CartaoPagamento_Specified(Index: Integer): boolean;
    function  GetCodigoBanco(Index: Integer): string;
    procedure SetCodigoBanco(Index: Integer; const Astring: string);
    function  CodigoBanco_Specified(Index: Integer): boolean;
    function  GetAgenciaDeposito(Index: Integer): string;
    procedure SetAgenciaDeposito(Index: Integer; const Astring: string);
    function  AgenciaDeposito_Specified(Index: Integer): boolean;
    function  GetContaDeposito(Index: Integer): string;
    procedure SetContaDeposito(Index: Integer; const Astring: string);
    function  ContaDeposito_Specified(Index: Integer): boolean;
    function  GetDigitoContaDeposito(Index: Integer): string;
    procedure SetDigitoContaDeposito(Index: Integer; const Astring: string);
    function  DigitoContaDeposito_Specified(Index: Integer): boolean;
    function  GetProcessarAutomaticamente(Index: Integer): Boolean;
    procedure SetProcessarAutomaticamente(Index: Integer; const ABoolean: Boolean);
    function  ProcessarAutomaticamente_Specified(Index: Integer): boolean;
    function  GetIdOperacaoTransporteParcela(Index: Integer): Integer;
    procedure SetIdOperacaoTransporteParcela(Index: Integer; const AInteger: Integer);
    function  IdOperacaoTransporteParcela_Specified(Index: Integer): boolean;
    function  GetFlagContaPoupanca(Index: Integer): Boolean;
    procedure SetFlagContaPoupanca(Index: Integer; const ABoolean: Boolean);
    function  FlagContaPoupanca_Specified(Index: Integer): boolean;
    function  GetVariacaoContaPoupanca(Index: Integer): string;
    procedure SetVariacaoContaPoupanca(Index: Integer; const Astring: string);
    function  VariacaoContaPoupanca_Specified(Index: Integer): boolean;
    function  GetItemFinanceiroParcela(Index: Integer): string;
    procedure SetItemFinanceiroParcela(Index: Integer; const Astring: string);
    function  ItemFinanceiroParcela_Specified(Index: Integer): boolean;
    function  GetObservacao(Index: Integer): string;
    procedure SetObservacao(Index: Integer; const Astring: string);
    function  Observacao_Specified(Index: Integer): boolean;
  published
    property DescricaoParcela:            string       Index (IS_OPTN or IS_NLBL) read GetDescricaoParcela write SetDescricaoParcela stored DescricaoParcela_Specified;
    property Valor:                       TXSDecimal   Index (IS_OPTN) read GetValor write SetValor stored Valor_Specified;
    property NumeroParcela:               Integer      Index (IS_OPTN) read GetNumeroParcela write SetNumeroParcela stored NumeroParcela_Specified;
    property DataVencimento:              TXSDateTime  Index (IS_OPTN) read GetDataVencimento write SetDataVencimento stored DataVencimento_Specified;
    property TipoDaParcela:               Integer      Index (IS_OPTN) read GetTipoDaParcela write SetTipoDaParcela stored TipoDaParcela_Specified;
    property FormaPagamento:              Integer      Index (IS_OPTN) read GetFormaPagamento write SetFormaPagamento stored FormaPagamento_Specified;
    property CartaoPagamento:             string       Index (IS_OPTN or IS_NLBL) read GetCartaoPagamento write SetCartaoPagamento stored CartaoPagamento_Specified;
    property CodigoBanco:                 string       Index (IS_OPTN or IS_NLBL) read GetCodigoBanco write SetCodigoBanco stored CodigoBanco_Specified;
    property AgenciaDeposito:             string       Index (IS_OPTN or IS_NLBL) read GetAgenciaDeposito write SetAgenciaDeposito stored AgenciaDeposito_Specified;
    property ContaDeposito:               string       Index (IS_OPTN or IS_NLBL) read GetContaDeposito write SetContaDeposito stored ContaDeposito_Specified;
    property DigitoContaDeposito:         string       Index (IS_OPTN or IS_NLBL) read GetDigitoContaDeposito write SetDigitoContaDeposito stored DigitoContaDeposito_Specified;
    property ProcessarAutomaticamente:    Boolean      Index (IS_OPTN or IS_NLBL) read GetProcessarAutomaticamente write SetProcessarAutomaticamente stored ProcessarAutomaticamente_Specified;
    property IdOperacaoTransporteParcela: Integer      Index (IS_OPTN or IS_NLBL) read GetIdOperacaoTransporteParcela write SetIdOperacaoTransporteParcela stored IdOperacaoTransporteParcela_Specified;
    property FlagContaPoupanca:           Boolean      Index (IS_OPTN) read GetFlagContaPoupanca write SetFlagContaPoupanca stored FlagContaPoupanca_Specified;
    property VariacaoContaPoupanca:       string       Index (IS_OPTN or IS_NLBL) read GetVariacaoContaPoupanca write SetVariacaoContaPoupanca stored VariacaoContaPoupanca_Specified;
    property ItemFinanceiroParcela:       string       Index (IS_OPTN or IS_NLBL) read GetItemFinanceiroParcela write SetItemFinanceiroParcela stored ItemFinanceiroParcela_Specified;
    property Observacao:                  string       Index (IS_OPTN or IS_NLBL) read GetObservacao write SetObservacao stored Observacao_Specified;
  end;



  // ************************************************************************ //
  // XML       : OperacaoTransporteVeiculoRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  OperacaoTransporteVeiculoRequest2 = class(TRemotable)
  private
    FPlaca: string;
    FPlaca_Specified: boolean;
    FRNTRC: string;
    FRNTRC_Specified: boolean;
    function  GetPlaca(Index: Integer): string;
    procedure SetPlaca(Index: Integer; const Astring: string);
    function  Placa_Specified(Index: Integer): boolean;
    function  GetRNTRC(Index: Integer): string;
    procedure SetRNTRC(Index: Integer; const Astring: string);
    function  RNTRC_Specified(Index: Integer): boolean;
  published
    property Placa: string  Index (IS_OPTN or IS_NLBL) read GetPlaca write SetPlaca stored Placa_Specified;
    property RNTRC: string  Index (IS_OPTN or IS_NLBL) read GetRNTRC write SetRNTRC stored RNTRC_Specified;
  end;

  ArrayOfParticipanteDestinatarioAdicionalRequest = array of ParticipanteDestinatarioAdicionalRequest2;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  ArrayOfOperacaoTransporteParcelaRequest = array of OperacaoTransporteParcelaRequest2;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }


  // ************************************************************************ //
  // XML       : RetificacaoValoresRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  RetificacaoValoresRequest2 = class(TRemotable)
  private
    FValorFrete: TXSDecimal;
    FValorFrete_Specified: boolean;
    FValorCombustivel: TXSDecimal;
    FValorCombustivel_Specified: boolean;
    FValorPedagio: TXSDecimal;
    FValorPedagio_Specified: boolean;
    FValorDespesas: TXSDecimal;
    FValorDespesas_Specified: boolean;
    FValorImpostoSestSenat: TXSDecimal;
    FValorImpostoSestSenat_Specified: boolean;
    FValorImpostoIRRF: TXSDecimal;
    FValorImpostoIRRF_Specified: boolean;
    FValorImpostoINSS: TXSDecimal;
    FValorImpostoINSS_Specified: boolean;
    FValorImpostoIcmsIssqn: TXSDecimal;
    FValorImpostoIcmsIssqn_Specified: boolean;
    FValorDescontoAntecipado: TXSDecimal;
    FValorDescontoAntecipado_Specified: boolean;
    FValorAjusteCombustivel: TXSDecimal;
    FValorAjusteCombustivel_Specified: boolean;
    FValorAjusteServicos: TXSDecimal;
    FValorAjusteServicos_Specified: boolean;
    FValorAjusteManutencao: TXSDecimal;
    FValorAjusteManutencao_Specified: boolean;
    FValorAjusteOutros: TXSDecimal;
    FValorAjusteOutros_Specified: boolean;
    FDeduzirImpostos: Boolean;
    FDeduzirImpostos_Specified: boolean;
    FTarifasBancarias: TXSDecimal;
    FTarifasBancarias_Specified: boolean;
    FQuantidadeTarifasBancarias: Integer;
    FQuantidadeTarifasBancarias_Specified: boolean;
    FParcelas: ArrayOfOperacaoTransporteParcelaRequest;
    FParcelas_Specified: boolean;
    FValorImpostoISS: TXSDecimal;
    FValorImpostoISS_Specified: boolean;
    function  GetValorFrete(Index: Integer): TXSDecimal;
    procedure SetValorFrete(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorFrete_Specified(Index: Integer): boolean;
    function  GetValorCombustivel(Index: Integer): TXSDecimal;
    procedure SetValorCombustivel(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorCombustivel_Specified(Index: Integer): boolean;
    function  GetValorPedagio(Index: Integer): TXSDecimal;
    procedure SetValorPedagio(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorPedagio_Specified(Index: Integer): boolean;
    function  GetValorDespesas(Index: Integer): TXSDecimal;
    procedure SetValorDespesas(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorDespesas_Specified(Index: Integer): boolean;
    function  GetValorImpostoSestSenat(Index: Integer): TXSDecimal;
    procedure SetValorImpostoSestSenat(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorImpostoSestSenat_Specified(Index: Integer): boolean;
    function  GetValorImpostoIRRF(Index: Integer): TXSDecimal;
    procedure SetValorImpostoIRRF(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorImpostoIRRF_Specified(Index: Integer): boolean;
    function  GetValorImpostoINSS(Index: Integer): TXSDecimal;
    procedure SetValorImpostoINSS(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorImpostoINSS_Specified(Index: Integer): boolean;
    function  GetValorImpostoIcmsIssqn(Index: Integer): TXSDecimal;
    procedure SetValorImpostoIcmsIssqn(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorImpostoIcmsIssqn_Specified(Index: Integer): boolean;
    function  GetValorDescontoAntecipado(Index: Integer): TXSDecimal;
    procedure SetValorDescontoAntecipado(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorDescontoAntecipado_Specified(Index: Integer): boolean;
    function  GetValorAjusteCombustivel(Index: Integer): TXSDecimal;
    procedure SetValorAjusteCombustivel(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorAjusteCombustivel_Specified(Index: Integer): boolean;
    function  GetValorAjusteServicos(Index: Integer): TXSDecimal;
    procedure SetValorAjusteServicos(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorAjusteServicos_Specified(Index: Integer): boolean;
    function  GetValorAjusteManutencao(Index: Integer): TXSDecimal;
    procedure SetValorAjusteManutencao(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorAjusteManutencao_Specified(Index: Integer): boolean;
    function  GetValorAjusteOutros(Index: Integer): TXSDecimal;
    procedure SetValorAjusteOutros(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorAjusteOutros_Specified(Index: Integer): boolean;
    function  GetDeduzirImpostos(Index: Integer): Boolean;
    procedure SetDeduzirImpostos(Index: Integer; const ABoolean: Boolean);
    function  DeduzirImpostos_Specified(Index: Integer): boolean;
    function  GetTarifasBancarias(Index: Integer): TXSDecimal;
    procedure SetTarifasBancarias(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  TarifasBancarias_Specified(Index: Integer): boolean;
    function  GetQuantidadeTarifasBancarias(Index: Integer): Integer;
    procedure SetQuantidadeTarifasBancarias(Index: Integer; const AInteger: Integer);
    function  QuantidadeTarifasBancarias_Specified(Index: Integer): boolean;
    function  GetParcelas(Index: Integer): ArrayOfOperacaoTransporteParcelaRequest;
    procedure SetParcelas(Index: Integer; const AArrayOfOperacaoTransporteParcelaRequest: ArrayOfOperacaoTransporteParcelaRequest);
    function  Parcelas_Specified(Index: Integer): boolean;
    function  GetValorImpostoISS(Index: Integer): TXSDecimal;
    procedure SetValorImpostoISS(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorImpostoISS_Specified(Index: Integer): boolean;
  published
    property ValorFrete:                 TXSDecimal                               Index (IS_OPTN) read GetValorFrete write SetValorFrete stored ValorFrete_Specified;
    property ValorCombustivel:           TXSDecimal                               Index (IS_OPTN) read GetValorCombustivel write SetValorCombustivel stored ValorCombustivel_Specified;
    property ValorPedagio:               TXSDecimal                               Index (IS_OPTN) read GetValorPedagio write SetValorPedagio stored ValorPedagio_Specified;
    property ValorDespesas:              TXSDecimal                               Index (IS_OPTN) read GetValorDespesas write SetValorDespesas stored ValorDespesas_Specified;
    property ValorImpostoSestSenat:      TXSDecimal                               Index (IS_OPTN) read GetValorImpostoSestSenat write SetValorImpostoSestSenat stored ValorImpostoSestSenat_Specified;
    property ValorImpostoIRRF:           TXSDecimal                               Index (IS_OPTN) read GetValorImpostoIRRF write SetValorImpostoIRRF stored ValorImpostoIRRF_Specified;
    property ValorImpostoINSS:           TXSDecimal                               Index (IS_OPTN) read GetValorImpostoINSS write SetValorImpostoINSS stored ValorImpostoINSS_Specified;
    property ValorImpostoIcmsIssqn:      TXSDecimal                               Index (IS_OPTN) read GetValorImpostoIcmsIssqn write SetValorImpostoIcmsIssqn stored ValorImpostoIcmsIssqn_Specified;
    property ValorDescontoAntecipado:    TXSDecimal                               Index (IS_OPTN) read GetValorDescontoAntecipado write SetValorDescontoAntecipado stored ValorDescontoAntecipado_Specified;
    property ValorAjusteCombustivel:     TXSDecimal                               Index (IS_OPTN) read GetValorAjusteCombustivel write SetValorAjusteCombustivel stored ValorAjusteCombustivel_Specified;
    property ValorAjusteServicos:        TXSDecimal                               Index (IS_OPTN) read GetValorAjusteServicos write SetValorAjusteServicos stored ValorAjusteServicos_Specified;
    property ValorAjusteManutencao:      TXSDecimal                               Index (IS_OPTN) read GetValorAjusteManutencao write SetValorAjusteManutencao stored ValorAjusteManutencao_Specified;
    property ValorAjusteOutros:          TXSDecimal                               Index (IS_OPTN) read GetValorAjusteOutros write SetValorAjusteOutros stored ValorAjusteOutros_Specified;
    property DeduzirImpostos:            Boolean                                  Index (IS_OPTN or IS_NLBL) read GetDeduzirImpostos write SetDeduzirImpostos stored DeduzirImpostos_Specified;
    property TarifasBancarias:           TXSDecimal                               Index (IS_OPTN) read GetTarifasBancarias write SetTarifasBancarias stored TarifasBancarias_Specified;
    property QuantidadeTarifasBancarias: Integer                                  Index (IS_OPTN or IS_NLBL) read GetQuantidadeTarifasBancarias write SetQuantidadeTarifasBancarias stored QuantidadeTarifasBancarias_Specified;
    property Parcelas:                   ArrayOfOperacaoTransporteParcelaRequest  Index (IS_OPTN or IS_NLBL) read GetParcelas write SetParcelas stored Parcelas_Specified;
    property ValorImpostoISS:            TXSDecimal                               Index (IS_OPTN or IS_NLBL) read GetValorImpostoISS write SetValorImpostoISS stored ValorImpostoISS_Specified;
  end;

  ArrayOfOperacaoTransporteVeiculoRequest = array of OperacaoTransporteVeiculoRequest2;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }


  // ************************************************************************ //
  // XML       : OperacaoTransporteRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  OperacaoTransporteRequest2 = class(TRemotable)
  private
    FInstrucao: Integer;
    FInstrucao_Specified: boolean;
    FIdOperacaoTransporte: Integer;
    FIdOperacaoTransporte_Specified: boolean;
    FCodigoCentroDeCusto: string;
    FCodigoCentroDeCusto_Specified: boolean;
    FNCM: string;
    FNCM_Specified: boolean;
    FProprietarioCarga: Integer;
    FProprietarioCarga_Specified: boolean;
    FPesoCarga: TXSDecimal;
    FPesoCarga_Specified: boolean;
    FTipoOperacao: Integer;
    FTipoOperacao_Specified: boolean;
    FMunicipioOrigemCodigoIBGE: Integer;
    FMunicipioOrigemCodigoIBGE_Specified: boolean;
    FMunicipioDestinoCodigoIBGE: Integer;
    FMunicipioDestinoCodigoIBGE_Specified: boolean;
    FDataHoraInicio: TXSDateTime;
    FDataHoraInicio_Specified: boolean;
    FDataHoraTermino: TXSDateTime;
    FDataHoraTermino_Specified: boolean;
    FCPFCNPJContratado: string;
    FCPFCNPJContratado_Specified: boolean;
    FValorFrete: TXSDecimal;
    FValorFrete_Specified: boolean;
    FValorCombustivel: TXSDecimal;
    FValorCombustivel_Specified: boolean;
    FValorPedagio: TXSDecimal;
    FValorPedagio_Specified: boolean;
    FValorDespesas: TXSDecimal;
    FValorDespesas_Specified: boolean;
    FValorImpostoSestSenat: TXSDecimal;
    FValorImpostoSestSenat_Specified: boolean;
    FValorImpostoIRRF: TXSDecimal;
    FValorImpostoIRRF_Specified: boolean;
    FValorImpostoINSS: TXSDecimal;
    FValorImpostoINSS_Specified: boolean;
    FValorImpostoIcmsIssqn: TXSDecimal;
    FValorImpostoIcmsIssqn_Specified: boolean;
    FParcelaUnica: Boolean;
    FParcelaUnica_Specified: boolean;
    FModoCompraValePedagio: Integer;
    FModoCompraValePedagio_Specified: boolean;
    FCategoriaVeiculo: Integer;
    FCategoriaVeiculo_Specified: boolean;
    FNomeMotorista: string;
    FNomeMotorista_Specified: boolean;
    FCPFMotorista: string;
    FCPFMotorista_Specified: boolean;
    FRNTRCMotorista: string;
    FRNTRCMotorista_Specified: boolean;
    FItemFinanceiro: string;
    FItemFinanceiro_Specified: boolean;
    FParcelas: ArrayOfOperacaoTransporteParcelaRequest;
    FParcelas_Specified: boolean;
    FVeiculos: ArrayOfOperacaoTransporteVeiculoRequest;
    FVeiculos_Specified: boolean;
    FIdRotaModelo: Integer;
    FIdRotaModelo_Specified: boolean;
    FDeduzirImpostos: Boolean;
    FDeduzirImpostos_Specified: boolean;
    FTarifasBancarias: TXSDecimal;
    FTarifasBancarias_Specified: boolean;
    FQuantidadeTarifasBancarias: Integer;
    FQuantidadeTarifasBancarias_Specified: boolean;
    FIdIntegrador: string;
    FIdIntegrador_Specified: boolean;
    FValorDescontoAntecipado: TXSDecimal;
    FValorDescontoAntecipado_Specified: boolean;
    FCPFCNPJParticipanteDestinatario: string;
    FCPFCNPJParticipanteDestinatario_Specified: boolean;
    FCPFCNPJParticipanteContratante: string;
    FCPFCNPJParticipanteContratante_Specified: boolean;
    FCPFCNPJParticipanteSubcontratante: string;
    FCPFCNPJParticipanteSubcontratante_Specified: boolean;
    FCPFCNPJParticipanteConsignatario: string;
    FCPFCNPJParticipanteConsignatario_Specified: boolean;
    FNumeroLacreTransporteCombustivel: string;
    FNumeroLacreTransporteCombustivel_Specified: boolean;
    FListaDestinatariosAdicionais: ArrayOfParticipanteDestinatarioAdicionalRequest;
    FListaDestinatariosAdicionais_Specified: boolean;
    FNumeroCartaoValePedagio: string;
    FNumeroCartaoValePedagio_Specified: boolean;
    FQuitacao: Boolean;
    FQuitacao_Specified: boolean;
    FDadosQuitacao: DadosQuitacaoFreteRequest2;
    FDadosQuitacao_Specified: boolean;
    FDocumentoValePedagio: string;
    FDocumentoValePedagio_Specified: boolean;
    FValorImpostoISS: TXSDecimal;
    FValorImpostoISS_Specified: boolean;
    function  GetInstrucao(Index: Integer): Integer;
    procedure SetInstrucao(Index: Integer; const AInteger: Integer);
    function  Instrucao_Specified(Index: Integer): boolean;
    function  GetIdOperacaoTransporte(Index: Integer): Integer;
    procedure SetIdOperacaoTransporte(Index: Integer; const AInteger: Integer);
    function  IdOperacaoTransporte_Specified(Index: Integer): boolean;
    function  GetCodigoCentroDeCusto(Index: Integer): string;
    procedure SetCodigoCentroDeCusto(Index: Integer; const Astring: string);
    function  CodigoCentroDeCusto_Specified(Index: Integer): boolean;
    function  GetNCM(Index: Integer): string;
    procedure SetNCM(Index: Integer; const Astring: string);
    function  NCM_Specified(Index: Integer): boolean;
    function  GetProprietarioCarga(Index: Integer): Integer;
    procedure SetProprietarioCarga(Index: Integer; const AInteger: Integer);
    function  ProprietarioCarga_Specified(Index: Integer): boolean;
    function  GetPesoCarga(Index: Integer): TXSDecimal;
    procedure SetPesoCarga(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  PesoCarga_Specified(Index: Integer): boolean;
    function  GetTipoOperacao(Index: Integer): Integer;
    procedure SetTipoOperacao(Index: Integer; const AInteger: Integer);
    function  TipoOperacao_Specified(Index: Integer): boolean;
    function  GetMunicipioOrigemCodigoIBGE(Index: Integer): Integer;
    procedure SetMunicipioOrigemCodigoIBGE(Index: Integer; const AInteger: Integer);
    function  MunicipioOrigemCodigoIBGE_Specified(Index: Integer): boolean;
    function  GetMunicipioDestinoCodigoIBGE(Index: Integer): Integer;
    procedure SetMunicipioDestinoCodigoIBGE(Index: Integer; const AInteger: Integer);
    function  MunicipioDestinoCodigoIBGE_Specified(Index: Integer): boolean;
    function  GetDataHoraInicio(Index: Integer): TXSDateTime;
    procedure SetDataHoraInicio(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DataHoraInicio_Specified(Index: Integer): boolean;
    function  GetDataHoraTermino(Index: Integer): TXSDateTime;
    procedure SetDataHoraTermino(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DataHoraTermino_Specified(Index: Integer): boolean;
    function  GetCPFCNPJContratado(Index: Integer): string;
    procedure SetCPFCNPJContratado(Index: Integer; const Astring: string);
    function  CPFCNPJContratado_Specified(Index: Integer): boolean;
    function  GetValorFrete(Index: Integer): TXSDecimal;
    procedure SetValorFrete(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorFrete_Specified(Index: Integer): boolean;
    function  GetValorCombustivel(Index: Integer): TXSDecimal;
    procedure SetValorCombustivel(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorCombustivel_Specified(Index: Integer): boolean;
    function  GetValorPedagio(Index: Integer): TXSDecimal;
    procedure SetValorPedagio(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorPedagio_Specified(Index: Integer): boolean;
    function  GetValorDespesas(Index: Integer): TXSDecimal;
    procedure SetValorDespesas(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorDespesas_Specified(Index: Integer): boolean;
    function  GetValorImpostoSestSenat(Index: Integer): TXSDecimal;
    procedure SetValorImpostoSestSenat(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorImpostoSestSenat_Specified(Index: Integer): boolean;
    function  GetValorImpostoIRRF(Index: Integer): TXSDecimal;
    procedure SetValorImpostoIRRF(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorImpostoIRRF_Specified(Index: Integer): boolean;
    function  GetValorImpostoINSS(Index: Integer): TXSDecimal;
    procedure SetValorImpostoINSS(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorImpostoINSS_Specified(Index: Integer): boolean;
    function  GetValorImpostoIcmsIssqn(Index: Integer): TXSDecimal;
    procedure SetValorImpostoIcmsIssqn(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorImpostoIcmsIssqn_Specified(Index: Integer): boolean;
    function  GetParcelaUnica(Index: Integer): Boolean;
    procedure SetParcelaUnica(Index: Integer; const ABoolean: Boolean);
    function  ParcelaUnica_Specified(Index: Integer): boolean;
    function  GetModoCompraValePedagio(Index: Integer): Integer;
    procedure SetModoCompraValePedagio(Index: Integer; const AInteger: Integer);
    function  ModoCompraValePedagio_Specified(Index: Integer): boolean;
    function  GetCategoriaVeiculo(Index: Integer): Integer;
    procedure SetCategoriaVeiculo(Index: Integer; const AInteger: Integer);
    function  CategoriaVeiculo_Specified(Index: Integer): boolean;
    function  GetNomeMotorista(Index: Integer): string;
    procedure SetNomeMotorista(Index: Integer; const Astring: string);
    function  NomeMotorista_Specified(Index: Integer): boolean;
    function  GetCPFMotorista(Index: Integer): string;
    procedure SetCPFMotorista(Index: Integer; const Astring: string);
    function  CPFMotorista_Specified(Index: Integer): boolean;
    function  GetRNTRCMotorista(Index: Integer): string;
    procedure SetRNTRCMotorista(Index: Integer; const Astring: string);
    function  RNTRCMotorista_Specified(Index: Integer): boolean;
    function  GetItemFinanceiro(Index: Integer): string;
    procedure SetItemFinanceiro(Index: Integer; const Astring: string);
    function  ItemFinanceiro_Specified(Index: Integer): boolean;
    function  GetParcelas(Index: Integer): ArrayOfOperacaoTransporteParcelaRequest;
    procedure SetParcelas(Index: Integer; const AArrayOfOperacaoTransporteParcelaRequest: ArrayOfOperacaoTransporteParcelaRequest);
    function  Parcelas_Specified(Index: Integer): boolean;
    function  GetVeiculos(Index: Integer): ArrayOfOperacaoTransporteVeiculoRequest;
    procedure SetVeiculos(Index: Integer; const AArrayOfOperacaoTransporteVeiculoRequest: ArrayOfOperacaoTransporteVeiculoRequest);
    function  Veiculos_Specified(Index: Integer): boolean;
    function  GetIdRotaModelo(Index: Integer): Integer;
    procedure SetIdRotaModelo(Index: Integer; const AInteger: Integer);
    function  IdRotaModelo_Specified(Index: Integer): boolean;
    function  GetDeduzirImpostos(Index: Integer): Boolean;
    procedure SetDeduzirImpostos(Index: Integer; const ABoolean: Boolean);
    function  DeduzirImpostos_Specified(Index: Integer): boolean;
    function  GetTarifasBancarias(Index: Integer): TXSDecimal;
    procedure SetTarifasBancarias(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  TarifasBancarias_Specified(Index: Integer): boolean;
    function  GetQuantidadeTarifasBancarias(Index: Integer): Integer;
    procedure SetQuantidadeTarifasBancarias(Index: Integer; const AInteger: Integer);
    function  QuantidadeTarifasBancarias_Specified(Index: Integer): boolean;
    function  GetIdIntegrador(Index: Integer): string;
    procedure SetIdIntegrador(Index: Integer; const Astring: string);
    function  IdIntegrador_Specified(Index: Integer): boolean;
    function  GetValorDescontoAntecipado(Index: Integer): TXSDecimal;
    procedure SetValorDescontoAntecipado(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorDescontoAntecipado_Specified(Index: Integer): boolean;
    function  GetCPFCNPJParticipanteDestinatario(Index: Integer): string;
    procedure SetCPFCNPJParticipanteDestinatario(Index: Integer; const Astring: string);
    function  CPFCNPJParticipanteDestinatario_Specified(Index: Integer): boolean;
    function  GetCPFCNPJParticipanteContratante(Index: Integer): string;
    procedure SetCPFCNPJParticipanteContratante(Index: Integer; const Astring: string);
    function  CPFCNPJParticipanteContratante_Specified(Index: Integer): boolean;
    function  GetCPFCNPJParticipanteSubcontratante(Index: Integer): string;
    procedure SetCPFCNPJParticipanteSubcontratante(Index: Integer; const Astring: string);
    function  CPFCNPJParticipanteSubcontratante_Specified(Index: Integer): boolean;
    function  GetCPFCNPJParticipanteConsignatario(Index: Integer): string;
    procedure SetCPFCNPJParticipanteConsignatario(Index: Integer; const Astring: string);
    function  CPFCNPJParticipanteConsignatario_Specified(Index: Integer): boolean;
    function  GetNumeroLacreTransporteCombustivel(Index: Integer): string;
    procedure SetNumeroLacreTransporteCombustivel(Index: Integer; const Astring: string);
    function  NumeroLacreTransporteCombustivel_Specified(Index: Integer): boolean;
    function  GetListaDestinatariosAdicionais(Index: Integer): ArrayOfParticipanteDestinatarioAdicionalRequest;
    procedure SetListaDestinatariosAdicionais(Index: Integer; const AArrayOfParticipanteDestinatarioAdicionalRequest: ArrayOfParticipanteDestinatarioAdicionalRequest);
    function  ListaDestinatariosAdicionais_Specified(Index: Integer): boolean;
    function  GetNumeroCartaoValePedagio(Index: Integer): string;
    procedure SetNumeroCartaoValePedagio(Index: Integer; const Astring: string);
    function  NumeroCartaoValePedagio_Specified(Index: Integer): boolean;
    function  GetQuitacao(Index: Integer): Boolean;
    procedure SetQuitacao(Index: Integer; const ABoolean: Boolean);
    function  Quitacao_Specified(Index: Integer): boolean;
    function  GetDadosQuitacao(Index: Integer): DadosQuitacaoFreteRequest2;
    procedure SetDadosQuitacao(Index: Integer; const ADadosQuitacaoFreteRequest2: DadosQuitacaoFreteRequest2);
    function  DadosQuitacao_Specified(Index: Integer): boolean;
    function  GetDocumentoValePedagio(Index: Integer): string;
    procedure SetDocumentoValePedagio(Index: Integer; const Astring: string);
    function  DocumentoValePedagio_Specified(Index: Integer): boolean;
    function  GetValorImpostoISS(Index: Integer): TXSDecimal;
    procedure SetValorImpostoISS(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorImpostoISS_Specified(Index: Integer): boolean;
  published
    property Instrucao:                         Integer                                          Index (IS_OPTN) read GetInstrucao write SetInstrucao stored Instrucao_Specified;
    property IdOperacaoTransporte:              Integer                                          Index (IS_OPTN or IS_NLBL) read GetIdOperacaoTransporte write SetIdOperacaoTransporte stored IdOperacaoTransporte_Specified;
    property CodigoCentroDeCusto:               string                                           Index (IS_OPTN or IS_NLBL) read GetCodigoCentroDeCusto write SetCodigoCentroDeCusto stored CodigoCentroDeCusto_Specified;
    property NCM:                               string                                           Index (IS_OPTN or IS_NLBL) read GetNCM write SetNCM stored NCM_Specified;
    property ProprietarioCarga:                 Integer                                          Index (IS_OPTN) read GetProprietarioCarga write SetProprietarioCarga stored ProprietarioCarga_Specified;
    property PesoCarga:                         TXSDecimal                                       Index (IS_OPTN or IS_NLBL) read GetPesoCarga write SetPesoCarga stored PesoCarga_Specified;
    property TipoOperacao:                      Integer                                          Index (IS_OPTN) read GetTipoOperacao write SetTipoOperacao stored TipoOperacao_Specified;
    property MunicipioOrigemCodigoIBGE:         Integer                                          Index (IS_OPTN or IS_NLBL) read GetMunicipioOrigemCodigoIBGE write SetMunicipioOrigemCodigoIBGE stored MunicipioOrigemCodigoIBGE_Specified;
    property MunicipioDestinoCodigoIBGE:        Integer                                          Index (IS_OPTN or IS_NLBL) read GetMunicipioDestinoCodigoIBGE write SetMunicipioDestinoCodigoIBGE stored MunicipioDestinoCodigoIBGE_Specified;
    property DataHoraInicio:                    TXSDateTime                                      Index (IS_OPTN or IS_NLBL) read GetDataHoraInicio write SetDataHoraInicio stored DataHoraInicio_Specified;
    property DataHoraTermino:                   TXSDateTime                                      Index (IS_OPTN) read GetDataHoraTermino write SetDataHoraTermino stored DataHoraTermino_Specified;
    property CPFCNPJContratado:                 string                                           Index (IS_OPTN or IS_NLBL) read GetCPFCNPJContratado write SetCPFCNPJContratado stored CPFCNPJContratado_Specified;
    property ValorFrete:                        TXSDecimal                                       Index (IS_OPTN) read GetValorFrete write SetValorFrete stored ValorFrete_Specified;
    property ValorCombustivel:                  TXSDecimal                                       Index (IS_OPTN) read GetValorCombustivel write SetValorCombustivel stored ValorCombustivel_Specified;
    property ValorPedagio:                      TXSDecimal                                       Index (IS_OPTN) read GetValorPedagio write SetValorPedagio stored ValorPedagio_Specified;
    property ValorDespesas:                     TXSDecimal                                       Index (IS_OPTN) read GetValorDespesas write SetValorDespesas stored ValorDespesas_Specified;
    property ValorImpostoSestSenat:             TXSDecimal                                       Index (IS_OPTN) read GetValorImpostoSestSenat write SetValorImpostoSestSenat stored ValorImpostoSestSenat_Specified;
    property ValorImpostoIRRF:                  TXSDecimal                                       Index (IS_OPTN) read GetValorImpostoIRRF write SetValorImpostoIRRF stored ValorImpostoIRRF_Specified;
    property ValorImpostoINSS:                  TXSDecimal                                       Index (IS_OPTN) read GetValorImpostoINSS write SetValorImpostoINSS stored ValorImpostoINSS_Specified;
    property ValorImpostoIcmsIssqn:             TXSDecimal                                       Index (IS_OPTN) read GetValorImpostoIcmsIssqn write SetValorImpostoIcmsIssqn stored ValorImpostoIcmsIssqn_Specified;
    property ParcelaUnica:                      Boolean                                          Index (IS_OPTN) read GetParcelaUnica write SetParcelaUnica stored ParcelaUnica_Specified;
    property ModoCompraValePedagio:             Integer                                          Index (IS_OPTN) read GetModoCompraValePedagio write SetModoCompraValePedagio stored ModoCompraValePedagio_Specified;
    property CategoriaVeiculo:                  Integer                                          Index (IS_OPTN) read GetCategoriaVeiculo write SetCategoriaVeiculo stored CategoriaVeiculo_Specified;
    property NomeMotorista:                     string                                           Index (IS_OPTN or IS_NLBL) read GetNomeMotorista write SetNomeMotorista stored NomeMotorista_Specified;
    property CPFMotorista:                      string                                           Index (IS_OPTN or IS_NLBL) read GetCPFMotorista write SetCPFMotorista stored CPFMotorista_Specified;
    property RNTRCMotorista:                    string                                           Index (IS_OPTN or IS_NLBL) read GetRNTRCMotorista write SetRNTRCMotorista stored RNTRCMotorista_Specified;
    property ItemFinanceiro:                    string                                           Index (IS_OPTN or IS_NLBL) read GetItemFinanceiro write SetItemFinanceiro stored ItemFinanceiro_Specified;
    property Parcelas:                          ArrayOfOperacaoTransporteParcelaRequest          Index (IS_OPTN or IS_NLBL) read GetParcelas write SetParcelas stored Parcelas_Specified;
    property Veiculos:                          ArrayOfOperacaoTransporteVeiculoRequest          Index (IS_OPTN or IS_NLBL) read GetVeiculos write SetVeiculos stored Veiculos_Specified;
    property IdRotaModelo:                      Integer                                          Index (IS_OPTN or IS_NLBL) read GetIdRotaModelo write SetIdRotaModelo stored IdRotaModelo_Specified;
    property DeduzirImpostos:                   Boolean                                          Index (IS_OPTN or IS_NLBL) read GetDeduzirImpostos write SetDeduzirImpostos stored DeduzirImpostos_Specified;
    property TarifasBancarias:                  TXSDecimal                                       Index (IS_OPTN) read GetTarifasBancarias write SetTarifasBancarias stored TarifasBancarias_Specified;
    property QuantidadeTarifasBancarias:        Integer                                          Index (IS_OPTN) read GetQuantidadeTarifasBancarias write SetQuantidadeTarifasBancarias stored QuantidadeTarifasBancarias_Specified;
    property IdIntegrador:                      string                                           Index (IS_OPTN or IS_NLBL) read GetIdIntegrador write SetIdIntegrador stored IdIntegrador_Specified;
    property ValorDescontoAntecipado:           TXSDecimal                                       Index (IS_OPTN or IS_NLBL) read GetValorDescontoAntecipado write SetValorDescontoAntecipado stored ValorDescontoAntecipado_Specified;
    property CPFCNPJParticipanteDestinatario:   string                                           Index (IS_OPTN or IS_NLBL) read GetCPFCNPJParticipanteDestinatario write SetCPFCNPJParticipanteDestinatario stored CPFCNPJParticipanteDestinatario_Specified;
    property CPFCNPJParticipanteContratante:    string                                           Index (IS_OPTN or IS_NLBL) read GetCPFCNPJParticipanteContratante write SetCPFCNPJParticipanteContratante stored CPFCNPJParticipanteContratante_Specified;
    property CPFCNPJParticipanteSubcontratante: string                                           Index (IS_OPTN or IS_NLBL) read GetCPFCNPJParticipanteSubcontratante write SetCPFCNPJParticipanteSubcontratante stored CPFCNPJParticipanteSubcontratante_Specified;
    property CPFCNPJParticipanteConsignatario:  string                                           Index (IS_OPTN or IS_NLBL) read GetCPFCNPJParticipanteConsignatario write SetCPFCNPJParticipanteConsignatario stored CPFCNPJParticipanteConsignatario_Specified;
    property NumeroLacreTransporteCombustivel:  string                                           Index (IS_OPTN or IS_NLBL) read GetNumeroLacreTransporteCombustivel write SetNumeroLacreTransporteCombustivel stored NumeroLacreTransporteCombustivel_Specified;
    property ListaDestinatariosAdicionais:      ArrayOfParticipanteDestinatarioAdicionalRequest  Index (IS_OPTN or IS_NLBL) read GetListaDestinatariosAdicionais write SetListaDestinatariosAdicionais stored ListaDestinatariosAdicionais_Specified;
    property NumeroCartaoValePedagio:           string                                           Index (IS_OPTN or IS_NLBL) read GetNumeroCartaoValePedagio write SetNumeroCartaoValePedagio stored NumeroCartaoValePedagio_Specified;
    property Quitacao:                          Boolean                                          Index (IS_OPTN or IS_NLBL) read GetQuitacao write SetQuitacao stored Quitacao_Specified;
    property DadosQuitacao:                     DadosQuitacaoFreteRequest2                       Index (IS_OPTN or IS_NLBL) read GetDadosQuitacao write SetDadosQuitacao stored DadosQuitacao_Specified;
    property DocumentoValePedagio:              string                                           Index (IS_OPTN or IS_NLBL) read GetDocumentoValePedagio write SetDocumentoValePedagio stored DocumentoValePedagio_Specified;
    property ValorImpostoISS:                   TXSDecimal                                       Index (IS_OPTN or IS_NLBL) read GetValorImpostoISS write SetValorImpostoISS stored ValorImpostoISS_Specified;
  end;



  // ************************************************************************ //
  // XML       : RetificacaoOperacaoTransporteRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  RetificacaoOperacaoTransporteRequest2 = class(TRemotable)
  private
    FIdOperacaoTransporte: Integer;
    FIdOperacaoTransporte_Specified: boolean;
    FNCM: string;
    FNCM_Specified: boolean;
    FPesoCarga: TXSDecimal;
    FPesoCarga_Specified: boolean;
    FMunicipioOrigemCodigoIBGE: Integer;
    FMunicipioOrigemCodigoIBGE_Specified: boolean;
    FMunicipioDestinoCodigoIBGE: Integer;
    FMunicipioDestinoCodigoIBGE_Specified: boolean;
    FDataHoraInicio: TXSDateTime;
    FDataHoraInicio_Specified: boolean;
    FDataHoraTermino: TXSDateTime;
    FDataHoraTermino_Specified: boolean;
    FValores: RetificacaoValoresRequest2;
    FValores_Specified: boolean;
    FVeiculos: ArrayOfOperacaoTransporteVeiculoRequest;
    FVeiculos_Specified: boolean;
    function  GetIdOperacaoTransporte(Index: Integer): Integer;
    procedure SetIdOperacaoTransporte(Index: Integer; const AInteger: Integer);
    function  IdOperacaoTransporte_Specified(Index: Integer): boolean;
    function  GetNCM(Index: Integer): string;
    procedure SetNCM(Index: Integer; const Astring: string);
    function  NCM_Specified(Index: Integer): boolean;
    function  GetPesoCarga(Index: Integer): TXSDecimal;
    procedure SetPesoCarga(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  PesoCarga_Specified(Index: Integer): boolean;
    function  GetMunicipioOrigemCodigoIBGE(Index: Integer): Integer;
    procedure SetMunicipioOrigemCodigoIBGE(Index: Integer; const AInteger: Integer);
    function  MunicipioOrigemCodigoIBGE_Specified(Index: Integer): boolean;
    function  GetMunicipioDestinoCodigoIBGE(Index: Integer): Integer;
    procedure SetMunicipioDestinoCodigoIBGE(Index: Integer; const AInteger: Integer);
    function  MunicipioDestinoCodigoIBGE_Specified(Index: Integer): boolean;
    function  GetDataHoraInicio(Index: Integer): TXSDateTime;
    procedure SetDataHoraInicio(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DataHoraInicio_Specified(Index: Integer): boolean;
    function  GetDataHoraTermino(Index: Integer): TXSDateTime;
    procedure SetDataHoraTermino(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DataHoraTermino_Specified(Index: Integer): boolean;
    function  GetValores(Index: Integer): RetificacaoValoresRequest2;
    procedure SetValores(Index: Integer; const ARetificacaoValoresRequest2: RetificacaoValoresRequest2);
    function  Valores_Specified(Index: Integer): boolean;
    function  GetVeiculos(Index: Integer): ArrayOfOperacaoTransporteVeiculoRequest;
    procedure SetVeiculos(Index: Integer; const AArrayOfOperacaoTransporteVeiculoRequest: ArrayOfOperacaoTransporteVeiculoRequest);
    function  Veiculos_Specified(Index: Integer): boolean;
  published
    property IdOperacaoTransporte:       Integer                                  Index (IS_OPTN) read GetIdOperacaoTransporte write SetIdOperacaoTransporte stored IdOperacaoTransporte_Specified;
    property NCM:                        string                                   Index (IS_OPTN or IS_NLBL) read GetNCM write SetNCM stored NCM_Specified;
    property PesoCarga:                  TXSDecimal                               Index (IS_OPTN or IS_NLBL) read GetPesoCarga write SetPesoCarga stored PesoCarga_Specified;
    property MunicipioOrigemCodigoIBGE:  Integer                                  Index (IS_OPTN or IS_NLBL) read GetMunicipioOrigemCodigoIBGE write SetMunicipioOrigemCodigoIBGE stored MunicipioOrigemCodigoIBGE_Specified;
    property MunicipioDestinoCodigoIBGE: Integer                                  Index (IS_OPTN or IS_NLBL) read GetMunicipioDestinoCodigoIBGE write SetMunicipioDestinoCodigoIBGE stored MunicipioDestinoCodigoIBGE_Specified;
    property DataHoraInicio:             TXSDateTime                              Index (IS_OPTN or IS_NLBL) read GetDataHoraInicio write SetDataHoraInicio stored DataHoraInicio_Specified;
    property DataHoraTermino:            TXSDateTime                              Index (IS_OPTN or IS_NLBL) read GetDataHoraTermino write SetDataHoraTermino stored DataHoraTermino_Specified;
    property Valores:                    RetificacaoValoresRequest2               Index (IS_OPTN or IS_NLBL) read GetValores write SetValores stored Valores_Specified;
    property Veiculos:                   ArrayOfOperacaoTransporteVeiculoRequest  Index (IS_OPTN or IS_NLBL) read GetVeiculos write SetVeiculos stored Veiculos_Specified;
  end;



  // ************************************************************************ //
  // XML       : ParticipanteDestinatarioAdicionalRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ParticipanteDestinatarioAdicionalRequest2 = class(TRemotable)
  private
    FIdParticipante: Integer;
    FIdParticipante_Specified: boolean;
    FCPFCNPJ: string;
    FCPFCNPJ_Specified: boolean;
    function  GetIdParticipante(Index: Integer): Integer;
    procedure SetIdParticipante(Index: Integer; const AInteger: Integer);
    function  IdParticipante_Specified(Index: Integer): boolean;
    function  GetCPFCNPJ(Index: Integer): string;
    procedure SetCPFCNPJ(Index: Integer; const Astring: string);
    function  CPFCNPJ_Specified(Index: Integer): boolean;
  published
    property IdParticipante: Integer  Index (IS_OPTN or IS_NLBL) read GetIdParticipante write SetIdParticipante stored IdParticipante_Specified;
    property CPFCNPJ:        string   Index (IS_OPTN or IS_NLBL) read GetCPFCNPJ write SetCPFCNPJ stored CPFCNPJ_Specified;
  end;

  ArrayOfOperacaoTransporteParcelasResponse = array of OperacaoTransporteParcelasResponse2;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  ArrayOfOperacaoTransporteVeiculoResponse = array of OperacaoTransporteVeiculoResponse2;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }


  // ************************************************************************ //
  // XML       : OperacaoTransporteResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  OperacaoTransporteResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FIdOperacaoTransporte: Integer;
    FIdOperacaoTransporte_Specified: boolean;
    FCIOT: string;
    FCIOT_Specified: boolean;
    FCodigoCentroDeCusto: string;
    FCodigoCentroDeCusto_Specified: boolean;
    FNCM: string;
    FNCM_Specified: boolean;
    FProprietarioCarga: string;
    FProprietarioCarga_Specified: boolean;
    FPesoCarga: TXSDecimal;
    FPesoCarga_Specified: boolean;
    FTipoOperacao: string;
    FTipoOperacao_Specified: boolean;
    FMunicipioOrigemCodigoIBGE: Integer;
    FMunicipioOrigemCodigoIBGE_Specified: boolean;
    FMunicipioDestinoCodigoIBGE: Integer;
    FMunicipioDestinoCodigoIBGE_Specified: boolean;
    FDataHoraInicio: TXSDateTime;
    FDataHoraInicio_Specified: boolean;
    FDataHoraTermino: TXSDateTime;
    FDataHoraTermino_Specified: boolean;
    FCPFCNPJContratado: string;
    FCPFCNPJContratado_Specified: boolean;
    FValorFrete: TXSDecimal;
    FValorFrete_Specified: boolean;
    FValorCombustivel: TXSDecimal;
    FValorCombustivel_Specified: boolean;
    FValorPedagio: TXSDecimal;
    FValorPedagio_Specified: boolean;
    FValorDespesas: TXSDecimal;
    FValorDespesas_Specified: boolean;
    FValorImpostoSestSenat: TXSDecimal;
    FValorImpostoSestSenat_Specified: boolean;
    FValorImpostoIRRF: TXSDecimal;
    FValorImpostoIRRF_Specified: boolean;
    FValorImpostoINSS: TXSDecimal;
    FValorImpostoINSS_Specified: boolean;
    FValorImpostoIcmsIssqn: TXSDecimal;
    FValorImpostoIcmsIssqn_Specified: boolean;
    FParcelaUnica: Boolean;
    FParcelaUnica_Specified: boolean;
    FModoCompraValePedagio: Integer;
    FModoCompraValePedagio_Specified: boolean;
    FCategoriaVeiculo: Integer;
    FCategoriaVeiculo_Specified: boolean;
    FNomeMotorista: string;
    FNomeMotorista_Specified: boolean;
    FCPFMotorista: string;
    FCPFMotorista_Specified: boolean;
    FRNTRCMotorista: string;
    FRNTRCMotorista_Specified: boolean;
    FTriada: Boolean;
    FTriada_Specified: boolean;
    FItemFinanceiro: string;
    FItemFinanceiro_Specified: boolean;
    FParcelas: ArrayOfOperacaoTransporteParcelasResponse;
    FParcelas_Specified: boolean;
    FVeiculos: ArrayOfOperacaoTransporteVeiculoResponse;
    FVeiculos_Specified: boolean;
    FValorContratado: TXSDecimal;
    FValorContratado_Specified: boolean;
    FDispensadoPelaANTT: Boolean;
    FDispensadoPelaANTT_Specified: boolean;
    FTarifasBancarias: TXSDecimal;
    FTarifasBancarias_Specified: boolean;
    FValorImpostoPIS: TXSDecimal;
    FValorImpostoPIS_Specified: boolean;
    FValorImpostoCofins: TXSDecimal;
    FValorImpostoCofins_Specified: boolean;
    FBaseCalculoPISCofins: TXSDecimal;
    FBaseCalculoPISCofins_Specified: boolean;
    FValorDescontoAntecipado: TXSDecimal;
    FValorDescontoAntecipado_Specified: boolean;
    FIdCompraValePedagio: Integer;
    FIdCompraValePedagio_Specified: boolean;
    FCPFCNPJParticipanteDestinatario: string;
    FCPFCNPJParticipanteDestinatario_Specified: boolean;
    FCPFCNPJParticipanteContratante: string;
    FCPFCNPJParticipanteContratante_Specified: boolean;
    FCPFCNPJParticipanteSubcontratante: string;
    FCPFCNPJParticipanteSubcontratante_Specified: boolean;
    FCPFCNPJParticipanteConsignatario: string;
    FCPFCNPJParticipanteConsignatario_Specified: boolean;
    FNumeroLacreTransporteCombustivel: string;
    FNumeroLacreTransporteCombustivel_Specified: boolean;
    FParticipantesDestinatarios: string;
    FParticipantesDestinatarios_Specified: boolean;
    FStatusOperacao: string;
    FStatusOperacao_Specified: boolean;
    FQuitacao: Boolean;
    FQuitacao_Specified: boolean;
    FDadosQuitacao: DadosQuitacaoFreteResponse2;
    FDadosQuitacao_Specified: boolean;
    FMensagemRetorno: string;
    FMensagemRetorno_Specified: boolean;
    FDocumentoValePedagio: string;
    FDocumentoValePedagio_Specified: boolean;
    FChaveQuitacao: string;
    FChaveQuitacao_Specified: boolean;
    FValorImpostoISS: TXSDecimal;
    FValorImpostoISS_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetIdOperacaoTransporte(Index: Integer): Integer;
    procedure SetIdOperacaoTransporte(Index: Integer; const AInteger: Integer);
    function  IdOperacaoTransporte_Specified(Index: Integer): boolean;
    function  GetCIOT(Index: Integer): string;
    procedure SetCIOT(Index: Integer; const Astring: string);
    function  CIOT_Specified(Index: Integer): boolean;
    function  GetCodigoCentroDeCusto(Index: Integer): string;
    procedure SetCodigoCentroDeCusto(Index: Integer; const Astring: string);
    function  CodigoCentroDeCusto_Specified(Index: Integer): boolean;
    function  GetNCM(Index: Integer): string;
    procedure SetNCM(Index: Integer; const Astring: string);
    function  NCM_Specified(Index: Integer): boolean;
    function  GetProprietarioCarga(Index: Integer): string;
    procedure SetProprietarioCarga(Index: Integer; const Astring: string);
    function  ProprietarioCarga_Specified(Index: Integer): boolean;
    function  GetPesoCarga(Index: Integer): TXSDecimal;
    procedure SetPesoCarga(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  PesoCarga_Specified(Index: Integer): boolean;
    function  GetTipoOperacao(Index: Integer): string;
    procedure SetTipoOperacao(Index: Integer; const Astring: string);
    function  TipoOperacao_Specified(Index: Integer): boolean;
    function  GetMunicipioOrigemCodigoIBGE(Index: Integer): Integer;
    procedure SetMunicipioOrigemCodigoIBGE(Index: Integer; const AInteger: Integer);
    function  MunicipioOrigemCodigoIBGE_Specified(Index: Integer): boolean;
    function  GetMunicipioDestinoCodigoIBGE(Index: Integer): Integer;
    procedure SetMunicipioDestinoCodigoIBGE(Index: Integer; const AInteger: Integer);
    function  MunicipioDestinoCodigoIBGE_Specified(Index: Integer): boolean;
    function  GetDataHoraInicio(Index: Integer): TXSDateTime;
    procedure SetDataHoraInicio(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DataHoraInicio_Specified(Index: Integer): boolean;
    function  GetDataHoraTermino(Index: Integer): TXSDateTime;
    procedure SetDataHoraTermino(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DataHoraTermino_Specified(Index: Integer): boolean;
    function  GetCPFCNPJContratado(Index: Integer): string;
    procedure SetCPFCNPJContratado(Index: Integer; const Astring: string);
    function  CPFCNPJContratado_Specified(Index: Integer): boolean;
    function  GetValorFrete(Index: Integer): TXSDecimal;
    procedure SetValorFrete(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorFrete_Specified(Index: Integer): boolean;
    function  GetValorCombustivel(Index: Integer): TXSDecimal;
    procedure SetValorCombustivel(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorCombustivel_Specified(Index: Integer): boolean;
    function  GetValorPedagio(Index: Integer): TXSDecimal;
    procedure SetValorPedagio(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorPedagio_Specified(Index: Integer): boolean;
    function  GetValorDespesas(Index: Integer): TXSDecimal;
    procedure SetValorDespesas(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorDespesas_Specified(Index: Integer): boolean;
    function  GetValorImpostoSestSenat(Index: Integer): TXSDecimal;
    procedure SetValorImpostoSestSenat(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorImpostoSestSenat_Specified(Index: Integer): boolean;
    function  GetValorImpostoIRRF(Index: Integer): TXSDecimal;
    procedure SetValorImpostoIRRF(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorImpostoIRRF_Specified(Index: Integer): boolean;
    function  GetValorImpostoINSS(Index: Integer): TXSDecimal;
    procedure SetValorImpostoINSS(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorImpostoINSS_Specified(Index: Integer): boolean;
    function  GetValorImpostoIcmsIssqn(Index: Integer): TXSDecimal;
    procedure SetValorImpostoIcmsIssqn(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorImpostoIcmsIssqn_Specified(Index: Integer): boolean;
    function  GetParcelaUnica(Index: Integer): Boolean;
    procedure SetParcelaUnica(Index: Integer; const ABoolean: Boolean);
    function  ParcelaUnica_Specified(Index: Integer): boolean;
    function  GetModoCompraValePedagio(Index: Integer): Integer;
    procedure SetModoCompraValePedagio(Index: Integer; const AInteger: Integer);
    function  ModoCompraValePedagio_Specified(Index: Integer): boolean;
    function  GetCategoriaVeiculo(Index: Integer): Integer;
    procedure SetCategoriaVeiculo(Index: Integer; const AInteger: Integer);
    function  CategoriaVeiculo_Specified(Index: Integer): boolean;
    function  GetNomeMotorista(Index: Integer): string;
    procedure SetNomeMotorista(Index: Integer; const Astring: string);
    function  NomeMotorista_Specified(Index: Integer): boolean;
    function  GetCPFMotorista(Index: Integer): string;
    procedure SetCPFMotorista(Index: Integer; const Astring: string);
    function  CPFMotorista_Specified(Index: Integer): boolean;
    function  GetRNTRCMotorista(Index: Integer): string;
    procedure SetRNTRCMotorista(Index: Integer; const Astring: string);
    function  RNTRCMotorista_Specified(Index: Integer): boolean;
    function  GetTriada(Index: Integer): Boolean;
    procedure SetTriada(Index: Integer; const ABoolean: Boolean);
    function  Triada_Specified(Index: Integer): boolean;
    function  GetItemFinanceiro(Index: Integer): string;
    procedure SetItemFinanceiro(Index: Integer; const Astring: string);
    function  ItemFinanceiro_Specified(Index: Integer): boolean;
    function  GetParcelas(Index: Integer): ArrayOfOperacaoTransporteParcelasResponse;
    procedure SetParcelas(Index: Integer; const AArrayOfOperacaoTransporteParcelasResponse: ArrayOfOperacaoTransporteParcelasResponse);
    function  Parcelas_Specified(Index: Integer): boolean;
    function  GetVeiculos(Index: Integer): ArrayOfOperacaoTransporteVeiculoResponse;
    procedure SetVeiculos(Index: Integer; const AArrayOfOperacaoTransporteVeiculoResponse: ArrayOfOperacaoTransporteVeiculoResponse);
    function  Veiculos_Specified(Index: Integer): boolean;
    function  GetValorContratado(Index: Integer): TXSDecimal;
    procedure SetValorContratado(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorContratado_Specified(Index: Integer): boolean;
    function  GetDispensadoPelaANTT(Index: Integer): Boolean;
    procedure SetDispensadoPelaANTT(Index: Integer; const ABoolean: Boolean);
    function  DispensadoPelaANTT_Specified(Index: Integer): boolean;
    function  GetTarifasBancarias(Index: Integer): TXSDecimal;
    procedure SetTarifasBancarias(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  TarifasBancarias_Specified(Index: Integer): boolean;
    function  GetValorImpostoPIS(Index: Integer): TXSDecimal;
    procedure SetValorImpostoPIS(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorImpostoPIS_Specified(Index: Integer): boolean;
    function  GetValorImpostoCofins(Index: Integer): TXSDecimal;
    procedure SetValorImpostoCofins(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorImpostoCofins_Specified(Index: Integer): boolean;
    function  GetBaseCalculoPISCofins(Index: Integer): TXSDecimal;
    procedure SetBaseCalculoPISCofins(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  BaseCalculoPISCofins_Specified(Index: Integer): boolean;
    function  GetValorDescontoAntecipado(Index: Integer): TXSDecimal;
    procedure SetValorDescontoAntecipado(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorDescontoAntecipado_Specified(Index: Integer): boolean;
    function  GetIdCompraValePedagio(Index: Integer): Integer;
    procedure SetIdCompraValePedagio(Index: Integer; const AInteger: Integer);
    function  IdCompraValePedagio_Specified(Index: Integer): boolean;
    function  GetCPFCNPJParticipanteDestinatario(Index: Integer): string;
    procedure SetCPFCNPJParticipanteDestinatario(Index: Integer; const Astring: string);
    function  CPFCNPJParticipanteDestinatario_Specified(Index: Integer): boolean;
    function  GetCPFCNPJParticipanteContratante(Index: Integer): string;
    procedure SetCPFCNPJParticipanteContratante(Index: Integer; const Astring: string);
    function  CPFCNPJParticipanteContratante_Specified(Index: Integer): boolean;
    function  GetCPFCNPJParticipanteSubcontratante(Index: Integer): string;
    procedure SetCPFCNPJParticipanteSubcontratante(Index: Integer; const Astring: string);
    function  CPFCNPJParticipanteSubcontratante_Specified(Index: Integer): boolean;
    function  GetCPFCNPJParticipanteConsignatario(Index: Integer): string;
    procedure SetCPFCNPJParticipanteConsignatario(Index: Integer; const Astring: string);
    function  CPFCNPJParticipanteConsignatario_Specified(Index: Integer): boolean;
    function  GetNumeroLacreTransporteCombustivel(Index: Integer): string;
    procedure SetNumeroLacreTransporteCombustivel(Index: Integer; const Astring: string);
    function  NumeroLacreTransporteCombustivel_Specified(Index: Integer): boolean;
    function  GetParticipantesDestinatarios(Index: Integer): string;
    procedure SetParticipantesDestinatarios(Index: Integer; const Astring: string);
    function  ParticipantesDestinatarios_Specified(Index: Integer): boolean;
    function  GetStatusOperacao(Index: Integer): string;
    procedure SetStatusOperacao(Index: Integer; const Astring: string);
    function  StatusOperacao_Specified(Index: Integer): boolean;
    function  GetQuitacao(Index: Integer): Boolean;
    procedure SetQuitacao(Index: Integer; const ABoolean: Boolean);
    function  Quitacao_Specified(Index: Integer): boolean;
    function  GetDadosQuitacao(Index: Integer): DadosQuitacaoFreteResponse2;
    procedure SetDadosQuitacao(Index: Integer; const ADadosQuitacaoFreteResponse2: DadosQuitacaoFreteResponse2);
    function  DadosQuitacao_Specified(Index: Integer): boolean;
    function  GetMensagemRetorno(Index: Integer): string;
    procedure SetMensagemRetorno(Index: Integer; const Astring: string);
    function  MensagemRetorno_Specified(Index: Integer): boolean;
    function  GetDocumentoValePedagio(Index: Integer): string;
    procedure SetDocumentoValePedagio(Index: Integer; const Astring: string);
    function  DocumentoValePedagio_Specified(Index: Integer): boolean;
    function  GetChaveQuitacao(Index: Integer): string;
    procedure SetChaveQuitacao(Index: Integer; const Astring: string);
    function  ChaveQuitacao_Specified(Index: Integer): boolean;
    function  GetValorImpostoISS(Index: Integer): TXSDecimal;
    procedure SetValorImpostoISS(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorImpostoISS_Specified(Index: Integer): boolean;
  published
    property Erro:                              ErroResponse2                              Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property IdOperacaoTransporte:              Integer                                    Index (IS_OPTN) read GetIdOperacaoTransporte write SetIdOperacaoTransporte stored IdOperacaoTransporte_Specified;
    property CIOT:                              string                                     Index (IS_OPTN or IS_NLBL) read GetCIOT write SetCIOT stored CIOT_Specified;
    property CodigoCentroDeCusto:               string                                     Index (IS_OPTN or IS_NLBL) read GetCodigoCentroDeCusto write SetCodigoCentroDeCusto stored CodigoCentroDeCusto_Specified;
    property NCM:                               string                                     Index (IS_OPTN or IS_NLBL) read GetNCM write SetNCM stored NCM_Specified;
    property ProprietarioCarga:                 string                                     Index (IS_OPTN or IS_NLBL) read GetProprietarioCarga write SetProprietarioCarga stored ProprietarioCarga_Specified;
    property PesoCarga:                         TXSDecimal                                 Index (IS_OPTN or IS_NLBL) read GetPesoCarga write SetPesoCarga stored PesoCarga_Specified;
    property TipoOperacao:                      string                                     Index (IS_OPTN or IS_NLBL) read GetTipoOperacao write SetTipoOperacao stored TipoOperacao_Specified;
    property MunicipioOrigemCodigoIBGE:         Integer                                    Index (IS_OPTN or IS_NLBL) read GetMunicipioOrigemCodigoIBGE write SetMunicipioOrigemCodigoIBGE stored MunicipioOrigemCodigoIBGE_Specified;
    property MunicipioDestinoCodigoIBGE:        Integer                                    Index (IS_OPTN or IS_NLBL) read GetMunicipioDestinoCodigoIBGE write SetMunicipioDestinoCodigoIBGE stored MunicipioDestinoCodigoIBGE_Specified;
    property DataHoraInicio:                    TXSDateTime                                Index (IS_OPTN or IS_NLBL) read GetDataHoraInicio write SetDataHoraInicio stored DataHoraInicio_Specified;
    property DataHoraTermino:                   TXSDateTime                                Index (IS_OPTN) read GetDataHoraTermino write SetDataHoraTermino stored DataHoraTermino_Specified;
    property CPFCNPJContratado:                 string                                     Index (IS_OPTN or IS_NLBL) read GetCPFCNPJContratado write SetCPFCNPJContratado stored CPFCNPJContratado_Specified;
    property ValorFrete:                        TXSDecimal                                 Index (IS_OPTN or IS_NLBL) read GetValorFrete write SetValorFrete stored ValorFrete_Specified;
    property ValorCombustivel:                  TXSDecimal                                 Index (IS_OPTN or IS_NLBL) read GetValorCombustivel write SetValorCombustivel stored ValorCombustivel_Specified;
    property ValorPedagio:                      TXSDecimal                                 Index (IS_OPTN or IS_NLBL) read GetValorPedagio write SetValorPedagio stored ValorPedagio_Specified;
    property ValorDespesas:                     TXSDecimal                                 Index (IS_OPTN or IS_NLBL) read GetValorDespesas write SetValorDespesas stored ValorDespesas_Specified;
    property ValorImpostoSestSenat:             TXSDecimal                                 Index (IS_OPTN or IS_NLBL) read GetValorImpostoSestSenat write SetValorImpostoSestSenat stored ValorImpostoSestSenat_Specified;
    property ValorImpostoIRRF:                  TXSDecimal                                 Index (IS_OPTN or IS_NLBL) read GetValorImpostoIRRF write SetValorImpostoIRRF stored ValorImpostoIRRF_Specified;
    property ValorImpostoINSS:                  TXSDecimal                                 Index (IS_OPTN or IS_NLBL) read GetValorImpostoINSS write SetValorImpostoINSS stored ValorImpostoINSS_Specified;
    property ValorImpostoIcmsIssqn:             TXSDecimal                                 Index (IS_OPTN or IS_NLBL) read GetValorImpostoIcmsIssqn write SetValorImpostoIcmsIssqn stored ValorImpostoIcmsIssqn_Specified;
    property ParcelaUnica:                      Boolean                                    Index (IS_OPTN or IS_NLBL) read GetParcelaUnica write SetParcelaUnica stored ParcelaUnica_Specified;
    property ModoCompraValePedagio:             Integer                                    Index (IS_OPTN) read GetModoCompraValePedagio write SetModoCompraValePedagio stored ModoCompraValePedagio_Specified;
    property CategoriaVeiculo:                  Integer                                    Index (IS_OPTN) read GetCategoriaVeiculo write SetCategoriaVeiculo stored CategoriaVeiculo_Specified;
    property NomeMotorista:                     string                                     Index (IS_OPTN or IS_NLBL) read GetNomeMotorista write SetNomeMotorista stored NomeMotorista_Specified;
    property CPFMotorista:                      string                                     Index (IS_OPTN or IS_NLBL) read GetCPFMotorista write SetCPFMotorista stored CPFMotorista_Specified;
    property RNTRCMotorista:                    string                                     Index (IS_OPTN or IS_NLBL) read GetRNTRCMotorista write SetRNTRCMotorista stored RNTRCMotorista_Specified;
    property Triada:                            Boolean                                    Index (IS_OPTN) read GetTriada write SetTriada stored Triada_Specified;
    property ItemFinanceiro:                    string                                     Index (IS_OPTN or IS_NLBL) read GetItemFinanceiro write SetItemFinanceiro stored ItemFinanceiro_Specified;
    property Parcelas:                          ArrayOfOperacaoTransporteParcelasResponse  Index (IS_OPTN or IS_NLBL) read GetParcelas write SetParcelas stored Parcelas_Specified;
    property Veiculos:                          ArrayOfOperacaoTransporteVeiculoResponse   Index (IS_OPTN or IS_NLBL) read GetVeiculos write SetVeiculos stored Veiculos_Specified;
    property ValorContratado:                   TXSDecimal                                 Index (IS_OPTN or IS_NLBL) read GetValorContratado write SetValorContratado stored ValorContratado_Specified;
    property DispensadoPelaANTT:                Boolean                                    Index (IS_OPTN) read GetDispensadoPelaANTT write SetDispensadoPelaANTT stored DispensadoPelaANTT_Specified;
    property TarifasBancarias:                  TXSDecimal                                 Index (IS_OPTN or IS_NLBL) read GetTarifasBancarias write SetTarifasBancarias stored TarifasBancarias_Specified;
    property ValorImpostoPIS:                   TXSDecimal                                 Index (IS_OPTN or IS_NLBL) read GetValorImpostoPIS write SetValorImpostoPIS stored ValorImpostoPIS_Specified;
    property ValorImpostoCofins:                TXSDecimal                                 Index (IS_OPTN or IS_NLBL) read GetValorImpostoCofins write SetValorImpostoCofins stored ValorImpostoCofins_Specified;
    property BaseCalculoPISCofins:              TXSDecimal                                 Index (IS_OPTN or IS_NLBL) read GetBaseCalculoPISCofins write SetBaseCalculoPISCofins stored BaseCalculoPISCofins_Specified;
    property ValorDescontoAntecipado:           TXSDecimal                                 Index (IS_OPTN or IS_NLBL) read GetValorDescontoAntecipado write SetValorDescontoAntecipado stored ValorDescontoAntecipado_Specified;
    property IdCompraValePedagio:               Integer                                    Index (IS_OPTN or IS_NLBL) read GetIdCompraValePedagio write SetIdCompraValePedagio stored IdCompraValePedagio_Specified;
    property CPFCNPJParticipanteDestinatario:   string                                     Index (IS_OPTN or IS_NLBL) read GetCPFCNPJParticipanteDestinatario write SetCPFCNPJParticipanteDestinatario stored CPFCNPJParticipanteDestinatario_Specified;
    property CPFCNPJParticipanteContratante:    string                                     Index (IS_OPTN or IS_NLBL) read GetCPFCNPJParticipanteContratante write SetCPFCNPJParticipanteContratante stored CPFCNPJParticipanteContratante_Specified;
    property CPFCNPJParticipanteSubcontratante: string                                     Index (IS_OPTN or IS_NLBL) read GetCPFCNPJParticipanteSubcontratante write SetCPFCNPJParticipanteSubcontratante stored CPFCNPJParticipanteSubcontratante_Specified;
    property CPFCNPJParticipanteConsignatario:  string                                     Index (IS_OPTN or IS_NLBL) read GetCPFCNPJParticipanteConsignatario write SetCPFCNPJParticipanteConsignatario stored CPFCNPJParticipanteConsignatario_Specified;
    property NumeroLacreTransporteCombustivel:  string                                     Index (IS_OPTN or IS_NLBL) read GetNumeroLacreTransporteCombustivel write SetNumeroLacreTransporteCombustivel stored NumeroLacreTransporteCombustivel_Specified;
    property ParticipantesDestinatarios:        string                                     Index (IS_OPTN or IS_NLBL) read GetParticipantesDestinatarios write SetParticipantesDestinatarios stored ParticipantesDestinatarios_Specified;
    property StatusOperacao:                    string                                     Index (IS_OPTN or IS_NLBL) read GetStatusOperacao write SetStatusOperacao stored StatusOperacao_Specified;
    property Quitacao:                          Boolean                                    Index (IS_OPTN or IS_NLBL) read GetQuitacao write SetQuitacao stored Quitacao_Specified;
    property DadosQuitacao:                     DadosQuitacaoFreteResponse2                Index (IS_OPTN or IS_NLBL) read GetDadosQuitacao write SetDadosQuitacao stored DadosQuitacao_Specified;
    property MensagemRetorno:                   string                                     Index (IS_OPTN or IS_NLBL) read GetMensagemRetorno write SetMensagemRetorno stored MensagemRetorno_Specified;
    property DocumentoValePedagio:              string                                     Index (IS_OPTN or IS_NLBL) read GetDocumentoValePedagio write SetDocumentoValePedagio stored DocumentoValePedagio_Specified;
    property ChaveQuitacao:                     string                                     Index (IS_OPTN or IS_NLBL) read GetChaveQuitacao write SetChaveQuitacao stored ChaveQuitacao_Specified;
    property ValorImpostoISS:                   TXSDecimal                                 Index (IS_OPTN or IS_NLBL) read GetValorImpostoISS write SetValorImpostoISS stored ValorImpostoISS_Specified;
  end;

  ArrayOfDadosQuitacaoFreteDocumentosRequest = array of DadosQuitacaoFreteDocumentosRequest2;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  ArrayOfint = array of Integer;                { "http://schemas.microsoft.com/2003/10/Serialization/Arrays"[GblCplx] }


  // ************************************************************************ //
  // XML       : DadosQuitacaoFreteResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  DadosQuitacaoFreteResponse2 = class(TRemotable)
  private
    FValorMercadoria: TXSDecimal;
    FValorMercadoria_Specified: boolean;
    FPesoCarregadoMercadoria: TXSDecimal;
    FPesoCarregadoMercadoria_Specified: boolean;
    FQuantidadeCarregada: Integer;
    FQuantidadeCarregada_Specified: boolean;
    FTipoCalculoAvaria: Integer;
    FTipoCalculoAvaria_Specified: boolean;
    FEncerraNaANTT: Boolean;
    FEncerraNaANTT_Specified: boolean;
    FPorcentagemToleranciaPeso: TXSDecimal;
    FPorcentagemToleranciaPeso_Specified: boolean;
    FTipoToleranciaPeso: Integer;
    FTipoToleranciaPeso_Specified: boolean;
    FPorcetagemPesoAMaior: TXSDecimal;
    FPorcetagemPesoAMaior_Specified: boolean;
    FDocumentosQuitacao: ArrayOfDadosQuitacaoFreteDocumentosResponse;
    FDocumentosQuitacao_Specified: boolean;
    FIdsTerminaisCarregamento: ArrayOfint;
    FIdsTerminaisCarregamento_Specified: boolean;
    FQuitaEmTodosTerminais: Boolean;
    FQuitaEmTodosTerminais_Specified: boolean;
    function  GetValorMercadoria(Index: Integer): TXSDecimal;
    procedure SetValorMercadoria(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorMercadoria_Specified(Index: Integer): boolean;
    function  GetPesoCarregadoMercadoria(Index: Integer): TXSDecimal;
    procedure SetPesoCarregadoMercadoria(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  PesoCarregadoMercadoria_Specified(Index: Integer): boolean;
    function  GetQuantidadeCarregada(Index: Integer): Integer;
    procedure SetQuantidadeCarregada(Index: Integer; const AInteger: Integer);
    function  QuantidadeCarregada_Specified(Index: Integer): boolean;
    function  GetTipoCalculoAvaria(Index: Integer): Integer;
    procedure SetTipoCalculoAvaria(Index: Integer; const AInteger: Integer);
    function  TipoCalculoAvaria_Specified(Index: Integer): boolean;
    function  GetEncerraNaANTT(Index: Integer): Boolean;
    procedure SetEncerraNaANTT(Index: Integer; const ABoolean: Boolean);
    function  EncerraNaANTT_Specified(Index: Integer): boolean;
    function  GetPorcentagemToleranciaPeso(Index: Integer): TXSDecimal;
    procedure SetPorcentagemToleranciaPeso(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  PorcentagemToleranciaPeso_Specified(Index: Integer): boolean;
    function  GetTipoToleranciaPeso(Index: Integer): Integer;
    procedure SetTipoToleranciaPeso(Index: Integer; const AInteger: Integer);
    function  TipoToleranciaPeso_Specified(Index: Integer): boolean;
    function  GetPorcetagemPesoAMaior(Index: Integer): TXSDecimal;
    procedure SetPorcetagemPesoAMaior(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  PorcetagemPesoAMaior_Specified(Index: Integer): boolean;
    function  GetDocumentosQuitacao(Index: Integer): ArrayOfDadosQuitacaoFreteDocumentosResponse;
    procedure SetDocumentosQuitacao(Index: Integer; const AArrayOfDadosQuitacaoFreteDocumentosResponse: ArrayOfDadosQuitacaoFreteDocumentosResponse);
    function  DocumentosQuitacao_Specified(Index: Integer): boolean;
    function  GetIdsTerminaisCarregamento(Index: Integer): ArrayOfint;
    procedure SetIdsTerminaisCarregamento(Index: Integer; const AArrayOfint: ArrayOfint);
    function  IdsTerminaisCarregamento_Specified(Index: Integer): boolean;
    function  GetQuitaEmTodosTerminais(Index: Integer): Boolean;
    procedure SetQuitaEmTodosTerminais(Index: Integer; const ABoolean: Boolean);
    function  QuitaEmTodosTerminais_Specified(Index: Integer): boolean;
  published
    property ValorMercadoria:           TXSDecimal                                   Index (IS_OPTN) read GetValorMercadoria write SetValorMercadoria stored ValorMercadoria_Specified;
    property PesoCarregadoMercadoria:   TXSDecimal                                   Index (IS_OPTN) read GetPesoCarregadoMercadoria write SetPesoCarregadoMercadoria stored PesoCarregadoMercadoria_Specified;
    property QuantidadeCarregada:       Integer                                      Index (IS_OPTN) read GetQuantidadeCarregada write SetQuantidadeCarregada stored QuantidadeCarregada_Specified;
    property TipoCalculoAvaria:         Integer                                      Index (IS_OPTN or IS_NLBL) read GetTipoCalculoAvaria write SetTipoCalculoAvaria stored TipoCalculoAvaria_Specified;
    property EncerraNaANTT:             Boolean                                      Index (IS_OPTN) read GetEncerraNaANTT write SetEncerraNaANTT stored EncerraNaANTT_Specified;
    property PorcentagemToleranciaPeso: TXSDecimal                                   Index (IS_OPTN or IS_NLBL) read GetPorcentagemToleranciaPeso write SetPorcentagemToleranciaPeso stored PorcentagemToleranciaPeso_Specified;
    property TipoToleranciaPeso:        Integer                                      Index (IS_OPTN or IS_NLBL) read GetTipoToleranciaPeso write SetTipoToleranciaPeso stored TipoToleranciaPeso_Specified;
    property PorcetagemPesoAMaior:      TXSDecimal                                   Index (IS_OPTN or IS_NLBL) read GetPorcetagemPesoAMaior write SetPorcetagemPesoAMaior stored PorcetagemPesoAMaior_Specified;
    property DocumentosQuitacao:        ArrayOfDadosQuitacaoFreteDocumentosResponse  Index (IS_OPTN or IS_NLBL) read GetDocumentosQuitacao write SetDocumentosQuitacao stored DocumentosQuitacao_Specified;
    property IdsTerminaisCarregamento:  ArrayOfint                                   Index (IS_OPTN or IS_NLBL) read GetIdsTerminaisCarregamento write SetIdsTerminaisCarregamento stored IdsTerminaisCarregamento_Specified;
    property QuitaEmTodosTerminais:     Boolean                                      Index (IS_OPTN) read GetQuitaEmTodosTerminais write SetQuitaEmTodosTerminais stored QuitaEmTodosTerminais_Specified;
  end;



  // ************************************************************************ //
  // XML       : DadosQuitacaoFreteRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  DadosQuitacaoFreteRequest2 = class(TRemotable)
  private
    FValorMercadoria: TXSDecimal;
    FValorMercadoria_Specified: boolean;
    FPesoCarregadoMercadoria: TXSDecimal;
    FPesoCarregadoMercadoria_Specified: boolean;
    FQuantidadeCarregada: Integer;
    FQuantidadeCarregada_Specified: boolean;
    FTipoCalculoAvaria: Integer;
    FTipoCalculoAvaria_Specified: boolean;
    FEncerraNaANTT: Boolean;
    FEncerraNaANTT_Specified: boolean;
    FPorcentagemToleranciaPeso: TXSDecimal;
    FPorcentagemToleranciaPeso_Specified: boolean;
    FTipoToleranciaPeso: Integer;
    FTipoToleranciaPeso_Specified: boolean;
    FPorcetagemPesoAMaior: TXSDecimal;
    FPorcetagemPesoAMaior_Specified: boolean;
    FDocumentosQuitacao: ArrayOfDadosQuitacaoFreteDocumentosRequest;
    FDocumentosQuitacao_Specified: boolean;
    FIdsTerminaisCarregamento: ArrayOfint;
    FIdsTerminaisCarregamento_Specified: boolean;
    FQuitaEmTodosTerminais: Boolean;
    FQuitaEmTodosTerminais_Specified: boolean;
    function  GetValorMercadoria(Index: Integer): TXSDecimal;
    procedure SetValorMercadoria(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorMercadoria_Specified(Index: Integer): boolean;
    function  GetPesoCarregadoMercadoria(Index: Integer): TXSDecimal;
    procedure SetPesoCarregadoMercadoria(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  PesoCarregadoMercadoria_Specified(Index: Integer): boolean;
    function  GetQuantidadeCarregada(Index: Integer): Integer;
    procedure SetQuantidadeCarregada(Index: Integer; const AInteger: Integer);
    function  QuantidadeCarregada_Specified(Index: Integer): boolean;
    function  GetTipoCalculoAvaria(Index: Integer): Integer;
    procedure SetTipoCalculoAvaria(Index: Integer; const AInteger: Integer);
    function  TipoCalculoAvaria_Specified(Index: Integer): boolean;
    function  GetEncerraNaANTT(Index: Integer): Boolean;
    procedure SetEncerraNaANTT(Index: Integer; const ABoolean: Boolean);
    function  EncerraNaANTT_Specified(Index: Integer): boolean;
    function  GetPorcentagemToleranciaPeso(Index: Integer): TXSDecimal;
    procedure SetPorcentagemToleranciaPeso(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  PorcentagemToleranciaPeso_Specified(Index: Integer): boolean;
    function  GetTipoToleranciaPeso(Index: Integer): Integer;
    procedure SetTipoToleranciaPeso(Index: Integer; const AInteger: Integer);
    function  TipoToleranciaPeso_Specified(Index: Integer): boolean;
    function  GetPorcetagemPesoAMaior(Index: Integer): TXSDecimal;
    procedure SetPorcetagemPesoAMaior(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  PorcetagemPesoAMaior_Specified(Index: Integer): boolean;
    function  GetDocumentosQuitacao(Index: Integer): ArrayOfDadosQuitacaoFreteDocumentosRequest;
    procedure SetDocumentosQuitacao(Index: Integer; const AArrayOfDadosQuitacaoFreteDocumentosRequest: ArrayOfDadosQuitacaoFreteDocumentosRequest);
    function  DocumentosQuitacao_Specified(Index: Integer): boolean;
    function  GetIdsTerminaisCarregamento(Index: Integer): ArrayOfint;
    procedure SetIdsTerminaisCarregamento(Index: Integer; const AArrayOfint: ArrayOfint);
    function  IdsTerminaisCarregamento_Specified(Index: Integer): boolean;
    function  GetQuitaEmTodosTerminais(Index: Integer): Boolean;
    procedure SetQuitaEmTodosTerminais(Index: Integer; const ABoolean: Boolean);
    function  QuitaEmTodosTerminais_Specified(Index: Integer): boolean;
  published
    property ValorMercadoria:           TXSDecimal                                  Index (IS_OPTN) read GetValorMercadoria write SetValorMercadoria stored ValorMercadoria_Specified;
    property PesoCarregadoMercadoria:   TXSDecimal                                  Index (IS_OPTN) read GetPesoCarregadoMercadoria write SetPesoCarregadoMercadoria stored PesoCarregadoMercadoria_Specified;
    property QuantidadeCarregada:       Integer                                     Index (IS_OPTN) read GetQuantidadeCarregada write SetQuantidadeCarregada stored QuantidadeCarregada_Specified;
    property TipoCalculoAvaria:         Integer                                     Index (IS_OPTN or IS_NLBL) read GetTipoCalculoAvaria write SetTipoCalculoAvaria stored TipoCalculoAvaria_Specified;
    property EncerraNaANTT:             Boolean                                     Index (IS_OPTN) read GetEncerraNaANTT write SetEncerraNaANTT stored EncerraNaANTT_Specified;
    property PorcentagemToleranciaPeso: TXSDecimal                                  Index (IS_OPTN or IS_NLBL) read GetPorcentagemToleranciaPeso write SetPorcentagemToleranciaPeso stored PorcentagemToleranciaPeso_Specified;
    property TipoToleranciaPeso:        Integer                                     Index (IS_OPTN or IS_NLBL) read GetTipoToleranciaPeso write SetTipoToleranciaPeso stored TipoToleranciaPeso_Specified;
    property PorcetagemPesoAMaior:      TXSDecimal                                  Index (IS_OPTN or IS_NLBL) read GetPorcetagemPesoAMaior write SetPorcetagemPesoAMaior stored PorcetagemPesoAMaior_Specified;
    property DocumentosQuitacao:        ArrayOfDadosQuitacaoFreteDocumentosRequest  Index (IS_OPTN or IS_NLBL) read GetDocumentosQuitacao write SetDocumentosQuitacao stored DocumentosQuitacao_Specified;
    property IdsTerminaisCarregamento:  ArrayOfint                                  Index (IS_OPTN or IS_NLBL) read GetIdsTerminaisCarregamento write SetIdsTerminaisCarregamento stored IdsTerminaisCarregamento_Specified;
    property QuitaEmTodosTerminais:     Boolean                                     Index (IS_OPTN) read GetQuitaEmTodosTerminais write SetQuitaEmTodosTerminais stored QuitaEmTodosTerminais_Specified;
  end;



  // ************************************************************************ //
  // XML       : DeclaracaoOperacaoTransporteResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  DeclaracaoOperacaoTransporteResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FIdOperacaoTransporte: Integer;
    FIdOperacaoTransporte_Specified: boolean;
    FDataHoraRegistro: TXSDateTime;
    FDataHoraRegistro_Specified: boolean;
    FNumeroCIOT: string;
    FNumeroCIOT_Specified: boolean;
    FProtocoloCIOT: string;
    FProtocoloCIOT_Specified: boolean;
    FDispensadoPelaANTT: Boolean;
    FDispensadoPelaANTT_Specified: boolean;
    FObservacoesANTT: string;
    FObservacoesANTT_Specified: boolean;
    FIdCompraValePedagio: Integer;
    FIdCompraValePedagio_Specified: boolean;
    FModoCompraValePedagio: Integer;
    FModoCompraValePedagio_Specified: boolean;
    FIdsParcelasOperacaoTransporte: ArrayOfint;
    FIdsParcelasOperacaoTransporte_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetIdOperacaoTransporte(Index: Integer): Integer;
    procedure SetIdOperacaoTransporte(Index: Integer; const AInteger: Integer);
    function  IdOperacaoTransporte_Specified(Index: Integer): boolean;
    function  GetDataHoraRegistro(Index: Integer): TXSDateTime;
    procedure SetDataHoraRegistro(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DataHoraRegistro_Specified(Index: Integer): boolean;
    function  GetNumeroCIOT(Index: Integer): string;
    procedure SetNumeroCIOT(Index: Integer; const Astring: string);
    function  NumeroCIOT_Specified(Index: Integer): boolean;
    function  GetProtocoloCIOT(Index: Integer): string;
    procedure SetProtocoloCIOT(Index: Integer; const Astring: string);
    function  ProtocoloCIOT_Specified(Index: Integer): boolean;
    function  GetDispensadoPelaANTT(Index: Integer): Boolean;
    procedure SetDispensadoPelaANTT(Index: Integer; const ABoolean: Boolean);
    function  DispensadoPelaANTT_Specified(Index: Integer): boolean;
    function  GetObservacoesANTT(Index: Integer): string;
    procedure SetObservacoesANTT(Index: Integer; const Astring: string);
    function  ObservacoesANTT_Specified(Index: Integer): boolean;
    function  GetIdCompraValePedagio(Index: Integer): Integer;
    procedure SetIdCompraValePedagio(Index: Integer; const AInteger: Integer);
    function  IdCompraValePedagio_Specified(Index: Integer): boolean;
    function  GetModoCompraValePedagio(Index: Integer): Integer;
    procedure SetModoCompraValePedagio(Index: Integer; const AInteger: Integer);
    function  ModoCompraValePedagio_Specified(Index: Integer): boolean;
    function  GetIdsParcelasOperacaoTransporte(Index: Integer): ArrayOfint;
    procedure SetIdsParcelasOperacaoTransporte(Index: Integer; const AArrayOfint: ArrayOfint);
    function  IdsParcelasOperacaoTransporte_Specified(Index: Integer): boolean;
  published
    property Erro:                          ErroResponse2  Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property IdOperacaoTransporte:          Integer        Index (IS_OPTN) read GetIdOperacaoTransporte write SetIdOperacaoTransporte stored IdOperacaoTransporte_Specified;
    property DataHoraRegistro:              TXSDateTime    Index (IS_OPTN) read GetDataHoraRegistro write SetDataHoraRegistro stored DataHoraRegistro_Specified;
    property NumeroCIOT:                    string         Index (IS_OPTN or IS_NLBL) read GetNumeroCIOT write SetNumeroCIOT stored NumeroCIOT_Specified;
    property ProtocoloCIOT:                 string         Index (IS_OPTN or IS_NLBL) read GetProtocoloCIOT write SetProtocoloCIOT stored ProtocoloCIOT_Specified;
    property DispensadoPelaANTT:            Boolean        Index (IS_OPTN) read GetDispensadoPelaANTT write SetDispensadoPelaANTT stored DispensadoPelaANTT_Specified;
    property ObservacoesANTT:               string         Index (IS_OPTN or IS_NLBL) read GetObservacoesANTT write SetObservacoesANTT stored ObservacoesANTT_Specified;
    property IdCompraValePedagio:           Integer        Index (IS_OPTN or IS_NLBL) read GetIdCompraValePedagio write SetIdCompraValePedagio stored IdCompraValePedagio_Specified;
    property ModoCompraValePedagio:         Integer        Index (IS_OPTN) read GetModoCompraValePedagio write SetModoCompraValePedagio stored ModoCompraValePedagio_Specified;
    property IdsParcelasOperacaoTransporte: ArrayOfint     Index (IS_OPTN or IS_NLBL) read GetIdsParcelasOperacaoTransporte write SetIdsParcelasOperacaoTransporte stored IdsParcelasOperacaoTransporte_Specified;
  end;



  // ************************************************************************ //
  // XML       : DeclaracaoOperacaoTransporteResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  DeclaracaoOperacaoTransporteResponse = class(DeclaracaoOperacaoTransporteResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : DadosQuitacaoFreteDocumentosRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  DadosQuitacaoFreteDocumentosRequest2 = class(TRemotable)
  private
    FNomeDocumento: string;
    FNomeDocumento_Specified: boolean;
    FNumeroIdentificadorDocumento: string;
    FNumeroIdentificadorDocumento_Specified: boolean;
    FObrigatorio: Boolean;
    FObrigatorio_Specified: boolean;
    FDocumentoGeradoDestino: Boolean;
    FDocumentoGeradoDestino_Specified: boolean;
    function  GetNomeDocumento(Index: Integer): string;
    procedure SetNomeDocumento(Index: Integer; const Astring: string);
    function  NomeDocumento_Specified(Index: Integer): boolean;
    function  GetNumeroIdentificadorDocumento(Index: Integer): string;
    procedure SetNumeroIdentificadorDocumento(Index: Integer; const Astring: string);
    function  NumeroIdentificadorDocumento_Specified(Index: Integer): boolean;
    function  GetObrigatorio(Index: Integer): Boolean;
    procedure SetObrigatorio(Index: Integer; const ABoolean: Boolean);
    function  Obrigatorio_Specified(Index: Integer): boolean;
    function  GetDocumentoGeradoDestino(Index: Integer): Boolean;
    procedure SetDocumentoGeradoDestino(Index: Integer; const ABoolean: Boolean);
    function  DocumentoGeradoDestino_Specified(Index: Integer): boolean;
  published
    property NomeDocumento:                string   Index (IS_OPTN or IS_NLBL) read GetNomeDocumento write SetNomeDocumento stored NomeDocumento_Specified;
    property NumeroIdentificadorDocumento: string   Index (IS_OPTN or IS_NLBL) read GetNumeroIdentificadorDocumento write SetNumeroIdentificadorDocumento stored NumeroIdentificadorDocumento_Specified;
    property Obrigatorio:                  Boolean  Index (IS_OPTN) read GetObrigatorio write SetObrigatorio stored Obrigatorio_Specified;
    property DocumentoGeradoDestino:       Boolean  Index (IS_OPTN or IS_NLBL) read GetDocumentoGeradoDestino write SetDocumentoGeradoDestino stored DocumentoGeradoDestino_Specified;
  end;



  // ************************************************************************ //
  // XML       : BuscaPagamentoAvulsoCartaoResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  BuscaPagamentoAvulsoCartaoResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FDataCompra: TXSDateTime;
    FDataCompra_Specified: boolean;
    FNumeroCartao: string;
    FNumeroCartao_Specified: boolean;
    FValor: TXSDecimal;
    FValor_Specified: boolean;
    FComentario: string;
    FComentario_Specified: boolean;
    FSituacaoTransacao: string;
    FSituacaoTransacao_Specified: boolean;
    FItemFinanceiro: string;
    FItemFinanceiro_Specified: boolean;
    FNumeroDocumentoEmbarque: string;
    FNumeroDocumentoEmbarque_Specified: boolean;
    FPlaca: string;
    FPlaca_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetDataCompra(Index: Integer): TXSDateTime;
    procedure SetDataCompra(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DataCompra_Specified(Index: Integer): boolean;
    function  GetNumeroCartao(Index: Integer): string;
    procedure SetNumeroCartao(Index: Integer; const Astring: string);
    function  NumeroCartao_Specified(Index: Integer): boolean;
    function  GetValor(Index: Integer): TXSDecimal;
    procedure SetValor(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  Valor_Specified(Index: Integer): boolean;
    function  GetComentario(Index: Integer): string;
    procedure SetComentario(Index: Integer; const Astring: string);
    function  Comentario_Specified(Index: Integer): boolean;
    function  GetSituacaoTransacao(Index: Integer): string;
    procedure SetSituacaoTransacao(Index: Integer; const Astring: string);
    function  SituacaoTransacao_Specified(Index: Integer): boolean;
    function  GetItemFinanceiro(Index: Integer): string;
    procedure SetItemFinanceiro(Index: Integer; const Astring: string);
    function  ItemFinanceiro_Specified(Index: Integer): boolean;
    function  GetNumeroDocumentoEmbarque(Index: Integer): string;
    procedure SetNumeroDocumentoEmbarque(Index: Integer; const Astring: string);
    function  NumeroDocumentoEmbarque_Specified(Index: Integer): boolean;
    function  GetPlaca(Index: Integer): string;
    procedure SetPlaca(Index: Integer; const Astring: string);
    function  Placa_Specified(Index: Integer): boolean;
  published
    property Erro:                    ErroResponse2  Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property DataCompra:              TXSDateTime    Index (IS_OPTN) read GetDataCompra write SetDataCompra stored DataCompra_Specified;
    property NumeroCartao:            string         Index (IS_OPTN or IS_NLBL) read GetNumeroCartao write SetNumeroCartao stored NumeroCartao_Specified;
    property Valor:                   TXSDecimal     Index (IS_OPTN) read GetValor write SetValor stored Valor_Specified;
    property Comentario:              string         Index (IS_OPTN or IS_NLBL) read GetComentario write SetComentario stored Comentario_Specified;
    property SituacaoTransacao:       string         Index (IS_OPTN or IS_NLBL) read GetSituacaoTransacao write SetSituacaoTransacao stored SituacaoTransacao_Specified;
    property ItemFinanceiro:          string         Index (IS_OPTN or IS_NLBL) read GetItemFinanceiro write SetItemFinanceiro stored ItemFinanceiro_Specified;
    property NumeroDocumentoEmbarque: string         Index (IS_OPTN or IS_NLBL) read GetNumeroDocumentoEmbarque write SetNumeroDocumentoEmbarque stored NumeroDocumentoEmbarque_Specified;
    property Placa:                   string         Index (IS_OPTN or IS_NLBL) read GetPlaca write SetPlaca stored Placa_Specified;
  end;



  // ************************************************************************ //
  // XML       : CombustivelAvulsoCartaoRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  CombustivelAvulsoCartaoRequest2 = class(TRemotable)
  private
    FNumeroCartao: string;
    FNumeroCartao_Specified: boolean;
    FValor: TXSDecimal;
    FValor_Specified: boolean;
    FComentario: string;
    FComentario_Specified: boolean;
    FIdCentroDeCusto: Integer;
    FIdCentroDeCusto_Specified: boolean;
    FNSU: Int64;
    FNSU_Specified: boolean;
    FIdIntegrador: string;
    FIdIntegrador_Specified: boolean;
    FProcessarManualmente: Boolean;
    FProcessarManualmente_Specified: boolean;
    FNumeroDocumentoEmbarque: string;
    FNumeroDocumentoEmbarque_Specified: boolean;
    FPlaca: string;
    FPlaca_Specified: boolean;
    FItemFinanceiro: string;
    FItemFinanceiro_Specified: boolean;
    function  GetNumeroCartao(Index: Integer): string;
    procedure SetNumeroCartao(Index: Integer; const Astring: string);
    function  NumeroCartao_Specified(Index: Integer): boolean;
    function  GetValor(Index: Integer): TXSDecimal;
    procedure SetValor(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  Valor_Specified(Index: Integer): boolean;
    function  GetComentario(Index: Integer): string;
    procedure SetComentario(Index: Integer; const Astring: string);
    function  Comentario_Specified(Index: Integer): boolean;
    function  GetIdCentroDeCusto(Index: Integer): Integer;
    procedure SetIdCentroDeCusto(Index: Integer; const AInteger: Integer);
    function  IdCentroDeCusto_Specified(Index: Integer): boolean;
    function  GetNSU(Index: Integer): Int64;
    procedure SetNSU(Index: Integer; const AInt64: Int64);
    function  NSU_Specified(Index: Integer): boolean;
    function  GetIdIntegrador(Index: Integer): string;
    procedure SetIdIntegrador(Index: Integer; const Astring: string);
    function  IdIntegrador_Specified(Index: Integer): boolean;
    function  GetProcessarManualmente(Index: Integer): Boolean;
    procedure SetProcessarManualmente(Index: Integer; const ABoolean: Boolean);
    function  ProcessarManualmente_Specified(Index: Integer): boolean;
    function  GetNumeroDocumentoEmbarque(Index: Integer): string;
    procedure SetNumeroDocumentoEmbarque(Index: Integer; const Astring: string);
    function  NumeroDocumentoEmbarque_Specified(Index: Integer): boolean;
    function  GetPlaca(Index: Integer): string;
    procedure SetPlaca(Index: Integer; const Astring: string);
    function  Placa_Specified(Index: Integer): boolean;
    function  GetItemFinanceiro(Index: Integer): string;
    procedure SetItemFinanceiro(Index: Integer; const Astring: string);
    function  ItemFinanceiro_Specified(Index: Integer): boolean;
  published
    property NumeroCartao:            string      Index (IS_OPTN or IS_NLBL) read GetNumeroCartao write SetNumeroCartao stored NumeroCartao_Specified;
    property Valor:                   TXSDecimal  Index (IS_OPTN) read GetValor write SetValor stored Valor_Specified;
    property Comentario:              string      Index (IS_OPTN or IS_NLBL) read GetComentario write SetComentario stored Comentario_Specified;
    property IdCentroDeCusto:         Integer     Index (IS_OPTN or IS_NLBL) read GetIdCentroDeCusto write SetIdCentroDeCusto stored IdCentroDeCusto_Specified;
    property NSU:                     Int64       Index (IS_OPTN or IS_NLBL) read GetNSU write SetNSU stored NSU_Specified;
    property IdIntegrador:            string      Index (IS_OPTN or IS_NLBL) read GetIdIntegrador write SetIdIntegrador stored IdIntegrador_Specified;
    property ProcessarManualmente:    Boolean     Index (IS_OPTN or IS_NLBL) read GetProcessarManualmente write SetProcessarManualmente stored ProcessarManualmente_Specified;
    property NumeroDocumentoEmbarque: string      Index (IS_OPTN or IS_NLBL) read GetNumeroDocumentoEmbarque write SetNumeroDocumentoEmbarque stored NumeroDocumentoEmbarque_Specified;
    property Placa:                   string      Index (IS_OPTN or IS_NLBL) read GetPlaca write SetPlaca stored Placa_Specified;
    property ItemFinanceiro:          string      Index (IS_OPTN or IS_NLBL) read GetItemFinanceiro write SetItemFinanceiro stored ItemFinanceiro_Specified;
  end;



  // ************************************************************************ //
  // XML       : CombustivelAvulsoCartaoResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  CombustivelAvulsoCartaoResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FIdTransacaoCartao: Integer;
    FIdTransacaoCartao_Specified: boolean;
    FDataHoraProcessamento: TXSDateTime;
    FDataHoraProcessamento_Specified: boolean;
    FProcessamentoOffline: Boolean;
    FProcessamentoOffline_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetIdTransacaoCartao(Index: Integer): Integer;
    procedure SetIdTransacaoCartao(Index: Integer; const AInteger: Integer);
    function  IdTransacaoCartao_Specified(Index: Integer): boolean;
    function  GetDataHoraProcessamento(Index: Integer): TXSDateTime;
    procedure SetDataHoraProcessamento(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DataHoraProcessamento_Specified(Index: Integer): boolean;
    function  GetProcessamentoOffline(Index: Integer): Boolean;
    procedure SetProcessamentoOffline(Index: Integer; const ABoolean: Boolean);
    function  ProcessamentoOffline_Specified(Index: Integer): boolean;
  published
    property Erro:                  ErroResponse2  Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property IdTransacaoCartao:     Integer        Index (IS_OPTN) read GetIdTransacaoCartao write SetIdTransacaoCartao stored IdTransacaoCartao_Specified;
    property DataHoraProcessamento: TXSDateTime    Index (IS_OPTN) read GetDataHoraProcessamento write SetDataHoraProcessamento stored DataHoraProcessamento_Specified;
    property ProcessamentoOffline:  Boolean        Index (IS_OPTN) read GetProcessamentoOffline write SetProcessamentoOffline stored ProcessamentoOffline_Specified;
  end;

  ArrayOfBuscaPagamentoAvulsoCartaoResponse = array of BuscaPagamentoAvulsoCartaoResponse2;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }


  // ************************************************************************ //
  // XML       : PagamentoAvulsoCartaoResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  PagamentoAvulsoCartaoResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FIdTransacaoCartao: Integer;
    FIdTransacaoCartao_Specified: boolean;
    FDataHoraProcessamento: TXSDateTime;
    FDataHoraProcessamento_Specified: boolean;
    FProcessamentoOffline: Boolean;
    FProcessamentoOffline_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetIdTransacaoCartao(Index: Integer): Integer;
    procedure SetIdTransacaoCartao(Index: Integer; const AInteger: Integer);
    function  IdTransacaoCartao_Specified(Index: Integer): boolean;
    function  GetDataHoraProcessamento(Index: Integer): TXSDateTime;
    procedure SetDataHoraProcessamento(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DataHoraProcessamento_Specified(Index: Integer): boolean;
    function  GetProcessamentoOffline(Index: Integer): Boolean;
    procedure SetProcessamentoOffline(Index: Integer; const ABoolean: Boolean);
    function  ProcessamentoOffline_Specified(Index: Integer): boolean;
  published
    property Erro:                  ErroResponse2  Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property IdTransacaoCartao:     Integer        Index (IS_OPTN) read GetIdTransacaoCartao write SetIdTransacaoCartao stored IdTransacaoCartao_Specified;
    property DataHoraProcessamento: TXSDateTime    Index (IS_OPTN) read GetDataHoraProcessamento write SetDataHoraProcessamento stored DataHoraProcessamento_Specified;
    property ProcessamentoOffline:  Boolean        Index (IS_OPTN) read GetProcessamentoOffline write SetProcessamentoOffline stored ProcessamentoOffline_Specified;
  end;



  // ************************************************************************ //
  // XML       : BuscaPagamentoAvulsoCartaoRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  BuscaPagamentoAvulsoCartaoRequest2 = class(TRemotable)
  private
    FQuantidadeItensPorPagina: Integer;
    FQuantidadeItensPorPagina_Specified: boolean;
    FNumeroPagina: Integer;
    FNumeroPagina_Specified: boolean;
    FDataInicioPeriodo: TXSDateTime;
    FDataInicioPeriodo_Specified: boolean;
    FDataFimPeriodo: TXSDateTime;
    FDataFimPeriodo_Specified: boolean;
    FIdTransacao: Integer;
    FIdTransacao_Specified: boolean;
    function  GetQuantidadeItensPorPagina(Index: Integer): Integer;
    procedure SetQuantidadeItensPorPagina(Index: Integer; const AInteger: Integer);
    function  QuantidadeItensPorPagina_Specified(Index: Integer): boolean;
    function  GetNumeroPagina(Index: Integer): Integer;
    procedure SetNumeroPagina(Index: Integer; const AInteger: Integer);
    function  NumeroPagina_Specified(Index: Integer): boolean;
    function  GetDataInicioPeriodo(Index: Integer): TXSDateTime;
    procedure SetDataInicioPeriodo(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DataInicioPeriodo_Specified(Index: Integer): boolean;
    function  GetDataFimPeriodo(Index: Integer): TXSDateTime;
    procedure SetDataFimPeriodo(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DataFimPeriodo_Specified(Index: Integer): boolean;
    function  GetIdTransacao(Index: Integer): Integer;
    procedure SetIdTransacao(Index: Integer; const AInteger: Integer);
    function  IdTransacao_Specified(Index: Integer): boolean;
  published
    property QuantidadeItensPorPagina: Integer      Index (IS_OPTN) read GetQuantidadeItensPorPagina write SetQuantidadeItensPorPagina stored QuantidadeItensPorPagina_Specified;
    property NumeroPagina:             Integer      Index (IS_OPTN) read GetNumeroPagina write SetNumeroPagina stored NumeroPagina_Specified;
    property DataInicioPeriodo:        TXSDateTime  Index (IS_OPTN or IS_NLBL) read GetDataInicioPeriodo write SetDataInicioPeriodo stored DataInicioPeriodo_Specified;
    property DataFimPeriodo:           TXSDateTime  Index (IS_OPTN or IS_NLBL) read GetDataFimPeriodo write SetDataFimPeriodo stored DataFimPeriodo_Specified;
    property IdTransacao:              Integer      Index (IS_OPTN or IS_NLBL) read GetIdTransacao write SetIdTransacao stored IdTransacao_Specified;
  end;



  // ************************************************************************ //
  // XML       : ResultadoPaginadoBuscaPagamentoAvulsoCartaoResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ResultadoPaginadoBuscaPagamentoAvulsoCartaoResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FItens: ArrayOfBuscaPagamentoAvulsoCartaoResponse;
    FItens_Specified: boolean;
    FNumeroPagina: Integer;
    FNumeroPagina_Specified: boolean;
    FQuantidadeItensPorPagina: Integer;
    FQuantidadeItensPorPagina_Specified: boolean;
    FQuantidadeTotalItens: Integer;
    FQuantidadeTotalItens_Specified: boolean;
    FQuantidadeTotalPaginas: Integer;
    FQuantidadeTotalPaginas_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetItens(Index: Integer): ArrayOfBuscaPagamentoAvulsoCartaoResponse;
    procedure SetItens(Index: Integer; const AArrayOfBuscaPagamentoAvulsoCartaoResponse: ArrayOfBuscaPagamentoAvulsoCartaoResponse);
    function  Itens_Specified(Index: Integer): boolean;
    function  GetNumeroPagina(Index: Integer): Integer;
    procedure SetNumeroPagina(Index: Integer; const AInteger: Integer);
    function  NumeroPagina_Specified(Index: Integer): boolean;
    function  GetQuantidadeItensPorPagina(Index: Integer): Integer;
    procedure SetQuantidadeItensPorPagina(Index: Integer; const AInteger: Integer);
    function  QuantidadeItensPorPagina_Specified(Index: Integer): boolean;
    function  GetQuantidadeTotalItens(Index: Integer): Integer;
    procedure SetQuantidadeTotalItens(Index: Integer; const AInteger: Integer);
    function  QuantidadeTotalItens_Specified(Index: Integer): boolean;
    function  GetQuantidadeTotalPaginas(Index: Integer): Integer;
    procedure SetQuantidadeTotalPaginas(Index: Integer; const AInteger: Integer);
    function  QuantidadeTotalPaginas_Specified(Index: Integer): boolean;
  published
    property Erro:                     ErroResponse2                              Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property Itens:                    ArrayOfBuscaPagamentoAvulsoCartaoResponse  Index (IS_OPTN or IS_NLBL) read GetItens write SetItens stored Itens_Specified;
    property NumeroPagina:             Integer                                    Index (IS_OPTN) read GetNumeroPagina write SetNumeroPagina stored NumeroPagina_Specified;
    property QuantidadeItensPorPagina: Integer                                    Index (IS_OPTN) read GetQuantidadeItensPorPagina write SetQuantidadeItensPorPagina stored QuantidadeItensPorPagina_Specified;
    property QuantidadeTotalItens:     Integer                                    Index (IS_OPTN) read GetQuantidadeTotalItens write SetQuantidadeTotalItens stored QuantidadeTotalItens_Specified;
    property QuantidadeTotalPaginas:   Integer                                    Index (IS_OPTN) read GetQuantidadeTotalPaginas write SetQuantidadeTotalPaginas stored QuantidadeTotalPaginas_Specified;
  end;



  // ************************************************************************ //
  // XML       : BuscaCombustivelAvulsoCartaoRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  BuscaCombustivelAvulsoCartaoRequest2 = class(TRemotable)
  private
    FQuantidadeItensPorPagina: Integer;
    FQuantidadeItensPorPagina_Specified: boolean;
    FNumeroPagina: Integer;
    FNumeroPagina_Specified: boolean;
    FDataInicioPeriodo: TXSDateTime;
    FDataInicioPeriodo_Specified: boolean;
    FDataFimPeriodo: TXSDateTime;
    FDataFimPeriodo_Specified: boolean;
    FIdTransacao: Integer;
    FIdTransacao_Specified: boolean;
    function  GetQuantidadeItensPorPagina(Index: Integer): Integer;
    procedure SetQuantidadeItensPorPagina(Index: Integer; const AInteger: Integer);
    function  QuantidadeItensPorPagina_Specified(Index: Integer): boolean;
    function  GetNumeroPagina(Index: Integer): Integer;
    procedure SetNumeroPagina(Index: Integer; const AInteger: Integer);
    function  NumeroPagina_Specified(Index: Integer): boolean;
    function  GetDataInicioPeriodo(Index: Integer): TXSDateTime;
    procedure SetDataInicioPeriodo(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DataInicioPeriodo_Specified(Index: Integer): boolean;
    function  GetDataFimPeriodo(Index: Integer): TXSDateTime;
    procedure SetDataFimPeriodo(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DataFimPeriodo_Specified(Index: Integer): boolean;
    function  GetIdTransacao(Index: Integer): Integer;
    procedure SetIdTransacao(Index: Integer; const AInteger: Integer);
    function  IdTransacao_Specified(Index: Integer): boolean;
  published
    property QuantidadeItensPorPagina: Integer      Index (IS_OPTN) read GetQuantidadeItensPorPagina write SetQuantidadeItensPorPagina stored QuantidadeItensPorPagina_Specified;
    property NumeroPagina:             Integer      Index (IS_OPTN) read GetNumeroPagina write SetNumeroPagina stored NumeroPagina_Specified;
    property DataInicioPeriodo:        TXSDateTime  Index (IS_OPTN or IS_NLBL) read GetDataInicioPeriodo write SetDataInicioPeriodo stored DataInicioPeriodo_Specified;
    property DataFimPeriodo:           TXSDateTime  Index (IS_OPTN or IS_NLBL) read GetDataFimPeriodo write SetDataFimPeriodo stored DataFimPeriodo_Specified;
    property IdTransacao:              Integer      Index (IS_OPTN or IS_NLBL) read GetIdTransacao write SetIdTransacao stored IdTransacao_Specified;
  end;

  ArrayOfBuscaCompraValePedagioResponse = array of BuscaCompraValePedagioResponse2;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }


  // ************************************************************************ //
  // XML       : ResultadoPaginadoBuscaCompraValePedagioResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ResultadoPaginadoBuscaCompraValePedagioResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FItens: ArrayOfBuscaCompraValePedagioResponse;
    FItens_Specified: boolean;
    FNumeroPagina: Integer;
    FNumeroPagina_Specified: boolean;
    FQuantidadeItensPorPagina: Integer;
    FQuantidadeItensPorPagina_Specified: boolean;
    FQuantidadeTotalItens: Integer;
    FQuantidadeTotalItens_Specified: boolean;
    FQuantidadeTotalPaginas: Integer;
    FQuantidadeTotalPaginas_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetItens(Index: Integer): ArrayOfBuscaCompraValePedagioResponse;
    procedure SetItens(Index: Integer; const AArrayOfBuscaCompraValePedagioResponse: ArrayOfBuscaCompraValePedagioResponse);
    function  Itens_Specified(Index: Integer): boolean;
    function  GetNumeroPagina(Index: Integer): Integer;
    procedure SetNumeroPagina(Index: Integer; const AInteger: Integer);
    function  NumeroPagina_Specified(Index: Integer): boolean;
    function  GetQuantidadeItensPorPagina(Index: Integer): Integer;
    procedure SetQuantidadeItensPorPagina(Index: Integer; const AInteger: Integer);
    function  QuantidadeItensPorPagina_Specified(Index: Integer): boolean;
    function  GetQuantidadeTotalItens(Index: Integer): Integer;
    procedure SetQuantidadeTotalItens(Index: Integer; const AInteger: Integer);
    function  QuantidadeTotalItens_Specified(Index: Integer): boolean;
    function  GetQuantidadeTotalPaginas(Index: Integer): Integer;
    procedure SetQuantidadeTotalPaginas(Index: Integer; const AInteger: Integer);
    function  QuantidadeTotalPaginas_Specified(Index: Integer): boolean;
  published
    property Erro:                     ErroResponse2                          Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property Itens:                    ArrayOfBuscaCompraValePedagioResponse  Index (IS_OPTN or IS_NLBL) read GetItens write SetItens stored Itens_Specified;
    property NumeroPagina:             Integer                                Index (IS_OPTN) read GetNumeroPagina write SetNumeroPagina stored NumeroPagina_Specified;
    property QuantidadeItensPorPagina: Integer                                Index (IS_OPTN) read GetQuantidadeItensPorPagina write SetQuantidadeItensPorPagina stored QuantidadeItensPorPagina_Specified;
    property QuantidadeTotalItens:     Integer                                Index (IS_OPTN) read GetQuantidadeTotalItens write SetQuantidadeTotalItens stored QuantidadeTotalItens_Specified;
    property QuantidadeTotalPaginas:   Integer                                Index (IS_OPTN) read GetQuantidadeTotalPaginas write SetQuantidadeTotalPaginas stored QuantidadeTotalPaginas_Specified;
  end;



  // ************************************************************************ //
  // XML       : BuscaCompraValePedagioResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  BuscaCompraValePedagioResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FTipoCompra: string;
    FTipoCompra_Specified: boolean;
    FIdCompra: Integer;
    FIdCompra_Specified: boolean;
    FDataHoraCompra: TXSDateTime;
    FDataHoraCompra_Specified: boolean;
    FDataHoraCargaConfirmacao: TXSDateTime;
    FDataHoraCargaConfirmacao_Specified: boolean;
    FTagOuCartao: string;
    FTagOuCartao_Specified: boolean;
    FValor: TXSDecimal;
    FValor_Specified: boolean;
    FCIOT: string;
    FCIOT_Specified: boolean;
    FVarejo: Boolean;
    FVarejo_Specified: boolean;
    FNomePortador: string;
    FNomePortador_Specified: boolean;
    FOrigemCompra: string;
    FOrigemCompra_Specified: boolean;
    FPodeEmitirRecibo: Boolean;
    FPodeEmitirRecibo_Specified: boolean;
    FPodeCarregar: Boolean;
    FPodeCarregar_Specified: boolean;
    FIdStatusCompraValePedagio: Integer;
    FIdStatusCompraValePedagio_Specified: boolean;
    FOrigemCarga: string;
    FOrigemCarga_Specified: boolean;
    FIdOperacaoTransporte: Integer;
    FIdOperacaoTransporte_Specified: boolean;
    FDocumentoRelacionado: string;
    FDocumentoRelacionado_Specified: boolean;
    FNomeFantasia: string;
    FNomeFantasia_Specified: boolean;
    FCPFCondutor: string;
    FCPFCondutor_Specified: boolean;
    FPodeCancelarCompra: Boolean;
    FPodeCancelarCompra_Specified: boolean;
    FUsuarioComprador: string;
    FUsuarioComprador_Specified: boolean;
    FNomeRota: string;
    FNomeRota_Specified: boolean;
    FIdRota: Integer;
    FIdRota_Specified: boolean;
    FSimples: Boolean;
    FSimples_Specified: boolean;
    FNumeroRecibo: string;
    FNumeroRecibo_Specified: boolean;
    FIdIntegrador: string;
    FIdIntegrador_Specified: boolean;
    FSaldoAnteriorCartao: TXSDecimal;
    FSaldoAnteriorCartao_Specified: boolean;
    FSaldoPosteriorCartao: TXSDecimal;
    FSaldoPosteriorCartao_Specified: boolean;
    FValorCarregadoCartao: TXSDecimal;
    FValorCarregadoCartao_Specified: boolean;
    FMotoristaNome: string;
    FMotoristaNome_Specified: boolean;
    FMotoristaCPF: string;
    FMotoristaCPF_Specified: boolean;
    FMotoristaRNTRC: string;
    FMotoristaRNTRC_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetTipoCompra(Index: Integer): string;
    procedure SetTipoCompra(Index: Integer; const Astring: string);
    function  TipoCompra_Specified(Index: Integer): boolean;
    function  GetIdCompra(Index: Integer): Integer;
    procedure SetIdCompra(Index: Integer; const AInteger: Integer);
    function  IdCompra_Specified(Index: Integer): boolean;
    function  GetDataHoraCompra(Index: Integer): TXSDateTime;
    procedure SetDataHoraCompra(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DataHoraCompra_Specified(Index: Integer): boolean;
    function  GetDataHoraCargaConfirmacao(Index: Integer): TXSDateTime;
    procedure SetDataHoraCargaConfirmacao(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DataHoraCargaConfirmacao_Specified(Index: Integer): boolean;
    function  GetTagOuCartao(Index: Integer): string;
    procedure SetTagOuCartao(Index: Integer; const Astring: string);
    function  TagOuCartao_Specified(Index: Integer): boolean;
    function  GetValor(Index: Integer): TXSDecimal;
    procedure SetValor(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  Valor_Specified(Index: Integer): boolean;
    function  GetCIOT(Index: Integer): string;
    procedure SetCIOT(Index: Integer; const Astring: string);
    function  CIOT_Specified(Index: Integer): boolean;
    function  GetVarejo(Index: Integer): Boolean;
    procedure SetVarejo(Index: Integer; const ABoolean: Boolean);
    function  Varejo_Specified(Index: Integer): boolean;
    function  GetNomePortador(Index: Integer): string;
    procedure SetNomePortador(Index: Integer; const Astring: string);
    function  NomePortador_Specified(Index: Integer): boolean;
    function  GetOrigemCompra(Index: Integer): string;
    procedure SetOrigemCompra(Index: Integer; const Astring: string);
    function  OrigemCompra_Specified(Index: Integer): boolean;
    function  GetPodeEmitirRecibo(Index: Integer): Boolean;
    procedure SetPodeEmitirRecibo(Index: Integer; const ABoolean: Boolean);
    function  PodeEmitirRecibo_Specified(Index: Integer): boolean;
    function  GetPodeCarregar(Index: Integer): Boolean;
    procedure SetPodeCarregar(Index: Integer; const ABoolean: Boolean);
    function  PodeCarregar_Specified(Index: Integer): boolean;
    function  GetIdStatusCompraValePedagio(Index: Integer): Integer;
    procedure SetIdStatusCompraValePedagio(Index: Integer; const AInteger: Integer);
    function  IdStatusCompraValePedagio_Specified(Index: Integer): boolean;
    function  GetOrigemCarga(Index: Integer): string;
    procedure SetOrigemCarga(Index: Integer; const Astring: string);
    function  OrigemCarga_Specified(Index: Integer): boolean;
    function  GetIdOperacaoTransporte(Index: Integer): Integer;
    procedure SetIdOperacaoTransporte(Index: Integer; const AInteger: Integer);
    function  IdOperacaoTransporte_Specified(Index: Integer): boolean;
    function  GetDocumentoRelacionado(Index: Integer): string;
    procedure SetDocumentoRelacionado(Index: Integer; const Astring: string);
    function  DocumentoRelacionado_Specified(Index: Integer): boolean;
    function  GetNomeFantasia(Index: Integer): string;
    procedure SetNomeFantasia(Index: Integer; const Astring: string);
    function  NomeFantasia_Specified(Index: Integer): boolean;
    function  GetCPFCondutor(Index: Integer): string;
    procedure SetCPFCondutor(Index: Integer; const Astring: string);
    function  CPFCondutor_Specified(Index: Integer): boolean;
    function  GetPodeCancelarCompra(Index: Integer): Boolean;
    procedure SetPodeCancelarCompra(Index: Integer; const ABoolean: Boolean);
    function  PodeCancelarCompra_Specified(Index: Integer): boolean;
    function  GetUsuarioComprador(Index: Integer): string;
    procedure SetUsuarioComprador(Index: Integer; const Astring: string);
    function  UsuarioComprador_Specified(Index: Integer): boolean;
    function  GetNomeRota(Index: Integer): string;
    procedure SetNomeRota(Index: Integer; const Astring: string);
    function  NomeRota_Specified(Index: Integer): boolean;
    function  GetIdRota(Index: Integer): Integer;
    procedure SetIdRota(Index: Integer; const AInteger: Integer);
    function  IdRota_Specified(Index: Integer): boolean;
    function  GetSimples(Index: Integer): Boolean;
    procedure SetSimples(Index: Integer; const ABoolean: Boolean);
    function  Simples_Specified(Index: Integer): boolean;
    function  GetNumeroRecibo(Index: Integer): string;
    procedure SetNumeroRecibo(Index: Integer; const Astring: string);
    function  NumeroRecibo_Specified(Index: Integer): boolean;
    function  GetIdIntegrador(Index: Integer): string;
    procedure SetIdIntegrador(Index: Integer; const Astring: string);
    function  IdIntegrador_Specified(Index: Integer): boolean;
    function  GetSaldoAnteriorCartao(Index: Integer): TXSDecimal;
    procedure SetSaldoAnteriorCartao(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  SaldoAnteriorCartao_Specified(Index: Integer): boolean;
    function  GetSaldoPosteriorCartao(Index: Integer): TXSDecimal;
    procedure SetSaldoPosteriorCartao(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  SaldoPosteriorCartao_Specified(Index: Integer): boolean;
    function  GetValorCarregadoCartao(Index: Integer): TXSDecimal;
    procedure SetValorCarregadoCartao(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorCarregadoCartao_Specified(Index: Integer): boolean;
    function  GetMotoristaNome(Index: Integer): string;
    procedure SetMotoristaNome(Index: Integer; const Astring: string);
    function  MotoristaNome_Specified(Index: Integer): boolean;
    function  GetMotoristaCPF(Index: Integer): string;
    procedure SetMotoristaCPF(Index: Integer; const Astring: string);
    function  MotoristaCPF_Specified(Index: Integer): boolean;
    function  GetMotoristaRNTRC(Index: Integer): string;
    procedure SetMotoristaRNTRC(Index: Integer; const Astring: string);
    function  MotoristaRNTRC_Specified(Index: Integer): boolean;
  published
    property Erro:                      ErroResponse2  Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property TipoCompra:                string         Index (IS_OPTN or IS_NLBL) read GetTipoCompra write SetTipoCompra stored TipoCompra_Specified;
    property IdCompra:                  Integer        Index (IS_OPTN) read GetIdCompra write SetIdCompra stored IdCompra_Specified;
    property DataHoraCompra:            TXSDateTime    Index (IS_OPTN) read GetDataHoraCompra write SetDataHoraCompra stored DataHoraCompra_Specified;
    property DataHoraCargaConfirmacao:  TXSDateTime    Index (IS_OPTN or IS_NLBL) read GetDataHoraCargaConfirmacao write SetDataHoraCargaConfirmacao stored DataHoraCargaConfirmacao_Specified;
    property TagOuCartao:               string         Index (IS_OPTN or IS_NLBL) read GetTagOuCartao write SetTagOuCartao stored TagOuCartao_Specified;
    property Valor:                     TXSDecimal     Index (IS_OPTN) read GetValor write SetValor stored Valor_Specified;
    property CIOT:                      string         Index (IS_OPTN or IS_NLBL) read GetCIOT write SetCIOT stored CIOT_Specified;
    property Varejo:                    Boolean        Index (IS_OPTN) read GetVarejo write SetVarejo stored Varejo_Specified;
    property NomePortador:              string         Index (IS_OPTN or IS_NLBL) read GetNomePortador write SetNomePortador stored NomePortador_Specified;
    property OrigemCompra:              string         Index (IS_OPTN or IS_NLBL) read GetOrigemCompra write SetOrigemCompra stored OrigemCompra_Specified;
    property PodeEmitirRecibo:          Boolean        Index (IS_OPTN) read GetPodeEmitirRecibo write SetPodeEmitirRecibo stored PodeEmitirRecibo_Specified;
    property PodeCarregar:              Boolean        Index (IS_OPTN) read GetPodeCarregar write SetPodeCarregar stored PodeCarregar_Specified;
    property IdStatusCompraValePedagio: Integer        Index (IS_OPTN or IS_NLBL) read GetIdStatusCompraValePedagio write SetIdStatusCompraValePedagio stored IdStatusCompraValePedagio_Specified;
    property OrigemCarga:               string         Index (IS_OPTN or IS_NLBL) read GetOrigemCarga write SetOrigemCarga stored OrigemCarga_Specified;
    property IdOperacaoTransporte:      Integer        Index (IS_OPTN or IS_NLBL) read GetIdOperacaoTransporte write SetIdOperacaoTransporte stored IdOperacaoTransporte_Specified;
    property DocumentoRelacionado:      string         Index (IS_OPTN or IS_NLBL) read GetDocumentoRelacionado write SetDocumentoRelacionado stored DocumentoRelacionado_Specified;
    property NomeFantasia:              string         Index (IS_OPTN or IS_NLBL) read GetNomeFantasia write SetNomeFantasia stored NomeFantasia_Specified;
    property CPFCondutor:               string         Index (IS_OPTN or IS_NLBL) read GetCPFCondutor write SetCPFCondutor stored CPFCondutor_Specified;
    property PodeCancelarCompra:        Boolean        Index (IS_OPTN) read GetPodeCancelarCompra write SetPodeCancelarCompra stored PodeCancelarCompra_Specified;
    property UsuarioComprador:          string         Index (IS_OPTN or IS_NLBL) read GetUsuarioComprador write SetUsuarioComprador stored UsuarioComprador_Specified;
    property NomeRota:                  string         Index (IS_OPTN or IS_NLBL) read GetNomeRota write SetNomeRota stored NomeRota_Specified;
    property IdRota:                    Integer        Index (IS_OPTN or IS_NLBL) read GetIdRota write SetIdRota stored IdRota_Specified;
    property Simples:                   Boolean        Index (IS_OPTN or IS_NLBL) read GetSimples write SetSimples stored Simples_Specified;
    property NumeroRecibo:              string         Index (IS_OPTN or IS_NLBL) read GetNumeroRecibo write SetNumeroRecibo stored NumeroRecibo_Specified;
    property IdIntegrador:              string         Index (IS_OPTN or IS_NLBL) read GetIdIntegrador write SetIdIntegrador stored IdIntegrador_Specified;
    property SaldoAnteriorCartao:       TXSDecimal     Index (IS_OPTN or IS_NLBL) read GetSaldoAnteriorCartao write SetSaldoAnteriorCartao stored SaldoAnteriorCartao_Specified;
    property SaldoPosteriorCartao:      TXSDecimal     Index (IS_OPTN or IS_NLBL) read GetSaldoPosteriorCartao write SetSaldoPosteriorCartao stored SaldoPosteriorCartao_Specified;
    property ValorCarregadoCartao:      TXSDecimal     Index (IS_OPTN or IS_NLBL) read GetValorCarregadoCartao write SetValorCarregadoCartao stored ValorCarregadoCartao_Specified;
    property MotoristaNome:             string         Index (IS_OPTN or IS_NLBL) read GetMotoristaNome write SetMotoristaNome stored MotoristaNome_Specified;
    property MotoristaCPF:              string         Index (IS_OPTN or IS_NLBL) read GetMotoristaCPF write SetMotoristaCPF stored MotoristaCPF_Specified;
    property MotoristaRNTRC:            string         Index (IS_OPTN or IS_NLBL) read GetMotoristaRNTRC write SetMotoristaRNTRC stored MotoristaRNTRC_Specified;
  end;



  // ************************************************************************ //
  // XML       : BuscaCompraValePedagioRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  BuscaCompraValePedagioRequest2 = class(TRemotable)
  private
    FIdStatusValePedagio: Integer;
    FIdStatusValePedagio_Specified: boolean;
    FQuantidadeItensPorPagina: Integer;
    FQuantidadeItensPorPagina_Specified: boolean;
    FNumeroPagina: Integer;
    FNumeroPagina_Specified: boolean;
    FIdModoCompraValePedagio: Integer;
    FIdModoCompraValePedagio_Specified: boolean;
    FDataInicioPeriodo: TXSDateTime;
    FDataInicioPeriodo_Specified: boolean;
    FDataFimPeriodo: TXSDateTime;
    FDataFimPeriodo_Specified: boolean;
    FIdCompraValePedagio: Integer;
    FIdCompraValePedagio_Specified: boolean;
    FIdIntegrador: string;
    FIdIntegrador_Specified: boolean;
    FTipoBuscaUnitaria: Integer;
    FTipoBuscaUnitaria_Specified: boolean;
    function  GetIdStatusValePedagio(Index: Integer): Integer;
    procedure SetIdStatusValePedagio(Index: Integer; const AInteger: Integer);
    function  IdStatusValePedagio_Specified(Index: Integer): boolean;
    function  GetQuantidadeItensPorPagina(Index: Integer): Integer;
    procedure SetQuantidadeItensPorPagina(Index: Integer; const AInteger: Integer);
    function  QuantidadeItensPorPagina_Specified(Index: Integer): boolean;
    function  GetNumeroPagina(Index: Integer): Integer;
    procedure SetNumeroPagina(Index: Integer; const AInteger: Integer);
    function  NumeroPagina_Specified(Index: Integer): boolean;
    function  GetIdModoCompraValePedagio(Index: Integer): Integer;
    procedure SetIdModoCompraValePedagio(Index: Integer; const AInteger: Integer);
    function  IdModoCompraValePedagio_Specified(Index: Integer): boolean;
    function  GetDataInicioPeriodo(Index: Integer): TXSDateTime;
    procedure SetDataInicioPeriodo(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DataInicioPeriodo_Specified(Index: Integer): boolean;
    function  GetDataFimPeriodo(Index: Integer): TXSDateTime;
    procedure SetDataFimPeriodo(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DataFimPeriodo_Specified(Index: Integer): boolean;
    function  GetIdCompraValePedagio(Index: Integer): Integer;
    procedure SetIdCompraValePedagio(Index: Integer; const AInteger: Integer);
    function  IdCompraValePedagio_Specified(Index: Integer): boolean;
    function  GetIdIntegrador(Index: Integer): string;
    procedure SetIdIntegrador(Index: Integer; const Astring: string);
    function  IdIntegrador_Specified(Index: Integer): boolean;
    function  GetTipoBuscaUnitaria(Index: Integer): Integer;
    procedure SetTipoBuscaUnitaria(Index: Integer; const AInteger: Integer);
    function  TipoBuscaUnitaria_Specified(Index: Integer): boolean;
  published
    property IdStatusValePedagio:      Integer      Index (IS_OPTN or IS_NLBL) read GetIdStatusValePedagio write SetIdStatusValePedagio stored IdStatusValePedagio_Specified;
    property QuantidadeItensPorPagina: Integer      Index (IS_OPTN) read GetQuantidadeItensPorPagina write SetQuantidadeItensPorPagina stored QuantidadeItensPorPagina_Specified;
    property NumeroPagina:             Integer      Index (IS_OPTN) read GetNumeroPagina write SetNumeroPagina stored NumeroPagina_Specified;
    property IdModoCompraValePedagio:  Integer      Index (IS_OPTN) read GetIdModoCompraValePedagio write SetIdModoCompraValePedagio stored IdModoCompraValePedagio_Specified;
    property DataInicioPeriodo:        TXSDateTime  Index (IS_OPTN or IS_NLBL) read GetDataInicioPeriodo write SetDataInicioPeriodo stored DataInicioPeriodo_Specified;
    property DataFimPeriodo:           TXSDateTime  Index (IS_OPTN or IS_NLBL) read GetDataFimPeriodo write SetDataFimPeriodo stored DataFimPeriodo_Specified;
    property IdCompraValePedagio:      Integer      Index (IS_OPTN or IS_NLBL) read GetIdCompraValePedagio write SetIdCompraValePedagio stored IdCompraValePedagio_Specified;
    property IdIntegrador:             string       Index (IS_OPTN or IS_NLBL) read GetIdIntegrador write SetIdIntegrador stored IdIntegrador_Specified;
    property TipoBuscaUnitaria:        Integer      Index (IS_OPTN or IS_NLBL) read GetTipoBuscaUnitaria write SetTipoBuscaUnitaria stored TipoBuscaUnitaria_Specified;
  end;

  ArrayOfBuscaCombustivelAvulsoCartaoResponse = array of BuscaCombustivelAvulsoCartaoResponse2;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }


  // ************************************************************************ //
  // XML       : ResultadoPaginadoBuscaCombustivelAvulsoCartaoResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ResultadoPaginadoBuscaCombustivelAvulsoCartaoResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FItens: ArrayOfBuscaCombustivelAvulsoCartaoResponse;
    FItens_Specified: boolean;
    FNumeroPagina: Integer;
    FNumeroPagina_Specified: boolean;
    FQuantidadeItensPorPagina: Integer;
    FQuantidadeItensPorPagina_Specified: boolean;
    FQuantidadeTotalItens: Integer;
    FQuantidadeTotalItens_Specified: boolean;
    FQuantidadeTotalPaginas: Integer;
    FQuantidadeTotalPaginas_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetItens(Index: Integer): ArrayOfBuscaCombustivelAvulsoCartaoResponse;
    procedure SetItens(Index: Integer; const AArrayOfBuscaCombustivelAvulsoCartaoResponse: ArrayOfBuscaCombustivelAvulsoCartaoResponse);
    function  Itens_Specified(Index: Integer): boolean;
    function  GetNumeroPagina(Index: Integer): Integer;
    procedure SetNumeroPagina(Index: Integer; const AInteger: Integer);
    function  NumeroPagina_Specified(Index: Integer): boolean;
    function  GetQuantidadeItensPorPagina(Index: Integer): Integer;
    procedure SetQuantidadeItensPorPagina(Index: Integer; const AInteger: Integer);
    function  QuantidadeItensPorPagina_Specified(Index: Integer): boolean;
    function  GetQuantidadeTotalItens(Index: Integer): Integer;
    procedure SetQuantidadeTotalItens(Index: Integer; const AInteger: Integer);
    function  QuantidadeTotalItens_Specified(Index: Integer): boolean;
    function  GetQuantidadeTotalPaginas(Index: Integer): Integer;
    procedure SetQuantidadeTotalPaginas(Index: Integer; const AInteger: Integer);
    function  QuantidadeTotalPaginas_Specified(Index: Integer): boolean;
  published
    property Erro:                     ErroResponse2                                Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property Itens:                    ArrayOfBuscaCombustivelAvulsoCartaoResponse  Index (IS_OPTN or IS_NLBL) read GetItens write SetItens stored Itens_Specified;
    property NumeroPagina:             Integer                                      Index (IS_OPTN) read GetNumeroPagina write SetNumeroPagina stored NumeroPagina_Specified;
    property QuantidadeItensPorPagina: Integer                                      Index (IS_OPTN) read GetQuantidadeItensPorPagina write SetQuantidadeItensPorPagina stored QuantidadeItensPorPagina_Specified;
    property QuantidadeTotalItens:     Integer                                      Index (IS_OPTN) read GetQuantidadeTotalItens write SetQuantidadeTotalItens stored QuantidadeTotalItens_Specified;
    property QuantidadeTotalPaginas:   Integer                                      Index (IS_OPTN) read GetQuantidadeTotalPaginas write SetQuantidadeTotalPaginas stored QuantidadeTotalPaginas_Specified;
  end;



  // ************************************************************************ //
  // XML       : BuscaCombustivelAvulsoCartaoResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  BuscaCombustivelAvulsoCartaoResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FDataCompra: TXSDateTime;
    FDataCompra_Specified: boolean;
    FNumeroCartao: string;
    FNumeroCartao_Specified: boolean;
    FValor: TXSDecimal;
    FValor_Specified: boolean;
    FComentario: string;
    FComentario_Specified: boolean;
    FSituacaoTransacao: string;
    FSituacaoTransacao_Specified: boolean;
    FItemFinanceiro: string;
    FItemFinanceiro_Specified: boolean;
    FNumeroDocumentoEmbarque: string;
    FNumeroDocumentoEmbarque_Specified: boolean;
    FPlaca: string;
    FPlaca_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetDataCompra(Index: Integer): TXSDateTime;
    procedure SetDataCompra(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DataCompra_Specified(Index: Integer): boolean;
    function  GetNumeroCartao(Index: Integer): string;
    procedure SetNumeroCartao(Index: Integer; const Astring: string);
    function  NumeroCartao_Specified(Index: Integer): boolean;
    function  GetValor(Index: Integer): TXSDecimal;
    procedure SetValor(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  Valor_Specified(Index: Integer): boolean;
    function  GetComentario(Index: Integer): string;
    procedure SetComentario(Index: Integer; const Astring: string);
    function  Comentario_Specified(Index: Integer): boolean;
    function  GetSituacaoTransacao(Index: Integer): string;
    procedure SetSituacaoTransacao(Index: Integer; const Astring: string);
    function  SituacaoTransacao_Specified(Index: Integer): boolean;
    function  GetItemFinanceiro(Index: Integer): string;
    procedure SetItemFinanceiro(Index: Integer; const Astring: string);
    function  ItemFinanceiro_Specified(Index: Integer): boolean;
    function  GetNumeroDocumentoEmbarque(Index: Integer): string;
    procedure SetNumeroDocumentoEmbarque(Index: Integer; const Astring: string);
    function  NumeroDocumentoEmbarque_Specified(Index: Integer): boolean;
    function  GetPlaca(Index: Integer): string;
    procedure SetPlaca(Index: Integer; const Astring: string);
    function  Placa_Specified(Index: Integer): boolean;
  published
    property Erro:                    ErroResponse2  Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property DataCompra:              TXSDateTime    Index (IS_OPTN) read GetDataCompra write SetDataCompra stored DataCompra_Specified;
    property NumeroCartao:            string         Index (IS_OPTN or IS_NLBL) read GetNumeroCartao write SetNumeroCartao stored NumeroCartao_Specified;
    property Valor:                   TXSDecimal     Index (IS_OPTN) read GetValor write SetValor stored Valor_Specified;
    property Comentario:              string         Index (IS_OPTN or IS_NLBL) read GetComentario write SetComentario stored Comentario_Specified;
    property SituacaoTransacao:       string         Index (IS_OPTN or IS_NLBL) read GetSituacaoTransacao write SetSituacaoTransacao stored SituacaoTransacao_Specified;
    property ItemFinanceiro:          string         Index (IS_OPTN or IS_NLBL) read GetItemFinanceiro write SetItemFinanceiro stored ItemFinanceiro_Specified;
    property NumeroDocumentoEmbarque: string         Index (IS_OPTN or IS_NLBL) read GetNumeroDocumentoEmbarque write SetNumeroDocumentoEmbarque stored NumeroDocumentoEmbarque_Specified;
    property Placa:                   string         Index (IS_OPTN or IS_NLBL) read GetPlaca write SetPlaca stored Placa_Specified;
  end;



  // ************************************************************************ //
  // XML       : BuscaParticipanteRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  BuscaParticipanteRequest = class(BuscaParticipanteRequest2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ResultadoPaginadoParticipanteResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ResultadoPaginadoParticipanteResponse = class(ResultadoPaginadoParticipanteResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : CentroDeCustoRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  CentroDeCustoRequest = class(CentroDeCustoRequest2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ParticipanteResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ParticipanteResponse = class(ParticipanteResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ErroResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ErroResponse = class(ErroResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : GeraTokenParaAcessoResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  GeraTokenParaAcessoResponse = class(GeraTokenParaAcessoResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ParticipanteRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ParticipanteRequest = class(ParticipanteRequest2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : CentroDeCustoResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  CentroDeCustoResponse = class(CentroDeCustoResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : BuscaMotoristaRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  BuscaMotoristaRequest = class(BuscaMotoristaRequest2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ResultadoPaginadoMotoristaResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ResultadoPaginadoMotoristaResponse = class(ResultadoPaginadoMotoristaResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : TransportadorRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  TransportadorRequest = class(TransportadorRequest2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : MotoristaResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  MotoristaResponse = class(MotoristaResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : BuscaCentroDeCustoRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  BuscaCentroDeCustoRequest = class(BuscaCentroDeCustoRequest2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ResultadoPaginadoCentroDeCustoResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ResultadoPaginadoCentroDeCustoResponse = class(ResultadoPaginadoCentroDeCustoResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : MotoristaRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  MotoristaRequest = class(MotoristaRequest2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : RotaDetalhadaInfoPedagio, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  RotaDetalhadaInfoPedagio2 = class(TRemotable)
  private
    FNomePedagio: string;
    FNomePedagio_Specified: boolean;
    FIdDmCategoriaVeiculo: Integer;
    FIdDmCategoriaVeiculo_Specified: boolean;
    FValor: TXSDecimal;
    FValor_Specified: boolean;
    FOrdem: Integer;
    FOrdem_Specified: boolean;
    function  GetNomePedagio(Index: Integer): string;
    procedure SetNomePedagio(Index: Integer; const Astring: string);
    function  NomePedagio_Specified(Index: Integer): boolean;
    function  GetIdDmCategoriaVeiculo(Index: Integer): Integer;
    procedure SetIdDmCategoriaVeiculo(Index: Integer; const AInteger: Integer);
    function  IdDmCategoriaVeiculo_Specified(Index: Integer): boolean;
    function  GetValor(Index: Integer): TXSDecimal;
    procedure SetValor(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  Valor_Specified(Index: Integer): boolean;
    function  GetOrdem(Index: Integer): Integer;
    procedure SetOrdem(Index: Integer; const AInteger: Integer);
    function  Ordem_Specified(Index: Integer): boolean;
  published
    property NomePedagio:          string      Index (IS_OPTN or IS_NLBL) read GetNomePedagio write SetNomePedagio stored NomePedagio_Specified;
    property IdDmCategoriaVeiculo: Integer     Index (IS_OPTN) read GetIdDmCategoriaVeiculo write SetIdDmCategoriaVeiculo stored IdDmCategoriaVeiculo_Specified;
    property Valor:                TXSDecimal  Index (IS_OPTN) read GetValor write SetValor stored Valor_Specified;
    property Ordem:                Integer     Index (IS_OPTN) read GetOrdem write SetOrdem stored Ordem_Specified;
  end;



  // ************************************************************************ //
  // XML       : RotaDetalhadaInfoPedagio, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  RotaDetalhadaInfoPedagio = class(RotaDetalhadaInfoPedagio2)
  private
  published
  end;

  ArrayOfIdentificadorPracaPedagio = array of IdentificadorPracaPedagio2;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }


  // ************************************************************************ //
  // XML       : CompraValePedagioPorPracaRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  CompraValePedagioPorPracaRequest2 = class(TRemotable)
  private
    FIdModoCompraValePedagio: Integer;
    FIdModoCompraValePedagio_Specified: boolean;
    FCodigoCategoriaVeiculo: Integer;
    FCodigoCategoriaVeiculo_Specified: boolean;
    FPlaca: string;
    FPlaca_Specified: boolean;
    FIdsPracasPedagio: ArrayOfIdentificadorPracaPedagio;
    FIdsPracasPedagio_Specified: boolean;
    FInicioVigencia: TXSDateTime;
    FInicioVigencia_Specified: boolean;
    FFimVigencia: TXSDateTime;
    FFimVigencia_Specified: boolean;
    FCodigoCentroDeCusto: Integer;
    FCodigoCentroDeCusto_Specified: boolean;
    FNumeroDocumentoEmbarque: string;
    FNumeroDocumentoEmbarque_Specified: boolean;
    FItemFinanceiro: string;
    FItemFinanceiro_Specified: boolean;
    FIdIntegrador: string;
    FIdIntegrador_Specified: boolean;
    FValorPrevioCalculado: TXSDecimal;
    FValorPrevioCalculado_Specified: boolean;
    FDadosComplementares: DadosComplementaresCompraValePedagio2;
    FDadosComplementares_Specified: boolean;
    FDadosPagamentoCartao: DadosPagamentoPedagioCartao2;
    FDadosPagamentoCartao_Specified: boolean;
    function  GetIdModoCompraValePedagio(Index: Integer): Integer;
    procedure SetIdModoCompraValePedagio(Index: Integer; const AInteger: Integer);
    function  IdModoCompraValePedagio_Specified(Index: Integer): boolean;
    function  GetCodigoCategoriaVeiculo(Index: Integer): Integer;
    procedure SetCodigoCategoriaVeiculo(Index: Integer; const AInteger: Integer);
    function  CodigoCategoriaVeiculo_Specified(Index: Integer): boolean;
    function  GetPlaca(Index: Integer): string;
    procedure SetPlaca(Index: Integer; const Astring: string);
    function  Placa_Specified(Index: Integer): boolean;
    function  GetIdsPracasPedagio(Index: Integer): ArrayOfIdentificadorPracaPedagio;
    procedure SetIdsPracasPedagio(Index: Integer; const AArrayOfIdentificadorPracaPedagio: ArrayOfIdentificadorPracaPedagio);
    function  IdsPracasPedagio_Specified(Index: Integer): boolean;
    function  GetInicioVigencia(Index: Integer): TXSDateTime;
    procedure SetInicioVigencia(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  InicioVigencia_Specified(Index: Integer): boolean;
    function  GetFimVigencia(Index: Integer): TXSDateTime;
    procedure SetFimVigencia(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  FimVigencia_Specified(Index: Integer): boolean;
    function  GetCodigoCentroDeCusto(Index: Integer): Integer;
    procedure SetCodigoCentroDeCusto(Index: Integer; const AInteger: Integer);
    function  CodigoCentroDeCusto_Specified(Index: Integer): boolean;
    function  GetNumeroDocumentoEmbarque(Index: Integer): string;
    procedure SetNumeroDocumentoEmbarque(Index: Integer; const Astring: string);
    function  NumeroDocumentoEmbarque_Specified(Index: Integer): boolean;
    function  GetItemFinanceiro(Index: Integer): string;
    procedure SetItemFinanceiro(Index: Integer; const Astring: string);
    function  ItemFinanceiro_Specified(Index: Integer): boolean;
    function  GetIdIntegrador(Index: Integer): string;
    procedure SetIdIntegrador(Index: Integer; const Astring: string);
    function  IdIntegrador_Specified(Index: Integer): boolean;
    function  GetValorPrevioCalculado(Index: Integer): TXSDecimal;
    procedure SetValorPrevioCalculado(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorPrevioCalculado_Specified(Index: Integer): boolean;
    function  GetDadosComplementares(Index: Integer): DadosComplementaresCompraValePedagio2;
    procedure SetDadosComplementares(Index: Integer; const ADadosComplementaresCompraValePedagio2: DadosComplementaresCompraValePedagio2);
    function  DadosComplementares_Specified(Index: Integer): boolean;
    function  GetDadosPagamentoCartao(Index: Integer): DadosPagamentoPedagioCartao2;
    procedure SetDadosPagamentoCartao(Index: Integer; const ADadosPagamentoPedagioCartao2: DadosPagamentoPedagioCartao2);
    function  DadosPagamentoCartao_Specified(Index: Integer): boolean;
  published
    property IdModoCompraValePedagio: Integer                                Index (IS_OPTN) read GetIdModoCompraValePedagio write SetIdModoCompraValePedagio stored IdModoCompraValePedagio_Specified;
    property CodigoCategoriaVeiculo:  Integer                                Index (IS_OPTN) read GetCodigoCategoriaVeiculo write SetCodigoCategoriaVeiculo stored CodigoCategoriaVeiculo_Specified;
    property Placa:                   string                                 Index (IS_OPTN or IS_NLBL) read GetPlaca write SetPlaca stored Placa_Specified;
    property IdsPracasPedagio:        ArrayOfIdentificadorPracaPedagio       Index (IS_OPTN or IS_NLBL) read GetIdsPracasPedagio write SetIdsPracasPedagio stored IdsPracasPedagio_Specified;
    property InicioVigencia:          TXSDateTime                            Index (IS_OPTN or IS_NLBL) read GetInicioVigencia write SetInicioVigencia stored InicioVigencia_Specified;
    property FimVigencia:             TXSDateTime                            Index (IS_OPTN or IS_NLBL) read GetFimVigencia write SetFimVigencia stored FimVigencia_Specified;
    property CodigoCentroDeCusto:     Integer                                Index (IS_OPTN or IS_NLBL) read GetCodigoCentroDeCusto write SetCodigoCentroDeCusto stored CodigoCentroDeCusto_Specified;
    property NumeroDocumentoEmbarque: string                                 Index (IS_OPTN or IS_NLBL) read GetNumeroDocumentoEmbarque write SetNumeroDocumentoEmbarque stored NumeroDocumentoEmbarque_Specified;
    property ItemFinanceiro:          string                                 Index (IS_OPTN or IS_NLBL) read GetItemFinanceiro write SetItemFinanceiro stored ItemFinanceiro_Specified;
    property IdIntegrador:            string                                 Index (IS_OPTN or IS_NLBL) read GetIdIntegrador write SetIdIntegrador stored IdIntegrador_Specified;
    property ValorPrevioCalculado:    TXSDecimal                             Index (IS_OPTN or IS_NLBL) read GetValorPrevioCalculado write SetValorPrevioCalculado stored ValorPrevioCalculado_Specified;
    property DadosComplementares:     DadosComplementaresCompraValePedagio2  Index (IS_OPTN or IS_NLBL) read GetDadosComplementares write SetDadosComplementares stored DadosComplementares_Specified;
    property DadosPagamentoCartao:    DadosPagamentoPedagioCartao2           Index (IS_OPTN or IS_NLBL) read GetDadosPagamentoCartao write SetDadosPagamentoCartao stored DadosPagamentoCartao_Specified;
  end;



  // ************************************************************************ //
  // XML       : CompraValePedagioPorPracaRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  CompraValePedagioPorPracaRequest = class(CompraValePedagioPorPracaRequest2)
  private
  published
  end;

  ArrayOfRotaDetalhadaInfoPedagio = array of RotaDetalhadaInfoPedagio2;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }
  ArrayOfRotaDetalhadaInfoParada = array of RotaDetalhadaInfoParada2;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }


  // ************************************************************************ //
  // XML       : RotaDetalhadaResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  RotaDetalhadaResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FIdRotaCliente: Integer;
    FIdRotaCliente_Specified: boolean;
    FNomeRota: string;
    FNomeRota_Specified: boolean;
    FOrigem: RotaDetalhadaInfoParada2;
    FOrigem_Specified: boolean;
    FDestino: RotaDetalhadaInfoParada2;
    FDestino_Specified: boolean;
    FParadas: ArrayOfRotaDetalhadaInfoParada;
    FParadas_Specified: boolean;
    FPedagios: ArrayOfRotaDetalhadaInfoPedagio;
    FPedagios_Specified: boolean;
    FValorTotalPedagio: TXSDecimal;
    FValorTotalPedagio_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetIdRotaCliente(Index: Integer): Integer;
    procedure SetIdRotaCliente(Index: Integer; const AInteger: Integer);
    function  IdRotaCliente_Specified(Index: Integer): boolean;
    function  GetNomeRota(Index: Integer): string;
    procedure SetNomeRota(Index: Integer; const Astring: string);
    function  NomeRota_Specified(Index: Integer): boolean;
    function  GetOrigem(Index: Integer): RotaDetalhadaInfoParada2;
    procedure SetOrigem(Index: Integer; const ARotaDetalhadaInfoParada2: RotaDetalhadaInfoParada2);
    function  Origem_Specified(Index: Integer): boolean;
    function  GetDestino(Index: Integer): RotaDetalhadaInfoParada2;
    procedure SetDestino(Index: Integer; const ARotaDetalhadaInfoParada2: RotaDetalhadaInfoParada2);
    function  Destino_Specified(Index: Integer): boolean;
    function  GetParadas(Index: Integer): ArrayOfRotaDetalhadaInfoParada;
    procedure SetParadas(Index: Integer; const AArrayOfRotaDetalhadaInfoParada: ArrayOfRotaDetalhadaInfoParada);
    function  Paradas_Specified(Index: Integer): boolean;
    function  GetPedagios(Index: Integer): ArrayOfRotaDetalhadaInfoPedagio;
    procedure SetPedagios(Index: Integer; const AArrayOfRotaDetalhadaInfoPedagio: ArrayOfRotaDetalhadaInfoPedagio);
    function  Pedagios_Specified(Index: Integer): boolean;
    function  GetValorTotalPedagio(Index: Integer): TXSDecimal;
    procedure SetValorTotalPedagio(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorTotalPedagio_Specified(Index: Integer): boolean;
  published
    property Erro:              ErroResponse2                    Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property IdRotaCliente:     Integer                          Index (IS_OPTN) read GetIdRotaCliente write SetIdRotaCliente stored IdRotaCliente_Specified;
    property NomeRota:          string                           Index (IS_OPTN or IS_NLBL) read GetNomeRota write SetNomeRota stored NomeRota_Specified;
    property Origem:            RotaDetalhadaInfoParada2         Index (IS_OPTN or IS_NLBL) read GetOrigem write SetOrigem stored Origem_Specified;
    property Destino:           RotaDetalhadaInfoParada2         Index (IS_OPTN or IS_NLBL) read GetDestino write SetDestino stored Destino_Specified;
    property Paradas:           ArrayOfRotaDetalhadaInfoParada   Index (IS_OPTN or IS_NLBL) read GetParadas write SetParadas stored Paradas_Specified;
    property Pedagios:          ArrayOfRotaDetalhadaInfoPedagio  Index (IS_OPTN or IS_NLBL) read GetPedagios write SetPedagios stored Pedagios_Specified;
    property ValorTotalPedagio: TXSDecimal                       Index (IS_OPTN) read GetValorTotalPedagio write SetValorTotalPedagio stored ValorTotalPedagio_Specified;
  end;



  // ************************************************************************ //
  // XML       : RotaDetalhadaResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  RotaDetalhadaResponse = class(RotaDetalhadaResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : DadosPagamentoPedagioCartao, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  DadosPagamentoPedagioCartao2 = class(TRemotable)
  private
    FNumeroCartao: string;
    FNumeroCartao_Specified: boolean;
    FMotoristaNome: string;
    FMotoristaNome_Specified: boolean;
    FMotoristaCPF: string;
    FMotoristaCPF_Specified: boolean;
    FMotoristaRNTRC: string;
    FMotoristaRNTRC_Specified: boolean;
    function  GetNumeroCartao(Index: Integer): string;
    procedure SetNumeroCartao(Index: Integer; const Astring: string);
    function  NumeroCartao_Specified(Index: Integer): boolean;
    function  GetMotoristaNome(Index: Integer): string;
    procedure SetMotoristaNome(Index: Integer; const Astring: string);
    function  MotoristaNome_Specified(Index: Integer): boolean;
    function  GetMotoristaCPF(Index: Integer): string;
    procedure SetMotoristaCPF(Index: Integer; const Astring: string);
    function  MotoristaCPF_Specified(Index: Integer): boolean;
    function  GetMotoristaRNTRC(Index: Integer): string;
    procedure SetMotoristaRNTRC(Index: Integer; const Astring: string);
    function  MotoristaRNTRC_Specified(Index: Integer): boolean;
  published
    property NumeroCartao:   string  Index (IS_OPTN or IS_NLBL) read GetNumeroCartao write SetNumeroCartao stored NumeroCartao_Specified;
    property MotoristaNome:  string  Index (IS_OPTN or IS_NLBL) read GetMotoristaNome write SetMotoristaNome stored MotoristaNome_Specified;
    property MotoristaCPF:   string  Index (IS_OPTN or IS_NLBL) read GetMotoristaCPF write SetMotoristaCPF stored MotoristaCPF_Specified;
    property MotoristaRNTRC: string  Index (IS_OPTN or IS_NLBL) read GetMotoristaRNTRC write SetMotoristaRNTRC stored MotoristaRNTRC_Specified;
  end;



  // ************************************************************************ //
  // XML       : DadosPagamentoPedagioCartao, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  DadosPagamentoPedagioCartao = class(DadosPagamentoPedagioCartao2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ResumoPracaPedagio, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ResumoPracaPedagio2 = class(TRemotable)
  private
    FIdPracaPedagio: Integer;
    FIdPracaPedagio_Specified: boolean;
    FKmPraca: Integer;
    FKmPraca_Specified: boolean;
    FNome: string;
    FNome_Specified: boolean;
    FRodovia: string;
    FRodovia_Specified: boolean;
    FUF: string;
    FUF_Specified: boolean;
    function  GetIdPracaPedagio(Index: Integer): Integer;
    procedure SetIdPracaPedagio(Index: Integer; const AInteger: Integer);
    function  IdPracaPedagio_Specified(Index: Integer): boolean;
    function  GetKmPraca(Index: Integer): Integer;
    procedure SetKmPraca(Index: Integer; const AInteger: Integer);
    function  KmPraca_Specified(Index: Integer): boolean;
    function  GetNome(Index: Integer): string;
    procedure SetNome(Index: Integer; const Astring: string);
    function  Nome_Specified(Index: Integer): boolean;
    function  GetRodovia(Index: Integer): string;
    procedure SetRodovia(Index: Integer; const Astring: string);
    function  Rodovia_Specified(Index: Integer): boolean;
    function  GetUF(Index: Integer): string;
    procedure SetUF(Index: Integer; const Astring: string);
    function  UF_Specified(Index: Integer): boolean;
  published
    property IdPracaPedagio: Integer  Index (IS_OPTN) read GetIdPracaPedagio write SetIdPracaPedagio stored IdPracaPedagio_Specified;
    property KmPraca:        Integer  Index (IS_OPTN or IS_NLBL) read GetKmPraca write SetKmPraca stored KmPraca_Specified;
    property Nome:           string   Index (IS_OPTN or IS_NLBL) read GetNome write SetNome stored Nome_Specified;
    property Rodovia:        string   Index (IS_OPTN or IS_NLBL) read GetRodovia write SetRodovia stored Rodovia_Specified;
    property UF:             string   Index (IS_OPTN or IS_NLBL) read GetUF write SetUF stored UF_Specified;
  end;



  // ************************************************************************ //
  // XML       : ResumoPracaPedagio, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ResumoPracaPedagio = class(ResumoPracaPedagio2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : AutenticacaoRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  AutenticacaoRequest = class(AutenticacaoRequest2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : InformacaoServicoResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  InformacaoServicoResponse = class(InformacaoServicoResponse2)
  private
  published
  end;

  ArrayOfResumoPracaPedagio = array of ResumoPracaPedagio2;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }


  // ************************************************************************ //
  // XML       : IdentificadorPracaPedagio, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  IdentificadorPracaPedagio2 = class(TRemotable)
  private
    FIdTipoIdentificadorPraca: Integer;
    FIdTipoIdentificadorPraca_Specified: boolean;
    FIdPraca: string;
    FIdPraca_Specified: boolean;
    FCodigoCategoriaVeiculoAlterada: Integer;
    FCodigoCategoriaVeiculoAlterada_Specified: boolean;
    function  GetIdTipoIdentificadorPraca(Index: Integer): Integer;
    procedure SetIdTipoIdentificadorPraca(Index: Integer; const AInteger: Integer);
    function  IdTipoIdentificadorPraca_Specified(Index: Integer): boolean;
    function  GetIdPraca(Index: Integer): string;
    procedure SetIdPraca(Index: Integer; const Astring: string);
    function  IdPraca_Specified(Index: Integer): boolean;
    function  GetCodigoCategoriaVeiculoAlterada(Index: Integer): Integer;
    procedure SetCodigoCategoriaVeiculoAlterada(Index: Integer; const AInteger: Integer);
    function  CodigoCategoriaVeiculoAlterada_Specified(Index: Integer): boolean;
  published
    property IdTipoIdentificadorPraca:       Integer  Index (IS_OPTN) read GetIdTipoIdentificadorPraca write SetIdTipoIdentificadorPraca stored IdTipoIdentificadorPraca_Specified;
    property IdPraca:                        string   Index (IS_OPTN or IS_NLBL) read GetIdPraca write SetIdPraca stored IdPraca_Specified;
    property CodigoCategoriaVeiculoAlterada: Integer  Index (IS_OPTN or IS_NLBL) read GetCodigoCategoriaVeiculoAlterada write SetCodigoCategoriaVeiculoAlterada stored CodigoCategoriaVeiculoAlterada_Specified;
  end;



  // ************************************************************************ //
  // XML       : IdentificadorPracaPedagio, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  IdentificadorPracaPedagio = class(IdentificadorPracaPedagio2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ObtencaoCustoRotaPorPracasRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ObtencaoCustoRotaPorPracasRequest2 = class(TRemotable)
  private
    FIdModoCompraValePedagio: Integer;
    FIdModoCompraValePedagio_Specified: boolean;
    FCodigoCategoriaVeiculo: Integer;
    FCodigoCategoriaVeiculo_Specified: boolean;
    FPlaca: string;
    FPlaca_Specified: boolean;
    FIdsPracasPedagio: ArrayOfIdentificadorPracaPedagio;
    FIdsPracasPedagio_Specified: boolean;
    FInicioVigencia: TXSDateTime;
    FInicioVigencia_Specified: boolean;
    FFimVigencia: TXSDateTime;
    FFimVigencia_Specified: boolean;
    function  GetIdModoCompraValePedagio(Index: Integer): Integer;
    procedure SetIdModoCompraValePedagio(Index: Integer; const AInteger: Integer);
    function  IdModoCompraValePedagio_Specified(Index: Integer): boolean;
    function  GetCodigoCategoriaVeiculo(Index: Integer): Integer;
    procedure SetCodigoCategoriaVeiculo(Index: Integer; const AInteger: Integer);
    function  CodigoCategoriaVeiculo_Specified(Index: Integer): boolean;
    function  GetPlaca(Index: Integer): string;
    procedure SetPlaca(Index: Integer; const Astring: string);
    function  Placa_Specified(Index: Integer): boolean;
    function  GetIdsPracasPedagio(Index: Integer): ArrayOfIdentificadorPracaPedagio;
    procedure SetIdsPracasPedagio(Index: Integer; const AArrayOfIdentificadorPracaPedagio: ArrayOfIdentificadorPracaPedagio);
    function  IdsPracasPedagio_Specified(Index: Integer): boolean;
    function  GetInicioVigencia(Index: Integer): TXSDateTime;
    procedure SetInicioVigencia(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  InicioVigencia_Specified(Index: Integer): boolean;
    function  GetFimVigencia(Index: Integer): TXSDateTime;
    procedure SetFimVigencia(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  FimVigencia_Specified(Index: Integer): boolean;
  published
    property IdModoCompraValePedagio: Integer                           Index (IS_OPTN) read GetIdModoCompraValePedagio write SetIdModoCompraValePedagio stored IdModoCompraValePedagio_Specified;
    property CodigoCategoriaVeiculo:  Integer                           Index (IS_OPTN) read GetCodigoCategoriaVeiculo write SetCodigoCategoriaVeiculo stored CodigoCategoriaVeiculo_Specified;
    property Placa:                   string                            Index (IS_OPTN or IS_NLBL) read GetPlaca write SetPlaca stored Placa_Specified;
    property IdsPracasPedagio:        ArrayOfIdentificadorPracaPedagio  Index (IS_OPTN or IS_NLBL) read GetIdsPracasPedagio write SetIdsPracasPedagio stored IdsPracasPedagio_Specified;
    property InicioVigencia:          TXSDateTime                       Index (IS_OPTN or IS_NLBL) read GetInicioVigencia write SetInicioVigencia stored InicioVigencia_Specified;
    property FimVigencia:             TXSDateTime                       Index (IS_OPTN or IS_NLBL) read GetFimVigencia write SetFimVigencia stored FimVigencia_Specified;
  end;



  // ************************************************************************ //
  // XML       : ObtencaoCustoRotaPorPracasRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ObtencaoCustoRotaPorPracasRequest = class(ObtencaoCustoRotaPorPracasRequest2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ObtencaoCustoRotaPorPracaResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ObtencaoCustoRotaPorPracaResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FPracasPedagio: ArrayOfResumoPracaPedagio;
    FPracasPedagio_Specified: boolean;
    FValorPedagioTotal: TXSDecimal;
    FValorPedagioTotal_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetPracasPedagio(Index: Integer): ArrayOfResumoPracaPedagio;
    procedure SetPracasPedagio(Index: Integer; const AArrayOfResumoPracaPedagio: ArrayOfResumoPracaPedagio);
    function  PracasPedagio_Specified(Index: Integer): boolean;
    function  GetValorPedagioTotal(Index: Integer): TXSDecimal;
    procedure SetValorPedagioTotal(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorPedagioTotal_Specified(Index: Integer): boolean;
  published
    property Erro:              ErroResponse2              Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property PracasPedagio:     ArrayOfResumoPracaPedagio  Index (IS_OPTN or IS_NLBL) read GetPracasPedagio write SetPracasPedagio stored PracasPedagio_Specified;
    property ValorPedagioTotal: TXSDecimal                 Index (IS_OPTN) read GetValorPedagioTotal write SetValorPedagioTotal stored ValorPedagioTotal_Specified;
  end;



  // ************************************************************************ //
  // XML       : ObtencaoCustoRotaPorPracaResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ObtencaoCustoRotaPorPracaResponse = class(ObtencaoCustoRotaPorPracaResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : DadosQuitacaoFreteRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  DadosQuitacaoFreteRequest = class(DadosQuitacaoFreteRequest2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : DadosQuitacaoFreteDocumentosRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  DadosQuitacaoFreteDocumentosRequest = class(DadosQuitacaoFreteDocumentosRequest2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : OperacaoTransporteResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  OperacaoTransporteResponse = class(OperacaoTransporteResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ParticipanteDestinatarioAdicionalRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ParticipanteDestinatarioAdicionalRequest = class(ParticipanteDestinatarioAdicionalRequest2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : OperacaoTransporteRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  OperacaoTransporteRequest = class(OperacaoTransporteRequest2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : OperacaoTransporteParcelaRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  OperacaoTransporteParcelaRequest = class(OperacaoTransporteParcelaRequest2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : OperacaoTransporteVeiculoRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  OperacaoTransporteVeiculoRequest = class(OperacaoTransporteVeiculoRequest2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : OperacaoTransporteParcelasResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  OperacaoTransporteParcelasResponse = class(OperacaoTransporteParcelasResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ResultadoPaginadoOperacaoTransporteResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ResultadoPaginadoOperacaoTransporteResponse = class(ResultadoPaginadoOperacaoTransporteResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : RetificacaoOperacaoTransporteRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  RetificacaoOperacaoTransporteRequest = class(RetificacaoOperacaoTransporteRequest2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : RetificacaoValoresRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  RetificacaoValoresRequest = class(RetificacaoValoresRequest2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : BuscaOperacaoTransporteRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  BuscaOperacaoTransporteRequest = class(BuscaOperacaoTransporteRequest2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : OperacaoTransporteVeiculoResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  OperacaoTransporteVeiculoResponse = class(OperacaoTransporteVeiculoResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : DadosQuitacaoFreteResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  DadosQuitacaoFreteResponse = class(DadosQuitacaoFreteResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : DadosQuitacaoFreteDocumentosResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  DadosQuitacaoFreteDocumentosResponse = class(DadosQuitacaoFreteDocumentosResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : BuscaPagamentoAvulsoCartaoRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  BuscaPagamentoAvulsoCartaoRequest = class(BuscaPagamentoAvulsoCartaoRequest2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ResultadoPaginadoBuscaPagamentoAvulsoCartaoResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ResultadoPaginadoBuscaPagamentoAvulsoCartaoResponse = class(ResultadoPaginadoBuscaPagamentoAvulsoCartaoResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : BuscaPagamentoAvulsoCartaoResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  BuscaPagamentoAvulsoCartaoResponse = class(BuscaPagamentoAvulsoCartaoResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : PagamentoAvulsoCartaoResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  PagamentoAvulsoCartaoResponse = class(PagamentoAvulsoCartaoResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : TransportadorResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  TransportadorResponse = class(TransportadorResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : BuscaTransportadorRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  BuscaTransportadorRequest = class(BuscaTransportadorRequest2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : PagamentoAvulsoCartaoRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  PagamentoAvulsoCartaoRequest = class(PagamentoAvulsoCartaoRequest2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : CombustivelAvulsoCartaoRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  CombustivelAvulsoCartaoRequest = class(CombustivelAvulsoCartaoRequest2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : BuscaCompraValePedagioRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  BuscaCompraValePedagioRequest = class(BuscaCompraValePedagioRequest2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ResultadoPaginadoBuscaCompraValePedagioResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ResultadoPaginadoBuscaCompraValePedagioResponse = class(ResultadoPaginadoBuscaCompraValePedagioResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : BuscaCompraValePedagioResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  BuscaCompraValePedagioResponse = class(BuscaCompraValePedagioResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : BuscaCombustivelAvulsoCartaoResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  BuscaCombustivelAvulsoCartaoResponse = class(BuscaCombustivelAvulsoCartaoResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : CombustivelAvulsoCartaoResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  CombustivelAvulsoCartaoResponse = class(CombustivelAvulsoCartaoResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : BuscaCombustivelAvulsoCartaoRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  BuscaCombustivelAvulsoCartaoRequest = class(BuscaCombustivelAvulsoCartaoRequest2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ResultadoPaginadoBuscaCombustivelAvulsoCartaoResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ResultadoPaginadoBuscaCombustivelAvulsoCartaoResponse = class(ResultadoPaginadoBuscaCombustivelAvulsoCartaoResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : CondutorResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  CondutorResponse2 = class(TRemotable)
  private
    FTipoPessoaCartao: string;
    FTipoPessoaCartao_Specified: boolean;
    FNumeroCartao: string;
    FNumeroCartao_Specified: boolean;
    FCpf: string;
    FCpf_Specified: boolean;
    FRntrc: string;
    FRntrc_Specified: boolean;
    FNome: string;
    FNome_Specified: boolean;
    FResponsavel: Boolean;
    FResponsavel_Specified: boolean;
    function  GetTipoPessoaCartao(Index: Integer): string;
    procedure SetTipoPessoaCartao(Index: Integer; const Astring: string);
    function  TipoPessoaCartao_Specified(Index: Integer): boolean;
    function  GetNumeroCartao(Index: Integer): string;
    procedure SetNumeroCartao(Index: Integer; const Astring: string);
    function  NumeroCartao_Specified(Index: Integer): boolean;
    function  GetCpf(Index: Integer): string;
    procedure SetCpf(Index: Integer; const Astring: string);
    function  Cpf_Specified(Index: Integer): boolean;
    function  GetRntrc(Index: Integer): string;
    procedure SetRntrc(Index: Integer; const Astring: string);
    function  Rntrc_Specified(Index: Integer): boolean;
    function  GetNome(Index: Integer): string;
    procedure SetNome(Index: Integer; const Astring: string);
    function  Nome_Specified(Index: Integer): boolean;
    function  GetResponsavel(Index: Integer): Boolean;
    procedure SetResponsavel(Index: Integer; const ABoolean: Boolean);
    function  Responsavel_Specified(Index: Integer): boolean;
  published
    property TipoPessoaCartao: string   Index (IS_OPTN or IS_NLBL) read GetTipoPessoaCartao write SetTipoPessoaCartao stored TipoPessoaCartao_Specified;
    property NumeroCartao:     string   Index (IS_OPTN or IS_NLBL) read GetNumeroCartao write SetNumeroCartao stored NumeroCartao_Specified;
    property Cpf:              string   Index (IS_OPTN or IS_NLBL) read GetCpf write SetCpf stored Cpf_Specified;
    property Rntrc:            string   Index (IS_OPTN or IS_NLBL) read GetRntrc write SetRntrc stored Rntrc_Specified;
    property Nome:             string   Index (IS_OPTN or IS_NLBL) read GetNome write SetNome stored Nome_Specified;
    property Responsavel:      Boolean  Index (IS_OPTN) read GetResponsavel write SetResponsavel stored Responsavel_Specified;
  end;



  // ************************************************************************ //
  // XML       : CondutorResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  CondutorResponse = class(CondutorResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : BuscaTransacoesFinanceirasRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  BuscaTransacoesFinanceirasRequest2 = class(TRemotable)
  private
    FQuantidadeItensPorPagina: Integer;
    FQuantidadeItensPorPagina_Specified: boolean;
    FNumeroPagina: Integer;
    FNumeroPagina_Specified: boolean;
    FTipoBuscaUnitaria: Integer;
    FTipoBuscaUnitaria_Specified: boolean;
    FTipoTransacaoFinanceira: Integer;
    FTipoTransacaoFinanceira_Specified: boolean;
    FIdEntidadeTransacaoFinanceira: Integer;
    FIdEntidadeTransacaoFinanceira_Specified: boolean;
    FDataInicioPeriodo: TXSDateTime;
    FDataInicioPeriodo_Specified: boolean;
    FDataFimPeriodo: TXSDateTime;
    FDataFimPeriodo_Specified: boolean;
    FIdIntegrador: string;
    FIdIntegrador_Specified: boolean;
    FDocumentoRelacionado: string;
    FDocumentoRelacionado_Specified: boolean;
    FPago: Boolean;
    FPago_Specified: boolean;
    function  GetQuantidadeItensPorPagina(Index: Integer): Integer;
    procedure SetQuantidadeItensPorPagina(Index: Integer; const AInteger: Integer);
    function  QuantidadeItensPorPagina_Specified(Index: Integer): boolean;
    function  GetNumeroPagina(Index: Integer): Integer;
    procedure SetNumeroPagina(Index: Integer; const AInteger: Integer);
    function  NumeroPagina_Specified(Index: Integer): boolean;
    function  GetTipoBuscaUnitaria(Index: Integer): Integer;
    procedure SetTipoBuscaUnitaria(Index: Integer; const AInteger: Integer);
    function  TipoBuscaUnitaria_Specified(Index: Integer): boolean;
    function  GetTipoTransacaoFinanceira(Index: Integer): Integer;
    procedure SetTipoTransacaoFinanceira(Index: Integer; const AInteger: Integer);
    function  TipoTransacaoFinanceira_Specified(Index: Integer): boolean;
    function  GetIdEntidadeTransacaoFinanceira(Index: Integer): Integer;
    procedure SetIdEntidadeTransacaoFinanceira(Index: Integer; const AInteger: Integer);
    function  IdEntidadeTransacaoFinanceira_Specified(Index: Integer): boolean;
    function  GetDataInicioPeriodo(Index: Integer): TXSDateTime;
    procedure SetDataInicioPeriodo(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DataInicioPeriodo_Specified(Index: Integer): boolean;
    function  GetDataFimPeriodo(Index: Integer): TXSDateTime;
    procedure SetDataFimPeriodo(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DataFimPeriodo_Specified(Index: Integer): boolean;
    function  GetIdIntegrador(Index: Integer): string;
    procedure SetIdIntegrador(Index: Integer; const Astring: string);
    function  IdIntegrador_Specified(Index: Integer): boolean;
    function  GetDocumentoRelacionado(Index: Integer): string;
    procedure SetDocumentoRelacionado(Index: Integer; const Astring: string);
    function  DocumentoRelacionado_Specified(Index: Integer): boolean;
    function  GetPago(Index: Integer): Boolean;
    procedure SetPago(Index: Integer; const ABoolean: Boolean);
    function  Pago_Specified(Index: Integer): boolean;
  published
    property QuantidadeItensPorPagina:      Integer      Index (IS_OPTN) read GetQuantidadeItensPorPagina write SetQuantidadeItensPorPagina stored QuantidadeItensPorPagina_Specified;
    property NumeroPagina:                  Integer      Index (IS_OPTN) read GetNumeroPagina write SetNumeroPagina stored NumeroPagina_Specified;
    property TipoBuscaUnitaria:             Integer      Index (IS_OPTN or IS_NLBL) read GetTipoBuscaUnitaria write SetTipoBuscaUnitaria stored TipoBuscaUnitaria_Specified;
    property TipoTransacaoFinanceira:       Integer      Index (IS_OPTN) read GetTipoTransacaoFinanceira write SetTipoTransacaoFinanceira stored TipoTransacaoFinanceira_Specified;
    property IdEntidadeTransacaoFinanceira: Integer      Index (IS_OPTN or IS_NLBL) read GetIdEntidadeTransacaoFinanceira write SetIdEntidadeTransacaoFinanceira stored IdEntidadeTransacaoFinanceira_Specified;
    property DataInicioPeriodo:             TXSDateTime  Index (IS_OPTN or IS_NLBL) read GetDataInicioPeriodo write SetDataInicioPeriodo stored DataInicioPeriodo_Specified;
    property DataFimPeriodo:                TXSDateTime  Index (IS_OPTN or IS_NLBL) read GetDataFimPeriodo write SetDataFimPeriodo stored DataFimPeriodo_Specified;
    property IdIntegrador:                  string       Index (IS_OPTN or IS_NLBL) read GetIdIntegrador write SetIdIntegrador stored IdIntegrador_Specified;
    property DocumentoRelacionado:          string       Index (IS_OPTN or IS_NLBL) read GetDocumentoRelacionado write SetDocumentoRelacionado stored DocumentoRelacionado_Specified;
    property Pago:                          Boolean      Index (IS_OPTN or IS_NLBL) read GetPago write SetPago stored Pago_Specified;
  end;



  // ************************************************************************ //
  // XML       : BuscaTransacoesFinanceirasRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  BuscaTransacoesFinanceirasRequest = class(BuscaTransacoesFinanceirasRequest2)
  private
  published
  end;

  ArrayOfCondutorResponse = array of CondutorResponse2;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }


  // ************************************************************************ //
  // XML       : BuscaInformacoesContratacaoRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  BuscaInformacoesContratacaoRequest2 = class(TRemotable)
  private
    FCpfCnpj: string;
    FCpfCnpj_Specified: boolean;
    function  GetCpfCnpj(Index: Integer): string;
    procedure SetCpfCnpj(Index: Integer; const Astring: string);
    function  CpfCnpj_Specified(Index: Integer): boolean;
  published
    property CpfCnpj: string  Index (IS_OPTN or IS_NLBL) read GetCpfCnpj write SetCpfCnpj stored CpfCnpj_Specified;
  end;



  // ************************************************************************ //
  // XML       : BuscaInformacoesContratacaoRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  BuscaInformacoesContratacaoRequest = class(BuscaInformacoesContratacaoRequest2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : BuscaInformacoesContratacaoResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  BuscaInformacoesContratacaoResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FNomeContratado: string;
    FNomeContratado_Specified: boolean;
    FRazaoSocialContratado: string;
    FRazaoSocialContratado_Specified: boolean;
    FCpfCnpjContratado: string;
    FCpfCnpjContratado_Specified: boolean;
    FDadosContaBancaria: DadosContaBancariaResponse2;
    FDadosContaBancaria_Specified: boolean;
    FListaCondutorResponse: ArrayOfCondutorResponse;
    FListaCondutorResponse_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetNomeContratado(Index: Integer): string;
    procedure SetNomeContratado(Index: Integer; const Astring: string);
    function  NomeContratado_Specified(Index: Integer): boolean;
    function  GetRazaoSocialContratado(Index: Integer): string;
    procedure SetRazaoSocialContratado(Index: Integer; const Astring: string);
    function  RazaoSocialContratado_Specified(Index: Integer): boolean;
    function  GetCpfCnpjContratado(Index: Integer): string;
    procedure SetCpfCnpjContratado(Index: Integer; const Astring: string);
    function  CpfCnpjContratado_Specified(Index: Integer): boolean;
    function  GetDadosContaBancaria(Index: Integer): DadosContaBancariaResponse2;
    procedure SetDadosContaBancaria(Index: Integer; const ADadosContaBancariaResponse2: DadosContaBancariaResponse2);
    function  DadosContaBancaria_Specified(Index: Integer): boolean;
    function  GetListaCondutorResponse(Index: Integer): ArrayOfCondutorResponse;
    procedure SetListaCondutorResponse(Index: Integer; const AArrayOfCondutorResponse: ArrayOfCondutorResponse);
    function  ListaCondutorResponse_Specified(Index: Integer): boolean;
  published
    property Erro:                  ErroResponse2                Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property NomeContratado:        string                       Index (IS_OPTN or IS_NLBL) read GetNomeContratado write SetNomeContratado stored NomeContratado_Specified;
    property RazaoSocialContratado: string                       Index (IS_OPTN or IS_NLBL) read GetRazaoSocialContratado write SetRazaoSocialContratado stored RazaoSocialContratado_Specified;
    property CpfCnpjContratado:     string                       Index (IS_OPTN or IS_NLBL) read GetCpfCnpjContratado write SetCpfCnpjContratado stored CpfCnpjContratado_Specified;
    property DadosContaBancaria:    DadosContaBancariaResponse2  Index (IS_OPTN or IS_NLBL) read GetDadosContaBancaria write SetDadosContaBancaria stored DadosContaBancaria_Specified;
    property ListaCondutorResponse: ArrayOfCondutorResponse      Index (IS_OPTN or IS_NLBL) read GetListaCondutorResponse write SetListaCondutorResponse stored ListaCondutorResponse_Specified;
  end;



  // ************************************************************************ //
  // XML       : BuscaInformacoesContratacaoResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  BuscaInformacoesContratacaoResponse = class(BuscaInformacoesContratacaoResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : DadosContaBancariaResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  DadosContaBancariaResponse2 = class(TRemotable)
  private
    FCodigoBanco: string;
    FCodigoBanco_Specified: boolean;
    FAgenciaDeposito: string;
    FAgenciaDeposito_Specified: boolean;
    FDigitoAgencia: string;
    FDigitoAgencia_Specified: boolean;
    FContaDeposito: string;
    FContaDeposito_Specified: boolean;
    FDigitoContaDeposito: string;
    FDigitoContaDeposito_Specified: boolean;
    FContaPoupanca: Boolean;
    FContaPoupanca_Specified: boolean;
    FVariacaoContaPoupanca: string;
    FVariacaoContaPoupanca_Specified: boolean;
    function  GetCodigoBanco(Index: Integer): string;
    procedure SetCodigoBanco(Index: Integer; const Astring: string);
    function  CodigoBanco_Specified(Index: Integer): boolean;
    function  GetAgenciaDeposito(Index: Integer): string;
    procedure SetAgenciaDeposito(Index: Integer; const Astring: string);
    function  AgenciaDeposito_Specified(Index: Integer): boolean;
    function  GetDigitoAgencia(Index: Integer): string;
    procedure SetDigitoAgencia(Index: Integer; const Astring: string);
    function  DigitoAgencia_Specified(Index: Integer): boolean;
    function  GetContaDeposito(Index: Integer): string;
    procedure SetContaDeposito(Index: Integer; const Astring: string);
    function  ContaDeposito_Specified(Index: Integer): boolean;
    function  GetDigitoContaDeposito(Index: Integer): string;
    procedure SetDigitoContaDeposito(Index: Integer; const Astring: string);
    function  DigitoContaDeposito_Specified(Index: Integer): boolean;
    function  GetContaPoupanca(Index: Integer): Boolean;
    procedure SetContaPoupanca(Index: Integer; const ABoolean: Boolean);
    function  ContaPoupanca_Specified(Index: Integer): boolean;
    function  GetVariacaoContaPoupanca(Index: Integer): string;
    procedure SetVariacaoContaPoupanca(Index: Integer; const Astring: string);
    function  VariacaoContaPoupanca_Specified(Index: Integer): boolean;
  published
    property CodigoBanco:           string   Index (IS_OPTN or IS_NLBL) read GetCodigoBanco write SetCodigoBanco stored CodigoBanco_Specified;
    property AgenciaDeposito:       string   Index (IS_OPTN or IS_NLBL) read GetAgenciaDeposito write SetAgenciaDeposito stored AgenciaDeposito_Specified;
    property DigitoAgencia:         string   Index (IS_OPTN or IS_NLBL) read GetDigitoAgencia write SetDigitoAgencia stored DigitoAgencia_Specified;
    property ContaDeposito:         string   Index (IS_OPTN or IS_NLBL) read GetContaDeposito write SetContaDeposito stored ContaDeposito_Specified;
    property DigitoContaDeposito:   string   Index (IS_OPTN or IS_NLBL) read GetDigitoContaDeposito write SetDigitoContaDeposito stored DigitoContaDeposito_Specified;
    property ContaPoupanca:         Boolean  Index (IS_OPTN) read GetContaPoupanca write SetContaPoupanca stored ContaPoupanca_Specified;
    property VariacaoContaPoupanca: string   Index (IS_OPTN or IS_NLBL) read GetVariacaoContaPoupanca write SetVariacaoContaPoupanca stored VariacaoContaPoupanca_Specified;
  end;



  // ************************************************************************ //
  // XML       : DadosContaBancariaResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  DadosContaBancariaResponse = class(DadosContaBancariaResponse2)
  private
  published
  end;

  ArrayOfBuscaTransacoesFinanceirasResponse = array of BuscaTransacoesFinanceirasResponse2;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }


  // ************************************************************************ //
  // XML       : ResultadoPaginadoBuscaTransacoesFinanceirasResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ResultadoPaginadoBuscaTransacoesFinanceirasResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FItens: ArrayOfBuscaTransacoesFinanceirasResponse;
    FItens_Specified: boolean;
    FNumeroPagina: Integer;
    FNumeroPagina_Specified: boolean;
    FQuantidadeItensPorPagina: Integer;
    FQuantidadeItensPorPagina_Specified: boolean;
    FQuantidadeTotalItens: Integer;
    FQuantidadeTotalItens_Specified: boolean;
    FQuantidadeTotalPaginas: Integer;
    FQuantidadeTotalPaginas_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetItens(Index: Integer): ArrayOfBuscaTransacoesFinanceirasResponse;
    procedure SetItens(Index: Integer; const AArrayOfBuscaTransacoesFinanceirasResponse: ArrayOfBuscaTransacoesFinanceirasResponse);
    function  Itens_Specified(Index: Integer): boolean;
    function  GetNumeroPagina(Index: Integer): Integer;
    procedure SetNumeroPagina(Index: Integer; const AInteger: Integer);
    function  NumeroPagina_Specified(Index: Integer): boolean;
    function  GetQuantidadeItensPorPagina(Index: Integer): Integer;
    procedure SetQuantidadeItensPorPagina(Index: Integer; const AInteger: Integer);
    function  QuantidadeItensPorPagina_Specified(Index: Integer): boolean;
    function  GetQuantidadeTotalItens(Index: Integer): Integer;
    procedure SetQuantidadeTotalItens(Index: Integer; const AInteger: Integer);
    function  QuantidadeTotalItens_Specified(Index: Integer): boolean;
    function  GetQuantidadeTotalPaginas(Index: Integer): Integer;
    procedure SetQuantidadeTotalPaginas(Index: Integer; const AInteger: Integer);
    function  QuantidadeTotalPaginas_Specified(Index: Integer): boolean;
  published
    property Erro:                     ErroResponse2                              Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property Itens:                    ArrayOfBuscaTransacoesFinanceirasResponse  Index (IS_OPTN or IS_NLBL) read GetItens write SetItens stored Itens_Specified;
    property NumeroPagina:             Integer                                    Index (IS_OPTN) read GetNumeroPagina write SetNumeroPagina stored NumeroPagina_Specified;
    property QuantidadeItensPorPagina: Integer                                    Index (IS_OPTN) read GetQuantidadeItensPorPagina write SetQuantidadeItensPorPagina stored QuantidadeItensPorPagina_Specified;
    property QuantidadeTotalItens:     Integer                                    Index (IS_OPTN) read GetQuantidadeTotalItens write SetQuantidadeTotalItens stored QuantidadeTotalItens_Specified;
    property QuantidadeTotalPaginas:   Integer                                    Index (IS_OPTN) read GetQuantidadeTotalPaginas write SetQuantidadeTotalPaginas stored QuantidadeTotalPaginas_Specified;
  end;



  // ************************************************************************ //
  // XML       : ResultadoPaginadoBuscaTransacoesFinanceirasResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ResultadoPaginadoBuscaTransacoesFinanceirasResponse = class(ResultadoPaginadoBuscaTransacoesFinanceirasResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ConsultaTaxasCalculadasResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ConsultaTaxasCalculadasResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FIdTaxaCalculada: Integer;
    FIdTaxaCalculada_Specified: boolean;
    FTipoTransacaoFinanceira: string;
    FTipoTransacaoFinanceira_Specified: boolean;
    FAvulso: Boolean;
    FAvulso_Specified: boolean;
    FIdEntidadeTransacaoFinanceira: Integer;
    FIdEntidadeTransacaoFinanceira_Specified: boolean;
    FIdOperacaoTransporteRelacionada: Integer;
    FIdOperacaoTransporteRelacionada_Specified: boolean;
    FValorTransacao: TXSDecimal;
    FValorTransacao_Specified: boolean;
    FValorTaxa: TXSDecimal;
    FValorTaxa_Specified: boolean;
    FDataCalculoTaxa: TXSDateTime;
    FDataCalculoTaxa_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetIdTaxaCalculada(Index: Integer): Integer;
    procedure SetIdTaxaCalculada(Index: Integer; const AInteger: Integer);
    function  IdTaxaCalculada_Specified(Index: Integer): boolean;
    function  GetTipoTransacaoFinanceira(Index: Integer): string;
    procedure SetTipoTransacaoFinanceira(Index: Integer; const Astring: string);
    function  TipoTransacaoFinanceira_Specified(Index: Integer): boolean;
    function  GetAvulso(Index: Integer): Boolean;
    procedure SetAvulso(Index: Integer; const ABoolean: Boolean);
    function  Avulso_Specified(Index: Integer): boolean;
    function  GetIdEntidadeTransacaoFinanceira(Index: Integer): Integer;
    procedure SetIdEntidadeTransacaoFinanceira(Index: Integer; const AInteger: Integer);
    function  IdEntidadeTransacaoFinanceira_Specified(Index: Integer): boolean;
    function  GetIdOperacaoTransporteRelacionada(Index: Integer): Integer;
    procedure SetIdOperacaoTransporteRelacionada(Index: Integer; const AInteger: Integer);
    function  IdOperacaoTransporteRelacionada_Specified(Index: Integer): boolean;
    function  GetValorTransacao(Index: Integer): TXSDecimal;
    procedure SetValorTransacao(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorTransacao_Specified(Index: Integer): boolean;
    function  GetValorTaxa(Index: Integer): TXSDecimal;
    procedure SetValorTaxa(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorTaxa_Specified(Index: Integer): boolean;
    function  GetDataCalculoTaxa(Index: Integer): TXSDateTime;
    procedure SetDataCalculoTaxa(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DataCalculoTaxa_Specified(Index: Integer): boolean;
  published
    property Erro:                            ErroResponse2  Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property IdTaxaCalculada:                 Integer        Index (IS_OPTN) read GetIdTaxaCalculada write SetIdTaxaCalculada stored IdTaxaCalculada_Specified;
    property TipoTransacaoFinanceira:         string         Index (IS_OPTN or IS_NLBL) read GetTipoTransacaoFinanceira write SetTipoTransacaoFinanceira stored TipoTransacaoFinanceira_Specified;
    property Avulso:                          Boolean        Index (IS_OPTN) read GetAvulso write SetAvulso stored Avulso_Specified;
    property IdEntidadeTransacaoFinanceira:   Integer        Index (IS_OPTN) read GetIdEntidadeTransacaoFinanceira write SetIdEntidadeTransacaoFinanceira stored IdEntidadeTransacaoFinanceira_Specified;
    property IdOperacaoTransporteRelacionada: Integer        Index (IS_OPTN or IS_NLBL) read GetIdOperacaoTransporteRelacionada write SetIdOperacaoTransporteRelacionada stored IdOperacaoTransporteRelacionada_Specified;
    property ValorTransacao:                  TXSDecimal     Index (IS_OPTN) read GetValorTransacao write SetValorTransacao stored ValorTransacao_Specified;
    property ValorTaxa:                       TXSDecimal     Index (IS_OPTN) read GetValorTaxa write SetValorTaxa stored ValorTaxa_Specified;
    property DataCalculoTaxa:                 TXSDateTime    Index (IS_OPTN) read GetDataCalculoTaxa write SetDataCalculoTaxa stored DataCalculoTaxa_Specified;
  end;



  // ************************************************************************ //
  // XML       : ConsultaTaxasCalculadasResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ConsultaTaxasCalculadasResponse = class(ConsultaTaxasCalculadasResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : TrocaPlacaCompraValePedagioTAGRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  TrocaPlacaCompraValePedagioTAGRequest2 = class(TRemotable)
  private
    FIdCompraValePedagioViaFacil: Integer;
    FIdCompraValePedagioViaFacil_Specified: boolean;
    FNovaPlaca: string;
    FNovaPlaca_Specified: boolean;
    function  GetIdCompraValePedagioViaFacil(Index: Integer): Integer;
    procedure SetIdCompraValePedagioViaFacil(Index: Integer; const AInteger: Integer);
    function  IdCompraValePedagioViaFacil_Specified(Index: Integer): boolean;
    function  GetNovaPlaca(Index: Integer): string;
    procedure SetNovaPlaca(Index: Integer; const Astring: string);
    function  NovaPlaca_Specified(Index: Integer): boolean;
  published
    property IdCompraValePedagioViaFacil: Integer  Index (IS_OPTN) read GetIdCompraValePedagioViaFacil write SetIdCompraValePedagioViaFacil stored IdCompraValePedagioViaFacil_Specified;
    property NovaPlaca:                   string   Index (IS_OPTN or IS_NLBL) read GetNovaPlaca write SetNovaPlaca stored NovaPlaca_Specified;
  end;



  // ************************************************************************ //
  // XML       : TrocaPlacaCompraValePedagioTAGRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  TrocaPlacaCompraValePedagioTAGRequest = class(TrocaPlacaCompraValePedagioTAGRequest2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : TrocaPlacaCompraValePedagioTAGResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  TrocaPlacaCompraValePedagioTAGResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FMensagem: string;
    FMensagem_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetMensagem(Index: Integer): string;
    procedure SetMensagem(Index: Integer; const Astring: string);
    function  Mensagem_Specified(Index: Integer): boolean;
  published
    property Erro:     ErroResponse2  Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property Mensagem: string         Index (IS_OPTN or IS_NLBL) read GetMensagem write SetMensagem stored Mensagem_Specified;
  end;



  // ************************************************************************ //
  // XML       : TrocaPlacaCompraValePedagioTAGResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  TrocaPlacaCompraValePedagioTAGResponse = class(TrocaPlacaCompraValePedagioTAGResponse2)
  private
  published
  end;

  ArrayOfConsultaTaxasCalculadasResponse = array of ConsultaTaxasCalculadasResponse2;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }


  // ************************************************************************ //
  // XML       : BuscaTransacoesFinanceirasResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  BuscaTransacoesFinanceirasResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FIdEntidadeTransacaoFinanceira: Integer;
    FIdEntidadeTransacaoFinanceira_Specified: boolean;
    FIdOperacaoTransporteRelacionada: Integer;
    FIdOperacaoTransporteRelacionada_Specified: boolean;
    FTipoTransacaoFinanceira: string;
    FTipoTransacaoFinanceira_Specified: boolean;
    FValor: TXSDecimal;
    FValor_Specified: boolean;
    FSituacao: string;
    FSituacao_Specified: boolean;
    FModoPagamento: string;
    FModoPagamento_Specified: boolean;
    FComentario: string;
    FComentario_Specified: boolean;
    FDataRegistro: TXSDateTime;
    FDataRegistro_Specified: boolean;
    FDataPagamento: TXSDateTime;
    FDataPagamento_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetIdEntidadeTransacaoFinanceira(Index: Integer): Integer;
    procedure SetIdEntidadeTransacaoFinanceira(Index: Integer; const AInteger: Integer);
    function  IdEntidadeTransacaoFinanceira_Specified(Index: Integer): boolean;
    function  GetIdOperacaoTransporteRelacionada(Index: Integer): Integer;
    procedure SetIdOperacaoTransporteRelacionada(Index: Integer; const AInteger: Integer);
    function  IdOperacaoTransporteRelacionada_Specified(Index: Integer): boolean;
    function  GetTipoTransacaoFinanceira(Index: Integer): string;
    procedure SetTipoTransacaoFinanceira(Index: Integer; const Astring: string);
    function  TipoTransacaoFinanceira_Specified(Index: Integer): boolean;
    function  GetValor(Index: Integer): TXSDecimal;
    procedure SetValor(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  Valor_Specified(Index: Integer): boolean;
    function  GetSituacao(Index: Integer): string;
    procedure SetSituacao(Index: Integer; const Astring: string);
    function  Situacao_Specified(Index: Integer): boolean;
    function  GetModoPagamento(Index: Integer): string;
    procedure SetModoPagamento(Index: Integer; const Astring: string);
    function  ModoPagamento_Specified(Index: Integer): boolean;
    function  GetComentario(Index: Integer): string;
    procedure SetComentario(Index: Integer; const Astring: string);
    function  Comentario_Specified(Index: Integer): boolean;
    function  GetDataRegistro(Index: Integer): TXSDateTime;
    procedure SetDataRegistro(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DataRegistro_Specified(Index: Integer): boolean;
    function  GetDataPagamento(Index: Integer): TXSDateTime;
    procedure SetDataPagamento(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DataPagamento_Specified(Index: Integer): boolean;
  published
    property Erro:                            ErroResponse2  Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property IdEntidadeTransacaoFinanceira:   Integer        Index (IS_OPTN) read GetIdEntidadeTransacaoFinanceira write SetIdEntidadeTransacaoFinanceira stored IdEntidadeTransacaoFinanceira_Specified;
    property IdOperacaoTransporteRelacionada: Integer        Index (IS_OPTN or IS_NLBL) read GetIdOperacaoTransporteRelacionada write SetIdOperacaoTransporteRelacionada stored IdOperacaoTransporteRelacionada_Specified;
    property TipoTransacaoFinanceira:         string         Index (IS_OPTN or IS_NLBL) read GetTipoTransacaoFinanceira write SetTipoTransacaoFinanceira stored TipoTransacaoFinanceira_Specified;
    property Valor:                           TXSDecimal     Index (IS_OPTN) read GetValor write SetValor stored Valor_Specified;
    property Situacao:                        string         Index (IS_OPTN or IS_NLBL) read GetSituacao write SetSituacao stored Situacao_Specified;
    property ModoPagamento:                   string         Index (IS_OPTN or IS_NLBL) read GetModoPagamento write SetModoPagamento stored ModoPagamento_Specified;
    property Comentario:                      string         Index (IS_OPTN or IS_NLBL) read GetComentario write SetComentario stored Comentario_Specified;
    property DataRegistro:                    TXSDateTime    Index (IS_OPTN or IS_NLBL) read GetDataRegistro write SetDataRegistro stored DataRegistro_Specified;
    property DataPagamento:                   TXSDateTime    Index (IS_OPTN or IS_NLBL) read GetDataPagamento write SetDataPagamento stored DataPagamento_Specified;
  end;



  // ************************************************************************ //
  // XML       : BuscaTransacoesFinanceirasResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  BuscaTransacoesFinanceirasResponse = class(BuscaTransacoesFinanceirasResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ConsultaTaxasCalculadasRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ConsultaTaxasCalculadasRequest2 = class(TRemotable)
  private
    FQuantidadeItensPorPagina: Integer;
    FQuantidadeItensPorPagina_Specified: boolean;
    FNumeroPagina: Integer;
    FNumeroPagina_Specified: boolean;
    FTipoTransacaoFinanceira: Integer;
    FTipoTransacaoFinanceira_Specified: boolean;
    FTipoBuscaUnitaria: Integer;
    FTipoBuscaUnitaria_Specified: boolean;
    FIdEntidadeTransacaoFinanceira: Integer;
    FIdEntidadeTransacaoFinanceira_Specified: boolean;
    FDataInicioPeriodo: TXSDateTime;
    FDataInicioPeriodo_Specified: boolean;
    FDataFimPeriodo: TXSDateTime;
    FDataFimPeriodo_Specified: boolean;
    FIdIntegrador: string;
    FIdIntegrador_Specified: boolean;
    FDocumentoRelacionado: string;
    FDocumentoRelacionado_Specified: boolean;
    function  GetQuantidadeItensPorPagina(Index: Integer): Integer;
    procedure SetQuantidadeItensPorPagina(Index: Integer; const AInteger: Integer);
    function  QuantidadeItensPorPagina_Specified(Index: Integer): boolean;
    function  GetNumeroPagina(Index: Integer): Integer;
    procedure SetNumeroPagina(Index: Integer; const AInteger: Integer);
    function  NumeroPagina_Specified(Index: Integer): boolean;
    function  GetTipoTransacaoFinanceira(Index: Integer): Integer;
    procedure SetTipoTransacaoFinanceira(Index: Integer; const AInteger: Integer);
    function  TipoTransacaoFinanceira_Specified(Index: Integer): boolean;
    function  GetTipoBuscaUnitaria(Index: Integer): Integer;
    procedure SetTipoBuscaUnitaria(Index: Integer; const AInteger: Integer);
    function  TipoBuscaUnitaria_Specified(Index: Integer): boolean;
    function  GetIdEntidadeTransacaoFinanceira(Index: Integer): Integer;
    procedure SetIdEntidadeTransacaoFinanceira(Index: Integer; const AInteger: Integer);
    function  IdEntidadeTransacaoFinanceira_Specified(Index: Integer): boolean;
    function  GetDataInicioPeriodo(Index: Integer): TXSDateTime;
    procedure SetDataInicioPeriodo(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DataInicioPeriodo_Specified(Index: Integer): boolean;
    function  GetDataFimPeriodo(Index: Integer): TXSDateTime;
    procedure SetDataFimPeriodo(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DataFimPeriodo_Specified(Index: Integer): boolean;
    function  GetIdIntegrador(Index: Integer): string;
    procedure SetIdIntegrador(Index: Integer; const Astring: string);
    function  IdIntegrador_Specified(Index: Integer): boolean;
    function  GetDocumentoRelacionado(Index: Integer): string;
    procedure SetDocumentoRelacionado(Index: Integer; const Astring: string);
    function  DocumentoRelacionado_Specified(Index: Integer): boolean;
  published
    property QuantidadeItensPorPagina:      Integer      Index (IS_OPTN) read GetQuantidadeItensPorPagina write SetQuantidadeItensPorPagina stored QuantidadeItensPorPagina_Specified;
    property NumeroPagina:                  Integer      Index (IS_OPTN) read GetNumeroPagina write SetNumeroPagina stored NumeroPagina_Specified;
    property TipoTransacaoFinanceira:       Integer      Index (IS_OPTN) read GetTipoTransacaoFinanceira write SetTipoTransacaoFinanceira stored TipoTransacaoFinanceira_Specified;
    property TipoBuscaUnitaria:             Integer      Index (IS_OPTN or IS_NLBL) read GetTipoBuscaUnitaria write SetTipoBuscaUnitaria stored TipoBuscaUnitaria_Specified;
    property IdEntidadeTransacaoFinanceira: Integer      Index (IS_OPTN or IS_NLBL) read GetIdEntidadeTransacaoFinanceira write SetIdEntidadeTransacaoFinanceira stored IdEntidadeTransacaoFinanceira_Specified;
    property DataInicioPeriodo:             TXSDateTime  Index (IS_OPTN or IS_NLBL) read GetDataInicioPeriodo write SetDataInicioPeriodo stored DataInicioPeriodo_Specified;
    property DataFimPeriodo:                TXSDateTime  Index (IS_OPTN or IS_NLBL) read GetDataFimPeriodo write SetDataFimPeriodo stored DataFimPeriodo_Specified;
    property IdIntegrador:                  string       Index (IS_OPTN or IS_NLBL) read GetIdIntegrador write SetIdIntegrador stored IdIntegrador_Specified;
    property DocumentoRelacionado:          string       Index (IS_OPTN or IS_NLBL) read GetDocumentoRelacionado write SetDocumentoRelacionado stored DocumentoRelacionado_Specified;
  end;



  // ************************************************************************ //
  // XML       : ConsultaTaxasCalculadasRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ConsultaTaxasCalculadasRequest = class(ConsultaTaxasCalculadasRequest2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ResultadoPaginadoConsultaTaxasCalculadasResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ResultadoPaginadoConsultaTaxasCalculadasResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FItens: ArrayOfConsultaTaxasCalculadasResponse;
    FItens_Specified: boolean;
    FNumeroPagina: Integer;
    FNumeroPagina_Specified: boolean;
    FQuantidadeItensPorPagina: Integer;
    FQuantidadeItensPorPagina_Specified: boolean;
    FQuantidadeTotalItens: Integer;
    FQuantidadeTotalItens_Specified: boolean;
    FQuantidadeTotalPaginas: Integer;
    FQuantidadeTotalPaginas_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetItens(Index: Integer): ArrayOfConsultaTaxasCalculadasResponse;
    procedure SetItens(Index: Integer; const AArrayOfConsultaTaxasCalculadasResponse: ArrayOfConsultaTaxasCalculadasResponse);
    function  Itens_Specified(Index: Integer): boolean;
    function  GetNumeroPagina(Index: Integer): Integer;
    procedure SetNumeroPagina(Index: Integer; const AInteger: Integer);
    function  NumeroPagina_Specified(Index: Integer): boolean;
    function  GetQuantidadeItensPorPagina(Index: Integer): Integer;
    procedure SetQuantidadeItensPorPagina(Index: Integer; const AInteger: Integer);
    function  QuantidadeItensPorPagina_Specified(Index: Integer): boolean;
    function  GetQuantidadeTotalItens(Index: Integer): Integer;
    procedure SetQuantidadeTotalItens(Index: Integer; const AInteger: Integer);
    function  QuantidadeTotalItens_Specified(Index: Integer): boolean;
    function  GetQuantidadeTotalPaginas(Index: Integer): Integer;
    procedure SetQuantidadeTotalPaginas(Index: Integer; const AInteger: Integer);
    function  QuantidadeTotalPaginas_Specified(Index: Integer): boolean;
  published
    property Erro:                     ErroResponse2                           Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property Itens:                    ArrayOfConsultaTaxasCalculadasResponse  Index (IS_OPTN or IS_NLBL) read GetItens write SetItens stored Itens_Specified;
    property NumeroPagina:             Integer                                 Index (IS_OPTN) read GetNumeroPagina write SetNumeroPagina stored NumeroPagina_Specified;
    property QuantidadeItensPorPagina: Integer                                 Index (IS_OPTN) read GetQuantidadeItensPorPagina write SetQuantidadeItensPorPagina stored QuantidadeItensPorPagina_Specified;
    property QuantidadeTotalItens:     Integer                                 Index (IS_OPTN) read GetQuantidadeTotalItens write SetQuantidadeTotalItens stored QuantidadeTotalItens_Specified;
    property QuantidadeTotalPaginas:   Integer                                 Index (IS_OPTN) read GetQuantidadeTotalPaginas write SetQuantidadeTotalPaginas stored QuantidadeTotalPaginas_Specified;
  end;



  // ************************************************************************ //
  // XML       : ResultadoPaginadoConsultaTaxasCalculadasResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ResultadoPaginadoConsultaTaxasCalculadasResponse = class(ResultadoPaginadoConsultaTaxasCalculadasResponse2)
  private
  published
  end;

  ArrayOfConsultaRotaMapLinkPedagiosResponse = array of ConsultaRotaMapLinkPedagiosResponse2;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }


  // ************************************************************************ //
  // XML       : ConsultaRotaMapLinkPedagiosResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ConsultaRotaMapLinkPedagiosResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FIdPedagio: Integer;
    FIdPedagio_Specified: boolean;
    FFormaPagamento: string;
    FFormaPagamento_Specified: boolean;
    FValor: TXSDecimal;
    FValor_Specified: boolean;
    FNome: string;
    FNome_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetIdPedagio(Index: Integer): Integer;
    procedure SetIdPedagio(Index: Integer; const AInteger: Integer);
    function  IdPedagio_Specified(Index: Integer): boolean;
    function  GetFormaPagamento(Index: Integer): string;
    procedure SetFormaPagamento(Index: Integer; const Astring: string);
    function  FormaPagamento_Specified(Index: Integer): boolean;
    function  GetValor(Index: Integer): TXSDecimal;
    procedure SetValor(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  Valor_Specified(Index: Integer): boolean;
    function  GetNome(Index: Integer): string;
    procedure SetNome(Index: Integer; const Astring: string);
    function  Nome_Specified(Index: Integer): boolean;
  published
    property Erro:           ErroResponse2  Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property IdPedagio:      Integer        Index (IS_OPTN) read GetIdPedagio write SetIdPedagio stored IdPedagio_Specified;
    property FormaPagamento: string         Index (IS_OPTN or IS_NLBL) read GetFormaPagamento write SetFormaPagamento stored FormaPagamento_Specified;
    property Valor:          TXSDecimal     Index (IS_OPTN) read GetValor write SetValor stored Valor_Specified;
    property Nome:           string         Index (IS_OPTN or IS_NLBL) read GetNome write SetNome stored Nome_Specified;
  end;



  // ************************************************************************ //
  // XML       : ConsultaRotaMapLinkPedagiosResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ConsultaRotaMapLinkPedagiosResponse = class(ConsultaRotaMapLinkPedagiosResponse2)
  private
  published
  end;

  ArrayOfConsultaRotaMapLinkParadaResponse = array of ConsultaRotaMapLinkParadaResponse2;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }


  // ************************************************************************ //
  // XML       : ConsultaRotaMapLinkParadaResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ConsultaRotaMapLinkParadaResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FDescricao: string;
    FDescricao_Specified: boolean;
    FPontoX: Double;
    FPontoX_Specified: boolean;
    FPontoY: Double;
    FPontoY_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetDescricao(Index: Integer): string;
    procedure SetDescricao(Index: Integer; const Astring: string);
    function  Descricao_Specified(Index: Integer): boolean;
    function  GetPontoX(Index: Integer): Double;
    procedure SetPontoX(Index: Integer; const ADouble: Double);
    function  PontoX_Specified(Index: Integer): boolean;
    function  GetPontoY(Index: Integer): Double;
    procedure SetPontoY(Index: Integer; const ADouble: Double);
    function  PontoY_Specified(Index: Integer): boolean;
  published
    property Erro:      ErroResponse2  Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property Descricao: string         Index (IS_OPTN or IS_NLBL) read GetDescricao write SetDescricao stored Descricao_Specified;
    property PontoX:    Double         Index (IS_OPTN) read GetPontoX write SetPontoX stored PontoX_Specified;
    property PontoY:    Double         Index (IS_OPTN) read GetPontoY write SetPontoY stored PontoY_Specified;
  end;



  // ************************************************************************ //
  // XML       : ConsultaRotaMapLinkParadaResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ConsultaRotaMapLinkParadaResponse = class(ConsultaRotaMapLinkParadaResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : RotaDetalhadaParada, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  RotaDetalhadaParada2 = class(TRemotable)
  private
    FLAT: Double;
    FLAT_Specified: boolean;
    FLNG: Double;
    FLNG_Specified: boolean;
    FCEP: string;
    FCEP_Specified: boolean;
    FCodigoIBGEMunicipio: Integer;
    FCodigoIBGEMunicipio_Specified: boolean;
    function  GetLAT(Index: Integer): Double;
    procedure SetLAT(Index: Integer; const ADouble: Double);
    function  LAT_Specified(Index: Integer): boolean;
    function  GetLNG(Index: Integer): Double;
    procedure SetLNG(Index: Integer; const ADouble: Double);
    function  LNG_Specified(Index: Integer): boolean;
    function  GetCEP(Index: Integer): string;
    procedure SetCEP(Index: Integer; const Astring: string);
    function  CEP_Specified(Index: Integer): boolean;
    function  GetCodigoIBGEMunicipio(Index: Integer): Integer;
    procedure SetCodigoIBGEMunicipio(Index: Integer; const AInteger: Integer);
    function  CodigoIBGEMunicipio_Specified(Index: Integer): boolean;
  published
    property LAT:                 Double   Index (IS_OPTN) read GetLAT write SetLAT stored LAT_Specified;
    property LNG:                 Double   Index (IS_OPTN) read GetLNG write SetLNG stored LNG_Specified;
    property CEP:                 string   Index (IS_OPTN or IS_NLBL) read GetCEP write SetCEP stored CEP_Specified;
    property CodigoIBGEMunicipio: Integer  Index (IS_OPTN) read GetCodigoIBGEMunicipio write SetCodigoIBGEMunicipio stored CodigoIBGEMunicipio_Specified;
  end;



  // ************************************************************************ //
  // XML       : RotaDetalhadaParada, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  RotaDetalhadaParada = class(RotaDetalhadaParada2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : RotaDetalhadaInfoParada, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  RotaDetalhadaInfoParada2 = class(TRemotable)
  private
    FCidade: string;
    FCidade_Specified: boolean;
    FEndereco: string;
    FEndereco_Specified: boolean;
    FLatitude: Double;
    FLatitude_Specified: boolean;
    FLongitude: Double;
    FLongitude_Specified: boolean;
    FCep: string;
    FCep_Specified: boolean;
    FOrdem: Integer;
    FOrdem_Specified: boolean;
    function  GetCidade(Index: Integer): string;
    procedure SetCidade(Index: Integer; const Astring: string);
    function  Cidade_Specified(Index: Integer): boolean;
    function  GetEndereco(Index: Integer): string;
    procedure SetEndereco(Index: Integer; const Astring: string);
    function  Endereco_Specified(Index: Integer): boolean;
    function  GetLatitude(Index: Integer): Double;
    procedure SetLatitude(Index: Integer; const ADouble: Double);
    function  Latitude_Specified(Index: Integer): boolean;
    function  GetLongitude(Index: Integer): Double;
    procedure SetLongitude(Index: Integer; const ADouble: Double);
    function  Longitude_Specified(Index: Integer): boolean;
    function  GetCep(Index: Integer): string;
    procedure SetCep(Index: Integer; const Astring: string);
    function  Cep_Specified(Index: Integer): boolean;
    function  GetOrdem(Index: Integer): Integer;
    procedure SetOrdem(Index: Integer; const AInteger: Integer);
    function  Ordem_Specified(Index: Integer): boolean;
  published
    property Cidade:    string   Index (IS_OPTN or IS_NLBL) read GetCidade write SetCidade stored Cidade_Specified;
    property Endereco:  string   Index (IS_OPTN or IS_NLBL) read GetEndereco write SetEndereco stored Endereco_Specified;
    property Latitude:  Double   Index (IS_OPTN) read GetLatitude write SetLatitude stored Latitude_Specified;
    property Longitude: Double   Index (IS_OPTN) read GetLongitude write SetLongitude stored Longitude_Specified;
    property Cep:       string   Index (IS_OPTN or IS_NLBL) read GetCep write SetCep stored Cep_Specified;
    property Ordem:     Integer  Index (IS_OPTN) read GetOrdem write SetOrdem stored Ordem_Specified;
  end;



  // ************************************************************************ //
  // XML       : RotaDetalhadaInfoParada, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  RotaDetalhadaInfoParada = class(RotaDetalhadaInfoParada2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : RotaResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  RotaResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FIdRotaCliente: Integer;
    FIdRotaCliente_Specified: boolean;
    FNomeRota: string;
    FNomeRota_Specified: boolean;
    FDataHoraCadastro: TXSDateTime;
    FDataHoraCadastro_Specified: boolean;
    FValorCombustivel: TXSDecimal;
    FValorCombustivel_Specified: boolean;
    FDistanciaPercorrida: TXSDecimal;
    FDistanciaPercorrida_Specified: boolean;
    FTempoViagem: Double;
    FTempoViagem_Specified: boolean;
    FOrigem: string;
    FOrigem_Specified: boolean;
    FDestino: string;
    FDestino_Specified: boolean;
    FDataHoraAtualizacao: TXSDateTime;
    FDataHoraAtualizacao_Specified: boolean;
    FAtivo: Boolean;
    FAtivo_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetIdRotaCliente(Index: Integer): Integer;
    procedure SetIdRotaCliente(Index: Integer; const AInteger: Integer);
    function  IdRotaCliente_Specified(Index: Integer): boolean;
    function  GetNomeRota(Index: Integer): string;
    procedure SetNomeRota(Index: Integer; const Astring: string);
    function  NomeRota_Specified(Index: Integer): boolean;
    function  GetDataHoraCadastro(Index: Integer): TXSDateTime;
    procedure SetDataHoraCadastro(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DataHoraCadastro_Specified(Index: Integer): boolean;
    function  GetValorCombustivel(Index: Integer): TXSDecimal;
    procedure SetValorCombustivel(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorCombustivel_Specified(Index: Integer): boolean;
    function  GetDistanciaPercorrida(Index: Integer): TXSDecimal;
    procedure SetDistanciaPercorrida(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  DistanciaPercorrida_Specified(Index: Integer): boolean;
    function  GetTempoViagem(Index: Integer): Double;
    procedure SetTempoViagem(Index: Integer; const ADouble: Double);
    function  TempoViagem_Specified(Index: Integer): boolean;
    function  GetOrigem(Index: Integer): string;
    procedure SetOrigem(Index: Integer; const Astring: string);
    function  Origem_Specified(Index: Integer): boolean;
    function  GetDestino(Index: Integer): string;
    procedure SetDestino(Index: Integer; const Astring: string);
    function  Destino_Specified(Index: Integer): boolean;
    function  GetDataHoraAtualizacao(Index: Integer): TXSDateTime;
    procedure SetDataHoraAtualizacao(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DataHoraAtualizacao_Specified(Index: Integer): boolean;
    function  GetAtivo(Index: Integer): Boolean;
    procedure SetAtivo(Index: Integer; const ABoolean: Boolean);
    function  Ativo_Specified(Index: Integer): boolean;
  published
    property Erro:                ErroResponse2  Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property IdRotaCliente:       Integer        Index (IS_OPTN) read GetIdRotaCliente write SetIdRotaCliente stored IdRotaCliente_Specified;
    property NomeRota:            string         Index (IS_OPTN or IS_NLBL) read GetNomeRota write SetNomeRota stored NomeRota_Specified;
    property DataHoraCadastro:    TXSDateTime    Index (IS_OPTN) read GetDataHoraCadastro write SetDataHoraCadastro stored DataHoraCadastro_Specified;
    property ValorCombustivel:    TXSDecimal     Index (IS_OPTN or IS_NLBL) read GetValorCombustivel write SetValorCombustivel stored ValorCombustivel_Specified;
    property DistanciaPercorrida: TXSDecimal     Index (IS_OPTN) read GetDistanciaPercorrida write SetDistanciaPercorrida stored DistanciaPercorrida_Specified;
    property TempoViagem:         Double         Index (IS_OPTN) read GetTempoViagem write SetTempoViagem stored TempoViagem_Specified;
    property Origem:              string         Index (IS_OPTN or IS_NLBL) read GetOrigem write SetOrigem stored Origem_Specified;
    property Destino:             string         Index (IS_OPTN or IS_NLBL) read GetDestino write SetDestino stored Destino_Specified;
    property DataHoraAtualizacao: TXSDateTime    Index (IS_OPTN) read GetDataHoraAtualizacao write SetDataHoraAtualizacao stored DataHoraAtualizacao_Specified;
    property Ativo:               Boolean        Index (IS_OPTN) read GetAtivo write SetAtivo stored Ativo_Specified;
  end;



  // ************************************************************************ //
  // XML       : RotaResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  RotaResponse = class(RotaResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ObtencaoCustoRotaRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ObtencaoCustoRotaRequest2 = class(TRemotable)
  private
    FCategoriaVeiculo: Integer;
    FCategoriaVeiculo_Specified: boolean;
    FIdRotaModelo: Integer;
    FIdRotaModelo_Specified: boolean;
    FModoPagamentoRota: Integer;
    FModoPagamentoRota_Specified: boolean;
    function  GetCategoriaVeiculo(Index: Integer): Integer;
    procedure SetCategoriaVeiculo(Index: Integer; const AInteger: Integer);
    function  CategoriaVeiculo_Specified(Index: Integer): boolean;
    function  GetIdRotaModelo(Index: Integer): Integer;
    procedure SetIdRotaModelo(Index: Integer; const AInteger: Integer);
    function  IdRotaModelo_Specified(Index: Integer): boolean;
    function  GetModoPagamentoRota(Index: Integer): Integer;
    procedure SetModoPagamentoRota(Index: Integer; const AInteger: Integer);
    function  ModoPagamentoRota_Specified(Index: Integer): boolean;
  published
    property CategoriaVeiculo:  Integer  Index (IS_OPTN) read GetCategoriaVeiculo write SetCategoriaVeiculo stored CategoriaVeiculo_Specified;
    property IdRotaModelo:      Integer  Index (IS_OPTN) read GetIdRotaModelo write SetIdRotaModelo stored IdRotaModelo_Specified;
    property ModoPagamentoRota: Integer  Index (IS_OPTN) read GetModoPagamentoRota write SetModoPagamentoRota stored ModoPagamentoRota_Specified;
  end;



  // ************************************************************************ //
  // XML       : ObtencaoCustoRotaRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ObtencaoCustoRotaRequest = class(ObtencaoCustoRotaRequest2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ObtencaoCustoRotaResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ObtencaoCustoRotaResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FParadas: ArrayOfConsultaRotaMapLinkParadaResponse;
    FParadas_Specified: boolean;
    FPedagios: ArrayOfConsultaRotaMapLinkPedagiosResponse;
    FPedagios_Specified: boolean;
    FOtimizada: Boolean;
    FOtimizada_Specified: boolean;
    FTipo: Integer;
    FTipo_Specified: boolean;
    FCategoriaVeiculo: Integer;
    FCategoriaVeiculo_Specified: boolean;
    FValorPedagioTotal: TXSDecimal;
    FValorPedagioTotal_Specified: boolean;
    FValorPedagioTARGET: TXSDecimal;
    FValorPedagioTARGET_Specified: boolean;
    FValorPedagioViaFacil: TXSDecimal;
    FValorPedagioViaFacil_Specified: boolean;
    FIdRotaCliente: Integer;
    FIdRotaCliente_Specified: boolean;
    FNomeRotaCliente: string;
    FNomeRotaCliente_Specified: boolean;
    FDescricaoCategoriaVeiculo: string;
    FDescricaoCategoriaVeiculo_Specified: boolean;
    FIdOrigemRota: Integer;
    FIdOrigemRota_Specified: boolean;
    FNomeOrigemRota: string;
    FNomeOrigemRota_Specified: boolean;
    FCodigoIBGEOrigemRota: Integer;
    FCodigoIBGEOrigemRota_Specified: boolean;
    FIdDestinoRota: Integer;
    FIdDestinoRota_Specified: boolean;
    FNomeDestinoRota: string;
    FNomeDestinoRota_Specified: boolean;
    FCodigoIBGEDestinoRota: Integer;
    FCodigoIBGEDestinoRota_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetParadas(Index: Integer): ArrayOfConsultaRotaMapLinkParadaResponse;
    procedure SetParadas(Index: Integer; const AArrayOfConsultaRotaMapLinkParadaResponse: ArrayOfConsultaRotaMapLinkParadaResponse);
    function  Paradas_Specified(Index: Integer): boolean;
    function  GetPedagios(Index: Integer): ArrayOfConsultaRotaMapLinkPedagiosResponse;
    procedure SetPedagios(Index: Integer; const AArrayOfConsultaRotaMapLinkPedagiosResponse: ArrayOfConsultaRotaMapLinkPedagiosResponse);
    function  Pedagios_Specified(Index: Integer): boolean;
    function  GetOtimizada(Index: Integer): Boolean;
    procedure SetOtimizada(Index: Integer; const ABoolean: Boolean);
    function  Otimizada_Specified(Index: Integer): boolean;
    function  GetTipo(Index: Integer): Integer;
    procedure SetTipo(Index: Integer; const AInteger: Integer);
    function  Tipo_Specified(Index: Integer): boolean;
    function  GetCategoriaVeiculo(Index: Integer): Integer;
    procedure SetCategoriaVeiculo(Index: Integer; const AInteger: Integer);
    function  CategoriaVeiculo_Specified(Index: Integer): boolean;
    function  GetValorPedagioTotal(Index: Integer): TXSDecimal;
    procedure SetValorPedagioTotal(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorPedagioTotal_Specified(Index: Integer): boolean;
    function  GetValorPedagioTARGET(Index: Integer): TXSDecimal;
    procedure SetValorPedagioTARGET(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorPedagioTARGET_Specified(Index: Integer): boolean;
    function  GetValorPedagioViaFacil(Index: Integer): TXSDecimal;
    procedure SetValorPedagioViaFacil(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorPedagioViaFacil_Specified(Index: Integer): boolean;
    function  GetIdRotaCliente(Index: Integer): Integer;
    procedure SetIdRotaCliente(Index: Integer; const AInteger: Integer);
    function  IdRotaCliente_Specified(Index: Integer): boolean;
    function  GetNomeRotaCliente(Index: Integer): string;
    procedure SetNomeRotaCliente(Index: Integer; const Astring: string);
    function  NomeRotaCliente_Specified(Index: Integer): boolean;
    function  GetDescricaoCategoriaVeiculo(Index: Integer): string;
    procedure SetDescricaoCategoriaVeiculo(Index: Integer; const Astring: string);
    function  DescricaoCategoriaVeiculo_Specified(Index: Integer): boolean;
    function  GetIdOrigemRota(Index: Integer): Integer;
    procedure SetIdOrigemRota(Index: Integer; const AInteger: Integer);
    function  IdOrigemRota_Specified(Index: Integer): boolean;
    function  GetNomeOrigemRota(Index: Integer): string;
    procedure SetNomeOrigemRota(Index: Integer; const Astring: string);
    function  NomeOrigemRota_Specified(Index: Integer): boolean;
    function  GetCodigoIBGEOrigemRota(Index: Integer): Integer;
    procedure SetCodigoIBGEOrigemRota(Index: Integer; const AInteger: Integer);
    function  CodigoIBGEOrigemRota_Specified(Index: Integer): boolean;
    function  GetIdDestinoRota(Index: Integer): Integer;
    procedure SetIdDestinoRota(Index: Integer; const AInteger: Integer);
    function  IdDestinoRota_Specified(Index: Integer): boolean;
    function  GetNomeDestinoRota(Index: Integer): string;
    procedure SetNomeDestinoRota(Index: Integer; const Astring: string);
    function  NomeDestinoRota_Specified(Index: Integer): boolean;
    function  GetCodigoIBGEDestinoRota(Index: Integer): Integer;
    procedure SetCodigoIBGEDestinoRota(Index: Integer; const AInteger: Integer);
    function  CodigoIBGEDestinoRota_Specified(Index: Integer): boolean;
  published
    property Erro:                      ErroResponse2                               Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property Paradas:                   ArrayOfConsultaRotaMapLinkParadaResponse    Index (IS_OPTN or IS_NLBL) read GetParadas write SetParadas stored Paradas_Specified;
    property Pedagios:                  ArrayOfConsultaRotaMapLinkPedagiosResponse  Index (IS_OPTN or IS_NLBL) read GetPedagios write SetPedagios stored Pedagios_Specified;
    property Otimizada:                 Boolean                                     Index (IS_OPTN) read GetOtimizada write SetOtimizada stored Otimizada_Specified;
    property Tipo:                      Integer                                     Index (IS_OPTN) read GetTipo write SetTipo stored Tipo_Specified;
    property CategoriaVeiculo:          Integer                                     Index (IS_OPTN) read GetCategoriaVeiculo write SetCategoriaVeiculo stored CategoriaVeiculo_Specified;
    property ValorPedagioTotal:         TXSDecimal                                  Index (IS_OPTN) read GetValorPedagioTotal write SetValorPedagioTotal stored ValorPedagioTotal_Specified;
    property ValorPedagioTARGET:        TXSDecimal                                  Index (IS_OPTN) read GetValorPedagioTARGET write SetValorPedagioTARGET stored ValorPedagioTARGET_Specified;
    property ValorPedagioViaFacil:      TXSDecimal                                  Index (IS_OPTN) read GetValorPedagioViaFacil write SetValorPedagioViaFacil stored ValorPedagioViaFacil_Specified;
    property IdRotaCliente:             Integer                                     Index (IS_OPTN) read GetIdRotaCliente write SetIdRotaCliente stored IdRotaCliente_Specified;
    property NomeRotaCliente:           string                                      Index (IS_OPTN or IS_NLBL) read GetNomeRotaCliente write SetNomeRotaCliente stored NomeRotaCliente_Specified;
    property DescricaoCategoriaVeiculo: string                                      Index (IS_OPTN or IS_NLBL) read GetDescricaoCategoriaVeiculo write SetDescricaoCategoriaVeiculo stored DescricaoCategoriaVeiculo_Specified;
    property IdOrigemRota:              Integer                                     Index (IS_OPTN or IS_NLBL) read GetIdOrigemRota write SetIdOrigemRota stored IdOrigemRota_Specified;
    property NomeOrigemRota:            string                                      Index (IS_OPTN or IS_NLBL) read GetNomeOrigemRota write SetNomeOrigemRota stored NomeOrigemRota_Specified;
    property CodigoIBGEOrigemRota:      Integer                                     Index (IS_OPTN or IS_NLBL) read GetCodigoIBGEOrigemRota write SetCodigoIBGEOrigemRota stored CodigoIBGEOrigemRota_Specified;
    property IdDestinoRota:             Integer                                     Index (IS_OPTN or IS_NLBL) read GetIdDestinoRota write SetIdDestinoRota stored IdDestinoRota_Specified;
    property NomeDestinoRota:           string                                      Index (IS_OPTN or IS_NLBL) read GetNomeDestinoRota write SetNomeDestinoRota stored NomeDestinoRota_Specified;
    property CodigoIBGEDestinoRota:     Integer                                     Index (IS_OPTN or IS_NLBL) read GetCodigoIBGEDestinoRota write SetCodigoIBGEDestinoRota stored CodigoIBGEDestinoRota_Specified;
  end;



  // ************************************************************************ //
  // XML       : ObtencaoCustoRotaResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ObtencaoCustoRotaResponse = class(ObtencaoCustoRotaResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : RoteiroRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  RoteiroRequest2 = class(TRemotable)
  private
    FNomeRoteiro: string;
    FNomeRoteiro_Specified: boolean;
    FCategoriaVeiculo: Integer;
    FCategoriaVeiculo_Specified: boolean;
    FCodigoIBGEMunicipioOrigem: Integer;
    FCodigoIBGEMunicipioOrigem_Specified: boolean;
    FCodigosIBGEMunicipioParadas: ArrayOfint;
    FCodigosIBGEMunicipioParadas_Specified: boolean;
    FCodigoIBGEMunicipioDestino: Integer;
    FCodigoIBGEMunicipioDestino_Specified: boolean;
    FRotaOtimizada: Boolean;
    FRotaOtimizada_Specified: boolean;
    function  GetNomeRoteiro(Index: Integer): string;
    procedure SetNomeRoteiro(Index: Integer; const Astring: string);
    function  NomeRoteiro_Specified(Index: Integer): boolean;
    function  GetCategoriaVeiculo(Index: Integer): Integer;
    procedure SetCategoriaVeiculo(Index: Integer; const AInteger: Integer);
    function  CategoriaVeiculo_Specified(Index: Integer): boolean;
    function  GetCodigoIBGEMunicipioOrigem(Index: Integer): Integer;
    procedure SetCodigoIBGEMunicipioOrigem(Index: Integer; const AInteger: Integer);
    function  CodigoIBGEMunicipioOrigem_Specified(Index: Integer): boolean;
    function  GetCodigosIBGEMunicipioParadas(Index: Integer): ArrayOfint;
    procedure SetCodigosIBGEMunicipioParadas(Index: Integer; const AArrayOfint: ArrayOfint);
    function  CodigosIBGEMunicipioParadas_Specified(Index: Integer): boolean;
    function  GetCodigoIBGEMunicipioDestino(Index: Integer): Integer;
    procedure SetCodigoIBGEMunicipioDestino(Index: Integer; const AInteger: Integer);
    function  CodigoIBGEMunicipioDestino_Specified(Index: Integer): boolean;
    function  GetRotaOtimizada(Index: Integer): Boolean;
    procedure SetRotaOtimizada(Index: Integer; const ABoolean: Boolean);
    function  RotaOtimizada_Specified(Index: Integer): boolean;
  published
    property NomeRoteiro:                 string      Index (IS_OPTN or IS_NLBL) read GetNomeRoteiro write SetNomeRoteiro stored NomeRoteiro_Specified;
    property CategoriaVeiculo:            Integer     Index (IS_OPTN) read GetCategoriaVeiculo write SetCategoriaVeiculo stored CategoriaVeiculo_Specified;
    property CodigoIBGEMunicipioOrigem:   Integer     Index (IS_OPTN) read GetCodigoIBGEMunicipioOrigem write SetCodigoIBGEMunicipioOrigem stored CodigoIBGEMunicipioOrigem_Specified;
    property CodigosIBGEMunicipioParadas: ArrayOfint  Index (IS_OPTN or IS_NLBL) read GetCodigosIBGEMunicipioParadas write SetCodigosIBGEMunicipioParadas stored CodigosIBGEMunicipioParadas_Specified;
    property CodigoIBGEMunicipioDestino:  Integer     Index (IS_OPTN) read GetCodigoIBGEMunicipioDestino write SetCodigoIBGEMunicipioDestino stored CodigoIBGEMunicipioDestino_Specified;
    property RotaOtimizada:               Boolean     Index (IS_OPTN or IS_NLBL) read GetRotaOtimizada write SetRotaOtimizada stored RotaOtimizada_Specified;
  end;



  // ************************************************************************ //
  // XML       : RoteiroRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  RoteiroRequest = class(RoteiroRequest2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : EmissaoDocumentoRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  EmissaoDocumentoRequest2 = class(TRemotable)
  private
    FTipo: Integer;
    FTipo_Specified: boolean;
    FIdEntidade: Integer;
    FIdEntidade_Specified: boolean;
    function  GetTipo(Index: Integer): Integer;
    procedure SetTipo(Index: Integer; const AInteger: Integer);
    function  Tipo_Specified(Index: Integer): boolean;
    function  GetIdEntidade(Index: Integer): Integer;
    procedure SetIdEntidade(Index: Integer; const AInteger: Integer);
    function  IdEntidade_Specified(Index: Integer): boolean;
  published
    property Tipo:       Integer  Index (IS_OPTN) read GetTipo write SetTipo stored Tipo_Specified;
    property IdEntidade: Integer  Index (IS_OPTN) read GetIdEntidade write SetIdEntidade stored IdEntidade_Specified;
  end;



  // ************************************************************************ //
  // XML       : EmissaoDocumentoRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  EmissaoDocumentoRequest = class(EmissaoDocumentoRequest2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : EmissaoDocumentoResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  EmissaoDocumentoResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FDocumentoBinario: TByteSOAPArray;
    FDocumentoBinario_Specified: boolean;
    FTipo: Integer;
    FTipo_Specified: boolean;
    FUrlDocumento: string;
    FUrlDocumento_Specified: boolean;
    FDataHoraExpiracaoUrl: TXSDateTime;
    FDataHoraExpiracaoUrl_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetDocumentoBinario(Index: Integer): TByteSOAPArray;
    procedure SetDocumentoBinario(Index: Integer; const ATByteSOAPArray: TByteSOAPArray);
    function  DocumentoBinario_Specified(Index: Integer): boolean;
    function  GetTipo(Index: Integer): Integer;
    procedure SetTipo(Index: Integer; const AInteger: Integer);
    function  Tipo_Specified(Index: Integer): boolean;
    function  GetUrlDocumento(Index: Integer): string;
    procedure SetUrlDocumento(Index: Integer; const Astring: string);
    function  UrlDocumento_Specified(Index: Integer): boolean;
    function  GetDataHoraExpiracaoUrl(Index: Integer): TXSDateTime;
    procedure SetDataHoraExpiracaoUrl(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DataHoraExpiracaoUrl_Specified(Index: Integer): boolean;
  published
    property Erro:                 ErroResponse2   Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property DocumentoBinario:     TByteSOAPArray  Index (IS_OPTN or IS_NLBL) read GetDocumentoBinario write SetDocumentoBinario stored DocumentoBinario_Specified;
    property Tipo:                 Integer         Index (IS_OPTN) read GetTipo write SetTipo stored Tipo_Specified;
    property UrlDocumento:         string          Index (IS_OPTN or IS_NLBL) read GetUrlDocumento write SetUrlDocumento stored UrlDocumento_Specified;
    property DataHoraExpiracaoUrl: TXSDateTime     Index (IS_OPTN or IS_NLBL) read GetDataHoraExpiracaoUrl write SetDataHoraExpiracaoUrl stored DataHoraExpiracaoUrl_Specified;
  end;



  // ************************************************************************ //
  // XML       : EmissaoDocumentoResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  EmissaoDocumentoResponse = class(EmissaoDocumentoResponse2)
  private
  published
  end;

  ArrayOfRoteiroResponse = array of RoteiroResponse2;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }


  // ************************************************************************ //
  // XML       : RoteiroResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  RoteiroResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FIdRoteiro: Integer;
    FIdRoteiro_Specified: boolean;
    FNomeRoteiro: string;
    FNomeRoteiro_Specified: boolean;
    FOrigem: string;
    FOrigem_Specified: boolean;
    FDestino: string;
    FDestino_Specified: boolean;
    FDistancia: TXSDecimal;
    FDistancia_Specified: boolean;
    FCustoPedagioTotal: TXSDecimal;
    FCustoPedagioTotal_Specified: boolean;
    FCustoTotalRota: TXSDecimal;
    FCustoTotalRota_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetIdRoteiro(Index: Integer): Integer;
    procedure SetIdRoteiro(Index: Integer; const AInteger: Integer);
    function  IdRoteiro_Specified(Index: Integer): boolean;
    function  GetNomeRoteiro(Index: Integer): string;
    procedure SetNomeRoteiro(Index: Integer; const Astring: string);
    function  NomeRoteiro_Specified(Index: Integer): boolean;
    function  GetOrigem(Index: Integer): string;
    procedure SetOrigem(Index: Integer; const Astring: string);
    function  Origem_Specified(Index: Integer): boolean;
    function  GetDestino(Index: Integer): string;
    procedure SetDestino(Index: Integer; const Astring: string);
    function  Destino_Specified(Index: Integer): boolean;
    function  GetDistancia(Index: Integer): TXSDecimal;
    procedure SetDistancia(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  Distancia_Specified(Index: Integer): boolean;
    function  GetCustoPedagioTotal(Index: Integer): TXSDecimal;
    procedure SetCustoPedagioTotal(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  CustoPedagioTotal_Specified(Index: Integer): boolean;
    function  GetCustoTotalRota(Index: Integer): TXSDecimal;
    procedure SetCustoTotalRota(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  CustoTotalRota_Specified(Index: Integer): boolean;
  published
    property Erro:              ErroResponse2  Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property IdRoteiro:         Integer        Index (IS_OPTN) read GetIdRoteiro write SetIdRoteiro stored IdRoteiro_Specified;
    property NomeRoteiro:       string         Index (IS_OPTN or IS_NLBL) read GetNomeRoteiro write SetNomeRoteiro stored NomeRoteiro_Specified;
    property Origem:            string         Index (IS_OPTN or IS_NLBL) read GetOrigem write SetOrigem stored Origem_Specified;
    property Destino:           string         Index (IS_OPTN or IS_NLBL) read GetDestino write SetDestino stored Destino_Specified;
    property Distancia:         TXSDecimal     Index (IS_OPTN) read GetDistancia write SetDistancia stored Distancia_Specified;
    property CustoPedagioTotal: TXSDecimal     Index (IS_OPTN) read GetCustoPedagioTotal write SetCustoPedagioTotal stored CustoPedagioTotal_Specified;
    property CustoTotalRota:    TXSDecimal     Index (IS_OPTN or IS_NLBL) read GetCustoTotalRota write SetCustoTotalRota stored CustoTotalRota_Specified;
  end;



  // ************************************************************************ //
  // XML       : RoteiroResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  RoteiroResponse = class(RoteiroResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : BuscaRoteiroRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  BuscaRoteiroRequest2 = class(TRemotable)
  private
    FQuantidadeItensPorPagina: Integer;
    FQuantidadeItensPorPagina_Specified: boolean;
    FNumeroPagina: Integer;
    FNumeroPagina_Specified: boolean;
    FIdRoteiro: Integer;
    FIdRoteiro_Specified: boolean;
    FNomeRoteiro: string;
    FNomeRoteiro_Specified: boolean;
    function  GetQuantidadeItensPorPagina(Index: Integer): Integer;
    procedure SetQuantidadeItensPorPagina(Index: Integer; const AInteger: Integer);
    function  QuantidadeItensPorPagina_Specified(Index: Integer): boolean;
    function  GetNumeroPagina(Index: Integer): Integer;
    procedure SetNumeroPagina(Index: Integer; const AInteger: Integer);
    function  NumeroPagina_Specified(Index: Integer): boolean;
    function  GetIdRoteiro(Index: Integer): Integer;
    procedure SetIdRoteiro(Index: Integer; const AInteger: Integer);
    function  IdRoteiro_Specified(Index: Integer): boolean;
    function  GetNomeRoteiro(Index: Integer): string;
    procedure SetNomeRoteiro(Index: Integer; const Astring: string);
    function  NomeRoteiro_Specified(Index: Integer): boolean;
  published
    property QuantidadeItensPorPagina: Integer  Index (IS_OPTN) read GetQuantidadeItensPorPagina write SetQuantidadeItensPorPagina stored QuantidadeItensPorPagina_Specified;
    property NumeroPagina:             Integer  Index (IS_OPTN) read GetNumeroPagina write SetNumeroPagina stored NumeroPagina_Specified;
    property IdRoteiro:                Integer  Index (IS_OPTN or IS_NLBL) read GetIdRoteiro write SetIdRoteiro stored IdRoteiro_Specified;
    property NomeRoteiro:              string   Index (IS_OPTN or IS_NLBL) read GetNomeRoteiro write SetNomeRoteiro stored NomeRoteiro_Specified;
  end;



  // ************************************************************************ //
  // XML       : BuscaRoteiroRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  BuscaRoteiroRequest = class(BuscaRoteiroRequest2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ResultadoPaginadoRoteiroResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ResultadoPaginadoRoteiroResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FItens: ArrayOfRoteiroResponse;
    FItens_Specified: boolean;
    FNumeroPagina: Integer;
    FNumeroPagina_Specified: boolean;
    FQuantidadeItensPorPagina: Integer;
    FQuantidadeItensPorPagina_Specified: boolean;
    FQuantidadeTotalItens: Integer;
    FQuantidadeTotalItens_Specified: boolean;
    FQuantidadeTotalPaginas: Integer;
    FQuantidadeTotalPaginas_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetItens(Index: Integer): ArrayOfRoteiroResponse;
    procedure SetItens(Index: Integer; const AArrayOfRoteiroResponse: ArrayOfRoteiroResponse);
    function  Itens_Specified(Index: Integer): boolean;
    function  GetNumeroPagina(Index: Integer): Integer;
    procedure SetNumeroPagina(Index: Integer; const AInteger: Integer);
    function  NumeroPagina_Specified(Index: Integer): boolean;
    function  GetQuantidadeItensPorPagina(Index: Integer): Integer;
    procedure SetQuantidadeItensPorPagina(Index: Integer; const AInteger: Integer);
    function  QuantidadeItensPorPagina_Specified(Index: Integer): boolean;
    function  GetQuantidadeTotalItens(Index: Integer): Integer;
    procedure SetQuantidadeTotalItens(Index: Integer; const AInteger: Integer);
    function  QuantidadeTotalItens_Specified(Index: Integer): boolean;
    function  GetQuantidadeTotalPaginas(Index: Integer): Integer;
    procedure SetQuantidadeTotalPaginas(Index: Integer; const AInteger: Integer);
    function  QuantidadeTotalPaginas_Specified(Index: Integer): boolean;
  published
    property Erro:                     ErroResponse2           Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property Itens:                    ArrayOfRoteiroResponse  Index (IS_OPTN or IS_NLBL) read GetItens write SetItens stored Itens_Specified;
    property NumeroPagina:             Integer                 Index (IS_OPTN) read GetNumeroPagina write SetNumeroPagina stored NumeroPagina_Specified;
    property QuantidadeItensPorPagina: Integer                 Index (IS_OPTN) read GetQuantidadeItensPorPagina write SetQuantidadeItensPorPagina stored QuantidadeItensPorPagina_Specified;
    property QuantidadeTotalItens:     Integer                 Index (IS_OPTN) read GetQuantidadeTotalItens write SetQuantidadeTotalItens stored QuantidadeTotalItens_Specified;
    property QuantidadeTotalPaginas:   Integer                 Index (IS_OPTN) read GetQuantidadeTotalPaginas write SetQuantidadeTotalPaginas stored QuantidadeTotalPaginas_Specified;
  end;



  // ************************************************************************ //
  // XML       : ResultadoPaginadoRoteiroResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ResultadoPaginadoRoteiroResponse = class(ResultadoPaginadoRoteiroResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : CancelamentoSolicitacaoPagamentoAvulsoCartaoRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  CancelamentoSolicitacaoPagamentoAvulsoCartaoRequest2 = class(TRemotable)
  private
    FIdTransacaoCartao: Integer;
    FIdTransacaoCartao_Specified: boolean;
    function  GetIdTransacaoCartao(Index: Integer): Integer;
    procedure SetIdTransacaoCartao(Index: Integer; const AInteger: Integer);
    function  IdTransacaoCartao_Specified(Index: Integer): boolean;
  published
    property IdTransacaoCartao: Integer  Index (IS_OPTN) read GetIdTransacaoCartao write SetIdTransacaoCartao stored IdTransacaoCartao_Specified;
  end;



  // ************************************************************************ //
  // XML       : CancelamentoSolicitacaoPagamentoAvulsoCartaoRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  CancelamentoSolicitacaoPagamentoAvulsoCartaoRequest = class(CancelamentoSolicitacaoPagamentoAvulsoCartaoRequest2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : CancelamentoSolicitacaoPagamentoAvulsoCartaoResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  CancelamentoSolicitacaoPagamentoAvulsoCartaoResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FIdTransacaoCartao: Integer;
    FIdTransacaoCartao_Specified: boolean;
    FMensagemRetorno: string;
    FMensagemRetorno_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetIdTransacaoCartao(Index: Integer): Integer;
    procedure SetIdTransacaoCartao(Index: Integer; const AInteger: Integer);
    function  IdTransacaoCartao_Specified(Index: Integer): boolean;
    function  GetMensagemRetorno(Index: Integer): string;
    procedure SetMensagemRetorno(Index: Integer; const Astring: string);
    function  MensagemRetorno_Specified(Index: Integer): boolean;
  published
    property Erro:              ErroResponse2  Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property IdTransacaoCartao: Integer        Index (IS_OPTN) read GetIdTransacaoCartao write SetIdTransacaoCartao stored IdTransacaoCartao_Specified;
    property MensagemRetorno:   string         Index (IS_OPTN or IS_NLBL) read GetMensagemRetorno write SetMensagemRetorno stored MensagemRetorno_Specified;
  end;



  // ************************************************************************ //
  // XML       : CancelamentoSolicitacaoPagamentoAvulsoCartaoResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  CancelamentoSolicitacaoPagamentoAvulsoCartaoResponse = class(CancelamentoSolicitacaoPagamentoAvulsoCartaoResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : PagamentoCombustivelAvulsoCartaoManualmenteRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  PagamentoCombustivelAvulsoCartaoManualmenteRequest2 = class(TRemotable)
  private
    FIdTransacaoCartao: Integer;
    FIdTransacaoCartao_Specified: boolean;
    function  GetIdTransacaoCartao(Index: Integer): Integer;
    procedure SetIdTransacaoCartao(Index: Integer; const AInteger: Integer);
    function  IdTransacaoCartao_Specified(Index: Integer): boolean;
  published
    property IdTransacaoCartao: Integer  Index (IS_OPTN) read GetIdTransacaoCartao write SetIdTransacaoCartao stored IdTransacaoCartao_Specified;
  end;



  // ************************************************************************ //
  // XML       : PagamentoCombustivelAvulsoCartaoManualmenteRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  PagamentoCombustivelAvulsoCartaoManualmenteRequest = class(PagamentoCombustivelAvulsoCartaoManualmenteRequest2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : PagamentoAvulsoCartaoManualmenteResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  PagamentoAvulsoCartaoManualmenteResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FIdTransacaoCartao: Integer;
    FIdTransacaoCartao_Specified: boolean;
    FMensagemRetorno: string;
    FMensagemRetorno_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetIdTransacaoCartao(Index: Integer): Integer;
    procedure SetIdTransacaoCartao(Index: Integer; const AInteger: Integer);
    function  IdTransacaoCartao_Specified(Index: Integer): boolean;
    function  GetMensagemRetorno(Index: Integer): string;
    procedure SetMensagemRetorno(Index: Integer; const Astring: string);
    function  MensagemRetorno_Specified(Index: Integer): boolean;
  published
    property Erro:              ErroResponse2  Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property IdTransacaoCartao: Integer        Index (IS_OPTN) read GetIdTransacaoCartao write SetIdTransacaoCartao stored IdTransacaoCartao_Specified;
    property MensagemRetorno:   string         Index (IS_OPTN or IS_NLBL) read GetMensagemRetorno write SetMensagemRetorno stored MensagemRetorno_Specified;
  end;



  // ************************************************************************ //
  // XML       : PagamentoAvulsoCartaoManualmenteResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  PagamentoAvulsoCartaoManualmenteResponse = class(PagamentoAvulsoCartaoManualmenteResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : CalculoValoresPisCofinsRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  CalculoValoresPisCofinsRequest2 = class(TRemotable)
  private
    FValorLiquido: TXSDecimal;
    FValorLiquido_Specified: boolean;
    function  GetValorLiquido(Index: Integer): TXSDecimal;
    procedure SetValorLiquido(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorLiquido_Specified(Index: Integer): boolean;
  published
    property ValorLiquido: TXSDecimal  Index (IS_OPTN) read GetValorLiquido write SetValorLiquido stored ValorLiquido_Specified;
  end;



  // ************************************************************************ //
  // XML       : CalculoValoresPisCofinsRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  CalculoValoresPisCofinsRequest = class(CalculoValoresPisCofinsRequest2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : CalculoValoresPisCofinsResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  CalculoValoresPisCofinsResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FValorCalculadoPis: TXSDecimal;
    FValorCalculadoPis_Specified: boolean;
    FValorCalculadoCofins: TXSDecimal;
    FValorCalculadoCofins_Specified: boolean;
    FDemonstrativoCalculo: string;
    FDemonstrativoCalculo_Specified: boolean;
    FBaseCalculoPISCofins: TXSDecimal;
    FBaseCalculoPISCofins_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetValorCalculadoPis(Index: Integer): TXSDecimal;
    procedure SetValorCalculadoPis(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorCalculadoPis_Specified(Index: Integer): boolean;
    function  GetValorCalculadoCofins(Index: Integer): TXSDecimal;
    procedure SetValorCalculadoCofins(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorCalculadoCofins_Specified(Index: Integer): boolean;
    function  GetDemonstrativoCalculo(Index: Integer): string;
    procedure SetDemonstrativoCalculo(Index: Integer; const Astring: string);
    function  DemonstrativoCalculo_Specified(Index: Integer): boolean;
    function  GetBaseCalculoPISCofins(Index: Integer): TXSDecimal;
    procedure SetBaseCalculoPISCofins(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  BaseCalculoPISCofins_Specified(Index: Integer): boolean;
  published
    property Erro:                 ErroResponse2  Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property ValorCalculadoPis:    TXSDecimal     Index (IS_OPTN) read GetValorCalculadoPis write SetValorCalculadoPis stored ValorCalculadoPis_Specified;
    property ValorCalculadoCofins: TXSDecimal     Index (IS_OPTN) read GetValorCalculadoCofins write SetValorCalculadoCofins stored ValorCalculadoCofins_Specified;
    property DemonstrativoCalculo: string         Index (IS_OPTN or IS_NLBL) read GetDemonstrativoCalculo write SetDemonstrativoCalculo stored DemonstrativoCalculo_Specified;
    property BaseCalculoPISCofins: TXSDecimal     Index (IS_OPTN) read GetBaseCalculoPISCofins write SetBaseCalculoPISCofins stored BaseCalculoPISCofins_Specified;
  end;



  // ************************************************************************ //
  // XML       : CalculoValoresPisCofinsResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  CalculoValoresPisCofinsResponse = class(CalculoValoresPisCofinsResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : PagamentoAvulsoCartaoManualmenteRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  PagamentoAvulsoCartaoManualmenteRequest2 = class(TRemotable)
  private
    FIdTransacaoCartao: Integer;
    FIdTransacaoCartao_Specified: boolean;
    function  GetIdTransacaoCartao(Index: Integer): Integer;
    procedure SetIdTransacaoCartao(Index: Integer; const AInteger: Integer);
    function  IdTransacaoCartao_Specified(Index: Integer): boolean;
  published
    property IdTransacaoCartao: Integer  Index (IS_OPTN) read GetIdTransacaoCartao write SetIdTransacaoCartao stored IdTransacaoCartao_Specified;
  end;



  // ************************************************************************ //
  // XML       : PagamentoAvulsoCartaoManualmenteRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  PagamentoAvulsoCartaoManualmenteRequest = class(PagamentoAvulsoCartaoManualmenteRequest2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : PagamentoCombustivelAvulsoCartaoManualmenteResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  PagamentoCombustivelAvulsoCartaoManualmenteResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FIdTransacaoCartao: Integer;
    FIdTransacaoCartao_Specified: boolean;
    FMensagemRetorno: string;
    FMensagemRetorno_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetIdTransacaoCartao(Index: Integer): Integer;
    procedure SetIdTransacaoCartao(Index: Integer; const AInteger: Integer);
    function  IdTransacaoCartao_Specified(Index: Integer): boolean;
    function  GetMensagemRetorno(Index: Integer): string;
    procedure SetMensagemRetorno(Index: Integer; const Astring: string);
    function  MensagemRetorno_Specified(Index: Integer): boolean;
  published
    property Erro:              ErroResponse2  Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property IdTransacaoCartao: Integer        Index (IS_OPTN) read GetIdTransacaoCartao write SetIdTransacaoCartao stored IdTransacaoCartao_Specified;
    property MensagemRetorno:   string         Index (IS_OPTN or IS_NLBL) read GetMensagemRetorno write SetMensagemRetorno stored MensagemRetorno_Specified;
  end;



  // ************************************************************************ //
  // XML       : PagamentoCombustivelAvulsoCartaoManualmenteResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  PagamentoCombustivelAvulsoCartaoManualmenteResponse = class(PagamentoCombustivelAvulsoCartaoManualmenteResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : TerminalCarregamentoResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  TerminalCarregamentoResponse2 = class(TRemotable)
  private
    FidTerminalCarregamento: Integer;
    FidTerminalCarregamento_Specified: boolean;
    FRazaoSocial: string;
    FRazaoSocial_Specified: boolean;
    FCPFCNPJ: string;
    FCPFCNPJ_Specified: boolean;
    function  GetidTerminalCarregamento(Index: Integer): Integer;
    procedure SetidTerminalCarregamento(Index: Integer; const AInteger: Integer);
    function  idTerminalCarregamento_Specified(Index: Integer): boolean;
    function  GetRazaoSocial(Index: Integer): string;
    procedure SetRazaoSocial(Index: Integer; const Astring: string);
    function  RazaoSocial_Specified(Index: Integer): boolean;
    function  GetCPFCNPJ(Index: Integer): string;
    procedure SetCPFCNPJ(Index: Integer; const Astring: string);
    function  CPFCNPJ_Specified(Index: Integer): boolean;
  published
    property idTerminalCarregamento: Integer  Index (IS_OPTN) read GetidTerminalCarregamento write SetidTerminalCarregamento stored idTerminalCarregamento_Specified;
    property RazaoSocial:            string   Index (IS_OPTN or IS_NLBL) read GetRazaoSocial write SetRazaoSocial stored RazaoSocial_Specified;
    property CPFCNPJ:                string   Index (IS_OPTN or IS_NLBL) read GetCPFCNPJ write SetCPFCNPJ stored CPFCNPJ_Specified;
  end;



  // ************************************************************************ //
  // XML       : TerminalCarregamentoResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  TerminalCarregamentoResponse = class(TerminalCarregamentoResponse2)
  private
  published
  end;

  ArrayOfRotaDetalhadaParada = array of RotaDetalhadaParada2;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }


  // ************************************************************************ //
  // XML       : RotaDetalhadaRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  RotaDetalhadaRequest2 = class(TRemotable)
  private
    FNomeRota: string;
    FNomeRota_Specified: boolean;
    FCategoriaVeiculo: Integer;
    FCategoriaVeiculo_Specified: boolean;
    FParadas: ArrayOfRotaDetalhadaParada;
    FParadas_Specified: boolean;
    FRotaTemporaria: Boolean;
    FRotaTemporaria_Specified: boolean;
    FSomenteCalculo: Boolean;
    FSomenteCalculo_Specified: boolean;
    FIdTipoCaminhoRota: Integer;
    FIdTipoCaminhoRota_Specified: boolean;
    function  GetNomeRota(Index: Integer): string;
    procedure SetNomeRota(Index: Integer; const Astring: string);
    function  NomeRota_Specified(Index: Integer): boolean;
    function  GetCategoriaVeiculo(Index: Integer): Integer;
    procedure SetCategoriaVeiculo(Index: Integer; const AInteger: Integer);
    function  CategoriaVeiculo_Specified(Index: Integer): boolean;
    function  GetParadas(Index: Integer): ArrayOfRotaDetalhadaParada;
    procedure SetParadas(Index: Integer; const AArrayOfRotaDetalhadaParada: ArrayOfRotaDetalhadaParada);
    function  Paradas_Specified(Index: Integer): boolean;
    function  GetRotaTemporaria(Index: Integer): Boolean;
    procedure SetRotaTemporaria(Index: Integer; const ABoolean: Boolean);
    function  RotaTemporaria_Specified(Index: Integer): boolean;
    function  GetSomenteCalculo(Index: Integer): Boolean;
    procedure SetSomenteCalculo(Index: Integer; const ABoolean: Boolean);
    function  SomenteCalculo_Specified(Index: Integer): boolean;
    function  GetIdTipoCaminhoRota(Index: Integer): Integer;
    procedure SetIdTipoCaminhoRota(Index: Integer; const AInteger: Integer);
    function  IdTipoCaminhoRota_Specified(Index: Integer): boolean;
  published
    property NomeRota:          string                      Index (IS_OPTN or IS_NLBL) read GetNomeRota write SetNomeRota stored NomeRota_Specified;
    property CategoriaVeiculo:  Integer                     Index (IS_OPTN) read GetCategoriaVeiculo write SetCategoriaVeiculo stored CategoriaVeiculo_Specified;
    property Paradas:           ArrayOfRotaDetalhadaParada  Index (IS_OPTN or IS_NLBL) read GetParadas write SetParadas stored Paradas_Specified;
    property RotaTemporaria:    Boolean                     Index (IS_OPTN) read GetRotaTemporaria write SetRotaTemporaria stored RotaTemporaria_Specified;
    property SomenteCalculo:    Boolean                     Index (IS_OPTN) read GetSomenteCalculo write SetSomenteCalculo stored SomenteCalculo_Specified;
    property IdTipoCaminhoRota: Integer                     Index (IS_OPTN or IS_NLBL) read GetIdTipoCaminhoRota write SetIdTipoCaminhoRota stored IdTipoCaminhoRota_Specified;
  end;



  // ************************************************************************ //
  // XML       : RotaDetalhadaRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  RotaDetalhadaRequest = class(RotaDetalhadaRequest2)
  private
  published
  end;

  ArrayOfTerminalCarregamentoResponse = array of TerminalCarregamentoResponse2;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }


  // ************************************************************************ //
  // XML       : CancelamentoSolicitacaoPagamentoCombustivelAvulsoCartaoRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  CancelamentoSolicitacaoPagamentoCombustivelAvulsoCartaoRequest2 = class(TRemotable)
  private
    FIdTransacaoCartao: Integer;
    FIdTransacaoCartao_Specified: boolean;
    function  GetIdTransacaoCartao(Index: Integer): Integer;
    procedure SetIdTransacaoCartao(Index: Integer; const AInteger: Integer);
    function  IdTransacaoCartao_Specified(Index: Integer): boolean;
  published
    property IdTransacaoCartao: Integer  Index (IS_OPTN) read GetIdTransacaoCartao write SetIdTransacaoCartao stored IdTransacaoCartao_Specified;
  end;



  // ************************************************************************ //
  // XML       : CancelamentoSolicitacaoPagamentoCombustivelAvulsoCartaoRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  CancelamentoSolicitacaoPagamentoCombustivelAvulsoCartaoRequest = class(CancelamentoSolicitacaoPagamentoCombustivelAvulsoCartaoRequest2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : CancelamentoSolicitacaoPagamentoCombustivelAvulsoCartaoResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  CancelamentoSolicitacaoPagamentoCombustivelAvulsoCartaoResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FIdTransacaoCartao: Integer;
    FIdTransacaoCartao_Specified: boolean;
    FMensagemRetorno: string;
    FMensagemRetorno_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetIdTransacaoCartao(Index: Integer): Integer;
    procedure SetIdTransacaoCartao(Index: Integer; const AInteger: Integer);
    function  IdTransacaoCartao_Specified(Index: Integer): boolean;
    function  GetMensagemRetorno(Index: Integer): string;
    procedure SetMensagemRetorno(Index: Integer; const Astring: string);
    function  MensagemRetorno_Specified(Index: Integer): boolean;
  published
    property Erro:              ErroResponse2  Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property IdTransacaoCartao: Integer        Index (IS_OPTN) read GetIdTransacaoCartao write SetIdTransacaoCartao stored IdTransacaoCartao_Specified;
    property MensagemRetorno:   string         Index (IS_OPTN or IS_NLBL) read GetMensagemRetorno write SetMensagemRetorno stored MensagemRetorno_Specified;
  end;



  // ************************************************************************ //
  // XML       : CancelamentoSolicitacaoPagamentoCombustivelAvulsoCartaoResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  CancelamentoSolicitacaoPagamentoCombustivelAvulsoCartaoResponse = class(CancelamentoSolicitacaoPagamentoCombustivelAvulsoCartaoResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : BuscaTerminaisCarregamentoAutorizadosResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  BuscaTerminaisCarregamentoAutorizadosResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FTerminaisCarregamento: ArrayOfTerminalCarregamentoResponse;
    FTerminaisCarregamento_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetTerminaisCarregamento(Index: Integer): ArrayOfTerminalCarregamentoResponse;
    procedure SetTerminaisCarregamento(Index: Integer; const AArrayOfTerminalCarregamentoResponse: ArrayOfTerminalCarregamentoResponse);
    function  TerminaisCarregamento_Specified(Index: Integer): boolean;
  published
    property Erro:                  ErroResponse2                        Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property TerminaisCarregamento: ArrayOfTerminalCarregamentoResponse  Index (IS_OPTN or IS_NLBL) read GetTerminaisCarregamento write SetTerminaisCarregamento stored TerminaisCarregamento_Specified;
  end;



  // ************************************************************************ //
  // XML       : BuscaTerminaisCarregamentoAutorizadosResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  BuscaTerminaisCarregamentoAutorizadosResponse = class(BuscaTerminaisCarregamentoAutorizadosResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : CadastroRoteiroCustomizadoResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  CadastroRoteiroCustomizadoResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FIdRoteiro: Integer;
    FIdRoteiro_Specified: boolean;
    FNomeRoteiro: string;
    FNomeRoteiro_Specified: boolean;
    FOrigem: string;
    FOrigem_Specified: boolean;
    FDestino: string;
    FDestino_Specified: boolean;
    FDistancia: TXSDecimal;
    FDistancia_Specified: boolean;
    FCustoPedagioTotal: TXSDecimal;
    FCustoPedagioTotal_Specified: boolean;
    FCustoTotalRota: TXSDecimal;
    FCustoTotalRota_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetIdRoteiro(Index: Integer): Integer;
    procedure SetIdRoteiro(Index: Integer; const AInteger: Integer);
    function  IdRoteiro_Specified(Index: Integer): boolean;
    function  GetNomeRoteiro(Index: Integer): string;
    procedure SetNomeRoteiro(Index: Integer; const Astring: string);
    function  NomeRoteiro_Specified(Index: Integer): boolean;
    function  GetOrigem(Index: Integer): string;
    procedure SetOrigem(Index: Integer; const Astring: string);
    function  Origem_Specified(Index: Integer): boolean;
    function  GetDestino(Index: Integer): string;
    procedure SetDestino(Index: Integer; const Astring: string);
    function  Destino_Specified(Index: Integer): boolean;
    function  GetDistancia(Index: Integer): TXSDecimal;
    procedure SetDistancia(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  Distancia_Specified(Index: Integer): boolean;
    function  GetCustoPedagioTotal(Index: Integer): TXSDecimal;
    procedure SetCustoPedagioTotal(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  CustoPedagioTotal_Specified(Index: Integer): boolean;
    function  GetCustoTotalRota(Index: Integer): TXSDecimal;
    procedure SetCustoTotalRota(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  CustoTotalRota_Specified(Index: Integer): boolean;
  published
    property Erro:              ErroResponse2  Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property IdRoteiro:         Integer        Index (IS_OPTN) read GetIdRoteiro write SetIdRoteiro stored IdRoteiro_Specified;
    property NomeRoteiro:       string         Index (IS_OPTN or IS_NLBL) read GetNomeRoteiro write SetNomeRoteiro stored NomeRoteiro_Specified;
    property Origem:            string         Index (IS_OPTN or IS_NLBL) read GetOrigem write SetOrigem stored Origem_Specified;
    property Destino:           string         Index (IS_OPTN or IS_NLBL) read GetDestino write SetDestino stored Destino_Specified;
    property Distancia:         TXSDecimal     Index (IS_OPTN) read GetDistancia write SetDistancia stored Distancia_Specified;
    property CustoPedagioTotal: TXSDecimal     Index (IS_OPTN) read GetCustoPedagioTotal write SetCustoPedagioTotal stored CustoPedagioTotal_Specified;
    property CustoTotalRota:    TXSDecimal     Index (IS_OPTN or IS_NLBL) read GetCustoTotalRota write SetCustoTotalRota stored CustoTotalRota_Specified;
  end;



  // ************************************************************************ //
  // XML       : CadastroRoteiroCustomizadoResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  CadastroRoteiroCustomizadoResponse = class(CadastroRoteiroCustomizadoResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ConsultaSituacaoEmpresaTransportadorAnttRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ConsultaSituacaoEmpresaTransportadorAnttRequest2 = class(TRemotable)
  private
    FCPFCNPJ: string;
    FCPFCNPJ_Specified: boolean;
    FRNTRC: string;
    FRNTRC_Specified: boolean;
    FNomeRazaoSocialTransportador: string;
    FNomeRazaoSocialTransportador_Specified: boolean;
    FTelefoneContatoTransportador: string;
    FTelefoneContatoTransportador_Specified: boolean;
    FEmailTransportador: string;
    FEmailTransportador_Specified: boolean;
    FTipoTransportador: Integer;
    FTipoTransportador_Specified: boolean;
    function  GetCPFCNPJ(Index: Integer): string;
    procedure SetCPFCNPJ(Index: Integer; const Astring: string);
    function  CPFCNPJ_Specified(Index: Integer): boolean;
    function  GetRNTRC(Index: Integer): string;
    procedure SetRNTRC(Index: Integer; const Astring: string);
    function  RNTRC_Specified(Index: Integer): boolean;
    function  GetNomeRazaoSocialTransportador(Index: Integer): string;
    procedure SetNomeRazaoSocialTransportador(Index: Integer; const Astring: string);
    function  NomeRazaoSocialTransportador_Specified(Index: Integer): boolean;
    function  GetTelefoneContatoTransportador(Index: Integer): string;
    procedure SetTelefoneContatoTransportador(Index: Integer; const Astring: string);
    function  TelefoneContatoTransportador_Specified(Index: Integer): boolean;
    function  GetEmailTransportador(Index: Integer): string;
    procedure SetEmailTransportador(Index: Integer; const Astring: string);
    function  EmailTransportador_Specified(Index: Integer): boolean;
    function  GetTipoTransportador(Index: Integer): Integer;
    procedure SetTipoTransportador(Index: Integer; const AInteger: Integer);
    function  TipoTransportador_Specified(Index: Integer): boolean;
  published
    property CPFCNPJ:                      string   Index (IS_OPTN or IS_NLBL) read GetCPFCNPJ write SetCPFCNPJ stored CPFCNPJ_Specified;
    property RNTRC:                        string   Index (IS_OPTN or IS_NLBL) read GetRNTRC write SetRNTRC stored RNTRC_Specified;
    property NomeRazaoSocialTransportador: string   Index (IS_OPTN or IS_NLBL) read GetNomeRazaoSocialTransportador write SetNomeRazaoSocialTransportador stored NomeRazaoSocialTransportador_Specified;
    property TelefoneContatoTransportador: string   Index (IS_OPTN or IS_NLBL) read GetTelefoneContatoTransportador write SetTelefoneContatoTransportador stored TelefoneContatoTransportador_Specified;
    property EmailTransportador:           string   Index (IS_OPTN or IS_NLBL) read GetEmailTransportador write SetEmailTransportador stored EmailTransportador_Specified;
    property TipoTransportador:            Integer  Index (IS_OPTN) read GetTipoTransportador write SetTipoTransportador stored TipoTransportador_Specified;
  end;



  // ************************************************************************ //
  // XML       : ConsultaSituacaoEmpresaTransportadorAnttRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ConsultaSituacaoEmpresaTransportadorAnttRequest = class(ConsultaSituacaoEmpresaTransportadorAnttRequest2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : CadastroRoteiroCustomizadoRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  CadastroRoteiroCustomizadoRequest2 = class(TRemotable)
  private
    FNomeRoteiro: string;
    FNomeRoteiro_Specified: boolean;
    FCategoriaVeiculo: Integer;
    FCategoriaVeiculo_Specified: boolean;
    FCodigoIBGEMunicipioOrigem: Integer;
    FCodigoIBGEMunicipioOrigem_Specified: boolean;
    FIdsPracas: ArrayOfint;
    FIdsPracas_Specified: boolean;
    FCodigoIBGEMunicipioDestino: Integer;
    FCodigoIBGEMunicipioDestino_Specified: boolean;
    FRotaOtimizada: Boolean;
    FRotaOtimizada_Specified: boolean;
    function  GetNomeRoteiro(Index: Integer): string;
    procedure SetNomeRoteiro(Index: Integer; const Astring: string);
    function  NomeRoteiro_Specified(Index: Integer): boolean;
    function  GetCategoriaVeiculo(Index: Integer): Integer;
    procedure SetCategoriaVeiculo(Index: Integer; const AInteger: Integer);
    function  CategoriaVeiculo_Specified(Index: Integer): boolean;
    function  GetCodigoIBGEMunicipioOrigem(Index: Integer): Integer;
    procedure SetCodigoIBGEMunicipioOrigem(Index: Integer; const AInteger: Integer);
    function  CodigoIBGEMunicipioOrigem_Specified(Index: Integer): boolean;
    function  GetIdsPracas(Index: Integer): ArrayOfint;
    procedure SetIdsPracas(Index: Integer; const AArrayOfint: ArrayOfint);
    function  IdsPracas_Specified(Index: Integer): boolean;
    function  GetCodigoIBGEMunicipioDestino(Index: Integer): Integer;
    procedure SetCodigoIBGEMunicipioDestino(Index: Integer; const AInteger: Integer);
    function  CodigoIBGEMunicipioDestino_Specified(Index: Integer): boolean;
    function  GetRotaOtimizada(Index: Integer): Boolean;
    procedure SetRotaOtimizada(Index: Integer; const ABoolean: Boolean);
    function  RotaOtimizada_Specified(Index: Integer): boolean;
  published
    property NomeRoteiro:                string      Index (IS_OPTN or IS_NLBL) read GetNomeRoteiro write SetNomeRoteiro stored NomeRoteiro_Specified;
    property CategoriaVeiculo:           Integer     Index (IS_OPTN) read GetCategoriaVeiculo write SetCategoriaVeiculo stored CategoriaVeiculo_Specified;
    property CodigoIBGEMunicipioOrigem:  Integer     Index (IS_OPTN) read GetCodigoIBGEMunicipioOrigem write SetCodigoIBGEMunicipioOrigem stored CodigoIBGEMunicipioOrigem_Specified;
    property IdsPracas:                  ArrayOfint  Index (IS_OPTN or IS_NLBL) read GetIdsPracas write SetIdsPracas stored IdsPracas_Specified;
    property CodigoIBGEMunicipioDestino: Integer     Index (IS_OPTN) read GetCodigoIBGEMunicipioDestino write SetCodigoIBGEMunicipioDestino stored CodigoIBGEMunicipioDestino_Specified;
    property RotaOtimizada:              Boolean     Index (IS_OPTN or IS_NLBL) read GetRotaOtimizada write SetRotaOtimizada stored RotaOtimizada_Specified;
  end;



  // ************************************************************************ //
  // XML       : CadastroRoteiroCustomizadoRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  CadastroRoteiroCustomizadoRequest = class(CadastroRoteiroCustomizadoRequest2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ConsultaSituacaoTransportadorAnttRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ConsultaSituacaoTransportadorAnttRequest2 = class(TRemotable)
  private
    FCPFCNPJ: string;
    FCPFCNPJ_Specified: boolean;
    FRNTRC: string;
    FRNTRC_Specified: boolean;
    FPlaca: string;
    FPlaca_Specified: boolean;
    function  GetCPFCNPJ(Index: Integer): string;
    procedure SetCPFCNPJ(Index: Integer; const Astring: string);
    function  CPFCNPJ_Specified(Index: Integer): boolean;
    function  GetRNTRC(Index: Integer): string;
    procedure SetRNTRC(Index: Integer; const Astring: string);
    function  RNTRC_Specified(Index: Integer): boolean;
    function  GetPlaca(Index: Integer): string;
    procedure SetPlaca(Index: Integer; const Astring: string);
    function  Placa_Specified(Index: Integer): boolean;
  published
    property CPFCNPJ: string  Index (IS_OPTN or IS_NLBL) read GetCPFCNPJ write SetCPFCNPJ stored CPFCNPJ_Specified;
    property RNTRC:   string  Index (IS_OPTN or IS_NLBL) read GetRNTRC write SetRNTRC stored RNTRC_Specified;
    property Placa:   string  Index (IS_OPTN or IS_NLBL) read GetPlaca write SetPlaca stored Placa_Specified;
  end;



  // ************************************************************************ //
  // XML       : ConsultaSituacaoTransportadorAnttRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ConsultaSituacaoTransportadorAnttRequest = class(ConsultaSituacaoTransportadorAnttRequest2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ConsultaSituacaoTransportadorAnttResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ConsultaSituacaoTransportadorAnttResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FCPFCNPJTransportador: string;
    FCPFCNPJTransportador_Specified: boolean;
    FDataValidadeRNTRC: TXSDateTime;
    FDataValidadeRNTRC_Specified: boolean;
    FEquiparadoTAC: Boolean;
    FEquiparadoTAC_Specified: boolean;
    FNomeRazaoSocialTransportador: string;
    FNomeRazaoSocialTransportador_Specified: boolean;
    FRNTRCAtivo: Boolean;
    FRNTRCAtivo_Specified: boolean;
    FRNTRCTransportador: string;
    FRNTRCTransportador_Specified: boolean;
    FTipoTransportador: TipoTransportador;
    FTipoTransportador_Specified: boolean;
    FMensagemRetorno: string;
    FMensagemRetorno_Specified: boolean;
    FDispensadoPelaANTT: Boolean;
    FDispensadoPelaANTT_Specified: boolean;
    FPlacaInformadaConsulta: string;
    FPlacaInformadaConsulta_Specified: boolean;
    FPlacaHabilitadaTransportadorANTT: Boolean;
    FPlacaHabilitadaTransportadorANTT_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetCPFCNPJTransportador(Index: Integer): string;
    procedure SetCPFCNPJTransportador(Index: Integer; const Astring: string);
    function  CPFCNPJTransportador_Specified(Index: Integer): boolean;
    function  GetDataValidadeRNTRC(Index: Integer): TXSDateTime;
    procedure SetDataValidadeRNTRC(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DataValidadeRNTRC_Specified(Index: Integer): boolean;
    function  GetEquiparadoTAC(Index: Integer): Boolean;
    procedure SetEquiparadoTAC(Index: Integer; const ABoolean: Boolean);
    function  EquiparadoTAC_Specified(Index: Integer): boolean;
    function  GetNomeRazaoSocialTransportador(Index: Integer): string;
    procedure SetNomeRazaoSocialTransportador(Index: Integer; const Astring: string);
    function  NomeRazaoSocialTransportador_Specified(Index: Integer): boolean;
    function  GetRNTRCAtivo(Index: Integer): Boolean;
    procedure SetRNTRCAtivo(Index: Integer; const ABoolean: Boolean);
    function  RNTRCAtivo_Specified(Index: Integer): boolean;
    function  GetRNTRCTransportador(Index: Integer): string;
    procedure SetRNTRCTransportador(Index: Integer; const Astring: string);
    function  RNTRCTransportador_Specified(Index: Integer): boolean;
    function  GetTipoTransportador(Index: Integer): TipoTransportador;
    procedure SetTipoTransportador(Index: Integer; const ATipoTransportador: TipoTransportador);
    function  TipoTransportador_Specified(Index: Integer): boolean;
    function  GetMensagemRetorno(Index: Integer): string;
    procedure SetMensagemRetorno(Index: Integer; const Astring: string);
    function  MensagemRetorno_Specified(Index: Integer): boolean;
    function  GetDispensadoPelaANTT(Index: Integer): Boolean;
    procedure SetDispensadoPelaANTT(Index: Integer; const ABoolean: Boolean);
    function  DispensadoPelaANTT_Specified(Index: Integer): boolean;
    function  GetPlacaInformadaConsulta(Index: Integer): string;
    procedure SetPlacaInformadaConsulta(Index: Integer; const Astring: string);
    function  PlacaInformadaConsulta_Specified(Index: Integer): boolean;
    function  GetPlacaHabilitadaTransportadorANTT(Index: Integer): Boolean;
    procedure SetPlacaHabilitadaTransportadorANTT(Index: Integer; const ABoolean: Boolean);
    function  PlacaHabilitadaTransportadorANTT_Specified(Index: Integer): boolean;
  published
    property Erro:                             ErroResponse2      Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property CPFCNPJTransportador:             string             Index (IS_OPTN or IS_NLBL) read GetCPFCNPJTransportador write SetCPFCNPJTransportador stored CPFCNPJTransportador_Specified;
    property DataValidadeRNTRC:                TXSDateTime        Index (IS_OPTN) read GetDataValidadeRNTRC write SetDataValidadeRNTRC stored DataValidadeRNTRC_Specified;
    property EquiparadoTAC:                    Boolean            Index (IS_OPTN) read GetEquiparadoTAC write SetEquiparadoTAC stored EquiparadoTAC_Specified;
    property NomeRazaoSocialTransportador:     string             Index (IS_OPTN or IS_NLBL) read GetNomeRazaoSocialTransportador write SetNomeRazaoSocialTransportador stored NomeRazaoSocialTransportador_Specified;
    property RNTRCAtivo:                       Boolean            Index (IS_OPTN) read GetRNTRCAtivo write SetRNTRCAtivo stored RNTRCAtivo_Specified;
    property RNTRCTransportador:               string             Index (IS_OPTN or IS_NLBL) read GetRNTRCTransportador write SetRNTRCTransportador stored RNTRCTransportador_Specified;
    property TipoTransportador:                TipoTransportador  Index (IS_OPTN) read GetTipoTransportador write SetTipoTransportador stored TipoTransportador_Specified;
    property MensagemRetorno:                  string             Index (IS_OPTN or IS_NLBL) read GetMensagemRetorno write SetMensagemRetorno stored MensagemRetorno_Specified;
    property DispensadoPelaANTT:               Boolean            Index (IS_OPTN) read GetDispensadoPelaANTT write SetDispensadoPelaANTT stored DispensadoPelaANTT_Specified;
    property PlacaInformadaConsulta:           string             Index (IS_OPTN or IS_NLBL) read GetPlacaInformadaConsulta write SetPlacaInformadaConsulta stored PlacaInformadaConsulta_Specified;
    property PlacaHabilitadaTransportadorANTT: Boolean            Index (IS_OPTN or IS_NLBL) read GetPlacaHabilitadaTransportadorANTT write SetPlacaHabilitadaTransportadorANTT stored PlacaHabilitadaTransportadorANTT_Specified;
  end;



  // ************************************************************************ //
  // XML       : ConsultaSituacaoTransportadorAnttResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ConsultaSituacaoTransportadorAnttResponse = class(ConsultaSituacaoTransportadorAnttResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : ConsultaSituacaoEmpresaTransportadorAnttResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ConsultaSituacaoEmpresaTransportadorAnttResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FCPFCNPJTransportador: string;
    FCPFCNPJTransportador_Specified: boolean;
    FDataValidadeRNTRC: TXSDateTime;
    FDataValidadeRNTRC_Specified: boolean;
    FEquiparadoTAC: Boolean;
    FEquiparadoTAC_Specified: boolean;
    FNomeRazaoSocialTransportador: string;
    FNomeRazaoSocialTransportador_Specified: boolean;
    FRNTRCAtivo: Boolean;
    FRNTRCAtivo_Specified: boolean;
    FRNTRCTransportador: string;
    FRNTRCTransportador_Specified: boolean;
    FTipoTransportador: TipoTransportador;
    FTipoTransportador_Specified: boolean;
    FMensagemRetorno: string;
    FMensagemRetorno_Specified: boolean;
    FDispensadoPelaANTT: Boolean;
    FDispensadoPelaANTT_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetCPFCNPJTransportador(Index: Integer): string;
    procedure SetCPFCNPJTransportador(Index: Integer; const Astring: string);
    function  CPFCNPJTransportador_Specified(Index: Integer): boolean;
    function  GetDataValidadeRNTRC(Index: Integer): TXSDateTime;
    procedure SetDataValidadeRNTRC(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DataValidadeRNTRC_Specified(Index: Integer): boolean;
    function  GetEquiparadoTAC(Index: Integer): Boolean;
    procedure SetEquiparadoTAC(Index: Integer; const ABoolean: Boolean);
    function  EquiparadoTAC_Specified(Index: Integer): boolean;
    function  GetNomeRazaoSocialTransportador(Index: Integer): string;
    procedure SetNomeRazaoSocialTransportador(Index: Integer; const Astring: string);
    function  NomeRazaoSocialTransportador_Specified(Index: Integer): boolean;
    function  GetRNTRCAtivo(Index: Integer): Boolean;
    procedure SetRNTRCAtivo(Index: Integer; const ABoolean: Boolean);
    function  RNTRCAtivo_Specified(Index: Integer): boolean;
    function  GetRNTRCTransportador(Index: Integer): string;
    procedure SetRNTRCTransportador(Index: Integer; const Astring: string);
    function  RNTRCTransportador_Specified(Index: Integer): boolean;
    function  GetTipoTransportador(Index: Integer): TipoTransportador;
    procedure SetTipoTransportador(Index: Integer; const ATipoTransportador: TipoTransportador);
    function  TipoTransportador_Specified(Index: Integer): boolean;
    function  GetMensagemRetorno(Index: Integer): string;
    procedure SetMensagemRetorno(Index: Integer; const Astring: string);
    function  MensagemRetorno_Specified(Index: Integer): boolean;
    function  GetDispensadoPelaANTT(Index: Integer): Boolean;
    procedure SetDispensadoPelaANTT(Index: Integer; const ABoolean: Boolean);
    function  DispensadoPelaANTT_Specified(Index: Integer): boolean;
  published
    property Erro:                         ErroResponse2      Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property CPFCNPJTransportador:         string             Index (IS_OPTN or IS_NLBL) read GetCPFCNPJTransportador write SetCPFCNPJTransportador stored CPFCNPJTransportador_Specified;
    property DataValidadeRNTRC:            TXSDateTime        Index (IS_OPTN) read GetDataValidadeRNTRC write SetDataValidadeRNTRC stored DataValidadeRNTRC_Specified;
    property EquiparadoTAC:                Boolean            Index (IS_OPTN) read GetEquiparadoTAC write SetEquiparadoTAC stored EquiparadoTAC_Specified;
    property NomeRazaoSocialTransportador: string             Index (IS_OPTN or IS_NLBL) read GetNomeRazaoSocialTransportador write SetNomeRazaoSocialTransportador stored NomeRazaoSocialTransportador_Specified;
    property RNTRCAtivo:                   Boolean            Index (IS_OPTN) read GetRNTRCAtivo write SetRNTRCAtivo stored RNTRCAtivo_Specified;
    property RNTRCTransportador:           string             Index (IS_OPTN or IS_NLBL) read GetRNTRCTransportador write SetRNTRCTransportador stored RNTRCTransportador_Specified;
    property TipoTransportador:            TipoTransportador  Index (IS_OPTN) read GetTipoTransportador write SetTipoTransportador stored TipoTransportador_Specified;
    property MensagemRetorno:              string             Index (IS_OPTN or IS_NLBL) read GetMensagemRetorno write SetMensagemRetorno stored MensagemRetorno_Specified;
    property DispensadoPelaANTT:           Boolean            Index (IS_OPTN) read GetDispensadoPelaANTT write SetDispensadoPelaANTT stored DispensadoPelaANTT_Specified;
  end;



  // ************************************************************************ //
  // XML       : ConsultaSituacaoEmpresaTransportadorAnttResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ConsultaSituacaoEmpresaTransportadorAnttResponse = class(ConsultaSituacaoEmpresaTransportadorAnttResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : CadastroAtualizacaoDadosItemReguaImpostoRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  CadastroAtualizacaoDadosItemReguaImpostoRequest2 = class(TRemotable)
  private
    FInstrucao: Integer;
    FInstrucao_Specified: boolean;
    FIdReguaImpostos: Integer;
    FIdReguaImpostos_Specified: boolean;
    FAnoVigencia: Integer;
    FAnoVigencia_Specified: boolean;
    FDataVigencia: TXSDateTime;
    FDataVigencia_Specified: boolean;
    FTipoImposto: Integer;
    FTipoImposto_Specified: boolean;
    FBaseCalculoMinima: TXSDecimal;
    FBaseCalculoMinima_Specified: boolean;
    FBaseCalculoMaxima: TXSDecimal;
    FBaseCalculoMaxima_Specified: boolean;
    FAliquota: TXSDecimal;
    FAliquota_Specified: boolean;
    FValorDeducao: TXSDecimal;
    FValorDeducao_Specified: boolean;
    FBaseIncidencia: TXSDecimal;
    FBaseIncidencia_Specified: boolean;
    FAtivo: Boolean;
    FAtivo_Specified: boolean;
    FOrdemFaixa: Integer;
    FOrdemFaixa_Specified: boolean;
    FCodigoIBGEMunicipioISS: Integer;
    FCodigoIBGEMunicipioISS_Specified: boolean;
    function  GetInstrucao(Index: Integer): Integer;
    procedure SetInstrucao(Index: Integer; const AInteger: Integer);
    function  Instrucao_Specified(Index: Integer): boolean;
    function  GetIdReguaImpostos(Index: Integer): Integer;
    procedure SetIdReguaImpostos(Index: Integer; const AInteger: Integer);
    function  IdReguaImpostos_Specified(Index: Integer): boolean;
    function  GetAnoVigencia(Index: Integer): Integer;
    procedure SetAnoVigencia(Index: Integer; const AInteger: Integer);
    function  AnoVigencia_Specified(Index: Integer): boolean;
    function  GetDataVigencia(Index: Integer): TXSDateTime;
    procedure SetDataVigencia(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DataVigencia_Specified(Index: Integer): boolean;
    function  GetTipoImposto(Index: Integer): Integer;
    procedure SetTipoImposto(Index: Integer; const AInteger: Integer);
    function  TipoImposto_Specified(Index: Integer): boolean;
    function  GetBaseCalculoMinima(Index: Integer): TXSDecimal;
    procedure SetBaseCalculoMinima(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  BaseCalculoMinima_Specified(Index: Integer): boolean;
    function  GetBaseCalculoMaxima(Index: Integer): TXSDecimal;
    procedure SetBaseCalculoMaxima(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  BaseCalculoMaxima_Specified(Index: Integer): boolean;
    function  GetAliquota(Index: Integer): TXSDecimal;
    procedure SetAliquota(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  Aliquota_Specified(Index: Integer): boolean;
    function  GetValorDeducao(Index: Integer): TXSDecimal;
    procedure SetValorDeducao(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorDeducao_Specified(Index: Integer): boolean;
    function  GetBaseIncidencia(Index: Integer): TXSDecimal;
    procedure SetBaseIncidencia(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  BaseIncidencia_Specified(Index: Integer): boolean;
    function  GetAtivo(Index: Integer): Boolean;
    procedure SetAtivo(Index: Integer; const ABoolean: Boolean);
    function  Ativo_Specified(Index: Integer): boolean;
    function  GetOrdemFaixa(Index: Integer): Integer;
    procedure SetOrdemFaixa(Index: Integer; const AInteger: Integer);
    function  OrdemFaixa_Specified(Index: Integer): boolean;
    function  GetCodigoIBGEMunicipioISS(Index: Integer): Integer;
    procedure SetCodigoIBGEMunicipioISS(Index: Integer; const AInteger: Integer);
    function  CodigoIBGEMunicipioISS_Specified(Index: Integer): boolean;
  published
    property Instrucao:              Integer      Index (IS_OPTN) read GetInstrucao write SetInstrucao stored Instrucao_Specified;
    property IdReguaImpostos:        Integer      Index (IS_OPTN or IS_NLBL) read GetIdReguaImpostos write SetIdReguaImpostos stored IdReguaImpostos_Specified;
    property AnoVigencia:            Integer      Index (IS_OPTN) read GetAnoVigencia write SetAnoVigencia stored AnoVigencia_Specified;
    property DataVigencia:           TXSDateTime  Index (IS_OPTN) read GetDataVigencia write SetDataVigencia stored DataVigencia_Specified;
    property TipoImposto:            Integer      Index (IS_OPTN) read GetTipoImposto write SetTipoImposto stored TipoImposto_Specified;
    property BaseCalculoMinima:      TXSDecimal   Index (IS_OPTN) read GetBaseCalculoMinima write SetBaseCalculoMinima stored BaseCalculoMinima_Specified;
    property BaseCalculoMaxima:      TXSDecimal   Index (IS_OPTN) read GetBaseCalculoMaxima write SetBaseCalculoMaxima stored BaseCalculoMaxima_Specified;
    property Aliquota:               TXSDecimal   Index (IS_OPTN) read GetAliquota write SetAliquota stored Aliquota_Specified;
    property ValorDeducao:           TXSDecimal   Index (IS_OPTN) read GetValorDeducao write SetValorDeducao stored ValorDeducao_Specified;
    property BaseIncidencia:         TXSDecimal   Index (IS_OPTN) read GetBaseIncidencia write SetBaseIncidencia stored BaseIncidencia_Specified;
    property Ativo:                  Boolean      Index (IS_OPTN) read GetAtivo write SetAtivo stored Ativo_Specified;
    property OrdemFaixa:             Integer      Index (IS_OPTN) read GetOrdemFaixa write SetOrdemFaixa stored OrdemFaixa_Specified;
    property CodigoIBGEMunicipioISS: Integer      Index (IS_OPTN or IS_NLBL) read GetCodigoIBGEMunicipioISS write SetCodigoIBGEMunicipioISS stored CodigoIBGEMunicipioISS_Specified;
  end;



  // ************************************************************************ //
  // XML       : CadastroAtualizacaoDadosItemReguaImpostoRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  CadastroAtualizacaoDadosItemReguaImpostoRequest = class(CadastroAtualizacaoDadosItemReguaImpostoRequest2)
  private
  published
  end;

  ArrayOfBuscaItemReguaImpostoResponse = array of BuscaItemReguaImpostoResponse2;   { "http://tmsfrete.v2.targetmp.com.br"[GblCplx] }


  // ************************************************************************ //
  // XML       : ResultadoPaginadoBuscaItemReguaImpostoResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ResultadoPaginadoBuscaItemReguaImpostoResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FItens: ArrayOfBuscaItemReguaImpostoResponse;
    FItens_Specified: boolean;
    FNumeroPagina: Integer;
    FNumeroPagina_Specified: boolean;
    FQuantidadeItensPorPagina: Integer;
    FQuantidadeItensPorPagina_Specified: boolean;
    FQuantidadeTotalItens: Integer;
    FQuantidadeTotalItens_Specified: boolean;
    FQuantidadeTotalPaginas: Integer;
    FQuantidadeTotalPaginas_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetItens(Index: Integer): ArrayOfBuscaItemReguaImpostoResponse;
    procedure SetItens(Index: Integer; const AArrayOfBuscaItemReguaImpostoResponse: ArrayOfBuscaItemReguaImpostoResponse);
    function  Itens_Specified(Index: Integer): boolean;
    function  GetNumeroPagina(Index: Integer): Integer;
    procedure SetNumeroPagina(Index: Integer; const AInteger: Integer);
    function  NumeroPagina_Specified(Index: Integer): boolean;
    function  GetQuantidadeItensPorPagina(Index: Integer): Integer;
    procedure SetQuantidadeItensPorPagina(Index: Integer; const AInteger: Integer);
    function  QuantidadeItensPorPagina_Specified(Index: Integer): boolean;
    function  GetQuantidadeTotalItens(Index: Integer): Integer;
    procedure SetQuantidadeTotalItens(Index: Integer; const AInteger: Integer);
    function  QuantidadeTotalItens_Specified(Index: Integer): boolean;
    function  GetQuantidadeTotalPaginas(Index: Integer): Integer;
    procedure SetQuantidadeTotalPaginas(Index: Integer; const AInteger: Integer);
    function  QuantidadeTotalPaginas_Specified(Index: Integer): boolean;
  published
    property Erro:                     ErroResponse2                         Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property Itens:                    ArrayOfBuscaItemReguaImpostoResponse  Index (IS_OPTN or IS_NLBL) read GetItens write SetItens stored Itens_Specified;
    property NumeroPagina:             Integer                               Index (IS_OPTN) read GetNumeroPagina write SetNumeroPagina stored NumeroPagina_Specified;
    property QuantidadeItensPorPagina: Integer                               Index (IS_OPTN) read GetQuantidadeItensPorPagina write SetQuantidadeItensPorPagina stored QuantidadeItensPorPagina_Specified;
    property QuantidadeTotalItens:     Integer                               Index (IS_OPTN) read GetQuantidadeTotalItens write SetQuantidadeTotalItens stored QuantidadeTotalItens_Specified;
    property QuantidadeTotalPaginas:   Integer                               Index (IS_OPTN) read GetQuantidadeTotalPaginas write SetQuantidadeTotalPaginas stored QuantidadeTotalPaginas_Specified;
  end;



  // ************************************************************************ //
  // XML       : ResultadoPaginadoBuscaItemReguaImpostoResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  ResultadoPaginadoBuscaItemReguaImpostoResponse = class(ResultadoPaginadoBuscaItemReguaImpostoResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : BuscaItemReguaImpostoResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  BuscaItemReguaImpostoResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FIdReguaImpostos: Integer;
    FIdReguaImpostos_Specified: boolean;
    FAnoVigencia: Integer;
    FAnoVigencia_Specified: boolean;
    FDataVigencia: TXSDateTime;
    FDataVigencia_Specified: boolean;
    FTipoImposto: string;
    FTipoImposto_Specified: boolean;
    FBaseCalculoMinima: TXSDecimal;
    FBaseCalculoMinima_Specified: boolean;
    FBaseCalculoMaxima: TXSDecimal;
    FBaseCalculoMaxima_Specified: boolean;
    FAliquota: TXSDecimal;
    FAliquota_Specified: boolean;
    FValorDeducao: TXSDecimal;
    FValorDeducao_Specified: boolean;
    FBaseIncidencia: TXSDecimal;
    FBaseIncidencia_Specified: boolean;
    FAtivo: Boolean;
    FAtivo_Specified: boolean;
    FOrdemFaixa: Integer;
    FOrdemFaixa_Specified: boolean;
    FCodigoIBGEMunicipioISS: Integer;
    FCodigoIBGEMunicipioISS_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetIdReguaImpostos(Index: Integer): Integer;
    procedure SetIdReguaImpostos(Index: Integer; const AInteger: Integer);
    function  IdReguaImpostos_Specified(Index: Integer): boolean;
    function  GetAnoVigencia(Index: Integer): Integer;
    procedure SetAnoVigencia(Index: Integer; const AInteger: Integer);
    function  AnoVigencia_Specified(Index: Integer): boolean;
    function  GetDataVigencia(Index: Integer): TXSDateTime;
    procedure SetDataVigencia(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DataVigencia_Specified(Index: Integer): boolean;
    function  GetTipoImposto(Index: Integer): string;
    procedure SetTipoImposto(Index: Integer; const Astring: string);
    function  TipoImposto_Specified(Index: Integer): boolean;
    function  GetBaseCalculoMinima(Index: Integer): TXSDecimal;
    procedure SetBaseCalculoMinima(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  BaseCalculoMinima_Specified(Index: Integer): boolean;
    function  GetBaseCalculoMaxima(Index: Integer): TXSDecimal;
    procedure SetBaseCalculoMaxima(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  BaseCalculoMaxima_Specified(Index: Integer): boolean;
    function  GetAliquota(Index: Integer): TXSDecimal;
    procedure SetAliquota(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  Aliquota_Specified(Index: Integer): boolean;
    function  GetValorDeducao(Index: Integer): TXSDecimal;
    procedure SetValorDeducao(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorDeducao_Specified(Index: Integer): boolean;
    function  GetBaseIncidencia(Index: Integer): TXSDecimal;
    procedure SetBaseIncidencia(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  BaseIncidencia_Specified(Index: Integer): boolean;
    function  GetAtivo(Index: Integer): Boolean;
    procedure SetAtivo(Index: Integer; const ABoolean: Boolean);
    function  Ativo_Specified(Index: Integer): boolean;
    function  GetOrdemFaixa(Index: Integer): Integer;
    procedure SetOrdemFaixa(Index: Integer; const AInteger: Integer);
    function  OrdemFaixa_Specified(Index: Integer): boolean;
    function  GetCodigoIBGEMunicipioISS(Index: Integer): Integer;
    procedure SetCodigoIBGEMunicipioISS(Index: Integer; const AInteger: Integer);
    function  CodigoIBGEMunicipioISS_Specified(Index: Integer): boolean;
  published
    property Erro:                   ErroResponse2  Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property IdReguaImpostos:        Integer        Index (IS_OPTN) read GetIdReguaImpostos write SetIdReguaImpostos stored IdReguaImpostos_Specified;
    property AnoVigencia:            Integer        Index (IS_OPTN) read GetAnoVigencia write SetAnoVigencia stored AnoVigencia_Specified;
    property DataVigencia:           TXSDateTime    Index (IS_OPTN) read GetDataVigencia write SetDataVigencia stored DataVigencia_Specified;
    property TipoImposto:            string         Index (IS_OPTN or IS_NLBL) read GetTipoImposto write SetTipoImposto stored TipoImposto_Specified;
    property BaseCalculoMinima:      TXSDecimal     Index (IS_OPTN) read GetBaseCalculoMinima write SetBaseCalculoMinima stored BaseCalculoMinima_Specified;
    property BaseCalculoMaxima:      TXSDecimal     Index (IS_OPTN) read GetBaseCalculoMaxima write SetBaseCalculoMaxima stored BaseCalculoMaxima_Specified;
    property Aliquota:               TXSDecimal     Index (IS_OPTN) read GetAliquota write SetAliquota stored Aliquota_Specified;
    property ValorDeducao:           TXSDecimal     Index (IS_OPTN) read GetValorDeducao write SetValorDeducao stored ValorDeducao_Specified;
    property BaseIncidencia:         TXSDecimal     Index (IS_OPTN) read GetBaseIncidencia write SetBaseIncidencia stored BaseIncidencia_Specified;
    property Ativo:                  Boolean        Index (IS_OPTN) read GetAtivo write SetAtivo stored Ativo_Specified;
    property OrdemFaixa:             Integer        Index (IS_OPTN) read GetOrdemFaixa write SetOrdemFaixa stored OrdemFaixa_Specified;
    property CodigoIBGEMunicipioISS: Integer        Index (IS_OPTN or IS_NLBL) read GetCodigoIBGEMunicipioISS write SetCodigoIBGEMunicipioISS stored CodigoIBGEMunicipioISS_Specified;
  end;



  // ************************************************************************ //
  // XML       : BuscaItemReguaImpostoResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  BuscaItemReguaImpostoResponse = class(BuscaItemReguaImpostoResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : BuscaItemReguaImpostoRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  BuscaItemReguaImpostoRequest2 = class(TRemotable)
  private
    FQuantidadeItensPorPagina: Integer;
    FQuantidadeItensPorPagina_Specified: boolean;
    FNumeroPagina: Integer;
    FNumeroPagina_Specified: boolean;
    FIdReguaImpostos: Integer;
    FIdReguaImpostos_Specified: boolean;
    FTipoImposto: Integer;
    FTipoImposto_Specified: boolean;
    FAnoVigencia: Integer;
    FAnoVigencia_Specified: boolean;
    FOrdemFaixa: Integer;
    FOrdemFaixa_Specified: boolean;
    FAtivo: Boolean;
    FAtivo_Specified: boolean;
    FCodigoIBGEMunicipioISS: Integer;
    FCodigoIBGEMunicipioISS_Specified: boolean;
    function  GetQuantidadeItensPorPagina(Index: Integer): Integer;
    procedure SetQuantidadeItensPorPagina(Index: Integer; const AInteger: Integer);
    function  QuantidadeItensPorPagina_Specified(Index: Integer): boolean;
    function  GetNumeroPagina(Index: Integer): Integer;
    procedure SetNumeroPagina(Index: Integer; const AInteger: Integer);
    function  NumeroPagina_Specified(Index: Integer): boolean;
    function  GetIdReguaImpostos(Index: Integer): Integer;
    procedure SetIdReguaImpostos(Index: Integer; const AInteger: Integer);
    function  IdReguaImpostos_Specified(Index: Integer): boolean;
    function  GetTipoImposto(Index: Integer): Integer;
    procedure SetTipoImposto(Index: Integer; const AInteger: Integer);
    function  TipoImposto_Specified(Index: Integer): boolean;
    function  GetAnoVigencia(Index: Integer): Integer;
    procedure SetAnoVigencia(Index: Integer; const AInteger: Integer);
    function  AnoVigencia_Specified(Index: Integer): boolean;
    function  GetOrdemFaixa(Index: Integer): Integer;
    procedure SetOrdemFaixa(Index: Integer; const AInteger: Integer);
    function  OrdemFaixa_Specified(Index: Integer): boolean;
    function  GetAtivo(Index: Integer): Boolean;
    procedure SetAtivo(Index: Integer; const ABoolean: Boolean);
    function  Ativo_Specified(Index: Integer): boolean;
    function  GetCodigoIBGEMunicipioISS(Index: Integer): Integer;
    procedure SetCodigoIBGEMunicipioISS(Index: Integer; const AInteger: Integer);
    function  CodigoIBGEMunicipioISS_Specified(Index: Integer): boolean;
  published
    property QuantidadeItensPorPagina: Integer  Index (IS_OPTN) read GetQuantidadeItensPorPagina write SetQuantidadeItensPorPagina stored QuantidadeItensPorPagina_Specified;
    property NumeroPagina:             Integer  Index (IS_OPTN) read GetNumeroPagina write SetNumeroPagina stored NumeroPagina_Specified;
    property IdReguaImpostos:          Integer  Index (IS_OPTN or IS_NLBL) read GetIdReguaImpostos write SetIdReguaImpostos stored IdReguaImpostos_Specified;
    property TipoImposto:              Integer  Index (IS_OPTN or IS_NLBL) read GetTipoImposto write SetTipoImposto stored TipoImposto_Specified;
    property AnoVigencia:              Integer  Index (IS_OPTN or IS_NLBL) read GetAnoVigencia write SetAnoVigencia stored AnoVigencia_Specified;
    property OrdemFaixa:               Integer  Index (IS_OPTN or IS_NLBL) read GetOrdemFaixa write SetOrdemFaixa stored OrdemFaixa_Specified;
    property Ativo:                    Boolean  Index (IS_OPTN or IS_NLBL) read GetAtivo write SetAtivo stored Ativo_Specified;
    property CodigoIBGEMunicipioISS:   Integer  Index (IS_OPTN or IS_NLBL) read GetCodigoIBGEMunicipioISS write SetCodigoIBGEMunicipioISS stored CodigoIBGEMunicipioISS_Specified;
  end;



  // ************************************************************************ //
  // XML       : BuscaItemReguaImpostoRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  BuscaItemReguaImpostoRequest = class(BuscaItemReguaImpostoRequest2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : CadastroAtualizacaoDadosItemReguaImpostoResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  CadastroAtualizacaoDadosItemReguaImpostoResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FIdReguaImpostos: Integer;
    FIdReguaImpostos_Specified: boolean;
    FAnoVigencia: Integer;
    FAnoVigencia_Specified: boolean;
    FDataVigencia: TXSDateTime;
    FDataVigencia_Specified: boolean;
    FTipoImposto: string;
    FTipoImposto_Specified: boolean;
    FBaseCalculoMinima: TXSDecimal;
    FBaseCalculoMinima_Specified: boolean;
    FBaseCalculoMaxima: TXSDecimal;
    FBaseCalculoMaxima_Specified: boolean;
    FAliquota: TXSDecimal;
    FAliquota_Specified: boolean;
    FValorDeducao: TXSDecimal;
    FValorDeducao_Specified: boolean;
    FBaseIncidencia: TXSDecimal;
    FBaseIncidencia_Specified: boolean;
    FAtivo: Boolean;
    FAtivo_Specified: boolean;
    FCodigoIBGEMunicipioISS: Integer;
    FCodigoIBGEMunicipioISS_Specified: boolean;
    FOrdemFaixa: Integer;
    FOrdemFaixa_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetIdReguaImpostos(Index: Integer): Integer;
    procedure SetIdReguaImpostos(Index: Integer; const AInteger: Integer);
    function  IdReguaImpostos_Specified(Index: Integer): boolean;
    function  GetAnoVigencia(Index: Integer): Integer;
    procedure SetAnoVigencia(Index: Integer; const AInteger: Integer);
    function  AnoVigencia_Specified(Index: Integer): boolean;
    function  GetDataVigencia(Index: Integer): TXSDateTime;
    procedure SetDataVigencia(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DataVigencia_Specified(Index: Integer): boolean;
    function  GetTipoImposto(Index: Integer): string;
    procedure SetTipoImposto(Index: Integer; const Astring: string);
    function  TipoImposto_Specified(Index: Integer): boolean;
    function  GetBaseCalculoMinima(Index: Integer): TXSDecimal;
    procedure SetBaseCalculoMinima(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  BaseCalculoMinima_Specified(Index: Integer): boolean;
    function  GetBaseCalculoMaxima(Index: Integer): TXSDecimal;
    procedure SetBaseCalculoMaxima(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  BaseCalculoMaxima_Specified(Index: Integer): boolean;
    function  GetAliquota(Index: Integer): TXSDecimal;
    procedure SetAliquota(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  Aliquota_Specified(Index: Integer): boolean;
    function  GetValorDeducao(Index: Integer): TXSDecimal;
    procedure SetValorDeducao(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorDeducao_Specified(Index: Integer): boolean;
    function  GetBaseIncidencia(Index: Integer): TXSDecimal;
    procedure SetBaseIncidencia(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  BaseIncidencia_Specified(Index: Integer): boolean;
    function  GetAtivo(Index: Integer): Boolean;
    procedure SetAtivo(Index: Integer; const ABoolean: Boolean);
    function  Ativo_Specified(Index: Integer): boolean;
    function  GetCodigoIBGEMunicipioISS(Index: Integer): Integer;
    procedure SetCodigoIBGEMunicipioISS(Index: Integer; const AInteger: Integer);
    function  CodigoIBGEMunicipioISS_Specified(Index: Integer): boolean;
    function  GetOrdemFaixa(Index: Integer): Integer;
    procedure SetOrdemFaixa(Index: Integer; const AInteger: Integer);
    function  OrdemFaixa_Specified(Index: Integer): boolean;
  published
    property Erro:                   ErroResponse2  Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property IdReguaImpostos:        Integer        Index (IS_OPTN) read GetIdReguaImpostos write SetIdReguaImpostos stored IdReguaImpostos_Specified;
    property AnoVigencia:            Integer        Index (IS_OPTN) read GetAnoVigencia write SetAnoVigencia stored AnoVigencia_Specified;
    property DataVigencia:           TXSDateTime    Index (IS_OPTN) read GetDataVigencia write SetDataVigencia stored DataVigencia_Specified;
    property TipoImposto:            string         Index (IS_OPTN or IS_NLBL) read GetTipoImposto write SetTipoImposto stored TipoImposto_Specified;
    property BaseCalculoMinima:      TXSDecimal     Index (IS_OPTN) read GetBaseCalculoMinima write SetBaseCalculoMinima stored BaseCalculoMinima_Specified;
    property BaseCalculoMaxima:      TXSDecimal     Index (IS_OPTN) read GetBaseCalculoMaxima write SetBaseCalculoMaxima stored BaseCalculoMaxima_Specified;
    property Aliquota:               TXSDecimal     Index (IS_OPTN) read GetAliquota write SetAliquota stored Aliquota_Specified;
    property ValorDeducao:           TXSDecimal     Index (IS_OPTN) read GetValorDeducao write SetValorDeducao stored ValorDeducao_Specified;
    property BaseIncidencia:         TXSDecimal     Index (IS_OPTN) read GetBaseIncidencia write SetBaseIncidencia stored BaseIncidencia_Specified;
    property Ativo:                  Boolean        Index (IS_OPTN) read GetAtivo write SetAtivo stored Ativo_Specified;
    property CodigoIBGEMunicipioISS: Integer        Index (IS_OPTN or IS_NLBL) read GetCodigoIBGEMunicipioISS write SetCodigoIBGEMunicipioISS stored CodigoIBGEMunicipioISS_Specified;
    property OrdemFaixa:             Integer        Index (IS_OPTN) read GetOrdemFaixa write SetOrdemFaixa stored OrdemFaixa_Specified;
  end;



  // ************************************************************************ //
  // XML       : CadastroAtualizacaoDadosItemReguaImpostoResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  CadastroAtualizacaoDadosItemReguaImpostoResponse = class(CadastroAtualizacaoDadosItemReguaImpostoResponse2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : CalculoImpostosFreteRequest, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  CalculoImpostosFreteRequest2 = class(TRemotable)
  private
    FCPFCNPJContratado: string;
    FCPFCNPJContratado_Specified: boolean;
    FValorBruto: TXSDecimal;
    FValorBruto_Specified: boolean;
    FIsentarINSS: Boolean;
    FIsentarINSS_Specified: boolean;
    FDataReferencia: TXSDateTime;
    FDataReferencia_Specified: boolean;
    FCodigoIBGEMunicipioISS: Integer;
    FCodigoIBGEMunicipioISS_Specified: boolean;
    function  GetCPFCNPJContratado(Index: Integer): string;
    procedure SetCPFCNPJContratado(Index: Integer; const Astring: string);
    function  CPFCNPJContratado_Specified(Index: Integer): boolean;
    function  GetValorBruto(Index: Integer): TXSDecimal;
    procedure SetValorBruto(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorBruto_Specified(Index: Integer): boolean;
    function  GetIsentarINSS(Index: Integer): Boolean;
    procedure SetIsentarINSS(Index: Integer; const ABoolean: Boolean);
    function  IsentarINSS_Specified(Index: Integer): boolean;
    function  GetDataReferencia(Index: Integer): TXSDateTime;
    procedure SetDataReferencia(Index: Integer; const ATXSDateTime: TXSDateTime);
    function  DataReferencia_Specified(Index: Integer): boolean;
    function  GetCodigoIBGEMunicipioISS(Index: Integer): Integer;
    procedure SetCodigoIBGEMunicipioISS(Index: Integer; const AInteger: Integer);
    function  CodigoIBGEMunicipioISS_Specified(Index: Integer): boolean;
  published
    property CPFCNPJContratado:      string       Index (IS_OPTN or IS_NLBL) read GetCPFCNPJContratado write SetCPFCNPJContratado stored CPFCNPJContratado_Specified;
    property ValorBruto:             TXSDecimal   Index (IS_OPTN) read GetValorBruto write SetValorBruto stored ValorBruto_Specified;
    property IsentarINSS:            Boolean      Index (IS_OPTN) read GetIsentarINSS write SetIsentarINSS stored IsentarINSS_Specified;
    property DataReferencia:         TXSDateTime  Index (IS_OPTN or IS_NLBL) read GetDataReferencia write SetDataReferencia stored DataReferencia_Specified;
    property CodigoIBGEMunicipioISS: Integer      Index (IS_OPTN or IS_NLBL) read GetCodigoIBGEMunicipioISS write SetCodigoIBGEMunicipioISS stored CodigoIBGEMunicipioISS_Specified;
  end;



  // ************************************************************************ //
  // XML       : CalculoImpostosFreteRequest, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  CalculoImpostosFreteRequest = class(CalculoImpostosFreteRequest2)
  private
  published
  end;



  // ************************************************************************ //
  // XML       : CalculoImpostosFreteResponse, global, <complexType>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  CalculoImpostosFreteResponse2 = class(TRemotable)
  private
    FErro: ErroResponse2;
    FErro_Specified: boolean;
    FValorCalculadoINSS: TXSDecimal;
    FValorCalculadoINSS_Specified: boolean;
    FValorCalculadoSESTSENAT: TXSDecimal;
    FValorCalculadoSESTSENAT_Specified: boolean;
    FValorCalculadoIRRF: TXSDecimal;
    FValorCalculadoIRRF_Specified: boolean;
    FValorCalculadoISS: TXSDecimal;
    FValorCalculadoISS_Specified: boolean;
    FDemonstrativoCalculo: string;
    FDemonstrativoCalculo_Specified: boolean;
    function  GetErro(Index: Integer): ErroResponse2;
    procedure SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
    function  Erro_Specified(Index: Integer): boolean;
    function  GetValorCalculadoINSS(Index: Integer): TXSDecimal;
    procedure SetValorCalculadoINSS(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorCalculadoINSS_Specified(Index: Integer): boolean;
    function  GetValorCalculadoSESTSENAT(Index: Integer): TXSDecimal;
    procedure SetValorCalculadoSESTSENAT(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorCalculadoSESTSENAT_Specified(Index: Integer): boolean;
    function  GetValorCalculadoIRRF(Index: Integer): TXSDecimal;
    procedure SetValorCalculadoIRRF(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorCalculadoIRRF_Specified(Index: Integer): boolean;
    function  GetValorCalculadoISS(Index: Integer): TXSDecimal;
    procedure SetValorCalculadoISS(Index: Integer; const ATXSDecimal: TXSDecimal);
    function  ValorCalculadoISS_Specified(Index: Integer): boolean;
    function  GetDemonstrativoCalculo(Index: Integer): string;
    procedure SetDemonstrativoCalculo(Index: Integer; const Astring: string);
    function  DemonstrativoCalculo_Specified(Index: Integer): boolean;
  published
    property Erro:                    ErroResponse2  Index (IS_OPTN or IS_NLBL) read GetErro write SetErro stored Erro_Specified;
    property ValorCalculadoINSS:      TXSDecimal     Index (IS_OPTN) read GetValorCalculadoINSS write SetValorCalculadoINSS stored ValorCalculadoINSS_Specified;
    property ValorCalculadoSESTSENAT: TXSDecimal     Index (IS_OPTN) read GetValorCalculadoSESTSENAT write SetValorCalculadoSESTSENAT stored ValorCalculadoSESTSENAT_Specified;
    property ValorCalculadoIRRF:      TXSDecimal     Index (IS_OPTN) read GetValorCalculadoIRRF write SetValorCalculadoIRRF stored ValorCalculadoIRRF_Specified;
    property ValorCalculadoISS:       TXSDecimal     Index (IS_OPTN or IS_NLBL) read GetValorCalculadoISS write SetValorCalculadoISS stored ValorCalculadoISS_Specified;
    property DemonstrativoCalculo:    string         Index (IS_OPTN or IS_NLBL) read GetDemonstrativoCalculo write SetDemonstrativoCalculo stored DemonstrativoCalculo_Specified;
  end;



  // ************************************************************************ //
  // XML       : CalculoImpostosFreteResponse, global, <element>
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // ************************************************************************ //
  CalculoImpostosFreteResponse = class(CalculoImpostosFreteResponse2)
  private
  published
  end;


  // ************************************************************************ //
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // soapAction: http://tmsfrete.v2.targetmp.com.br/FreteTMSService/%operationName%
  // transport : http://schemas.xmlsoap.org/soap/http
  // style     : document
  // use       : literal
  // binding   : BasicHttpBinding_FreteTMSService
  // service   : FreteService
  // port      : BasicHttpBinding_FreteTMSService
  // URL       : https://dev.transportesbra.com.br/frete/TMS/FreteService.svc
  // ************************************************************************ //
  FreteTMSService = interface(IInvokable)
  ['{019A4938-E7E5-54E9-C7B2-2624D33DCFF4}']
    function  ObterInformacaoServico(const auth: AutenticacaoRequest2): InformacaoServicoResponse2; stdcall;
    function  GerarTokenParaAcesso(const auth: AutenticacaoRequest2): GeraTokenParaAcessoResponse2; stdcall;
    function  CadastrarAtualizarParticipante(const auth: AutenticacaoRequest2; const participante: ParticipanteRequest2): ParticipanteResponse2; stdcall;
    function  BuscarParticipante(const auth: AutenticacaoRequest2; const buscaParticipante: BuscaParticipanteRequest2): ResultadoPaginadoParticipanteResponse2; stdcall;
    function  CadastrarAtualizarCentroDeCusto(const auth: AutenticacaoRequest2; const centro: CentroDeCustoRequest2): CentroDeCustoResponse2; stdcall;
    function  BuscarCentroDeCusto(const auth: AutenticacaoRequest2; const buscaCentro: BuscaCentroDeCustoRequest2): ResultadoPaginadoCentroDeCustoResponse2; stdcall;
    function  CadastrarAtualizarMotorista(const auth: AutenticacaoRequest2; const motorista: MotoristaRequest2): MotoristaResponse2; stdcall;
    function  BuscarMotorista(const auth: AutenticacaoRequest2; const buscaMotorista: BuscaMotoristaRequest2): ResultadoPaginadoMotoristaResponse2; stdcall;
    function  CadastrarAtualizarTransportador(const auth: AutenticacaoRequest2; const transportador: TransportadorRequest2): TransportadorResponse2; stdcall;
    function  BuscarTransportador(const auth: AutenticacaoRequest2; const buscaTransportador: BuscaTransportadorRequest2): TransportadorResponse2; stdcall;
    function  RealizarPagamentoAvulsoCartao(const auth: AutenticacaoRequest2; const pagamentoAvulso: PagamentoAvulsoCartaoRequest2): PagamentoAvulsoCartaoResponse2; stdcall;
    function  BuscarPagamentoAvulsoCartao(const auth: AutenticacaoRequest2; const buscaPagamentoAvulso: BuscaPagamentoAvulsoCartaoRequest2): ResultadoPaginadoBuscaPagamentoAvulsoCartaoResponse2; stdcall;
    function  RealizarPagamentoCombustivelAvulsoCartao(const auth: AutenticacaoRequest2; const combustivelAvulso: CombustivelAvulsoCartaoRequest2): CombustivelAvulsoCartaoResponse2; stdcall;
    function  BuscarCombustivelAvulsoCartao(const auth: AutenticacaoRequest2; const buscaCombustivelAvulso: BuscaCombustivelAvulsoCartaoRequest2): ResultadoPaginadoBuscaCombustivelAvulsoCartaoResponse2; stdcall;
    function  BuscarCompraValePedagio(const auth: AutenticacaoRequest2; const buscaCompraValePedagio: BuscaCompraValePedagioRequest2): ResultadoPaginadoBuscaCompraValePedagioResponse2; stdcall;
    function  CadastrarAtualizarOperacaoTransporte(const auth: AutenticacaoRequest2; const operacao: OperacaoTransporteRequest2): OperacaoTransporteResponse2; stdcall;
    function  BuscarOperacaoTransporte(const auth: AutenticacaoRequest2; const buscaOperacao: BuscaOperacaoTransporteRequest2): ResultadoPaginadoOperacaoTransporteResponse2; stdcall;
    function  RetificarOperacaoTransporte(const auth: AutenticacaoRequest2; const retificacao: RetificacaoOperacaoTransporteRequest2): RetificacaoOperacaoTransporteResponse2; stdcall;
    function  FinalizarOperacaoTransporte(const auth: AutenticacaoRequest2; const finalizacaoOperacaoRequest: FinalizacaoOperacaoTransporteRequest2): FinalizacaoOperacaoTransporteResponse2; stdcall;
    function  CadastrarAtualizarDadosQuitacaoOperacaoTransporte(const auth: AutenticacaoRequest2; const dadosQuitacaoRequest: CadastroAtualizacaoDadosQuitacaoRequest2): CadastroAtualizacaoDadosQuitacaoResponse2; stdcall;
    function  ObterDetalhesQuitacao(const auth: AutenticacaoRequest2; const detalhesQuitacao: ObterDetalhesQuitacaoRequest2): DetalhesQuitacaoResponse2; stdcall;
    function  DeclararOperacaoTransporte(const auth: AutenticacaoRequest2; const declaracao: DeclaracaoOperacaoTransporteRequest2): DeclaracaoOperacaoTransporteResponse2; stdcall;
    function  PagarParcelaIndividual(const auth: AutenticacaoRequest2; const parcelaIndividual: PagamentoParcelaRequest2): PagamentoParcelaIndividualResponse2; stdcall;
    function  RegistrarParcelaAdicional(const auth: AutenticacaoRequest2; const parcelaAdicionalRequest: ParcelaAdicionalRequest2): ParcelaAdicionalResponse2; stdcall;
    function  ObterInformacaoCartao(const auth: AutenticacaoRequest2; const info: InformacaoCartaoRequest2): InformacaoCartaoResponse2; stdcall;
    function  AssociarSubstituirCartao(const auth: AutenticacaoRequest2; const associar: AssociacaoSubstituicaoCartaoRequest2): AssociacaoSubstituicaoCartaoResponse2; stdcall;
    function  CancelarOperacaoTransporte(const auth: AutenticacaoRequest2; const cancelamentoOperacaoRequest: CancelamentoOperacaoRequest2): CancelamentoOperacaoResponse2; stdcall;
    function  EncerrarOperacaoTransporte(const auth: AutenticacaoRequest2; const encerramentoRequest: EncerramentoOperacaoTransporteRequest2): EncerramentoOperacaoTransporteResponse2; stdcall;
    function  BuscarCartoesPortador(const auth: AutenticacaoRequest2; const buscaRequest: BuscaCartoesRequest2): BuscarCartoesResponse2; stdcall;
    function  ComprarPedagioAvulso(const auth: AutenticacaoRequest2; const compraRequest: CompraValePedagioRequest2): CompraValePedagioResponse2; stdcall;
    function  AtualizarPedagioAvulso(const auth: AutenticacaoRequest2; const compraRequest: AtualizaCompraValePedagioRequest2): AtualizaCompraValePedagioResponse2; stdcall;
    function  ConfirmarPedagioTAG(const auth: AutenticacaoRequest2; const confirmacaoRequest: ConfirmacaoPedagioRequest2): ConfirmarPedagioResponse2; stdcall;
    function  CancelarCompraValePedagio(const auth: AutenticacaoRequest2; const cancelaVPRequest: CancelaCompraValePedagioRequest2): CancelaCompraValePedagioResponse2; stdcall;
    function  ListarRotas(const auth: AutenticacaoRequest2; const listarRotasRequest: ListarRotaClienteRequest2): ResultadoPaginadoListarRotasClienteResponse2; stdcall;
    function  ObterCustoRota(const auth: AutenticacaoRequest2; const custoRotaRequest: ObtencaoCustoRotaRequest2): ObtencaoCustoRotaResponse2; stdcall;
    function  CadastrarRoteiro(const auth: AutenticacaoRequest2; const roteiroRequest: RoteiroRequest2): RoteiroResponse2; stdcall;
    function  BuscarRoteiro(const auth: AutenticacaoRequest2; const buscaRoteiro: BuscaRoteiroRequest2): ResultadoPaginadoRoteiroResponse2; stdcall;
    function  EmitirDocumento(const auth: AutenticacaoRequest2; const emissaoDocumento: EmissaoDocumentoRequest2): EmissaoDocumentoResponse2; stdcall;
    function  BuscarInformacoesContratacao(const auth: AutenticacaoRequest2; const informacoesRequest: BuscaInformacoesContratacaoRequest2): BuscaInformacoesContratacaoResponse2; stdcall;
    function  BuscarTransacoesFinanceiras(const auth: AutenticacaoRequest2; const buscaTransacoes: BuscaTransacoesFinanceirasRequest2): ResultadoPaginadoBuscaTransacoesFinanceirasResponse2; stdcall;
    function  ConsultarTaxasCalculadas(const auth: AutenticacaoRequest2; const consultaTaxasCalculadas: ConsultaTaxasCalculadasRequest2): ResultadoPaginadoConsultaTaxasCalculadasResponse2; stdcall;
    function  TrocarPlacaCompraValePedagioTAG(const auth: AutenticacaoRequest2; const trocaPlacaCompraValePedagioTAGRequest: TrocaPlacaCompraValePedagioTAGRequest2): TrocaPlacaCompraValePedagioTAGResponse2; stdcall;
    function  ConsultarSituacaoTransportadorAntt(const auth: AutenticacaoRequest2; const dadosConsulta: ConsultaSituacaoTransportadorAnttRequest2): ConsultaSituacaoTransportadorAnttResponse2; stdcall;
    function  CadastrarRoteiroCustomizado(const auth: AutenticacaoRequest2; const roteiroCustomizadoRequest: CadastroRoteiroCustomizadoRequest2): CadastroRoteiroCustomizadoResponse2; stdcall;
    function  ConsultarSituacaoEmpresaTransportadorAntt(const auth: AutenticacaoRequest2; const dadosConsulta: ConsultaSituacaoEmpresaTransportadorAnttRequest2): ConsultaSituacaoEmpresaTransportadorAnttResponse2; stdcall;
    function  CadastrarAtualizarItemReguaImposto(const auth: AutenticacaoRequest2; const itemRegua: CadastroAtualizacaoDadosItemReguaImpostoRequest2): CadastroAtualizacaoDadosItemReguaImpostoResponse2; stdcall;
    function  CalcularImpostosFrete(const auth: AutenticacaoRequest2; const calcularImpostosFreteRequest: CalculoImpostosFreteRequest2): CalculoImpostosFreteResponse2; stdcall;
    function  BuscarItemReguaImposto(const auth: AutenticacaoRequest2; const buscaItemReguaImposto: BuscaItemReguaImpostoRequest2): ResultadoPaginadoBuscaItemReguaImpostoResponse2; stdcall;
    function  CalcularValoresPisCofins(const auth: AutenticacaoRequest2; const calcularValoresPisCofinsRequest: CalculoValoresPisCofinsRequest2): CalculoValoresPisCofinsResponse2; stdcall;
    function  RealizarPagamentoAvulsoCartaoManualmente(const auth: AutenticacaoRequest2; const pagamentoAvulsoRequest: PagamentoAvulsoCartaoManualmenteRequest2): PagamentoAvulsoCartaoManualmenteResponse2; stdcall;
    function  CancelarSolicitacaoPagamentoAvulsoCartao(const auth: AutenticacaoRequest2; const cancelamentoRequest: CancelamentoSolicitacaoPagamentoAvulsoCartaoRequest2): CancelamentoSolicitacaoPagamentoAvulsoCartaoResponse2; stdcall;
    function  RealizarPagamentoCombustivelAvulsoCartaoManualmente(const auth: AutenticacaoRequest2; const combustivelAvulsoRequest: PagamentoCombustivelAvulsoCartaoManualmenteRequest2): PagamentoCombustivelAvulsoCartaoManualmenteResponse2; stdcall;
    function  CancelarSolicitacaoPagamentoCombustivelAvulsoCartao(const auth: AutenticacaoRequest2; const cancelamentoRequest: CancelamentoSolicitacaoPagamentoCombustivelAvulsoCartaoRequest2): CancelamentoSolicitacaoPagamentoCombustivelAvulsoCartaoResponse2; stdcall;
    function  BuscarTerminaisCarregamentoAutorizados(const auth: AutenticacaoRequest2): BuscaTerminaisCarregamentoAutorizadosResponse2; stdcall;
  end;


  // ************************************************************************ //
  // Namespace : http://tmsfrete.v2.targetmp.com.br
  // transport : http://schemas.xmlsoap.org/soap/http
  // style     : document
  // use       : literal
  // binding   : BasicHttpBinding_FreteTMSServiceExtended
  // service   : FreteService
  // port      : BasicHttpBinding_FreteTMSServiceExtended
  // URL       : https://dev.transportesbra.com.br/frete/TMS/FreteService.svc/extended
  // ************************************************************************ //
  FreteTMSServiceExtended = interface(IInvokable)
  ['{31238591-E89D-DB8F-47CA-AAC4DA92624E}']
    function  ObterInformacaoServico(const auth: AutenticacaoRequest2): InformacaoServicoResponse2; stdcall;
    function  GerarTokenParaAcesso(const auth: AutenticacaoRequest2): GeraTokenParaAcessoResponse2; stdcall;
    function  CadastrarAtualizarParticipante(const auth: AutenticacaoRequest2; const participante: ParticipanteRequest2): ParticipanteResponse2; stdcall;
    function  BuscarParticipante(const auth: AutenticacaoRequest2; const buscaParticipante: BuscaParticipanteRequest2): ResultadoPaginadoParticipanteResponse2; stdcall;
    function  CadastrarAtualizarCentroDeCusto(const auth: AutenticacaoRequest2; const centro: CentroDeCustoRequest2): CentroDeCustoResponse2; stdcall;
    function  BuscarCentroDeCusto(const auth: AutenticacaoRequest2; const buscaCentro: BuscaCentroDeCustoRequest2): ResultadoPaginadoCentroDeCustoResponse2; stdcall;
    function  CadastrarAtualizarMotorista(const auth: AutenticacaoRequest2; const motorista: MotoristaRequest2): MotoristaResponse2; stdcall;
    function  BuscarMotorista(const auth: AutenticacaoRequest2; const buscaMotorista: BuscaMotoristaRequest2): ResultadoPaginadoMotoristaResponse2; stdcall;
    function  CadastrarAtualizarTransportador(const auth: AutenticacaoRequest2; const transportador: TransportadorRequest2): TransportadorResponse2; stdcall;
    function  BuscarTransportador(const auth: AutenticacaoRequest2; const buscaTransportador: BuscaTransportadorRequest2): TransportadorResponse2; stdcall;
    function  RealizarPagamentoAvulsoCartao(const auth: AutenticacaoRequest2; const pagamentoAvulso: PagamentoAvulsoCartaoRequest2): PagamentoAvulsoCartaoResponse2; stdcall;
    function  BuscarPagamentoAvulsoCartao(const auth: AutenticacaoRequest2; const buscaPagamentoAvulso: BuscaPagamentoAvulsoCartaoRequest2): ResultadoPaginadoBuscaPagamentoAvulsoCartaoResponse2; stdcall;
    function  RealizarPagamentoCombustivelAvulsoCartao(const auth: AutenticacaoRequest2; const combustivelAvulso: CombustivelAvulsoCartaoRequest2): CombustivelAvulsoCartaoResponse2; stdcall;
    function  BuscarCombustivelAvulsoCartao(const auth: AutenticacaoRequest2; const buscaCombustivelAvulso: BuscaCombustivelAvulsoCartaoRequest2): ResultadoPaginadoBuscaCombustivelAvulsoCartaoResponse2; stdcall;
    function  BuscarCompraValePedagio(const auth: AutenticacaoRequest2; const buscaCompraValePedagio: BuscaCompraValePedagioRequest2): ResultadoPaginadoBuscaCompraValePedagioResponse2; stdcall;
    function  CadastrarAtualizarOperacaoTransporte(const auth: AutenticacaoRequest2; const operacao: OperacaoTransporteRequest2): OperacaoTransporteResponse2; stdcall;
    function  BuscarOperacaoTransporte(const auth: AutenticacaoRequest2; const buscaOperacao: BuscaOperacaoTransporteRequest2): ResultadoPaginadoOperacaoTransporteResponse2; stdcall;
    function  RetificarOperacaoTransporte(const auth: AutenticacaoRequest2; const retificacao: RetificacaoOperacaoTransporteRequest2): RetificacaoOperacaoTransporteResponse2; stdcall;
    function  FinalizarOperacaoTransporte(const auth: AutenticacaoRequest2; const finalizacaoOperacaoRequest: FinalizacaoOperacaoTransporteRequest2): FinalizacaoOperacaoTransporteResponse2; stdcall;
    function  CadastrarAtualizarDadosQuitacaoOperacaoTransporte(const auth: AutenticacaoRequest2; const dadosQuitacaoRequest: CadastroAtualizacaoDadosQuitacaoRequest2): CadastroAtualizacaoDadosQuitacaoResponse2; stdcall;
    function  ObterDetalhesQuitacao(const auth: AutenticacaoRequest2; const detalhesQuitacao: ObterDetalhesQuitacaoRequest2): DetalhesQuitacaoResponse2; stdcall;
    function  DeclararOperacaoTransporte(const auth: AutenticacaoRequest2; const declaracao: DeclaracaoOperacaoTransporteRequest2): DeclaracaoOperacaoTransporteResponse2; stdcall;
    function  PagarParcelaIndividual(const auth: AutenticacaoRequest2; const parcelaIndividual: PagamentoParcelaRequest2): PagamentoParcelaIndividualResponse2; stdcall;
    function  RegistrarParcelaAdicional(const auth: AutenticacaoRequest2; const parcelaAdicionalRequest: ParcelaAdicionalRequest2): ParcelaAdicionalResponse2; stdcall;
    function  ObterInformacaoCartao(const auth: AutenticacaoRequest2; const info: InformacaoCartaoRequest2): InformacaoCartaoResponse2; stdcall;
    function  AssociarSubstituirCartao(const auth: AutenticacaoRequest2; const associar: AssociacaoSubstituicaoCartaoRequest2): AssociacaoSubstituicaoCartaoResponse2; stdcall;
    function  CancelarOperacaoTransporte(const auth: AutenticacaoRequest2; const cancelamentoOperacaoRequest: CancelamentoOperacaoRequest2): CancelamentoOperacaoResponse2; stdcall;
    function  EncerrarOperacaoTransporte(const auth: AutenticacaoRequest2; const encerramentoRequest: EncerramentoOperacaoTransporteRequest2): EncerramentoOperacaoTransporteResponse2; stdcall;
    function  BuscarCartoesPortador(const auth: AutenticacaoRequest2; const buscaRequest: BuscaCartoesRequest2): BuscarCartoesResponse2; stdcall;
    function  ComprarPedagioAvulso(const auth: AutenticacaoRequest2; const compraRequest: CompraValePedagioRequest2): CompraValePedagioResponse2; stdcall;
    function  AtualizarPedagioAvulso(const auth: AutenticacaoRequest2; const compraRequest: AtualizaCompraValePedagioRequest2): AtualizaCompraValePedagioResponse2; stdcall;
    function  ConfirmarPedagioTAG(const auth: AutenticacaoRequest2; const confirmacaoRequest: ConfirmacaoPedagioRequest2): ConfirmarPedagioResponse2; stdcall;
    function  CancelarCompraValePedagio(const auth: AutenticacaoRequest2; const cancelaVPRequest: CancelaCompraValePedagioRequest2): CancelaCompraValePedagioResponse2; stdcall;
    function  ListarRotas(const auth: AutenticacaoRequest2; const listarRotasRequest: ListarRotaClienteRequest2): ResultadoPaginadoListarRotasClienteResponse2; stdcall;
    function  ObterCustoRota(const auth: AutenticacaoRequest2; const custoRotaRequest: ObtencaoCustoRotaRequest2): ObtencaoCustoRotaResponse2; stdcall;
    function  CadastrarRoteiro(const auth: AutenticacaoRequest2; const roteiroRequest: RoteiroRequest2): RoteiroResponse2; stdcall;
    function  BuscarRoteiro(const auth: AutenticacaoRequest2; const buscaRoteiro: BuscaRoteiroRequest2): ResultadoPaginadoRoteiroResponse2; stdcall;
    function  EmitirDocumento(const auth: AutenticacaoRequest2; const emissaoDocumento: EmissaoDocumentoRequest2): EmissaoDocumentoResponse2; stdcall;
    function  BuscarInformacoesContratacao(const auth: AutenticacaoRequest2; const informacoesRequest: BuscaInformacoesContratacaoRequest2): BuscaInformacoesContratacaoResponse2; stdcall;
    function  BuscarTransacoesFinanceiras(const auth: AutenticacaoRequest2; const buscaTransacoes: BuscaTransacoesFinanceirasRequest2): ResultadoPaginadoBuscaTransacoesFinanceirasResponse2; stdcall;
    function  ConsultarTaxasCalculadas(const auth: AutenticacaoRequest2; const consultaTaxasCalculadas: ConsultaTaxasCalculadasRequest2): ResultadoPaginadoConsultaTaxasCalculadasResponse2; stdcall;
    function  TrocarPlacaCompraValePedagioTAG(const auth: AutenticacaoRequest2; const trocaPlacaCompraValePedagioTAGRequest: TrocaPlacaCompraValePedagioTAGRequest2): TrocaPlacaCompraValePedagioTAGResponse2; stdcall;
    function  ConsultarSituacaoTransportadorAntt(const auth: AutenticacaoRequest2; const dadosConsulta: ConsultaSituacaoTransportadorAnttRequest2): ConsultaSituacaoTransportadorAnttResponse2; stdcall;
    function  CadastrarRoteiroCustomizado(const auth: AutenticacaoRequest2; const roteiroCustomizadoRequest: CadastroRoteiroCustomizadoRequest2): CadastroRoteiroCustomizadoResponse2; stdcall;
    function  ConsultarSituacaoEmpresaTransportadorAntt(const auth: AutenticacaoRequest2; const dadosConsulta: ConsultaSituacaoEmpresaTransportadorAnttRequest2): ConsultaSituacaoEmpresaTransportadorAnttResponse2; stdcall;
    function  CadastrarAtualizarItemReguaImposto(const auth: AutenticacaoRequest2; const itemRegua: CadastroAtualizacaoDadosItemReguaImpostoRequest2): CadastroAtualizacaoDadosItemReguaImpostoResponse2; stdcall;
    function  CalcularImpostosFrete(const auth: AutenticacaoRequest2; const calcularImpostosFreteRequest: CalculoImpostosFreteRequest2): CalculoImpostosFreteResponse2; stdcall;
    function  BuscarItemReguaImposto(const auth: AutenticacaoRequest2; const buscaItemReguaImposto: BuscaItemReguaImpostoRequest2): ResultadoPaginadoBuscaItemReguaImpostoResponse2; stdcall;
    function  CalcularValoresPisCofins(const auth: AutenticacaoRequest2; const calcularValoresPisCofinsRequest: CalculoValoresPisCofinsRequest2): CalculoValoresPisCofinsResponse2; stdcall;
    function  RealizarPagamentoAvulsoCartaoManualmente(const auth: AutenticacaoRequest2; const pagamentoAvulsoRequest: PagamentoAvulsoCartaoManualmenteRequest2): PagamentoAvulsoCartaoManualmenteResponse2; stdcall;
    function  CancelarSolicitacaoPagamentoAvulsoCartao(const auth: AutenticacaoRequest2; const cancelamentoRequest: CancelamentoSolicitacaoPagamentoAvulsoCartaoRequest2): CancelamentoSolicitacaoPagamentoAvulsoCartaoResponse2; stdcall;
    function  RealizarPagamentoCombustivelAvulsoCartaoManualmente(const auth: AutenticacaoRequest2; const combustivelAvulsoRequest: PagamentoCombustivelAvulsoCartaoManualmenteRequest2): PagamentoCombustivelAvulsoCartaoManualmenteResponse2; stdcall;
    function  CancelarSolicitacaoPagamentoCombustivelAvulsoCartao(const auth: AutenticacaoRequest2; const cancelamentoRequest: CancelamentoSolicitacaoPagamentoCombustivelAvulsoCartaoRequest2): CancelamentoSolicitacaoPagamentoCombustivelAvulsoCartaoResponse2; stdcall;
    function  BuscarTerminaisCarregamentoAutorizados(const auth: AutenticacaoRequest2): BuscaTerminaisCarregamentoAutorizadosResponse2; stdcall;
    function  CadastrarRoteiroDetalhado(const auth: AutenticacaoRequest2; const rotaDetalhada: RotaDetalhadaRequest2): RotaDetalhadaResponse2; stdcall;
    function  ComprarPedagioPorPracas(const auth: AutenticacaoRequest2; const compraPorPracaRequest: CompraValePedagioPorPracaRequest2): CompraValePedagioResponse2; stdcall;
    function  ObterCustoRotaPorPracas(const auth: AutenticacaoRequest2; const custoPorPracaRequest: ObtencaoCustoRotaPorPracasRequest2): ObtencaoCustoRotaPorPracaResponse2; stdcall;
  end;

function GetFreteTMSService(UseWSDL: Boolean=System.False; Addr: string=''; HTTPRIO: THTTPRIO = nil): FreteTMSService;
function GetFreteTMSServiceExtended(UseWSDL: Boolean=System.False; Addr: string=''; HTTPRIO: THTTPRIO = nil): FreteTMSServiceExtended;


implementation
  uses System.SysUtils;

function GetFreteTMSService(UseWSDL: Boolean; Addr: string; HTTPRIO: THTTPRIO): FreteTMSService;
const
  defWSDL = 'https://dev.transportesbra.com.br/frete/TMS/FreteService.svc?singleWsdl';
  defURL  = 'https://dev.transportesbra.com.br/frete/TMS/FreteService.svc';
  defSvc  = 'FreteService';
  defPrt  = 'BasicHttpBinding_FreteTMSService';
var
  RIO: THTTPRIO;
begin
  Result := nil;
  if (Addr = '') then
  begin
    if UseWSDL then
      Addr := defWSDL
    else
      Addr := defURL;
  end;
  if HTTPRIO = nil then
    RIO := THTTPRIO.Create(nil)
  else
    RIO := HTTPRIO;
  try
    Result := (RIO as FreteTMSService);
    if UseWSDL then
    begin
      RIO.WSDLLocation := Addr;
      RIO.Service := defSvc;
      RIO.Port := defPrt;
    end else
      RIO.URL := Addr;
  finally
    if (Result = nil) and (HTTPRIO = nil) then
      RIO.Free;
  end;
end;


function GetFreteTMSServiceExtended(UseWSDL: Boolean; Addr: string; HTTPRIO: THTTPRIO): FreteTMSServiceExtended;
const
  defWSDL = 'https://dev.transportesbra.com.br/frete/TMS/FreteService.svc?singleWsdl';
  defURL  = 'https://dev.transportesbra.com.br/frete/TMS/FreteService.svc/extended';
  defSvc  = 'FreteService';
  defPrt  = 'BasicHttpBinding_FreteTMSServiceExtended';
var
  RIO: THTTPRIO;
begin
  Result := nil;
  if (Addr = '') then
  begin
    if UseWSDL then
      Addr := defWSDL
    else
      Addr := defURL;
  end;
  if HTTPRIO = nil then
    RIO := THTTPRIO.Create(nil)
  else
    RIO := HTTPRIO;
  try
    Result := (RIO as FreteTMSServiceExtended);
    if UseWSDL then
    begin
      RIO.WSDLLocation := Addr;
      RIO.Service := defSvc;
      RIO.Port := defPrt;
    end else
      RIO.URL := Addr;
  finally
    if (Result = nil) and (HTTPRIO = nil) then
      RIO.Free;
  end;
end;


function BuscarCartoesResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure BuscarCartoesResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function BuscarCartoesResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function BuscarCartoesResponse2.GetListaCartoesAtivos(Index: Integer): ArrayOfItemBuscarCartoesResponse;
begin
  Result := FListaCartoesAtivos;
end;

procedure BuscarCartoesResponse2.SetListaCartoesAtivos(Index: Integer; const AArrayOfItemBuscarCartoesResponse: ArrayOfItemBuscarCartoesResponse);
begin
  FListaCartoesAtivos := AArrayOfItemBuscarCartoesResponse;
  FListaCartoesAtivos_Specified := True;
end;

function BuscarCartoesResponse2.ListaCartoesAtivos_Specified(Index: Integer): boolean;
begin
  Result := FListaCartoesAtivos_Specified;
end;

function RetificacaoEncerramentoOperacaoTransporteRequest2.GetPesoCarga(Index: Integer): TXSDecimal;
begin
  Result := FPesoCarga;
end;

procedure RetificacaoEncerramentoOperacaoTransporteRequest2.SetPesoCarga(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FPesoCarga := ATXSDecimal;
  FPesoCarga_Specified := True;
end;

function RetificacaoEncerramentoOperacaoTransporteRequest2.PesoCarga_Specified(Index: Integer): boolean;
begin
  Result := FPesoCarga_Specified;
end;

function RetificacaoEncerramentoOperacaoTransporteRequest2.GetValores(Index: Integer): RetificacaoValoresRequest2;
begin
  Result := FValores;
end;

procedure RetificacaoEncerramentoOperacaoTransporteRequest2.SetValores(Index: Integer; const ARetificacaoValoresRequest2: RetificacaoValoresRequest2);
begin
  FValores := ARetificacaoValoresRequest2;
  FValores_Specified := True;
end;

function RetificacaoEncerramentoOperacaoTransporteRequest2.Valores_Specified(Index: Integer): boolean;
begin
  Result := FValores_Specified;
end;

function ResultadoPaginadoMotoristaResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure ResultadoPaginadoMotoristaResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function ResultadoPaginadoMotoristaResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function ResultadoPaginadoMotoristaResponse2.GetItens(Index: Integer): ArrayOfMotoristaResponse;
begin
  Result := FItens;
end;

procedure ResultadoPaginadoMotoristaResponse2.SetItens(Index: Integer; const AArrayOfMotoristaResponse: ArrayOfMotoristaResponse);
begin
  FItens := AArrayOfMotoristaResponse;
  FItens_Specified := True;
end;

function ResultadoPaginadoMotoristaResponse2.Itens_Specified(Index: Integer): boolean;
begin
  Result := FItens_Specified;
end;

function ResultadoPaginadoMotoristaResponse2.GetNumeroPagina(Index: Integer): Integer;
begin
  Result := FNumeroPagina;
end;

procedure ResultadoPaginadoMotoristaResponse2.SetNumeroPagina(Index: Integer; const AInteger: Integer);
begin
  FNumeroPagina := AInteger;
  FNumeroPagina_Specified := True;
end;

function ResultadoPaginadoMotoristaResponse2.NumeroPagina_Specified(Index: Integer): boolean;
begin
  Result := FNumeroPagina_Specified;
end;

function ResultadoPaginadoMotoristaResponse2.GetQuantidadeItensPorPagina(Index: Integer): Integer;
begin
  Result := FQuantidadeItensPorPagina;
end;

procedure ResultadoPaginadoMotoristaResponse2.SetQuantidadeItensPorPagina(Index: Integer; const AInteger: Integer);
begin
  FQuantidadeItensPorPagina := AInteger;
  FQuantidadeItensPorPagina_Specified := True;
end;

function ResultadoPaginadoMotoristaResponse2.QuantidadeItensPorPagina_Specified(Index: Integer): boolean;
begin
  Result := FQuantidadeItensPorPagina_Specified;
end;

function ResultadoPaginadoMotoristaResponse2.GetQuantidadeTotalItens(Index: Integer): Integer;
begin
  Result := FQuantidadeTotalItens;
end;

procedure ResultadoPaginadoMotoristaResponse2.SetQuantidadeTotalItens(Index: Integer; const AInteger: Integer);
begin
  FQuantidadeTotalItens := AInteger;
  FQuantidadeTotalItens_Specified := True;
end;

function ResultadoPaginadoMotoristaResponse2.QuantidadeTotalItens_Specified(Index: Integer): boolean;
begin
  Result := FQuantidadeTotalItens_Specified;
end;

function ResultadoPaginadoMotoristaResponse2.GetQuantidadeTotalPaginas(Index: Integer): Integer;
begin
  Result := FQuantidadeTotalPaginas;
end;

procedure ResultadoPaginadoMotoristaResponse2.SetQuantidadeTotalPaginas(Index: Integer; const AInteger: Integer);
begin
  FQuantidadeTotalPaginas := AInteger;
  FQuantidadeTotalPaginas_Specified := True;
end;

function ResultadoPaginadoMotoristaResponse2.QuantidadeTotalPaginas_Specified(Index: Integer): boolean;
begin
  Result := FQuantidadeTotalPaginas_Specified;
end;

function ResultadoPaginadoCentroDeCustoResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure ResultadoPaginadoCentroDeCustoResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function ResultadoPaginadoCentroDeCustoResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function ResultadoPaginadoCentroDeCustoResponse2.GetItens(Index: Integer): ArrayOfCentroDeCustoResponse;
begin
  Result := FItens;
end;

procedure ResultadoPaginadoCentroDeCustoResponse2.SetItens(Index: Integer; const AArrayOfCentroDeCustoResponse: ArrayOfCentroDeCustoResponse);
begin
  FItens := AArrayOfCentroDeCustoResponse;
  FItens_Specified := True;
end;

function ResultadoPaginadoCentroDeCustoResponse2.Itens_Specified(Index: Integer): boolean;
begin
  Result := FItens_Specified;
end;

function ResultadoPaginadoCentroDeCustoResponse2.GetNumeroPagina(Index: Integer): Integer;
begin
  Result := FNumeroPagina;
end;

procedure ResultadoPaginadoCentroDeCustoResponse2.SetNumeroPagina(Index: Integer; const AInteger: Integer);
begin
  FNumeroPagina := AInteger;
  FNumeroPagina_Specified := True;
end;

function ResultadoPaginadoCentroDeCustoResponse2.NumeroPagina_Specified(Index: Integer): boolean;
begin
  Result := FNumeroPagina_Specified;
end;

function ResultadoPaginadoCentroDeCustoResponse2.GetQuantidadeItensPorPagina(Index: Integer): Integer;
begin
  Result := FQuantidadeItensPorPagina;
end;

procedure ResultadoPaginadoCentroDeCustoResponse2.SetQuantidadeItensPorPagina(Index: Integer; const AInteger: Integer);
begin
  FQuantidadeItensPorPagina := AInteger;
  FQuantidadeItensPorPagina_Specified := True;
end;

function ResultadoPaginadoCentroDeCustoResponse2.QuantidadeItensPorPagina_Specified(Index: Integer): boolean;
begin
  Result := FQuantidadeItensPorPagina_Specified;
end;

function ResultadoPaginadoCentroDeCustoResponse2.GetQuantidadeTotalItens(Index: Integer): Integer;
begin
  Result := FQuantidadeTotalItens;
end;

procedure ResultadoPaginadoCentroDeCustoResponse2.SetQuantidadeTotalItens(Index: Integer; const AInteger: Integer);
begin
  FQuantidadeTotalItens := AInteger;
  FQuantidadeTotalItens_Specified := True;
end;

function ResultadoPaginadoCentroDeCustoResponse2.QuantidadeTotalItens_Specified(Index: Integer): boolean;
begin
  Result := FQuantidadeTotalItens_Specified;
end;

function ResultadoPaginadoCentroDeCustoResponse2.GetQuantidadeTotalPaginas(Index: Integer): Integer;
begin
  Result := FQuantidadeTotalPaginas;
end;

procedure ResultadoPaginadoCentroDeCustoResponse2.SetQuantidadeTotalPaginas(Index: Integer; const AInteger: Integer);
begin
  FQuantidadeTotalPaginas := AInteger;
  FQuantidadeTotalPaginas_Specified := True;
end;

function ResultadoPaginadoCentroDeCustoResponse2.QuantidadeTotalPaginas_Specified(Index: Integer): boolean;
begin
  Result := FQuantidadeTotalPaginas_Specified;
end;

function DadosCompraValePedagioViaFacilPosCancelamento2.GetIdCompraValePedagioViaFacil(Index: Integer): Integer;
begin
  Result := FIdCompraValePedagioViaFacil;
end;

procedure DadosCompraValePedagioViaFacilPosCancelamento2.SetIdCompraValePedagioViaFacil(Index: Integer; const AInteger: Integer);
begin
  FIdCompraValePedagioViaFacil := AInteger;
  FIdCompraValePedagioViaFacil_Specified := True;
end;

function DadosCompraValePedagioViaFacilPosCancelamento2.IdCompraValePedagioViaFacil_Specified(Index: Integer): boolean;
begin
  Result := FIdCompraValePedagioViaFacil_Specified;
end;

function DadosCompraValePedagioViaFacilPosCancelamento2.GetValor(Index: Integer): TXSDecimal;
begin
  Result := FValor;
end;

procedure DadosCompraValePedagioViaFacilPosCancelamento2.SetValor(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValor := ATXSDecimal;
  FValor_Specified := True;
end;

function DadosCompraValePedagioViaFacilPosCancelamento2.Valor_Specified(Index: Integer): boolean;
begin
  Result := FValor_Specified;
end;

function DadosCompraValePedagioViaFacilPosCancelamento2.GetIdStatusCompraValePedagioViaFacilPosCancelamento(Index: Integer): Integer;
begin
  Result := FIdStatusCompraValePedagioViaFacilPosCancelamento;
end;

procedure DadosCompraValePedagioViaFacilPosCancelamento2.SetIdStatusCompraValePedagioViaFacilPosCancelamento(Index: Integer; const AInteger: Integer);
begin
  FIdStatusCompraValePedagioViaFacilPosCancelamento := AInteger;
  FIdStatusCompraValePedagioViaFacilPosCancelamento_Specified := True;
end;

function DadosCompraValePedagioViaFacilPosCancelamento2.IdStatusCompraValePedagioViaFacilPosCancelamento_Specified(Index: Integer): boolean;
begin
  Result := FIdStatusCompraValePedagioViaFacilPosCancelamento_Specified;
end;

function DadosCompraValePedagioPosCancelamento2.GetIdCompraValePedagio(Index: Integer): Integer;
begin
  Result := FIdCompraValePedagio;
end;

procedure DadosCompraValePedagioPosCancelamento2.SetIdCompraValePedagio(Index: Integer; const AInteger: Integer);
begin
  FIdCompraValePedagio := AInteger;
  FIdCompraValePedagio_Specified := True;
end;

function DadosCompraValePedagioPosCancelamento2.IdCompraValePedagio_Specified(Index: Integer): boolean;
begin
  Result := FIdCompraValePedagio_Specified;
end;

function DadosCompraValePedagioPosCancelamento2.GetValor(Index: Integer): TXSDecimal;
begin
  Result := FValor;
end;

procedure DadosCompraValePedagioPosCancelamento2.SetValor(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValor := ATXSDecimal;
  FValor_Specified := True;
end;

function DadosCompraValePedagioPosCancelamento2.Valor_Specified(Index: Integer): boolean;
begin
  Result := FValor_Specified;
end;

function DadosCompraValePedagioPosCancelamento2.GetIdStatusCompraValePedagioPosCancelamento(Index: Integer): Integer;
begin
  Result := FIdStatusCompraValePedagioPosCancelamento;
end;

procedure DadosCompraValePedagioPosCancelamento2.SetIdStatusCompraValePedagioPosCancelamento(Index: Integer; const AInteger: Integer);
begin
  FIdStatusCompraValePedagioPosCancelamento := AInteger;
  FIdStatusCompraValePedagioPosCancelamento_Specified := True;
end;

function DadosCompraValePedagioPosCancelamento2.IdStatusCompraValePedagioPosCancelamento_Specified(Index: Integer): boolean;
begin
  Result := FIdStatusCompraValePedagioPosCancelamento_Specified;
end;

function ListarRotaClienteRequest2.GetCodigoIBGEOrigem(Index: Integer): Integer;
begin
  Result := FCodigoIBGEOrigem;
end;

procedure ListarRotaClienteRequest2.SetCodigoIBGEOrigem(Index: Integer; const AInteger: Integer);
begin
  FCodigoIBGEOrigem := AInteger;
  FCodigoIBGEOrigem_Specified := True;
end;

function ListarRotaClienteRequest2.CodigoIBGEOrigem_Specified(Index: Integer): boolean;
begin
  Result := FCodigoIBGEOrigem_Specified;
end;

function ListarRotaClienteRequest2.GetCodigoIBGEDestino(Index: Integer): Integer;
begin
  Result := FCodigoIBGEDestino;
end;

procedure ListarRotaClienteRequest2.SetCodigoIBGEDestino(Index: Integer; const AInteger: Integer);
begin
  FCodigoIBGEDestino := AInteger;
  FCodigoIBGEDestino_Specified := True;
end;

function ListarRotaClienteRequest2.CodigoIBGEDestino_Specified(Index: Integer): boolean;
begin
  Result := FCodigoIBGEDestino_Specified;
end;

function ListarRotaClienteRequest2.GetNumeroPagina(Index: Integer): Integer;
begin
  Result := FNumeroPagina;
end;

procedure ListarRotaClienteRequest2.SetNumeroPagina(Index: Integer; const AInteger: Integer);
begin
  FNumeroPagina := AInteger;
  FNumeroPagina_Specified := True;
end;

function ListarRotaClienteRequest2.NumeroPagina_Specified(Index: Integer): boolean;
begin
  Result := FNumeroPagina_Specified;
end;

function ListarRotaClienteRequest2.GetQuantidadeItensPorPagina(Index: Integer): Integer;
begin
  Result := FQuantidadeItensPorPagina;
end;

procedure ListarRotaClienteRequest2.SetQuantidadeItensPorPagina(Index: Integer; const AInteger: Integer);
begin
  FQuantidadeItensPorPagina := AInteger;
  FQuantidadeItensPorPagina_Specified := True;
end;

function ListarRotaClienteRequest2.QuantidadeItensPorPagina_Specified(Index: Integer): boolean;
begin
  Result := FQuantidadeItensPorPagina_Specified;
end;

function ResultadoPaginadoListarRotasClienteResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure ResultadoPaginadoListarRotasClienteResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function ResultadoPaginadoListarRotasClienteResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function ResultadoPaginadoListarRotasClienteResponse2.GetItens(Index: Integer): ArrayOfListarRotasClienteResponse;
begin
  Result := FItens;
end;

procedure ResultadoPaginadoListarRotasClienteResponse2.SetItens(Index: Integer; const AArrayOfListarRotasClienteResponse: ArrayOfListarRotasClienteResponse);
begin
  FItens := AArrayOfListarRotasClienteResponse;
  FItens_Specified := True;
end;

function ResultadoPaginadoListarRotasClienteResponse2.Itens_Specified(Index: Integer): boolean;
begin
  Result := FItens_Specified;
end;

function ResultadoPaginadoListarRotasClienteResponse2.GetNumeroPagina(Index: Integer): Integer;
begin
  Result := FNumeroPagina;
end;

procedure ResultadoPaginadoListarRotasClienteResponse2.SetNumeroPagina(Index: Integer; const AInteger: Integer);
begin
  FNumeroPagina := AInteger;
  FNumeroPagina_Specified := True;
end;

function ResultadoPaginadoListarRotasClienteResponse2.NumeroPagina_Specified(Index: Integer): boolean;
begin
  Result := FNumeroPagina_Specified;
end;

function ResultadoPaginadoListarRotasClienteResponse2.GetQuantidadeItensPorPagina(Index: Integer): Integer;
begin
  Result := FQuantidadeItensPorPagina;
end;

procedure ResultadoPaginadoListarRotasClienteResponse2.SetQuantidadeItensPorPagina(Index: Integer; const AInteger: Integer);
begin
  FQuantidadeItensPorPagina := AInteger;
  FQuantidadeItensPorPagina_Specified := True;
end;

function ResultadoPaginadoListarRotasClienteResponse2.QuantidadeItensPorPagina_Specified(Index: Integer): boolean;
begin
  Result := FQuantidadeItensPorPagina_Specified;
end;

function ResultadoPaginadoListarRotasClienteResponse2.GetQuantidadeTotalItens(Index: Integer): Integer;
begin
  Result := FQuantidadeTotalItens;
end;

procedure ResultadoPaginadoListarRotasClienteResponse2.SetQuantidadeTotalItens(Index: Integer; const AInteger: Integer);
begin
  FQuantidadeTotalItens := AInteger;
  FQuantidadeTotalItens_Specified := True;
end;

function ResultadoPaginadoListarRotasClienteResponse2.QuantidadeTotalItens_Specified(Index: Integer): boolean;
begin
  Result := FQuantidadeTotalItens_Specified;
end;

function ResultadoPaginadoListarRotasClienteResponse2.GetQuantidadeTotalPaginas(Index: Integer): Integer;
begin
  Result := FQuantidadeTotalPaginas;
end;

procedure ResultadoPaginadoListarRotasClienteResponse2.SetQuantidadeTotalPaginas(Index: Integer; const AInteger: Integer);
begin
  FQuantidadeTotalPaginas := AInteger;
  FQuantidadeTotalPaginas_Specified := True;
end;

function ResultadoPaginadoListarRotasClienteResponse2.QuantidadeTotalPaginas_Specified(Index: Integer): boolean;
begin
  Result := FQuantidadeTotalPaginas_Specified;
end;

function ConfirmacaoPedagioRequest2.GetIdCompraValePedagioViaFacil(Index: Integer): Integer;
begin
  Result := FIdCompraValePedagioViaFacil;
end;

procedure ConfirmacaoPedagioRequest2.SetIdCompraValePedagioViaFacil(Index: Integer; const AInteger: Integer);
begin
  FIdCompraValePedagioViaFacil := AInteger;
  FIdCompraValePedagioViaFacil_Specified := True;
end;

function ConfirmacaoPedagioRequest2.IdCompraValePedagioViaFacil_Specified(Index: Integer): boolean;
begin
  Result := FIdCompraValePedagioViaFacil_Specified;
end;

function FinalizacaoOperacaoTransporteRequest2.GetIdOperacaoTransporte(Index: Integer): Integer;
begin
  Result := FIdOperacaoTransporte;
end;

procedure FinalizacaoOperacaoTransporteRequest2.SetIdOperacaoTransporte(Index: Integer; const AInteger: Integer);
begin
  FIdOperacaoTransporte := AInteger;
  FIdOperacaoTransporte_Specified := True;
end;

function FinalizacaoOperacaoTransporteRequest2.IdOperacaoTransporte_Specified(Index: Integer): boolean;
begin
  Result := FIdOperacaoTransporte_Specified;
end;

function RetificacaoOperacaoTransporteResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure RetificacaoOperacaoTransporteResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function RetificacaoOperacaoTransporteResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function RetificacaoOperacaoTransporteResponse2.GetIdOperacaoTransporte(Index: Integer): Integer;
begin
  Result := FIdOperacaoTransporte;
end;

procedure RetificacaoOperacaoTransporteResponse2.SetIdOperacaoTransporte(Index: Integer; const AInteger: Integer);
begin
  FIdOperacaoTransporte := AInteger;
  FIdOperacaoTransporte_Specified := True;
end;

function RetificacaoOperacaoTransporteResponse2.IdOperacaoTransporte_Specified(Index: Integer): boolean;
begin
  Result := FIdOperacaoTransporte_Specified;
end;

function RetificacaoOperacaoTransporteResponse2.GetIdRetificacaoOperacaoTransporte(Index: Integer): Integer;
begin
  Result := FIdRetificacaoOperacaoTransporte;
end;

procedure RetificacaoOperacaoTransporteResponse2.SetIdRetificacaoOperacaoTransporte(Index: Integer; const AInteger: Integer);
begin
  FIdRetificacaoOperacaoTransporte := AInteger;
  FIdRetificacaoOperacaoTransporte_Specified := True;
end;

function RetificacaoOperacaoTransporteResponse2.IdRetificacaoOperacaoTransporte_Specified(Index: Integer): boolean;
begin
  Result := FIdRetificacaoOperacaoTransporte_Specified;
end;

function RetificacaoOperacaoTransporteResponse2.GetDataHoraRetificacao(Index: Integer): TXSDateTime;
begin
  Result := FDataHoraRetificacao;
end;

procedure RetificacaoOperacaoTransporteResponse2.SetDataHoraRetificacao(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDataHoraRetificacao := ATXSDateTime;
  FDataHoraRetificacao_Specified := True;
end;

function RetificacaoOperacaoTransporteResponse2.DataHoraRetificacao_Specified(Index: Integer): boolean;
begin
  Result := FDataHoraRetificacao_Specified;
end;

function CadastroAtualizacaoDadosQuitacaoRequest2.GetIdOperacaoTransporte(Index: Integer): Integer;
begin
  Result := FIdOperacaoTransporte;
end;

procedure CadastroAtualizacaoDadosQuitacaoRequest2.SetIdOperacaoTransporte(Index: Integer; const AInteger: Integer);
begin
  FIdOperacaoTransporte := AInteger;
  FIdOperacaoTransporte_Specified := True;
end;

function CadastroAtualizacaoDadosQuitacaoRequest2.IdOperacaoTransporte_Specified(Index: Integer): boolean;
begin
  Result := FIdOperacaoTransporte_Specified;
end;

function CadastroAtualizacaoDadosQuitacaoRequest2.GetDadosQuitacao(Index: Integer): DadosQuitacaoFreteRequest2;
begin
  Result := FDadosQuitacao;
end;

procedure CadastroAtualizacaoDadosQuitacaoRequest2.SetDadosQuitacao(Index: Integer; const ADadosQuitacaoFreteRequest2: DadosQuitacaoFreteRequest2);
begin
  FDadosQuitacao := ADadosQuitacaoFreteRequest2;
  FDadosQuitacao_Specified := True;
end;

function CadastroAtualizacaoDadosQuitacaoRequest2.DadosQuitacao_Specified(Index: Integer): boolean;
begin
  Result := FDadosQuitacao_Specified;
end;

function ObterDetalhesQuitacaoRequest2.GetIdOperacao(Index: Integer): Integer;
begin
  Result := FIdOperacao;
end;

procedure ObterDetalhesQuitacaoRequest2.SetIdOperacao(Index: Integer; const AInteger: Integer);
begin
  FIdOperacao := AInteger;
  FIdOperacao_Specified := True;
end;

function ObterDetalhesQuitacaoRequest2.IdOperacao_Specified(Index: Integer): boolean;
begin
  Result := FIdOperacao_Specified;
end;

function ResultadoPaginadoOperacaoTransporteResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure ResultadoPaginadoOperacaoTransporteResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function ResultadoPaginadoOperacaoTransporteResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function ResultadoPaginadoOperacaoTransporteResponse2.GetItens(Index: Integer): ArrayOfOperacaoTransporteResponse;
begin
  Result := FItens;
end;

procedure ResultadoPaginadoOperacaoTransporteResponse2.SetItens(Index: Integer; const AArrayOfOperacaoTransporteResponse: ArrayOfOperacaoTransporteResponse);
begin
  FItens := AArrayOfOperacaoTransporteResponse;
  FItens_Specified := True;
end;

function ResultadoPaginadoOperacaoTransporteResponse2.Itens_Specified(Index: Integer): boolean;
begin
  Result := FItens_Specified;
end;

function ResultadoPaginadoOperacaoTransporteResponse2.GetNumeroPagina(Index: Integer): Integer;
begin
  Result := FNumeroPagina;
end;

procedure ResultadoPaginadoOperacaoTransporteResponse2.SetNumeroPagina(Index: Integer; const AInteger: Integer);
begin
  FNumeroPagina := AInteger;
  FNumeroPagina_Specified := True;
end;

function ResultadoPaginadoOperacaoTransporteResponse2.NumeroPagina_Specified(Index: Integer): boolean;
begin
  Result := FNumeroPagina_Specified;
end;

function ResultadoPaginadoOperacaoTransporteResponse2.GetQuantidadeItensPorPagina(Index: Integer): Integer;
begin
  Result := FQuantidadeItensPorPagina;
end;

procedure ResultadoPaginadoOperacaoTransporteResponse2.SetQuantidadeItensPorPagina(Index: Integer; const AInteger: Integer);
begin
  FQuantidadeItensPorPagina := AInteger;
  FQuantidadeItensPorPagina_Specified := True;
end;

function ResultadoPaginadoOperacaoTransporteResponse2.QuantidadeItensPorPagina_Specified(Index: Integer): boolean;
begin
  Result := FQuantidadeItensPorPagina_Specified;
end;

function ResultadoPaginadoOperacaoTransporteResponse2.GetQuantidadeTotalItens(Index: Integer): Integer;
begin
  Result := FQuantidadeTotalItens;
end;

procedure ResultadoPaginadoOperacaoTransporteResponse2.SetQuantidadeTotalItens(Index: Integer; const AInteger: Integer);
begin
  FQuantidadeTotalItens := AInteger;
  FQuantidadeTotalItens_Specified := True;
end;

function ResultadoPaginadoOperacaoTransporteResponse2.QuantidadeTotalItens_Specified(Index: Integer): boolean;
begin
  Result := FQuantidadeTotalItens_Specified;
end;

function ResultadoPaginadoOperacaoTransporteResponse2.GetQuantidadeTotalPaginas(Index: Integer): Integer;
begin
  Result := FQuantidadeTotalPaginas;
end;

procedure ResultadoPaginadoOperacaoTransporteResponse2.SetQuantidadeTotalPaginas(Index: Integer; const AInteger: Integer);
begin
  FQuantidadeTotalPaginas := AInteger;
  FQuantidadeTotalPaginas_Specified := True;
end;

function ResultadoPaginadoOperacaoTransporteResponse2.QuantidadeTotalPaginas_Specified(Index: Integer): boolean;
begin
  Result := FQuantidadeTotalPaginas_Specified;
end;

function DeclaracaoOperacaoTransporteRequest2.GetIdOperacaoTransporte(Index: Integer): Integer;
begin
  Result := FIdOperacaoTransporte;
end;

procedure DeclaracaoOperacaoTransporteRequest2.SetIdOperacaoTransporte(Index: Integer; const AInteger: Integer);
begin
  FIdOperacaoTransporte := AInteger;
  FIdOperacaoTransporte_Specified := True;
end;

function DeclaracaoOperacaoTransporteRequest2.IdOperacaoTransporte_Specified(Index: Integer): boolean;
begin
  Result := FIdOperacaoTransporte_Specified;
end;

function PagamentoParcelaRequest2.GetidOperacaoTransporteParcela(Index: Integer): Integer;
begin
  Result := FidOperacaoTransporteParcela;
end;

procedure PagamentoParcelaRequest2.SetidOperacaoTransporteParcela(Index: Integer; const AInteger: Integer);
begin
  FidOperacaoTransporteParcela := AInteger;
  FidOperacaoTransporteParcela_Specified := True;
end;

function PagamentoParcelaRequest2.idOperacaoTransporteParcela_Specified(Index: Integer): boolean;
begin
  Result := FidOperacaoTransporteParcela_Specified;
end;

function AutenticacaoRequest2.GetUsuario(Index: Integer): string;
begin
  Result := FUsuario;
end;

procedure AutenticacaoRequest2.SetUsuario(Index: Integer; const Astring: string);
begin
  FUsuario := Astring;
  FUsuario_Specified := True;
end;

function AutenticacaoRequest2.Usuario_Specified(Index: Integer): boolean;
begin
  Result := FUsuario_Specified;
end;

function AutenticacaoRequest2.GetSenha(Index: Integer): string;
begin
  Result := FSenha;
end;

procedure AutenticacaoRequest2.SetSenha(Index: Integer; const Astring: string);
begin
  FSenha := Astring;
  FSenha_Specified := True;
end;

function AutenticacaoRequest2.Senha_Specified(Index: Integer): boolean;
begin
  Result := FSenha_Specified;
end;

function AutenticacaoRequest2.GetToken(Index: Integer): string;
begin
  Result := FToken;
end;

procedure AutenticacaoRequest2.SetToken(Index: Integer; const Astring: string);
begin
  FToken := Astring;
  FToken_Specified := True;
end;

function AutenticacaoRequest2.Token_Specified(Index: Integer): boolean;
begin
  Result := FToken_Specified;
end;

function ErroResponse2.GetCodigoErro(Index: Integer): Integer;
begin
  Result := FCodigoErro;
end;

procedure ErroResponse2.SetCodigoErro(Index: Integer; const AInteger: Integer);
begin
  FCodigoErro := AInteger;
  FCodigoErro_Specified := True;
end;

function ErroResponse2.CodigoErro_Specified(Index: Integer): boolean;
begin
  Result := FCodigoErro_Specified;
end;

function ErroResponse2.GetMensagemErro(Index: Integer): string;
begin
  Result := FMensagemErro;
end;

procedure ErroResponse2.SetMensagemErro(Index: Integer; const Astring: string);
begin
  FMensagemErro := Astring;
  FMensagemErro_Specified := True;
end;

function ErroResponse2.MensagemErro_Specified(Index: Integer): boolean;
begin
  Result := FMensagemErro_Specified;
end;

function ErroResponse2.GetCodigoErroEspecifico(Index: Integer): string;
begin
  Result := FCodigoErroEspecifico;
end;

procedure ErroResponse2.SetCodigoErroEspecifico(Index: Integer; const Astring: string);
begin
  FCodigoErroEspecifico := Astring;
  FCodigoErroEspecifico_Specified := True;
end;

function ErroResponse2.CodigoErroEspecifico_Specified(Index: Integer): boolean;
begin
  Result := FCodigoErroEspecifico_Specified;
end;

function ErroResponse2.GetBusinessRequestId(Index: Integer): string;
begin
  Result := FBusinessRequestId;
end;

procedure ErroResponse2.SetBusinessRequestId(Index: Integer; const Astring: string);
begin
  FBusinessRequestId := Astring;
  FBusinessRequestId_Specified := True;
end;

function ErroResponse2.BusinessRequestId_Specified(Index: Integer): boolean;
begin
  Result := FBusinessRequestId_Specified;
end;

function TransportadorResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure TransportadorResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function TransportadorResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function TransportadorResponse2.GetCPFCNPJ(Index: Integer): string;
begin
  Result := FCPFCNPJ;
end;

procedure TransportadorResponse2.SetCPFCNPJ(Index: Integer; const Astring: string);
begin
  FCPFCNPJ := Astring;
  FCPFCNPJ_Specified := True;
end;

function TransportadorResponse2.CPFCNPJ_Specified(Index: Integer): boolean;
begin
  Result := FCPFCNPJ_Specified;
end;

function TransportadorResponse2.GetDataAtualizacao(Index: Integer): TXSDateTime;
begin
  Result := FDataAtualizacao;
end;

procedure TransportadorResponse2.SetDataAtualizacao(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDataAtualizacao := ATXSDateTime;
  FDataAtualizacao_Specified := True;
end;

function TransportadorResponse2.DataAtualizacao_Specified(Index: Integer): boolean;
begin
  Result := FDataAtualizacao_Specified;
end;

function TransportadorResponse2.GetDataRegistro(Index: Integer): TXSDateTime;
begin
  Result := FDataRegistro;
end;

procedure TransportadorResponse2.SetDataRegistro(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDataRegistro := ATXSDateTime;
  FDataRegistro_Specified := True;
end;

function TransportadorResponse2.DataRegistro_Specified(Index: Integer): boolean;
begin
  Result := FDataRegistro_Specified;
end;

function TransportadorResponse2.GetIdCliente(Index: Integer): Integer;
begin
  Result := FIdCliente;
end;

procedure TransportadorResponse2.SetIdCliente(Index: Integer; const AInteger: Integer);
begin
  FIdCliente := AInteger;
  FIdCliente_Specified := True;
end;

function TransportadorResponse2.IdCliente_Specified(Index: Integer): boolean;
begin
  Result := FIdCliente_Specified;
end;

function TransportadorResponse2.GetIdDmTipoPessoa(Index: Integer): Integer;
begin
  Result := FIdDmTipoPessoa;
end;

procedure TransportadorResponse2.SetIdDmTipoPessoa(Index: Integer; const AInteger: Integer);
begin
  FIdDmTipoPessoa := AInteger;
  FIdDmTipoPessoa_Specified := True;
end;

function TransportadorResponse2.IdDmTipoPessoa_Specified(Index: Integer): boolean;
begin
  Result := FIdDmTipoPessoa_Specified;
end;

function TransportadorResponse2.GetIdDmTipoTransportador(Index: Integer): Integer;
begin
  Result := FIdDmTipoTransportador;
end;

procedure TransportadorResponse2.SetIdDmTipoTransportador(Index: Integer; const AInteger: Integer);
begin
  FIdDmTipoTransportador := AInteger;
  FIdDmTipoTransportador_Specified := True;
end;

function TransportadorResponse2.IdDmTipoTransportador_Specified(Index: Integer): boolean;
begin
  Result := FIdDmTipoTransportador_Specified;
end;

function TransportadorResponse2.GetNomeRazaoSocial(Index: Integer): string;
begin
  Result := FNomeRazaoSocial;
end;

procedure TransportadorResponse2.SetNomeRazaoSocial(Index: Integer; const Astring: string);
begin
  FNomeRazaoSocial := Astring;
  FNomeRazaoSocial_Specified := True;
end;

function TransportadorResponse2.NomeRazaoSocial_Specified(Index: Integer): boolean;
begin
  Result := FNomeRazaoSocial_Specified;
end;

function TransportadorResponse2.GetRNTRC(Index: Integer): string;
begin
  Result := FRNTRC;
end;

procedure TransportadorResponse2.SetRNTRC(Index: Integer; const Astring: string);
begin
  FRNTRC := Astring;
  FRNTRC_Specified := True;
end;

function TransportadorResponse2.RNTRC_Specified(Index: Integer): boolean;
begin
  Result := FRNTRC_Specified;
end;

function BuscaTransportadorRequest2.GetQuantidadeItensPorPagina(Index: Integer): Integer;
begin
  Result := FQuantidadeItensPorPagina;
end;

procedure BuscaTransportadorRequest2.SetQuantidadeItensPorPagina(Index: Integer; const AInteger: Integer);
begin
  FQuantidadeItensPorPagina := AInteger;
  FQuantidadeItensPorPagina_Specified := True;
end;

function BuscaTransportadorRequest2.QuantidadeItensPorPagina_Specified(Index: Integer): boolean;
begin
  Result := FQuantidadeItensPorPagina_Specified;
end;

function BuscaTransportadorRequest2.GetNumeroPagina(Index: Integer): Integer;
begin
  Result := FNumeroPagina;
end;

procedure BuscaTransportadorRequest2.SetNumeroPagina(Index: Integer; const AInteger: Integer);
begin
  FNumeroPagina := AInteger;
  FNumeroPagina_Specified := True;
end;

function BuscaTransportadorRequest2.NumeroPagina_Specified(Index: Integer): boolean;
begin
  Result := FNumeroPagina_Specified;
end;

function BuscaTransportadorRequest2.GetCPFCNPJ(Index: Integer): string;
begin
  Result := FCPFCNPJ;
end;

procedure BuscaTransportadorRequest2.SetCPFCNPJ(Index: Integer; const Astring: string);
begin
  FCPFCNPJ := Astring;
  FCPFCNPJ_Specified := True;
end;

function BuscaTransportadorRequest2.CPFCNPJ_Specified(Index: Integer): boolean;
begin
  Result := FCPFCNPJ_Specified;
end;

function OperacaoTransporteViagemRequest2.GetMunicipioOrigemCodigoIBGE(Index: Integer): Integer;
begin
  Result := FMunicipioOrigemCodigoIBGE;
end;

procedure OperacaoTransporteViagemRequest2.SetMunicipioOrigemCodigoIBGE(Index: Integer; const AInteger: Integer);
begin
  FMunicipioOrigemCodigoIBGE := AInteger;
  FMunicipioOrigemCodigoIBGE_Specified := True;
end;

function OperacaoTransporteViagemRequest2.MunicipioOrigemCodigoIBGE_Specified(Index: Integer): boolean;
begin
  Result := FMunicipioOrigemCodigoIBGE_Specified;
end;

function OperacaoTransporteViagemRequest2.GetMunicipioDestinoCodigoIBGE(Index: Integer): Integer;
begin
  Result := FMunicipioDestinoCodigoIBGE;
end;

procedure OperacaoTransporteViagemRequest2.SetMunicipioDestinoCodigoIBGE(Index: Integer; const AInteger: Integer);
begin
  FMunicipioDestinoCodigoIBGE := AInteger;
  FMunicipioDestinoCodigoIBGE_Specified := True;
end;

function OperacaoTransporteViagemRequest2.MunicipioDestinoCodigoIBGE_Specified(Index: Integer): boolean;
begin
  Result := FMunicipioDestinoCodigoIBGE_Specified;
end;

function OperacaoTransporteViagemRequest2.GetNCM(Index: Integer): string;
begin
  Result := FNCM;
end;

procedure OperacaoTransporteViagemRequest2.SetNCM(Index: Integer; const Astring: string);
begin
  FNCM := Astring;
  FNCM_Specified := True;
end;

function OperacaoTransporteViagemRequest2.NCM_Specified(Index: Integer): boolean;
begin
  Result := FNCM_Specified;
end;

function OperacaoTransporteViagemRequest2.GetPesoCarga(Index: Integer): TXSDecimal;
begin
  Result := FPesoCarga;
end;

procedure OperacaoTransporteViagemRequest2.SetPesoCarga(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FPesoCarga := ATXSDecimal;
  FPesoCarga_Specified := True;
end;

function OperacaoTransporteViagemRequest2.PesoCarga_Specified(Index: Integer): boolean;
begin
  Result := FPesoCarga_Specified;
end;

function OperacaoTransporteViagemRequest2.GetQuantidadeViagens(Index: Integer): Integer;
begin
  Result := FQuantidadeViagens;
end;

procedure OperacaoTransporteViagemRequest2.SetQuantidadeViagens(Index: Integer; const AInteger: Integer);
begin
  FQuantidadeViagens := AInteger;
  FQuantidadeViagens_Specified := True;
end;

function OperacaoTransporteViagemRequest2.QuantidadeViagens_Specified(Index: Integer): boolean;
begin
  Result := FQuantidadeViagens_Specified;
end;

function EncerramentoOperacaoTransporteResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure EncerramentoOperacaoTransporteResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function EncerramentoOperacaoTransporteResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function EncerramentoOperacaoTransporteResponse2.GetIdEncerramentoOperacaoTransporte(Index: Integer): Integer;
begin
  Result := FIdEncerramentoOperacaoTransporte;
end;

procedure EncerramentoOperacaoTransporteResponse2.SetIdEncerramentoOperacaoTransporte(Index: Integer; const AInteger: Integer);
begin
  FIdEncerramentoOperacaoTransporte := AInteger;
  FIdEncerramentoOperacaoTransporte_Specified := True;
end;

function EncerramentoOperacaoTransporteResponse2.IdEncerramentoOperacaoTransporte_Specified(Index: Integer): boolean;
begin
  Result := FIdEncerramentoOperacaoTransporte_Specified;
end;

function EncerramentoOperacaoTransporteResponse2.GetDataEncerramento(Index: Integer): TXSDateTime;
begin
  Result := FDataEncerramento;
end;

procedure EncerramentoOperacaoTransporteResponse2.SetDataEncerramento(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDataEncerramento := ATXSDateTime;
  FDataEncerramento_Specified := True;
end;

function EncerramentoOperacaoTransporteResponse2.DataEncerramento_Specified(Index: Integer): boolean;
begin
  Result := FDataEncerramento_Specified;
end;

function EncerramentoOperacaoTransporteResponse2.GetProtocoloEncerramento(Index: Integer): string;
begin
  Result := FProtocoloEncerramento;
end;

procedure EncerramentoOperacaoTransporteResponse2.SetProtocoloEncerramento(Index: Integer; const Astring: string);
begin
  FProtocoloEncerramento := Astring;
  FProtocoloEncerramento_Specified := True;
end;

function EncerramentoOperacaoTransporteResponse2.ProtocoloEncerramento_Specified(Index: Integer): boolean;
begin
  Result := FProtocoloEncerramento_Specified;
end;

function EncerramentoOperacaoTransporteResponse2.GetTipoOperacao(Index: Integer): string;
begin
  Result := FTipoOperacao;
end;

procedure EncerramentoOperacaoTransporteResponse2.SetTipoOperacao(Index: Integer; const Astring: string);
begin
  FTipoOperacao := Astring;
  FTipoOperacao_Specified := True;
end;

function EncerramentoOperacaoTransporteResponse2.TipoOperacao_Specified(Index: Integer): boolean;
begin
  Result := FTipoOperacao_Specified;
end;

function BuscaCartoesRequest2.GetCPFCNPJ(Index: Integer): string;
begin
  Result := FCPFCNPJ;
end;

procedure BuscaCartoesRequest2.SetCPFCNPJ(Index: Integer; const Astring: string);
begin
  FCPFCNPJ := Astring;
  FCPFCNPJ_Specified := True;
end;

function BuscaCartoesRequest2.CPFCNPJ_Specified(Index: Integer): boolean;
begin
  Result := FCPFCNPJ_Specified;
end;

function EncerramentoOperacaoTransporteRequest2.GetCodigoOperacao(Index: Integer): Integer;
begin
  Result := FCodigoOperacao;
end;

procedure EncerramentoOperacaoTransporteRequest2.SetCodigoOperacao(Index: Integer; const AInteger: Integer);
begin
  FCodigoOperacao := AInteger;
  FCodigoOperacao_Specified := True;
end;

function EncerramentoOperacaoTransporteRequest2.CodigoOperacao_Specified(Index: Integer): boolean;
begin
  Result := FCodigoOperacao_Specified;
end;

function EncerramentoOperacaoTransporteRequest2.GetObservacaoAvariaContratante(Index: Integer): string;
begin
  Result := FObservacaoAvariaContratante;
end;

procedure EncerramentoOperacaoTransporteRequest2.SetObservacaoAvariaContratante(Index: Integer; const Astring: string);
begin
  FObservacaoAvariaContratante := Astring;
  FObservacaoAvariaContratante_Specified := True;
end;

function EncerramentoOperacaoTransporteRequest2.ObservacaoAvariaContratante_Specified(Index: Integer): boolean;
begin
  Result := FObservacaoAvariaContratante_Specified;
end;

function EncerramentoOperacaoTransporteRequest2.GetViagens(Index: Integer): ArrayOfOperacaoTransporteViagemRequest;
begin
  Result := FViagens;
end;

procedure EncerramentoOperacaoTransporteRequest2.SetViagens(Index: Integer; const AArrayOfOperacaoTransporteViagemRequest: ArrayOfOperacaoTransporteViagemRequest);
begin
  FViagens := AArrayOfOperacaoTransporteViagemRequest;
  FViagens_Specified := True;
end;

function EncerramentoOperacaoTransporteRequest2.Viagens_Specified(Index: Integer): boolean;
begin
  Result := FViagens_Specified;
end;

function EncerramentoOperacaoTransporteRequest2.GetRetificacao(Index: Integer): RetificacaoEncerramentoOperacaoTransporteRequest2;
begin
  Result := FRetificacao;
end;

procedure EncerramentoOperacaoTransporteRequest2.SetRetificacao(Index: Integer; const ARetificacaoEncerramentoOperacaoTransporteRequest2: RetificacaoEncerramentoOperacaoTransporteRequest2);
begin
  FRetificacao := ARetificacaoEncerramentoOperacaoTransporteRequest2;
  FRetificacao_Specified := True;
end;

function EncerramentoOperacaoTransporteRequest2.Retificacao_Specified(Index: Integer): boolean;
begin
  Result := FRetificacao_Specified;
end;

function CancelamentoOperacaoResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure CancelamentoOperacaoResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function CancelamentoOperacaoResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function CancelamentoOperacaoResponse2.GetIdCancelamentoOperacaoTransporte(Index: Integer): Integer;
begin
  Result := FIdCancelamentoOperacaoTransporte;
end;

procedure CancelamentoOperacaoResponse2.SetIdCancelamentoOperacaoTransporte(Index: Integer; const AInteger: Integer);
begin
  FIdCancelamentoOperacaoTransporte := AInteger;
  FIdCancelamentoOperacaoTransporte_Specified := True;
end;

function CancelamentoOperacaoResponse2.IdCancelamentoOperacaoTransporte_Specified(Index: Integer): boolean;
begin
  Result := FIdCancelamentoOperacaoTransporte_Specified;
end;

function CancelamentoOperacaoResponse2.GetDataCancelamento(Index: Integer): TXSDateTime;
begin
  Result := FDataCancelamento;
end;

procedure CancelamentoOperacaoResponse2.SetDataCancelamento(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDataCancelamento := ATXSDateTime;
  FDataCancelamento_Specified := True;
end;

function CancelamentoOperacaoResponse2.DataCancelamento_Specified(Index: Integer): boolean;
begin
  Result := FDataCancelamento_Specified;
end;

function CancelamentoOperacaoResponse2.GetProtocoloCancelamento(Index: Integer): string;
begin
  Result := FProtocoloCancelamento;
end;

procedure CancelamentoOperacaoResponse2.SetProtocoloCancelamento(Index: Integer; const Astring: string);
begin
  FProtocoloCancelamento := Astring;
  FProtocoloCancelamento_Specified := True;
end;

function CancelamentoOperacaoResponse2.ProtocoloCancelamento_Specified(Index: Integer): boolean;
begin
  Result := FProtocoloCancelamento_Specified;
end;

function CancelamentoOperacaoResponse2.GetDadosCompraValePedagioRelacionadas(Index: Integer): ArrayOfDadosCompraValePedagioPosCancelamento;
begin
  Result := FDadosCompraValePedagioRelacionadas;
end;

procedure CancelamentoOperacaoResponse2.SetDadosCompraValePedagioRelacionadas(Index: Integer; const AArrayOfDadosCompraValePedagioPosCancelamento: ArrayOfDadosCompraValePedagioPosCancelamento);
begin
  FDadosCompraValePedagioRelacionadas := AArrayOfDadosCompraValePedagioPosCancelamento;
  FDadosCompraValePedagioRelacionadas_Specified := True;
end;

function CancelamentoOperacaoResponse2.DadosCompraValePedagioRelacionadas_Specified(Index: Integer): boolean;
begin
  Result := FDadosCompraValePedagioRelacionadas_Specified;
end;

function CancelamentoOperacaoResponse2.GetDadosCompraValePedagioViaFacilRelacionadas(Index: Integer): ArrayOfDadosCompraValePedagioViaFacilPosCancelamento;
begin
  Result := FDadosCompraValePedagioViaFacilRelacionadas;
end;

procedure CancelamentoOperacaoResponse2.SetDadosCompraValePedagioViaFacilRelacionadas(Index: Integer; const AArrayOfDadosCompraValePedagioViaFacilPosCancelamento: ArrayOfDadosCompraValePedagioViaFacilPosCancelamento);
begin
  FDadosCompraValePedagioViaFacilRelacionadas := AArrayOfDadosCompraValePedagioViaFacilPosCancelamento;
  FDadosCompraValePedagioViaFacilRelacionadas_Specified := True;
end;

function CancelamentoOperacaoResponse2.DadosCompraValePedagioViaFacilRelacionadas_Specified(Index: Integer): boolean;
begin
  Result := FDadosCompraValePedagioViaFacilRelacionadas_Specified;
end;

function CancelamentoOperacaoResponse2.GetMensagemCancelamentoViaFacil(Index: Integer): string;
begin
  Result := FMensagemCancelamentoViaFacil;
end;

procedure CancelamentoOperacaoResponse2.SetMensagemCancelamentoViaFacil(Index: Integer; const Astring: string);
begin
  FMensagemCancelamentoViaFacil := Astring;
  FMensagemCancelamentoViaFacil_Specified := True;
end;

function CancelamentoOperacaoResponse2.MensagemCancelamentoViaFacil_Specified(Index: Integer): boolean;
begin
  Result := FMensagemCancelamentoViaFacil_Specified;
end;

function CancelamentoOperacaoRequest2.GetIdOperacao(Index: Integer): Integer;
begin
  Result := FIdOperacao;
end;

procedure CancelamentoOperacaoRequest2.SetIdOperacao(Index: Integer; const AInteger: Integer);
begin
  FIdOperacao := AInteger;
  FIdOperacao_Specified := True;
end;

function CancelamentoOperacaoRequest2.IdOperacao_Specified(Index: Integer): boolean;
begin
  Result := FIdOperacao_Specified;
end;

function CancelamentoOperacaoRequest2.GetMotivoCancelamento(Index: Integer): string;
begin
  Result := FMotivoCancelamento;
end;

procedure CancelamentoOperacaoRequest2.SetMotivoCancelamento(Index: Integer; const Astring: string);
begin
  FMotivoCancelamento := Astring;
  FMotivoCancelamento_Specified := True;
end;

function CancelamentoOperacaoRequest2.MotivoCancelamento_Specified(Index: Integer): boolean;
begin
  Result := FMotivoCancelamento_Specified;
end;

function AssociacaoSubstituicaoCartaoResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure AssociacaoSubstituicaoCartaoResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function AssociacaoSubstituicaoCartaoResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function AssociacaoSubstituicaoCartaoResponse2.GetMensagem(Index: Integer): string;
begin
  Result := FMensagem;
end;

procedure AssociacaoSubstituicaoCartaoResponse2.SetMensagem(Index: Integer; const Astring: string);
begin
  FMensagem := Astring;
  FMensagem_Specified := True;
end;

function AssociacaoSubstituicaoCartaoResponse2.Mensagem_Specified(Index: Integer): boolean;
begin
  Result := FMensagem_Specified;
end;

function CancelaCompraValePedagioResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure CancelaCompraValePedagioResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function CancelaCompraValePedagioResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function CancelaCompraValePedagioResponse2.GetMensagem(Index: Integer): string;
begin
  Result := FMensagem;
end;

procedure CancelaCompraValePedagioResponse2.SetMensagem(Index: Integer; const Astring: string);
begin
  FMensagem := Astring;
  FMensagem_Specified := True;
end;

function CancelaCompraValePedagioResponse2.Mensagem_Specified(Index: Integer): boolean;
begin
  Result := FMensagem_Specified;
end;

function ListarRotasClienteResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure ListarRotasClienteResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function ListarRotasClienteResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function ListarRotasClienteResponse2.GetMensagem(Index: Integer): string;
begin
  Result := FMensagem;
end;

procedure ListarRotasClienteResponse2.SetMensagem(Index: Integer; const Astring: string);
begin
  FMensagem := Astring;
  FMensagem_Specified := True;
end;

function ListarRotasClienteResponse2.Mensagem_Specified(Index: Integer): boolean;
begin
  Result := FMensagem_Specified;
end;

function ListarRotasClienteResponse2.GetRotas(Index: Integer): ArrayOfRotaResponse;
begin
  Result := FRotas;
end;

procedure ListarRotasClienteResponse2.SetRotas(Index: Integer; const AArrayOfRotaResponse: ArrayOfRotaResponse);
begin
  FRotas := AArrayOfRotaResponse;
  FRotas_Specified := True;
end;

function ListarRotasClienteResponse2.Rotas_Specified(Index: Integer): boolean;
begin
  Result := FRotas_Specified;
end;

function ConfirmarPedagioResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure ConfirmarPedagioResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function ConfirmarPedagioResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function ConfirmarPedagioResponse2.GetMensagem(Index: Integer): string;
begin
  Result := FMensagem;
end;

procedure ConfirmarPedagioResponse2.SetMensagem(Index: Integer; const Astring: string);
begin
  FMensagem := Astring;
  FMensagem_Specified := True;
end;

function ConfirmarPedagioResponse2.Mensagem_Specified(Index: Integer): boolean;
begin
  Result := FMensagem_Specified;
end;

function DadosComplementaresCompraValePedagio2.GetNomeUsuarioOperador(Index: Integer): string;
begin
  Result := FNomeUsuarioOperador;
end;

procedure DadosComplementaresCompraValePedagio2.SetNomeUsuarioOperador(Index: Integer; const Astring: string);
begin
  FNomeUsuarioOperador := Astring;
  FNomeUsuarioOperador_Specified := True;
end;

function DadosComplementaresCompraValePedagio2.NomeUsuarioOperador_Specified(Index: Integer): boolean;
begin
  Result := FNomeUsuarioOperador_Specified;
end;

function DadosComplementaresCompraValePedagio2.GetCpfUsuarioOperador(Index: Integer): string;
begin
  Result := FCpfUsuarioOperador;
end;

procedure DadosComplementaresCompraValePedagio2.SetCpfUsuarioOperador(Index: Integer; const Astring: string);
begin
  FCpfUsuarioOperador := Astring;
  FCpfUsuarioOperador_Specified := True;
end;

function DadosComplementaresCompraValePedagio2.CpfUsuarioOperador_Specified(Index: Integer): boolean;
begin
  Result := FCpfUsuarioOperador_Specified;
end;

function DadosComplementaresCompraValePedagio2.GetNomeFilialOperador(Index: Integer): string;
begin
  Result := FNomeFilialOperador;
end;

procedure DadosComplementaresCompraValePedagio2.SetNomeFilialOperador(Index: Integer; const Astring: string);
begin
  FNomeFilialOperador := Astring;
  FNomeFilialOperador_Specified := True;
end;

function DadosComplementaresCompraValePedagio2.NomeFilialOperador_Specified(Index: Integer): boolean;
begin
  Result := FNomeFilialOperador_Specified;
end;

function DadosComplementaresCompraValePedagio2.GetCnpjFilialOperador(Index: Integer): string;
begin
  Result := FCnpjFilialOperador;
end;

procedure DadosComplementaresCompraValePedagio2.SetCnpjFilialOperador(Index: Integer; const Astring: string);
begin
  FCnpjFilialOperador := Astring;
  FCnpjFilialOperador_Specified := True;
end;

function DadosComplementaresCompraValePedagio2.CnpjFilialOperador_Specified(Index: Integer): boolean;
begin
  Result := FCnpjFilialOperador_Specified;
end;

function DadosComplementaresCompraValePedagio2.GetLoginUsuarioOperador(Index: Integer): string;
begin
  Result := FLoginUsuarioOperador;
end;

procedure DadosComplementaresCompraValePedagio2.SetLoginUsuarioOperador(Index: Integer; const Astring: string);
begin
  FLoginUsuarioOperador := Astring;
  FLoginUsuarioOperador_Specified := True;
end;

function DadosComplementaresCompraValePedagio2.LoginUsuarioOperador_Specified(Index: Integer): boolean;
begin
  Result := FLoginUsuarioOperador_Specified;
end;

function CompraValePedagioResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure CompraValePedagioResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function CompraValePedagioResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function CompraValePedagioResponse2.GetMensagem(Index: Integer): string;
begin
  Result := FMensagem;
end;

procedure CompraValePedagioResponse2.SetMensagem(Index: Integer; const Astring: string);
begin
  FMensagem := Astring;
  FMensagem_Specified := True;
end;

function CompraValePedagioResponse2.Mensagem_Specified(Index: Integer): boolean;
begin
  Result := FMensagem_Specified;
end;

function CompraValePedagioResponse2.GetIdCompraValePedagio(Index: Integer): Integer;
begin
  Result := FIdCompraValePedagio;
end;

procedure CompraValePedagioResponse2.SetIdCompraValePedagio(Index: Integer; const AInteger: Integer);
begin
  FIdCompraValePedagio := AInteger;
  FIdCompraValePedagio_Specified := True;
end;

function CompraValePedagioResponse2.IdCompraValePedagio_Specified(Index: Integer): boolean;
begin
  Result := FIdCompraValePedagio_Specified;
end;

function CompraValePedagioResponse2.GetValorCompra(Index: Integer): TXSDecimal;
begin
  Result := FValorCompra;
end;

procedure CompraValePedagioResponse2.SetValorCompra(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorCompra := ATXSDecimal;
  FValorCompra_Specified := True;
end;

function CompraValePedagioResponse2.ValorCompra_Specified(Index: Integer): boolean;
begin
  Result := FValorCompra_Specified;
end;

function CompraValePedagioResponse2.GetCodigoRegistroValePedagio(Index: Integer): Int64;
begin
  Result := FCodigoRegistroValePedagio;
end;

procedure CompraValePedagioResponse2.SetCodigoRegistroValePedagio(Index: Integer; const AInt64: Int64);
begin
  FCodigoRegistroValePedagio := AInt64;
  FCodigoRegistroValePedagio_Specified := True;
end;

function CompraValePedagioResponse2.CodigoRegistroValePedagio_Specified(Index: Integer): boolean;
begin
  Result := FCodigoRegistroValePedagio_Specified;
end;

function AtualizaCompraValePedagioResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure AtualizaCompraValePedagioResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function AtualizaCompraValePedagioResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function AtualizaCompraValePedagioResponse2.GetMensagem(Index: Integer): string;
begin
  Result := FMensagem;
end;

procedure AtualizaCompraValePedagioResponse2.SetMensagem(Index: Integer; const Astring: string);
begin
  FMensagem := Astring;
  FMensagem_Specified := True;
end;

function AtualizaCompraValePedagioResponse2.Mensagem_Specified(Index: Integer): boolean;
begin
  Result := FMensagem_Specified;
end;

function AtualizaCompraValePedagioResponse2.GetIdCompraValePedagio(Index: Integer): Integer;
begin
  Result := FIdCompraValePedagio;
end;

procedure AtualizaCompraValePedagioResponse2.SetIdCompraValePedagio(Index: Integer; const AInteger: Integer);
begin
  FIdCompraValePedagio := AInteger;
  FIdCompraValePedagio_Specified := True;
end;

function AtualizaCompraValePedagioResponse2.IdCompraValePedagio_Specified(Index: Integer): boolean;
begin
  Result := FIdCompraValePedagio_Specified;
end;

function FinalizacaoOperacaoTransporteResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure FinalizacaoOperacaoTransporteResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function FinalizacaoOperacaoTransporteResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function FinalizacaoOperacaoTransporteResponse2.GetMensagemRetorno(Index: Integer): string;
begin
  Result := FMensagemRetorno;
end;

procedure FinalizacaoOperacaoTransporteResponse2.SetMensagemRetorno(Index: Integer; const Astring: string);
begin
  FMensagemRetorno := Astring;
  FMensagemRetorno_Specified := True;
end;

function FinalizacaoOperacaoTransporteResponse2.MensagemRetorno_Specified(Index: Integer): boolean;
begin
  Result := FMensagemRetorno_Specified;
end;

function FinalizacaoOperacaoTransporteResponse2.GetDataHoraFinalizacao(Index: Integer): TXSDateTime;
begin
  Result := FDataHoraFinalizacao;
end;

procedure FinalizacaoOperacaoTransporteResponse2.SetDataHoraFinalizacao(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDataHoraFinalizacao := ATXSDateTime;
  FDataHoraFinalizacao_Specified := True;
end;

function FinalizacaoOperacaoTransporteResponse2.DataHoraFinalizacao_Specified(Index: Integer): boolean;
begin
  Result := FDataHoraFinalizacao_Specified;
end;

function DetalhesQuitacaoResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure DetalhesQuitacaoResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function DetalhesQuitacaoResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function DetalhesQuitacaoResponse2.GetIdOperacaoTransporte(Index: Integer): Integer;
begin
  Result := FIdOperacaoTransporte;
end;

procedure DetalhesQuitacaoResponse2.SetIdOperacaoTransporte(Index: Integer; const AInteger: Integer);
begin
  FIdOperacaoTransporte := AInteger;
  FIdOperacaoTransporte_Specified := True;
end;

function DetalhesQuitacaoResponse2.IdOperacaoTransporte_Specified(Index: Integer): boolean;
begin
  Result := FIdOperacaoTransporte_Specified;
end;

function DetalhesQuitacaoResponse2.GetCIOT(Index: Integer): string;
begin
  Result := FCIOT;
end;

procedure DetalhesQuitacaoResponse2.SetCIOT(Index: Integer; const Astring: string);
begin
  FCIOT := Astring;
  FCIOT_Specified := True;
end;

function DetalhesQuitacaoResponse2.CIOT_Specified(Index: Integer): boolean;
begin
  Result := FCIOT_Specified;
end;

function DetalhesQuitacaoResponse2.GetMunicipioOrigem(Index: Integer): string;
begin
  Result := FMunicipioOrigem;
end;

procedure DetalhesQuitacaoResponse2.SetMunicipioOrigem(Index: Integer; const Astring: string);
begin
  FMunicipioOrigem := Astring;
  FMunicipioOrigem_Specified := True;
end;

function DetalhesQuitacaoResponse2.MunicipioOrigem_Specified(Index: Integer): boolean;
begin
  Result := FMunicipioOrigem_Specified;
end;

function DetalhesQuitacaoResponse2.GetMunicipioDestino(Index: Integer): string;
begin
  Result := FMunicipioDestino;
end;

procedure DetalhesQuitacaoResponse2.SetMunicipioDestino(Index: Integer; const Astring: string);
begin
  FMunicipioDestino := Astring;
  FMunicipioDestino_Specified := True;
end;

function DetalhesQuitacaoResponse2.MunicipioDestino_Specified(Index: Integer): boolean;
begin
  Result := FMunicipioDestino_Specified;
end;

function DetalhesQuitacaoResponse2.GetDataHoraInicio(Index: Integer): TXSDateTime;
begin
  Result := FDataHoraInicio;
end;

procedure DetalhesQuitacaoResponse2.SetDataHoraInicio(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDataHoraInicio := ATXSDateTime;
  FDataHoraInicio_Specified := True;
end;

function DetalhesQuitacaoResponse2.DataHoraInicio_Specified(Index: Integer): boolean;
begin
  Result := FDataHoraInicio_Specified;
end;

function DetalhesQuitacaoResponse2.GetDataHoraTermino(Index: Integer): TXSDateTime;
begin
  Result := FDataHoraTermino;
end;

procedure DetalhesQuitacaoResponse2.SetDataHoraTermino(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDataHoraTermino := ATXSDateTime;
  FDataHoraTermino_Specified := True;
end;

function DetalhesQuitacaoResponse2.DataHoraTermino_Specified(Index: Integer): boolean;
begin
  Result := FDataHoraTermino_Specified;
end;

function DetalhesQuitacaoResponse2.GetCPFCNPJContratado(Index: Integer): string;
begin
  Result := FCPFCNPJContratado;
end;

procedure DetalhesQuitacaoResponse2.SetCPFCNPJContratado(Index: Integer; const Astring: string);
begin
  FCPFCNPJContratado := Astring;
  FCPFCNPJContratado_Specified := True;
end;

function DetalhesQuitacaoResponse2.CPFCNPJContratado_Specified(Index: Integer): boolean;
begin
  Result := FCPFCNPJContratado_Specified;
end;

function DetalhesQuitacaoResponse2.GetValorFrete(Index: Integer): TXSDecimal;
begin
  Result := FValorFrete;
end;

procedure DetalhesQuitacaoResponse2.SetValorFrete(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorFrete := ATXSDecimal;
  FValorFrete_Specified := True;
end;

function DetalhesQuitacaoResponse2.ValorFrete_Specified(Index: Integer): boolean;
begin
  Result := FValorFrete_Specified;
end;

function DetalhesQuitacaoResponse2.GetNomeMotorista(Index: Integer): string;
begin
  Result := FNomeMotorista;
end;

procedure DetalhesQuitacaoResponse2.SetNomeMotorista(Index: Integer; const Astring: string);
begin
  FNomeMotorista := Astring;
  FNomeMotorista_Specified := True;
end;

function DetalhesQuitacaoResponse2.NomeMotorista_Specified(Index: Integer): boolean;
begin
  Result := FNomeMotorista_Specified;
end;

function DetalhesQuitacaoResponse2.GetCPFMotorista(Index: Integer): string;
begin
  Result := FCPFMotorista;
end;

procedure DetalhesQuitacaoResponse2.SetCPFMotorista(Index: Integer; const Astring: string);
begin
  FCPFMotorista := Astring;
  FCPFMotorista_Specified := True;
end;

function DetalhesQuitacaoResponse2.CPFMotorista_Specified(Index: Integer): boolean;
begin
  Result := FCPFMotorista_Specified;
end;

function DetalhesQuitacaoResponse2.GetValorContratado(Index: Integer): TXSDecimal;
begin
  Result := FValorContratado;
end;

procedure DetalhesQuitacaoResponse2.SetValorContratado(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorContratado := ATXSDecimal;
  FValorContratado_Specified := True;
end;

function DetalhesQuitacaoResponse2.ValorContratado_Specified(Index: Integer): boolean;
begin
  Result := FValorContratado_Specified;
end;

function DetalhesQuitacaoResponse2.GetStatusOperacao(Index: Integer): string;
begin
  Result := FStatusOperacao;
end;

procedure DetalhesQuitacaoResponse2.SetStatusOperacao(Index: Integer; const Astring: string);
begin
  FStatusOperacao := Astring;
  FStatusOperacao_Specified := True;
end;

function DetalhesQuitacaoResponse2.StatusOperacao_Specified(Index: Integer): boolean;
begin
  Result := FStatusOperacao_Specified;
end;

function DetalhesQuitacaoResponse2.GetParcelas(Index: Integer): ArrayOfInformacoesParcelasResponse;
begin
  Result := FParcelas;
end;

procedure DetalhesQuitacaoResponse2.SetParcelas(Index: Integer; const AArrayOfInformacoesParcelasResponse: ArrayOfInformacoesParcelasResponse);
begin
  FParcelas := AArrayOfInformacoesParcelasResponse;
  FParcelas_Specified := True;
end;

function DetalhesQuitacaoResponse2.Parcelas_Specified(Index: Integer): boolean;
begin
  Result := FParcelas_Specified;
end;

function DetalhesQuitacaoResponse2.GetDadosQuitacao(Index: Integer): DadosQuitacaoFreteResponse2;
begin
  Result := FDadosQuitacao;
end;

procedure DetalhesQuitacaoResponse2.SetDadosQuitacao(Index: Integer; const ADadosQuitacaoFreteResponse2: DadosQuitacaoFreteResponse2);
begin
  FDadosQuitacao := ADadosQuitacaoFreteResponse2;
  FDadosQuitacao_Specified := True;
end;

function DetalhesQuitacaoResponse2.DadosQuitacao_Specified(Index: Integer): boolean;
begin
  Result := FDadosQuitacao_Specified;
end;

function DetalhesQuitacaoResponse2.GetMensagemRetorno(Index: Integer): string;
begin
  Result := FMensagemRetorno;
end;

procedure DetalhesQuitacaoResponse2.SetMensagemRetorno(Index: Integer; const Astring: string);
begin
  FMensagemRetorno := Astring;
  FMensagemRetorno_Specified := True;
end;

function DetalhesQuitacaoResponse2.MensagemRetorno_Specified(Index: Integer): boolean;
begin
  Result := FMensagemRetorno_Specified;
end;

function CadastroAtualizacaoDadosQuitacaoResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure CadastroAtualizacaoDadosQuitacaoResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function CadastroAtualizacaoDadosQuitacaoResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function CadastroAtualizacaoDadosQuitacaoResponse2.GetMensagemRetorno(Index: Integer): string;
begin
  Result := FMensagemRetorno;
end;

procedure CadastroAtualizacaoDadosQuitacaoResponse2.SetMensagemRetorno(Index: Integer; const Astring: string);
begin
  FMensagemRetorno := Astring;
  FMensagemRetorno_Specified := True;
end;

function CadastroAtualizacaoDadosQuitacaoResponse2.MensagemRetorno_Specified(Index: Integer): boolean;
begin
  Result := FMensagemRetorno_Specified;
end;

function CadastroAtualizacaoDadosQuitacaoResponse2.GetIdOperacao(Index: Integer): Integer;
begin
  Result := FIdOperacao;
end;

procedure CadastroAtualizacaoDadosQuitacaoResponse2.SetIdOperacao(Index: Integer; const AInteger: Integer);
begin
  FIdOperacao := AInteger;
  FIdOperacao_Specified := True;
end;

function CadastroAtualizacaoDadosQuitacaoResponse2.IdOperacao_Specified(Index: Integer): boolean;
begin
  Result := FIdOperacao_Specified;
end;

function CadastroAtualizacaoDadosQuitacaoResponse2.GetdadosQuitacao(Index: Integer): DadosQuitacaoFreteResponse2;
begin
  Result := FdadosQuitacao;
end;

procedure CadastroAtualizacaoDadosQuitacaoResponse2.SetdadosQuitacao(Index: Integer; const ADadosQuitacaoFreteResponse2: DadosQuitacaoFreteResponse2);
begin
  FdadosQuitacao := ADadosQuitacaoFreteResponse2;
  FdadosQuitacao_Specified := True;
end;

function CadastroAtualizacaoDadosQuitacaoResponse2.dadosQuitacao_Specified(Index: Integer): boolean;
begin
  Result := FdadosQuitacao_Specified;
end;

function OperacaoTransporteVeiculoResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure OperacaoTransporteVeiculoResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function OperacaoTransporteVeiculoResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function OperacaoTransporteVeiculoResponse2.GetPlaca(Index: Integer): string;
begin
  Result := FPlaca;
end;

procedure OperacaoTransporteVeiculoResponse2.SetPlaca(Index: Integer; const Astring: string);
begin
  FPlaca := Astring;
  FPlaca_Specified := True;
end;

function OperacaoTransporteVeiculoResponse2.Placa_Specified(Index: Integer): boolean;
begin
  Result := FPlaca_Specified;
end;

function OperacaoTransporteVeiculoResponse2.GetRNTRC(Index: Integer): string;
begin
  Result := FRNTRC;
end;

procedure OperacaoTransporteVeiculoResponse2.SetRNTRC(Index: Integer; const Astring: string);
begin
  FRNTRC := Astring;
  FRNTRC_Specified := True;
end;

function OperacaoTransporteVeiculoResponse2.RNTRC_Specified(Index: Integer): boolean;
begin
  Result := FRNTRC_Specified;
end;

function BuscaOperacaoTransporteRequest2.GetQuantidadeItensPorPagina(Index: Integer): Integer;
begin
  Result := FQuantidadeItensPorPagina;
end;

procedure BuscaOperacaoTransporteRequest2.SetQuantidadeItensPorPagina(Index: Integer; const AInteger: Integer);
begin
  FQuantidadeItensPorPagina := AInteger;
  FQuantidadeItensPorPagina_Specified := True;
end;

function BuscaOperacaoTransporteRequest2.QuantidadeItensPorPagina_Specified(Index: Integer): boolean;
begin
  Result := FQuantidadeItensPorPagina_Specified;
end;

function BuscaOperacaoTransporteRequest2.GetNumeroPagina(Index: Integer): Integer;
begin
  Result := FNumeroPagina;
end;

procedure BuscaOperacaoTransporteRequest2.SetNumeroPagina(Index: Integer; const AInteger: Integer);
begin
  FNumeroPagina := AInteger;
  FNumeroPagina_Specified := True;
end;

function BuscaOperacaoTransporteRequest2.NumeroPagina_Specified(Index: Integer): boolean;
begin
  Result := FNumeroPagina_Specified;
end;

function BuscaOperacaoTransporteRequest2.GetIdOperacao(Index: Integer): Integer;
begin
  Result := FIdOperacao;
end;

procedure BuscaOperacaoTransporteRequest2.SetIdOperacao(Index: Integer; const AInteger: Integer);
begin
  FIdOperacao := AInteger;
  FIdOperacao_Specified := True;
end;

function BuscaOperacaoTransporteRequest2.IdOperacao_Specified(Index: Integer): boolean;
begin
  Result := FIdOperacao_Specified;
end;

function BuscaOperacaoTransporteRequest2.GetCIOT(Index: Integer): string;
begin
  Result := FCIOT;
end;

procedure BuscaOperacaoTransporteRequest2.SetCIOT(Index: Integer; const Astring: string);
begin
  FCIOT := Astring;
  FCIOT_Specified := True;
end;

function BuscaOperacaoTransporteRequest2.CIOT_Specified(Index: Integer): boolean;
begin
  Result := FCIOT_Specified;
end;

function BuscaOperacaoTransporteRequest2.GetItemFinanceiro(Index: Integer): string;
begin
  Result := FItemFinanceiro;
end;

procedure BuscaOperacaoTransporteRequest2.SetItemFinanceiro(Index: Integer; const Astring: string);
begin
  FItemFinanceiro := Astring;
  FItemFinanceiro_Specified := True;
end;

function BuscaOperacaoTransporteRequest2.ItemFinanceiro_Specified(Index: Integer): boolean;
begin
  Result := FItemFinanceiro_Specified;
end;

function BuscaOperacaoTransporteRequest2.GetStatusOperacao(Index: Integer): Integer;
begin
  Result := FStatusOperacao;
end;

procedure BuscaOperacaoTransporteRequest2.SetStatusOperacao(Index: Integer; const AInteger: Integer);
begin
  FStatusOperacao := AInteger;
  FStatusOperacao_Specified := True;
end;

function BuscaOperacaoTransporteRequest2.StatusOperacao_Specified(Index: Integer): boolean;
begin
  Result := FStatusOperacao_Specified;
end;

function InfoPortadorResponse2.GetCpf(Index: Integer): string;
begin
  Result := FCpf;
end;

procedure InfoPortadorResponse2.SetCpf(Index: Integer; const Astring: string);
begin
  FCpf := Astring;
  FCpf_Specified := True;
end;

function InfoPortadorResponse2.Cpf_Specified(Index: Integer): boolean;
begin
  Result := FCpf_Specified;
end;

function InfoPortadorResponse2.GetDataNascimento(Index: Integer): TXSDateTime;
begin
  Result := FDataNascimento;
end;

procedure InfoPortadorResponse2.SetDataNascimento(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDataNascimento := ATXSDateTime;
  FDataNascimento_Specified := True;
end;

function InfoPortadorResponse2.DataNascimento_Specified(Index: Integer): boolean;
begin
  Result := FDataNascimento_Specified;
end;

function InfoPortadorResponse2.GetNomeCompleto(Index: Integer): string;
begin
  Result := FNomeCompleto;
end;

procedure InfoPortadorResponse2.SetNomeCompleto(Index: Integer; const Astring: string);
begin
  FNomeCompleto := Astring;
  FNomeCompleto_Specified := True;
end;

function InfoPortadorResponse2.NomeCompleto_Specified(Index: Integer): boolean;
begin
  Result := FNomeCompleto_Specified;
end;

function InfoPortadorResponse2.GetRntrc(Index: Integer): string;
begin
  Result := FRntrc;
end;

procedure InfoPortadorResponse2.SetRntrc(Index: Integer; const Astring: string);
begin
  FRntrc := Astring;
  FRntrc_Specified := True;
end;

function InfoPortadorResponse2.Rntrc_Specified(Index: Integer): boolean;
begin
  Result := FRntrc_Specified;
end;

function InfoPortadorResponse2.GetTelefone(Index: Integer): string;
begin
  Result := FTelefone;
end;

procedure InfoPortadorResponse2.SetTelefone(Index: Integer; const Astring: string);
begin
  FTelefone := Astring;
  FTelefone_Specified := True;
end;

function InfoPortadorResponse2.Telefone_Specified(Index: Integer): boolean;
begin
  Result := FTelefone_Specified;
end;

function InfoPortadorResponse2.GetUf(Index: Integer): string;
begin
  Result := FUf;
end;

procedure InfoPortadorResponse2.SetUf(Index: Integer; const Astring: string);
begin
  FUf := Astring;
  FUf_Specified := True;
end;

function InfoPortadorResponse2.Uf_Specified(Index: Integer): boolean;
begin
  Result := FUf_Specified;
end;

function InformacaoCartaoRequest2.GetNumeroCartao(Index: Integer): string;
begin
  Result := FNumeroCartao;
end;

procedure InformacaoCartaoRequest2.SetNumeroCartao(Index: Integer; const Astring: string);
begin
  FNumeroCartao := Astring;
  FNumeroCartao_Specified := True;
end;

function InformacaoCartaoRequest2.NumeroCartao_Specified(Index: Integer): boolean;
begin
  Result := FNumeroCartao_Specified;
end;

function AssociacaoSubstituicaoCartaoRequest2.GetNumeroNovoCartao(Index: Integer): string;
begin
  Result := FNumeroNovoCartao;
end;

procedure AssociacaoSubstituicaoCartaoRequest2.SetNumeroNovoCartao(Index: Integer; const Astring: string);
begin
  FNumeroNovoCartao := Astring;
  FNumeroNovoCartao_Specified := True;
end;

function AssociacaoSubstituicaoCartaoRequest2.NumeroNovoCartao_Specified(Index: Integer): boolean;
begin
  Result := FNumeroNovoCartao_Specified;
end;

function AssociacaoSubstituicaoCartaoRequest2.GetCpfPortadorCartao(Index: Integer): string;
begin
  Result := FCpfPortadorCartao;
end;

procedure AssociacaoSubstituicaoCartaoRequest2.SetCpfPortadorCartao(Index: Integer; const Astring: string);
begin
  FCpfPortadorCartao := Astring;
  FCpfPortadorCartao_Specified := True;
end;

function AssociacaoSubstituicaoCartaoRequest2.CpfPortadorCartao_Specified(Index: Integer): boolean;
begin
  Result := FCpfPortadorCartao_Specified;
end;

function AssociacaoSubstituicaoCartaoRequest2.GetCnpjCartaoEmpresarial(Index: Integer): string;
begin
  Result := FCnpjCartaoEmpresarial;
end;

procedure AssociacaoSubstituicaoCartaoRequest2.SetCnpjCartaoEmpresarial(Index: Integer; const Astring: string);
begin
  FCnpjCartaoEmpresarial := Astring;
  FCnpjCartaoEmpresarial_Specified := True;
end;

function AssociacaoSubstituicaoCartaoRequest2.CnpjCartaoEmpresarial_Specified(Index: Integer): boolean;
begin
  Result := FCnpjCartaoEmpresarial_Specified;
end;

function AssociacaoSubstituicaoCartaoRequest2.GetNumeroCartaoAnterior(Index: Integer): string;
begin
  Result := FNumeroCartaoAnterior;
end;

procedure AssociacaoSubstituicaoCartaoRequest2.SetNumeroCartaoAnterior(Index: Integer; const Astring: string);
begin
  FNumeroCartaoAnterior := Astring;
  FNumeroCartaoAnterior_Specified := True;
end;

function AssociacaoSubstituicaoCartaoRequest2.NumeroCartaoAnterior_Specified(Index: Integer): boolean;
begin
  Result := FNumeroCartaoAnterior_Specified;
end;

function AssociacaoSubstituicaoCartaoRequest2.GetMotivoCancelamento(Index: Integer): Integer;
begin
  Result := FMotivoCancelamento;
end;

procedure AssociacaoSubstituicaoCartaoRequest2.SetMotivoCancelamento(Index: Integer; const AInteger: Integer);
begin
  FMotivoCancelamento := AInteger;
  FMotivoCancelamento_Specified := True;
end;

function AssociacaoSubstituicaoCartaoRequest2.MotivoCancelamento_Specified(Index: Integer): boolean;
begin
  Result := FMotivoCancelamento_Specified;
end;

function ParcelaAdicionalResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure ParcelaAdicionalResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function ParcelaAdicionalResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function ParcelaAdicionalResponse2.GetMensagem(Index: Integer): string;
begin
  Result := FMensagem;
end;

procedure ParcelaAdicionalResponse2.SetMensagem(Index: Integer; const Astring: string);
begin
  FMensagem := Astring;
  FMensagem_Specified := True;
end;

function ParcelaAdicionalResponse2.Mensagem_Specified(Index: Integer): boolean;
begin
  Result := FMensagem_Specified;
end;

function ParcelaAdicionalResponse2.GetIdOperacaoTransporteParcela(Index: Integer): Integer;
begin
  Result := FIdOperacaoTransporteParcela;
end;

procedure ParcelaAdicionalResponse2.SetIdOperacaoTransporteParcela(Index: Integer; const AInteger: Integer);
begin
  FIdOperacaoTransporteParcela := AInteger;
  FIdOperacaoTransporteParcela_Specified := True;
end;

function ParcelaAdicionalResponse2.IdOperacaoTransporteParcela_Specified(Index: Integer): boolean;
begin
  Result := FIdOperacaoTransporteParcela_Specified;
end;

function InformacaoServicoResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure InformacaoServicoResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function InformacaoServicoResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function InformacaoServicoResponse2.GetDataHoraResposta(Index: Integer): TXSDateTime;
begin
  Result := FDataHoraResposta;
end;

procedure InformacaoServicoResponse2.SetDataHoraResposta(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDataHoraResposta := ATXSDateTime;
  FDataHoraResposta_Specified := True;
end;

function InformacaoServicoResponse2.DataHoraResposta_Specified(Index: Integer): boolean;
begin
  Result := FDataHoraResposta_Specified;
end;

function InformacaoServicoResponse2.GetStatus(Index: Integer): StatusServico;
begin
  Result := FStatus;
end;

procedure InformacaoServicoResponse2.SetStatus(Index: Integer; const AStatusServico: StatusServico);
begin
  FStatus := AStatusServico;
  FStatus_Specified := True;
end;

function InformacaoServicoResponse2.Status_Specified(Index: Integer): boolean;
begin
  Result := FStatus_Specified;
end;

function InformacaoServicoResponse2.GetVersao(Index: Integer): string;
begin
  Result := FVersao;
end;

procedure InformacaoServicoResponse2.SetVersao(Index: Integer; const Astring: string);
begin
  FVersao := Astring;
  FVersao_Specified := True;
end;

function InformacaoServicoResponse2.Versao_Specified(Index: Integer): boolean;
begin
  Result := FVersao_Specified;
end;

function InformacaoServicoResponse2.GetManutencaoProgramada(Index: Integer): TXSDateTime;
begin
  Result := FManutencaoProgramada;
end;

procedure InformacaoServicoResponse2.SetManutencaoProgramada(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FManutencaoProgramada := ATXSDateTime;
  FManutencaoProgramada_Specified := True;
end;

function InformacaoServicoResponse2.ManutencaoProgramada_Specified(Index: Integer): boolean;
begin
  Result := FManutencaoProgramada_Specified;
end;

function GeraTokenParaAcessoResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure GeraTokenParaAcessoResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function GeraTokenParaAcessoResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function GeraTokenParaAcessoResponse2.GetToken(Index: Integer): string;
begin
  Result := FToken;
end;

procedure GeraTokenParaAcessoResponse2.SetToken(Index: Integer; const Astring: string);
begin
  FToken := Astring;
  FToken_Specified := True;
end;

function GeraTokenParaAcessoResponse2.Token_Specified(Index: Integer): boolean;
begin
  Result := FToken_Specified;
end;

function GeraTokenParaAcessoResponse2.GetDataValidade(Index: Integer): TXSDateTime;
begin
  Result := FDataValidade;
end;

procedure GeraTokenParaAcessoResponse2.SetDataValidade(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDataValidade := ATXSDateTime;
  FDataValidade_Specified := True;
end;

function GeraTokenParaAcessoResponse2.DataValidade_Specified(Index: Integer): boolean;
begin
  Result := FDataValidade_Specified;
end;

function ResultadoPaginadoParticipanteResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure ResultadoPaginadoParticipanteResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function ResultadoPaginadoParticipanteResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function ResultadoPaginadoParticipanteResponse2.GetItens(Index: Integer): ArrayOfParticipanteResponse;
begin
  Result := FItens;
end;

procedure ResultadoPaginadoParticipanteResponse2.SetItens(Index: Integer; const AArrayOfParticipanteResponse: ArrayOfParticipanteResponse);
begin
  FItens := AArrayOfParticipanteResponse;
  FItens_Specified := True;
end;

function ResultadoPaginadoParticipanteResponse2.Itens_Specified(Index: Integer): boolean;
begin
  Result := FItens_Specified;
end;

function ResultadoPaginadoParticipanteResponse2.GetNumeroPagina(Index: Integer): Integer;
begin
  Result := FNumeroPagina;
end;

procedure ResultadoPaginadoParticipanteResponse2.SetNumeroPagina(Index: Integer; const AInteger: Integer);
begin
  FNumeroPagina := AInteger;
  FNumeroPagina_Specified := True;
end;

function ResultadoPaginadoParticipanteResponse2.NumeroPagina_Specified(Index: Integer): boolean;
begin
  Result := FNumeroPagina_Specified;
end;

function ResultadoPaginadoParticipanteResponse2.GetQuantidadeItensPorPagina(Index: Integer): Integer;
begin
  Result := FQuantidadeItensPorPagina;
end;

procedure ResultadoPaginadoParticipanteResponse2.SetQuantidadeItensPorPagina(Index: Integer; const AInteger: Integer);
begin
  FQuantidadeItensPorPagina := AInteger;
  FQuantidadeItensPorPagina_Specified := True;
end;

function ResultadoPaginadoParticipanteResponse2.QuantidadeItensPorPagina_Specified(Index: Integer): boolean;
begin
  Result := FQuantidadeItensPorPagina_Specified;
end;

function ResultadoPaginadoParticipanteResponse2.GetQuantidadeTotalItens(Index: Integer): Integer;
begin
  Result := FQuantidadeTotalItens;
end;

procedure ResultadoPaginadoParticipanteResponse2.SetQuantidadeTotalItens(Index: Integer; const AInteger: Integer);
begin
  FQuantidadeTotalItens := AInteger;
  FQuantidadeTotalItens_Specified := True;
end;

function ResultadoPaginadoParticipanteResponse2.QuantidadeTotalItens_Specified(Index: Integer): boolean;
begin
  Result := FQuantidadeTotalItens_Specified;
end;

function ResultadoPaginadoParticipanteResponse2.GetQuantidadeTotalPaginas(Index: Integer): Integer;
begin
  Result := FQuantidadeTotalPaginas;
end;

procedure ResultadoPaginadoParticipanteResponse2.SetQuantidadeTotalPaginas(Index: Integer; const AInteger: Integer);
begin
  FQuantidadeTotalPaginas := AInteger;
  FQuantidadeTotalPaginas_Specified := True;
end;

function ResultadoPaginadoParticipanteResponse2.QuantidadeTotalPaginas_Specified(Index: Integer): boolean;
begin
  Result := FQuantidadeTotalPaginas_Specified;
end;

function ParticipanteRequest2.GetInstrucao(Index: Integer): Integer;
begin
  Result := FInstrucao;
end;

procedure ParticipanteRequest2.SetInstrucao(Index: Integer; const AInteger: Integer);
begin
  FInstrucao := AInteger;
  FInstrucao_Specified := True;
end;

function ParticipanteRequest2.Instrucao_Specified(Index: Integer): boolean;
begin
  Result := FInstrucao_Specified;
end;

function ParticipanteRequest2.GetIdParticipante(Index: Integer): Integer;
begin
  Result := FIdParticipante;
end;

procedure ParticipanteRequest2.SetIdParticipante(Index: Integer; const AInteger: Integer);
begin
  FIdParticipante := AInteger;
  FIdParticipante_Specified := True;
end;

function ParticipanteRequest2.IdParticipante_Specified(Index: Integer): boolean;
begin
  Result := FIdParticipante_Specified;
end;

function ParticipanteRequest2.GetIdDmTipoPessoa(Index: Integer): Integer;
begin
  Result := FIdDmTipoPessoa;
end;

procedure ParticipanteRequest2.SetIdDmTipoPessoa(Index: Integer; const AInteger: Integer);
begin
  FIdDmTipoPessoa := AInteger;
  FIdDmTipoPessoa_Specified := True;
end;

function ParticipanteRequest2.IdDmTipoPessoa_Specified(Index: Integer): boolean;
begin
  Result := FIdDmTipoPessoa_Specified;
end;

function ParticipanteRequest2.GetNome(Index: Integer): string;
begin
  Result := FNome;
end;

procedure ParticipanteRequest2.SetNome(Index: Integer; const Astring: string);
begin
  FNome := Astring;
  FNome_Specified := True;
end;

function ParticipanteRequest2.Nome_Specified(Index: Integer): boolean;
begin
  Result := FNome_Specified;
end;

function ParticipanteRequest2.GetRazaoSocial(Index: Integer): string;
begin
  Result := FRazaoSocial;
end;

procedure ParticipanteRequest2.SetRazaoSocial(Index: Integer; const Astring: string);
begin
  FRazaoSocial := Astring;
  FRazaoSocial_Specified := True;
end;

function ParticipanteRequest2.RazaoSocial_Specified(Index: Integer): boolean;
begin
  Result := FRazaoSocial_Specified;
end;

function ParticipanteRequest2.GetCPFCNPJ(Index: Integer): string;
begin
  Result := FCPFCNPJ;
end;

procedure ParticipanteRequest2.SetCPFCNPJ(Index: Integer; const Astring: string);
begin
  FCPFCNPJ := Astring;
  FCPFCNPJ_Specified := True;
end;

function ParticipanteRequest2.CPFCNPJ_Specified(Index: Integer): boolean;
begin
  Result := FCPFCNPJ_Specified;
end;

function ParticipanteRequest2.GetEndereco(Index: Integer): string;
begin
  Result := FEndereco;
end;

procedure ParticipanteRequest2.SetEndereco(Index: Integer; const Astring: string);
begin
  FEndereco := Astring;
  FEndereco_Specified := True;
end;

function ParticipanteRequest2.Endereco_Specified(Index: Integer): boolean;
begin
  Result := FEndereco_Specified;
end;

function ParticipanteRequest2.GetBairro(Index: Integer): string;
begin
  Result := FBairro;
end;

procedure ParticipanteRequest2.SetBairro(Index: Integer; const Astring: string);
begin
  FBairro := Astring;
  FBairro_Specified := True;
end;

function ParticipanteRequest2.Bairro_Specified(Index: Integer): boolean;
begin
  Result := FBairro_Specified;
end;

function ParticipanteRequest2.GetCEP(Index: Integer): string;
begin
  Result := FCEP;
end;

procedure ParticipanteRequest2.SetCEP(Index: Integer; const Astring: string);
begin
  FCEP := Astring;
  FCEP_Specified := True;
end;

function ParticipanteRequest2.CEP_Specified(Index: Integer): boolean;
begin
  Result := FCEP_Specified;
end;

function ParticipanteRequest2.GetMunicipioCodigoIBGE(Index: Integer): Integer;
begin
  Result := FMunicipioCodigoIBGE;
end;

procedure ParticipanteRequest2.SetMunicipioCodigoIBGE(Index: Integer; const AInteger: Integer);
begin
  FMunicipioCodigoIBGE := AInteger;
  FMunicipioCodigoIBGE_Specified := True;
end;

function ParticipanteRequest2.MunicipioCodigoIBGE_Specified(Index: Integer): boolean;
begin
  Result := FMunicipioCodigoIBGE_Specified;
end;

function ParticipanteRequest2.GetRNTRC(Index: Integer): string;
begin
  Result := FRNTRC;
end;

procedure ParticipanteRequest2.SetRNTRC(Index: Integer; const Astring: string);
begin
  FRNTRC := Astring;
  FRNTRC_Specified := True;
end;

function ParticipanteRequest2.RNTRC_Specified(Index: Integer): boolean;
begin
  Result := FRNTRC_Specified;
end;

function ParticipanteRequest2.GetAtivo(Index: Integer): Boolean;
begin
  Result := FAtivo;
end;

procedure ParticipanteRequest2.SetAtivo(Index: Integer; const ABoolean: Boolean);
begin
  FAtivo := ABoolean;
  FAtivo_Specified := True;
end;

function ParticipanteRequest2.Ativo_Specified(Index: Integer): boolean;
begin
  Result := FAtivo_Specified;
end;

function ParticipanteRequest2.GetEmail(Index: Integer): string;
begin
  Result := FEmail;
end;

procedure ParticipanteRequest2.SetEmail(Index: Integer; const Astring: string);
begin
  FEmail := Astring;
  FEmail_Specified := True;
end;

function ParticipanteRequest2.Email_Specified(Index: Integer): boolean;
begin
  Result := FEmail_Specified;
end;

function ParticipanteRequest2.GetTelefone(Index: Integer): string;
begin
  Result := FTelefone;
end;

procedure ParticipanteRequest2.SetTelefone(Index: Integer; const Astring: string);
begin
  FTelefone := Astring;
  FTelefone_Specified := True;
end;

function ParticipanteRequest2.Telefone_Specified(Index: Integer): boolean;
begin
  Result := FTelefone_Specified;
end;

function ParticipanteRequest2.GetTelefoneCelular(Index: Integer): string;
begin
  Result := FTelefoneCelular;
end;

procedure ParticipanteRequest2.SetTelefoneCelular(Index: Integer; const Astring: string);
begin
  FTelefoneCelular := Astring;
  FTelefoneCelular_Specified := True;
end;

function ParticipanteRequest2.TelefoneCelular_Specified(Index: Integer): boolean;
begin
  Result := FTelefoneCelular_Specified;
end;

function BuscaParticipanteRequest2.GetQuantidadeItensPorPagina(Index: Integer): Integer;
begin
  Result := FQuantidadeItensPorPagina;
end;

procedure BuscaParticipanteRequest2.SetQuantidadeItensPorPagina(Index: Integer; const AInteger: Integer);
begin
  FQuantidadeItensPorPagina := AInteger;
  FQuantidadeItensPorPagina_Specified := True;
end;

function BuscaParticipanteRequest2.QuantidadeItensPorPagina_Specified(Index: Integer): boolean;
begin
  Result := FQuantidadeItensPorPagina_Specified;
end;

function BuscaParticipanteRequest2.GetNumeroPagina(Index: Integer): Integer;
begin
  Result := FNumeroPagina;
end;

procedure BuscaParticipanteRequest2.SetNumeroPagina(Index: Integer; const AInteger: Integer);
begin
  FNumeroPagina := AInteger;
  FNumeroPagina_Specified := True;
end;

function BuscaParticipanteRequest2.NumeroPagina_Specified(Index: Integer): boolean;
begin
  Result := FNumeroPagina_Specified;
end;

function BuscaParticipanteRequest2.GetIdParticipante(Index: Integer): Integer;
begin
  Result := FIdParticipante;
end;

procedure BuscaParticipanteRequest2.SetIdParticipante(Index: Integer; const AInteger: Integer);
begin
  FIdParticipante := AInteger;
  FIdParticipante_Specified := True;
end;

function BuscaParticipanteRequest2.IdParticipante_Specified(Index: Integer): boolean;
begin
  Result := FIdParticipante_Specified;
end;

function BuscaParticipanteRequest2.GetCPFCNPJ(Index: Integer): string;
begin
  Result := FCPFCNPJ;
end;

procedure BuscaParticipanteRequest2.SetCPFCNPJ(Index: Integer; const Astring: string);
begin
  FCPFCNPJ := Astring;
  FCPFCNPJ_Specified := True;
end;

function BuscaParticipanteRequest2.CPFCNPJ_Specified(Index: Integer): boolean;
begin
  Result := FCPFCNPJ_Specified;
end;

function BuscaParticipanteRequest2.GetAtivo(Index: Integer): Boolean;
begin
  Result := FAtivo;
end;

procedure BuscaParticipanteRequest2.SetAtivo(Index: Integer; const ABoolean: Boolean);
begin
  FAtivo := ABoolean;
  FAtivo_Specified := True;
end;

function BuscaParticipanteRequest2.Ativo_Specified(Index: Integer): boolean;
begin
  Result := FAtivo_Specified;
end;

function CentroDeCustoRequest2.GetInstrucao(Index: Integer): Integer;
begin
  Result := FInstrucao;
end;

procedure CentroDeCustoRequest2.SetInstrucao(Index: Integer; const AInteger: Integer);
begin
  FInstrucao := AInteger;
  FInstrucao_Specified := True;
end;

function CentroDeCustoRequest2.Instrucao_Specified(Index: Integer): boolean;
begin
  Result := FInstrucao_Specified;
end;

function CentroDeCustoRequest2.GetIdCentroDeCusto(Index: Integer): Integer;
begin
  Result := FIdCentroDeCusto;
end;

procedure CentroDeCustoRequest2.SetIdCentroDeCusto(Index: Integer; const AInteger: Integer);
begin
  FIdCentroDeCusto := AInteger;
  FIdCentroDeCusto_Specified := True;
end;

function CentroDeCustoRequest2.IdCentroDeCusto_Specified(Index: Integer): boolean;
begin
  Result := FIdCentroDeCusto_Specified;
end;

function CentroDeCustoRequest2.GetCodigo(Index: Integer): string;
begin
  Result := FCodigo;
end;

procedure CentroDeCustoRequest2.SetCodigo(Index: Integer; const Astring: string);
begin
  FCodigo := Astring;
  FCodigo_Specified := True;
end;

function CentroDeCustoRequest2.Codigo_Specified(Index: Integer): boolean;
begin
  Result := FCodigo_Specified;
end;

function CentroDeCustoRequest2.GetDescricao(Index: Integer): string;
begin
  Result := FDescricao;
end;

procedure CentroDeCustoRequest2.SetDescricao(Index: Integer; const Astring: string);
begin
  FDescricao := Astring;
  FDescricao_Specified := True;
end;

function CentroDeCustoRequest2.Descricao_Specified(Index: Integer): boolean;
begin
  Result := FDescricao_Specified;
end;

function CentroDeCustoRequest2.GetComentario(Index: Integer): string;
begin
  Result := FComentario;
end;

procedure CentroDeCustoRequest2.SetComentario(Index: Integer; const Astring: string);
begin
  FComentario := Astring;
  FComentario_Specified := True;
end;

function CentroDeCustoRequest2.Comentario_Specified(Index: Integer): boolean;
begin
  Result := FComentario_Specified;
end;

function CentroDeCustoRequest2.GetAtivo(Index: Integer): Boolean;
begin
  Result := FAtivo;
end;

procedure CentroDeCustoRequest2.SetAtivo(Index: Integer; const ABoolean: Boolean);
begin
  FAtivo := ABoolean;
  FAtivo_Specified := True;
end;

function CentroDeCustoRequest2.Ativo_Specified(Index: Integer): boolean;
begin
  Result := FAtivo_Specified;
end;

function TransportadorRequest2.GetInstrucao(Index: Integer): Integer;
begin
  Result := FInstrucao;
end;

procedure TransportadorRequest2.SetInstrucao(Index: Integer; const AInteger: Integer);
begin
  FInstrucao := AInteger;
  FInstrucao_Specified := True;
end;

function TransportadorRequest2.Instrucao_Specified(Index: Integer): boolean;
begin
  Result := FInstrucao_Specified;
end;

function TransportadorRequest2.GetRNTRC(Index: Integer): string;
begin
  Result := FRNTRC;
end;

procedure TransportadorRequest2.SetRNTRC(Index: Integer; const Astring: string);
begin
  FRNTRC := Astring;
  FRNTRC_Specified := True;
end;

function TransportadorRequest2.RNTRC_Specified(Index: Integer): boolean;
begin
  Result := FRNTRC_Specified;
end;

function TransportadorRequest2.GetCPFCNPJ(Index: Integer): string;
begin
  Result := FCPFCNPJ;
end;

procedure TransportadorRequest2.SetCPFCNPJ(Index: Integer; const Astring: string);
begin
  FCPFCNPJ := Astring;
  FCPFCNPJ_Specified := True;
end;

function TransportadorRequest2.CPFCNPJ_Specified(Index: Integer): boolean;
begin
  Result := FCPFCNPJ_Specified;
end;

function TransportadorRequest2.GetNome(Index: Integer): string;
begin
  Result := FNome;
end;

procedure TransportadorRequest2.SetNome(Index: Integer; const Astring: string);
begin
  FNome := Astring;
  FNome_Specified := True;
end;

function TransportadorRequest2.Nome_Specified(Index: Integer): boolean;
begin
  Result := FNome_Specified;
end;

function TransportadorRequest2.GetSobrenome(Index: Integer): string;
begin
  Result := FSobrenome;
end;

procedure TransportadorRequest2.SetSobrenome(Index: Integer; const Astring: string);
begin
  FSobrenome := Astring;
  FSobrenome_Specified := True;
end;

function TransportadorRequest2.Sobrenome_Specified(Index: Integer): boolean;
begin
  Result := FSobrenome_Specified;
end;

function TransportadorRequest2.GetRazaoSocial(Index: Integer): string;
begin
  Result := FRazaoSocial;
end;

procedure TransportadorRequest2.SetRazaoSocial(Index: Integer; const Astring: string);
begin
  FRazaoSocial := Astring;
  FRazaoSocial_Specified := True;
end;

function TransportadorRequest2.RazaoSocial_Specified(Index: Integer): boolean;
begin
  Result := FRazaoSocial_Specified;
end;

function TransportadorRequest2.GetDataNascimento(Index: Integer): TXSDateTime;
begin
  Result := FDataNascimento;
end;

procedure TransportadorRequest2.SetDataNascimento(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDataNascimento := ATXSDateTime;
  FDataNascimento_Specified := True;
end;

function TransportadorRequest2.DataNascimento_Specified(Index: Integer): boolean;
begin
  Result := FDataNascimento_Specified;
end;

function TransportadorRequest2.GetRG(Index: Integer): string;
begin
  Result := FRG;
end;

procedure TransportadorRequest2.SetRG(Index: Integer; const Astring: string);
begin
  FRG := Astring;
  FRG_Specified := True;
end;

function TransportadorRequest2.RG_Specified(Index: Integer): boolean;
begin
  Result := FRG_Specified;
end;

function TransportadorRequest2.GetOrgaoEmissorRg(Index: Integer): string;
begin
  Result := FOrgaoEmissorRg;
end;

procedure TransportadorRequest2.SetOrgaoEmissorRg(Index: Integer; const Astring: string);
begin
  FOrgaoEmissorRg := Astring;
  FOrgaoEmissorRg_Specified := True;
end;

function TransportadorRequest2.OrgaoEmissorRg_Specified(Index: Integer): boolean;
begin
  Result := FOrgaoEmissorRg_Specified;
end;

function TransportadorRequest2.GetCNH(Index: Integer): string;
begin
  Result := FCNH;
end;

procedure TransportadorRequest2.SetCNH(Index: Integer; const Astring: string);
begin
  FCNH := Astring;
  FCNH_Specified := True;
end;

function TransportadorRequest2.CNH_Specified(Index: Integer): boolean;
begin
  Result := FCNH_Specified;
end;

function TransportadorRequest2.GetTipoCNH(Index: Integer): string;
begin
  Result := FTipoCNH;
end;

procedure TransportadorRequest2.SetTipoCNH(Index: Integer; const Astring: string);
begin
  FTipoCNH := Astring;
  FTipoCNH_Specified := True;
end;

function TransportadorRequest2.TipoCNH_Specified(Index: Integer): boolean;
begin
  Result := FTipoCNH_Specified;
end;

function TransportadorRequest2.GetDataValidadeCNH(Index: Integer): TXSDateTime;
begin
  Result := FDataValidadeCNH;
end;

procedure TransportadorRequest2.SetDataValidadeCNH(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDataValidadeCNH := ATXSDateTime;
  FDataValidadeCNH_Specified := True;
end;

function TransportadorRequest2.DataValidadeCNH_Specified(Index: Integer): boolean;
begin
  Result := FDataValidadeCNH_Specified;
end;

function TransportadorRequest2.GetSexo(Index: Integer): string;
begin
  Result := FSexo;
end;

procedure TransportadorRequest2.SetSexo(Index: Integer; const Astring: string);
begin
  FSexo := Astring;
  FSexo_Specified := True;
end;

function TransportadorRequest2.Sexo_Specified(Index: Integer): boolean;
begin
  Result := FSexo_Specified;
end;

function TransportadorRequest2.GetNaturalidade(Index: Integer): string;
begin
  Result := FNaturalidade;
end;

procedure TransportadorRequest2.SetNaturalidade(Index: Integer; const Astring: string);
begin
  FNaturalidade := Astring;
  FNaturalidade_Specified := True;
end;

function TransportadorRequest2.Naturalidade_Specified(Index: Integer): boolean;
begin
  Result := FNaturalidade_Specified;
end;

function TransportadorRequest2.GetNacionalidade(Index: Integer): string;
begin
  Result := FNacionalidade;
end;

procedure TransportadorRequest2.SetNacionalidade(Index: Integer; const Astring: string);
begin
  FNacionalidade := Astring;
  FNacionalidade_Specified := True;
end;

function TransportadorRequest2.Nacionalidade_Specified(Index: Integer): boolean;
begin
  Result := FNacionalidade_Specified;
end;

function TransportadorRequest2.GetInscricaoEstadual(Index: Integer): string;
begin
  Result := FInscricaoEstadual;
end;

procedure TransportadorRequest2.SetInscricaoEstadual(Index: Integer; const Astring: string);
begin
  FInscricaoEstadual := Astring;
  FInscricaoEstadual_Specified := True;
end;

function TransportadorRequest2.InscricaoEstadual_Specified(Index: Integer): boolean;
begin
  Result := FInscricaoEstadual_Specified;
end;

function TransportadorRequest2.GetInscricaoMunicipal(Index: Integer): string;
begin
  Result := FInscricaoMunicipal;
end;

procedure TransportadorRequest2.SetInscricaoMunicipal(Index: Integer; const Astring: string);
begin
  FInscricaoMunicipal := Astring;
  FInscricaoMunicipal_Specified := True;
end;

function TransportadorRequest2.InscricaoMunicipal_Specified(Index: Integer): boolean;
begin
  Result := FInscricaoMunicipal_Specified;
end;

function TransportadorRequest2.GetNomeFantasia(Index: Integer): string;
begin
  Result := FNomeFantasia;
end;

procedure TransportadorRequest2.SetNomeFantasia(Index: Integer; const Astring: string);
begin
  FNomeFantasia := Astring;
  FNomeFantasia_Specified := True;
end;

function TransportadorRequest2.NomeFantasia_Specified(Index: Integer): boolean;
begin
  Result := FNomeFantasia_Specified;
end;

function TransportadorRequest2.GetDataInscricao(Index: Integer): TXSDateTime;
begin
  Result := FDataInscricao;
end;

procedure TransportadorRequest2.SetDataInscricao(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDataInscricao := ATXSDateTime;
  FDataInscricao_Specified := True;
end;

function TransportadorRequest2.DataInscricao_Specified(Index: Integer): boolean;
begin
  Result := FDataInscricao_Specified;
end;

function TransportadorRequest2.GetIdDmAtividadeEconomica(Index: Integer): Integer;
begin
  Result := FIdDmAtividadeEconomica;
end;

procedure TransportadorRequest2.SetIdDmAtividadeEconomica(Index: Integer; const AInteger: Integer);
begin
  FIdDmAtividadeEconomica := AInteger;
  FIdDmAtividadeEconomica_Specified := True;
end;

function TransportadorRequest2.IdDmAtividadeEconomica_Specified(Index: Integer): boolean;
begin
  Result := FIdDmAtividadeEconomica_Specified;
end;

function TransportadorRequest2.GetEndereco(Index: Integer): string;
begin
  Result := FEndereco;
end;

procedure TransportadorRequest2.SetEndereco(Index: Integer; const Astring: string);
begin
  FEndereco := Astring;
  FEndereco_Specified := True;
end;

function TransportadorRequest2.Endereco_Specified(Index: Integer): boolean;
begin
  Result := FEndereco_Specified;
end;

function TransportadorRequest2.GetNumeroEndereco(Index: Integer): string;
begin
  Result := FNumeroEndereco;
end;

procedure TransportadorRequest2.SetNumeroEndereco(Index: Integer; const Astring: string);
begin
  FNumeroEndereco := Astring;
  FNumeroEndereco_Specified := True;
end;

function TransportadorRequest2.NumeroEndereco_Specified(Index: Integer): boolean;
begin
  Result := FNumeroEndereco_Specified;
end;

function TransportadorRequest2.GetEnderecoComplemento(Index: Integer): string;
begin
  Result := FEnderecoComplemento;
end;

procedure TransportadorRequest2.SetEnderecoComplemento(Index: Integer; const Astring: string);
begin
  FEnderecoComplemento := Astring;
  FEnderecoComplemento_Specified := True;
end;

function TransportadorRequest2.EnderecoComplemento_Specified(Index: Integer): boolean;
begin
  Result := FEnderecoComplemento_Specified;
end;

function TransportadorRequest2.GetBairro(Index: Integer): string;
begin
  Result := FBairro;
end;

procedure TransportadorRequest2.SetBairro(Index: Integer; const Astring: string);
begin
  FBairro := Astring;
  FBairro_Specified := True;
end;

function TransportadorRequest2.Bairro_Specified(Index: Integer): boolean;
begin
  Result := FBairro_Specified;
end;

function TransportadorRequest2.GetCEP(Index: Integer): string;
begin
  Result := FCEP;
end;

procedure TransportadorRequest2.SetCEP(Index: Integer; const Astring: string);
begin
  FCEP := Astring;
  FCEP_Specified := True;
end;

function TransportadorRequest2.CEP_Specified(Index: Integer): boolean;
begin
  Result := FCEP_Specified;
end;

function TransportadorRequest2.GetCodigoIBGEMunicipio(Index: Integer): Integer;
begin
  Result := FCodigoIBGEMunicipio;
end;

procedure TransportadorRequest2.SetCodigoIBGEMunicipio(Index: Integer; const AInteger: Integer);
begin
  FCodigoIBGEMunicipio := AInteger;
  FCodigoIBGEMunicipio_Specified := True;
end;

function TransportadorRequest2.CodigoIBGEMunicipio_Specified(Index: Integer): boolean;
begin
  Result := FCodigoIBGEMunicipio_Specified;
end;

function TransportadorRequest2.GetIdentificadorEndereco(Index: Integer): string;
begin
  Result := FIdentificadorEndereco;
end;

procedure TransportadorRequest2.SetIdentificadorEndereco(Index: Integer; const Astring: string);
begin
  FIdentificadorEndereco := Astring;
  FIdentificadorEndereco_Specified := True;
end;

function TransportadorRequest2.IdentificadorEndereco_Specified(Index: Integer): boolean;
begin
  Result := FIdentificadorEndereco_Specified;
end;

function TransportadorRequest2.GetTelefoneFixo(Index: Integer): Int64;
begin
  Result := FTelefoneFixo;
end;

procedure TransportadorRequest2.SetTelefoneFixo(Index: Integer; const AInt64: Int64);
begin
  FTelefoneFixo := AInt64;
  FTelefoneFixo_Specified := True;
end;

function TransportadorRequest2.TelefoneFixo_Specified(Index: Integer): boolean;
begin
  Result := FTelefoneFixo_Specified;
end;

function TransportadorRequest2.GetTelefoneCelular(Index: Integer): Int64;
begin
  Result := FTelefoneCelular;
end;

procedure TransportadorRequest2.SetTelefoneCelular(Index: Integer; const AInt64: Int64);
begin
  FTelefoneCelular := AInt64;
  FTelefoneCelular_Specified := True;
end;

function TransportadorRequest2.TelefoneCelular_Specified(Index: Integer): boolean;
begin
  Result := FTelefoneCelular_Specified;
end;

function TransportadorRequest2.GetEstadoCivil(Index: Integer): Integer;
begin
  Result := FEstadoCivil;
end;

procedure TransportadorRequest2.SetEstadoCivil(Index: Integer; const AInteger: Integer);
begin
  FEstadoCivil := AInteger;
  FEstadoCivil_Specified := True;
end;

function TransportadorRequest2.EstadoCivil_Specified(Index: Integer): boolean;
begin
  Result := FEstadoCivil_Specified;
end;

function TransportadorRequest2.GetEmail(Index: Integer): string;
begin
  Result := FEmail;
end;

procedure TransportadorRequest2.SetEmail(Index: Integer; const Astring: string);
begin
  FEmail := Astring;
  FEmail_Specified := True;
end;

function TransportadorRequest2.Email_Specified(Index: Integer): boolean;
begin
  Result := FEmail_Specified;
end;

function TransportadorRequest2.GetUsuario(Index: Integer): string;
begin
  Result := FUsuario;
end;

procedure TransportadorRequest2.SetUsuario(Index: Integer; const Astring: string);
begin
  FUsuario := Astring;
  FUsuario_Specified := True;
end;

function TransportadorRequest2.Usuario_Specified(Index: Integer): boolean;
begin
  Result := FUsuario_Specified;
end;

function TransportadorRequest2.GetCodigoBanco(Index: Integer): string;
begin
  Result := FCodigoBanco;
end;

procedure TransportadorRequest2.SetCodigoBanco(Index: Integer; const Astring: string);
begin
  FCodigoBanco := Astring;
  FCodigoBanco_Specified := True;
end;

function TransportadorRequest2.CodigoBanco_Specified(Index: Integer): boolean;
begin
  Result := FCodigoBanco_Specified;
end;

function TransportadorRequest2.GetCodigoAgencia(Index: Integer): string;
begin
  Result := FCodigoAgencia;
end;

procedure TransportadorRequest2.SetCodigoAgencia(Index: Integer; const Astring: string);
begin
  FCodigoAgencia := Astring;
  FCodigoAgencia_Specified := True;
end;

function TransportadorRequest2.CodigoAgencia_Specified(Index: Integer): boolean;
begin
  Result := FCodigoAgencia_Specified;
end;

function TransportadorRequest2.GetDigitoAgencia(Index: Integer): string;
begin
  Result := FDigitoAgencia;
end;

procedure TransportadorRequest2.SetDigitoAgencia(Index: Integer; const Astring: string);
begin
  FDigitoAgencia := Astring;
  FDigitoAgencia_Specified := True;
end;

function TransportadorRequest2.DigitoAgencia_Specified(Index: Integer): boolean;
begin
  Result := FDigitoAgencia_Specified;
end;

function TransportadorRequest2.GetContaCorrente(Index: Integer): string;
begin
  Result := FContaCorrente;
end;

procedure TransportadorRequest2.SetContaCorrente(Index: Integer; const Astring: string);
begin
  FContaCorrente := Astring;
  FContaCorrente_Specified := True;
end;

function TransportadorRequest2.ContaCorrente_Specified(Index: Integer): boolean;
begin
  Result := FContaCorrente_Specified;
end;

function TransportadorRequest2.GetDigitoContaCorrente(Index: Integer): string;
begin
  Result := FDigitoContaCorrente;
end;

procedure TransportadorRequest2.SetDigitoContaCorrente(Index: Integer; const Astring: string);
begin
  FDigitoContaCorrente := Astring;
  FDigitoContaCorrente_Specified := True;
end;

function TransportadorRequest2.DigitoContaCorrente_Specified(Index: Integer): boolean;
begin
  Result := FDigitoContaCorrente_Specified;
end;

function TransportadorRequest2.GetFlagContaPoupanca(Index: Integer): Boolean;
begin
  Result := FFlagContaPoupanca;
end;

procedure TransportadorRequest2.SetFlagContaPoupanca(Index: Integer; const ABoolean: Boolean);
begin
  FFlagContaPoupanca := ABoolean;
  FFlagContaPoupanca_Specified := True;
end;

function TransportadorRequest2.FlagContaPoupanca_Specified(Index: Integer): boolean;
begin
  Result := FFlagContaPoupanca_Specified;
end;

function TransportadorRequest2.GetVariacaoContaPoupanca(Index: Integer): string;
begin
  Result := FVariacaoContaPoupanca;
end;

procedure TransportadorRequest2.SetVariacaoContaPoupanca(Index: Integer; const Astring: string);
begin
  FVariacaoContaPoupanca := Astring;
  FVariacaoContaPoupanca_Specified := True;
end;

function TransportadorRequest2.VariacaoContaPoupanca_Specified(Index: Integer): boolean;
begin
  Result := FVariacaoContaPoupanca_Specified;
end;

function TransportadorRequest2.GetNomeContato(Index: Integer): string;
begin
  Result := FNomeContato;
end;

procedure TransportadorRequest2.SetNomeContato(Index: Integer; const Astring: string);
begin
  FNomeContato := Astring;
  FNomeContato_Specified := True;
end;

function TransportadorRequest2.NomeContato_Specified(Index: Integer): boolean;
begin
  Result := FNomeContato_Specified;
end;

function TransportadorRequest2.GetCargoContato(Index: Integer): string;
begin
  Result := FCargoContato;
end;

procedure TransportadorRequest2.SetCargoContato(Index: Integer; const Astring: string);
begin
  FCargoContato := Astring;
  FCargoContato_Specified := True;
end;

function TransportadorRequest2.CargoContato_Specified(Index: Integer): boolean;
begin
  Result := FCargoContato_Specified;
end;

function TransportadorRequest2.GetCPFCNPJContato(Index: Integer): string;
begin
  Result := FCPFCNPJContato;
end;

procedure TransportadorRequest2.SetCPFCNPJContato(Index: Integer; const Astring: string);
begin
  FCPFCNPJContato := Astring;
  FCPFCNPJContato_Specified := True;
end;

function TransportadorRequest2.CPFCNPJContato_Specified(Index: Integer): boolean;
begin
  Result := FCPFCNPJContato_Specified;
end;

function TransportadorRequest2.GetTelefoneFixoContato(Index: Integer): Int64;
begin
  Result := FTelefoneFixoContato;
end;

procedure TransportadorRequest2.SetTelefoneFixoContato(Index: Integer; const AInt64: Int64);
begin
  FTelefoneFixoContato := AInt64;
  FTelefoneFixoContato_Specified := True;
end;

function TransportadorRequest2.TelefoneFixoContato_Specified(Index: Integer): boolean;
begin
  Result := FTelefoneFixoContato_Specified;
end;

function TransportadorRequest2.GetTelefoneCelularContato(Index: Integer): Int64;
begin
  Result := FTelefoneCelularContato;
end;

procedure TransportadorRequest2.SetTelefoneCelularContato(Index: Integer; const AInt64: Int64);
begin
  FTelefoneCelularContato := AInt64;
  FTelefoneCelularContato_Specified := True;
end;

function TransportadorRequest2.TelefoneCelularContato_Specified(Index: Integer): boolean;
begin
  Result := FTelefoneCelularContato_Specified;
end;

function TransportadorRequest2.GetEmailContato(Index: Integer): string;
begin
  Result := FEmailContato;
end;

procedure TransportadorRequest2.SetEmailContato(Index: Integer; const Astring: string);
begin
  FEmailContato := Astring;
  FEmailContato_Specified := True;
end;

function TransportadorRequest2.EmailContato_Specified(Index: Integer): boolean;
begin
  Result := FEmailContato_Specified;
end;

function TransportadorRequest2.GetDataNascimentoContato(Index: Integer): TXSDateTime;
begin
  Result := FDataNascimentoContato;
end;

procedure TransportadorRequest2.SetDataNascimentoContato(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDataNascimentoContato := ATXSDateTime;
  FDataNascimentoContato_Specified := True;
end;

function TransportadorRequest2.DataNascimentoContato_Specified(Index: Integer): boolean;
begin
  Result := FDataNascimentoContato_Specified;
end;

function TransportadorRequest2.GetRGContato(Index: Integer): string;
begin
  Result := FRGContato;
end;

procedure TransportadorRequest2.SetRGContato(Index: Integer; const Astring: string);
begin
  FRGContato := Astring;
  FRGContato_Specified := True;
end;

function TransportadorRequest2.RGContato_Specified(Index: Integer): boolean;
begin
  Result := FRGContato_Specified;
end;

function TransportadorRequest2.GetOrgaoEmissorRgContato(Index: Integer): string;
begin
  Result := FOrgaoEmissorRgContato;
end;

procedure TransportadorRequest2.SetOrgaoEmissorRgContato(Index: Integer; const Astring: string);
begin
  FOrgaoEmissorRgContato := Astring;
  FOrgaoEmissorRgContato_Specified := True;
end;

function TransportadorRequest2.OrgaoEmissorRgContato_Specified(Index: Integer): boolean;
begin
  Result := FOrgaoEmissorRgContato_Specified;
end;

function TransportadorRequest2.GetPisPasep(Index: Integer): string;
begin
  Result := FPisPasep;
end;

procedure TransportadorRequest2.SetPisPasep(Index: Integer; const Astring: string);
begin
  FPisPasep := Astring;
  FPisPasep_Specified := True;
end;

function TransportadorRequest2.PisPasep_Specified(Index: Integer): boolean;
begin
  Result := FPisPasep_Specified;
end;

function PagamentoAvulsoCartaoRequest2.GetNumeroCartao(Index: Integer): string;
begin
  Result := FNumeroCartao;
end;

procedure PagamentoAvulsoCartaoRequest2.SetNumeroCartao(Index: Integer; const Astring: string);
begin
  FNumeroCartao := Astring;
  FNumeroCartao_Specified := True;
end;

function PagamentoAvulsoCartaoRequest2.NumeroCartao_Specified(Index: Integer): boolean;
begin
  Result := FNumeroCartao_Specified;
end;

function PagamentoAvulsoCartaoRequest2.GetValor(Index: Integer): TXSDecimal;
begin
  Result := FValor;
end;

procedure PagamentoAvulsoCartaoRequest2.SetValor(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValor := ATXSDecimal;
  FValor_Specified := True;
end;

function PagamentoAvulsoCartaoRequest2.Valor_Specified(Index: Integer): boolean;
begin
  Result := FValor_Specified;
end;

function PagamentoAvulsoCartaoRequest2.GetComentario(Index: Integer): string;
begin
  Result := FComentario;
end;

procedure PagamentoAvulsoCartaoRequest2.SetComentario(Index: Integer; const Astring: string);
begin
  FComentario := Astring;
  FComentario_Specified := True;
end;

function PagamentoAvulsoCartaoRequest2.Comentario_Specified(Index: Integer): boolean;
begin
  Result := FComentario_Specified;
end;

function PagamentoAvulsoCartaoRequest2.GetIdCentroDeCusto(Index: Integer): Integer;
begin
  Result := FIdCentroDeCusto;
end;

procedure PagamentoAvulsoCartaoRequest2.SetIdCentroDeCusto(Index: Integer; const AInteger: Integer);
begin
  FIdCentroDeCusto := AInteger;
  FIdCentroDeCusto_Specified := True;
end;

function PagamentoAvulsoCartaoRequest2.IdCentroDeCusto_Specified(Index: Integer): boolean;
begin
  Result := FIdCentroDeCusto_Specified;
end;

function PagamentoAvulsoCartaoRequest2.GetNSU(Index: Integer): Int64;
begin
  Result := FNSU;
end;

procedure PagamentoAvulsoCartaoRequest2.SetNSU(Index: Integer; const AInt64: Int64);
begin
  FNSU := AInt64;
  FNSU_Specified := True;
end;

function PagamentoAvulsoCartaoRequest2.NSU_Specified(Index: Integer): boolean;
begin
  Result := FNSU_Specified;
end;

function PagamentoAvulsoCartaoRequest2.GetIdIntegrador(Index: Integer): string;
begin
  Result := FIdIntegrador;
end;

procedure PagamentoAvulsoCartaoRequest2.SetIdIntegrador(Index: Integer; const Astring: string);
begin
  FIdIntegrador := Astring;
  FIdIntegrador_Specified := True;
end;

function PagamentoAvulsoCartaoRequest2.IdIntegrador_Specified(Index: Integer): boolean;
begin
  Result := FIdIntegrador_Specified;
end;

function PagamentoAvulsoCartaoRequest2.GetItemFinanceiro(Index: Integer): string;
begin
  Result := FItemFinanceiro;
end;

procedure PagamentoAvulsoCartaoRequest2.SetItemFinanceiro(Index: Integer; const Astring: string);
begin
  FItemFinanceiro := Astring;
  FItemFinanceiro_Specified := True;
end;

function PagamentoAvulsoCartaoRequest2.ItemFinanceiro_Specified(Index: Integer): boolean;
begin
  Result := FItemFinanceiro_Specified;
end;

function PagamentoAvulsoCartaoRequest2.GetProcessarManualmente(Index: Integer): Boolean;
begin
  Result := FProcessarManualmente;
end;

procedure PagamentoAvulsoCartaoRequest2.SetProcessarManualmente(Index: Integer; const ABoolean: Boolean);
begin
  FProcessarManualmente := ABoolean;
  FProcessarManualmente_Specified := True;
end;

function PagamentoAvulsoCartaoRequest2.ProcessarManualmente_Specified(Index: Integer): boolean;
begin
  Result := FProcessarManualmente_Specified;
end;

function PagamentoAvulsoCartaoRequest2.GetNumeroDocumentoEmbarque(Index: Integer): string;
begin
  Result := FNumeroDocumentoEmbarque;
end;

procedure PagamentoAvulsoCartaoRequest2.SetNumeroDocumentoEmbarque(Index: Integer; const Astring: string);
begin
  FNumeroDocumentoEmbarque := Astring;
  FNumeroDocumentoEmbarque_Specified := True;
end;

function PagamentoAvulsoCartaoRequest2.NumeroDocumentoEmbarque_Specified(Index: Integer): boolean;
begin
  Result := FNumeroDocumentoEmbarque_Specified;
end;

function PagamentoAvulsoCartaoRequest2.GetPlaca(Index: Integer): string;
begin
  Result := FPlaca;
end;

procedure PagamentoAvulsoCartaoRequest2.SetPlaca(Index: Integer; const Astring: string);
begin
  FPlaca := Astring;
  FPlaca_Specified := True;
end;

function PagamentoAvulsoCartaoRequest2.Placa_Specified(Index: Integer): boolean;
begin
  Result := FPlaca_Specified;
end;

function BuscaCentroDeCustoRequest2.GetQuantidadeItensPorPagina(Index: Integer): Integer;
begin
  Result := FQuantidadeItensPorPagina;
end;

procedure BuscaCentroDeCustoRequest2.SetQuantidadeItensPorPagina(Index: Integer; const AInteger: Integer);
begin
  FQuantidadeItensPorPagina := AInteger;
  FQuantidadeItensPorPagina_Specified := True;
end;

function BuscaCentroDeCustoRequest2.QuantidadeItensPorPagina_Specified(Index: Integer): boolean;
begin
  Result := FQuantidadeItensPorPagina_Specified;
end;

function BuscaCentroDeCustoRequest2.GetNumeroPagina(Index: Integer): Integer;
begin
  Result := FNumeroPagina;
end;

procedure BuscaCentroDeCustoRequest2.SetNumeroPagina(Index: Integer; const AInteger: Integer);
begin
  FNumeroPagina := AInteger;
  FNumeroPagina_Specified := True;
end;

function BuscaCentroDeCustoRequest2.NumeroPagina_Specified(Index: Integer): boolean;
begin
  Result := FNumeroPagina_Specified;
end;

function BuscaCentroDeCustoRequest2.GetIdCentroDeCusto(Index: Integer): Integer;
begin
  Result := FIdCentroDeCusto;
end;

procedure BuscaCentroDeCustoRequest2.SetIdCentroDeCusto(Index: Integer; const AInteger: Integer);
begin
  FIdCentroDeCusto := AInteger;
  FIdCentroDeCusto_Specified := True;
end;

function BuscaCentroDeCustoRequest2.IdCentroDeCusto_Specified(Index: Integer): boolean;
begin
  Result := FIdCentroDeCusto_Specified;
end;

function BuscaCentroDeCustoRequest2.GetCodigo(Index: Integer): string;
begin
  Result := FCodigo;
end;

procedure BuscaCentroDeCustoRequest2.SetCodigo(Index: Integer; const Astring: string);
begin
  FCodigo := Astring;
  FCodigo_Specified := True;
end;

function BuscaCentroDeCustoRequest2.Codigo_Specified(Index: Integer): boolean;
begin
  Result := FCodigo_Specified;
end;

function BuscaCentroDeCustoRequest2.GetAtivo(Index: Integer): Boolean;
begin
  Result := FAtivo;
end;

procedure BuscaCentroDeCustoRequest2.SetAtivo(Index: Integer; const ABoolean: Boolean);
begin
  FAtivo := ABoolean;
  FAtivo_Specified := True;
end;

function BuscaCentroDeCustoRequest2.Ativo_Specified(Index: Integer): boolean;
begin
  Result := FAtivo_Specified;
end;

function CentroDeCustoResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure CentroDeCustoResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function CentroDeCustoResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function CentroDeCustoResponse2.GetIdCentroDeCusto(Index: Integer): Integer;
begin
  Result := FIdCentroDeCusto;
end;

procedure CentroDeCustoResponse2.SetIdCentroDeCusto(Index: Integer; const AInteger: Integer);
begin
  FIdCentroDeCusto := AInteger;
  FIdCentroDeCusto_Specified := True;
end;

function CentroDeCustoResponse2.IdCentroDeCusto_Specified(Index: Integer): boolean;
begin
  Result := FIdCentroDeCusto_Specified;
end;

function CentroDeCustoResponse2.GetCodigo(Index: Integer): string;
begin
  Result := FCodigo;
end;

procedure CentroDeCustoResponse2.SetCodigo(Index: Integer; const Astring: string);
begin
  FCodigo := Astring;
  FCodigo_Specified := True;
end;

function CentroDeCustoResponse2.Codigo_Specified(Index: Integer): boolean;
begin
  Result := FCodigo_Specified;
end;

function CentroDeCustoResponse2.GetDescricao(Index: Integer): string;
begin
  Result := FDescricao;
end;

procedure CentroDeCustoResponse2.SetDescricao(Index: Integer; const Astring: string);
begin
  FDescricao := Astring;
  FDescricao_Specified := True;
end;

function CentroDeCustoResponse2.Descricao_Specified(Index: Integer): boolean;
begin
  Result := FDescricao_Specified;
end;

function CentroDeCustoResponse2.GetComentario(Index: Integer): string;
begin
  Result := FComentario;
end;

procedure CentroDeCustoResponse2.SetComentario(Index: Integer; const Astring: string);
begin
  FComentario := Astring;
  FComentario_Specified := True;
end;

function CentroDeCustoResponse2.Comentario_Specified(Index: Integer): boolean;
begin
  Result := FComentario_Specified;
end;

function CentroDeCustoResponse2.GetAtivo(Index: Integer): Boolean;
begin
  Result := FAtivo;
end;

procedure CentroDeCustoResponse2.SetAtivo(Index: Integer; const ABoolean: Boolean);
begin
  FAtivo := ABoolean;
  FAtivo_Specified := True;
end;

function CentroDeCustoResponse2.Ativo_Specified(Index: Integer): boolean;
begin
  Result := FAtivo_Specified;
end;

function BuscaMotoristaRequest2.GetQuantidadeItensPorPagina(Index: Integer): Integer;
begin
  Result := FQuantidadeItensPorPagina;
end;

procedure BuscaMotoristaRequest2.SetQuantidadeItensPorPagina(Index: Integer; const AInteger: Integer);
begin
  FQuantidadeItensPorPagina := AInteger;
  FQuantidadeItensPorPagina_Specified := True;
end;

function BuscaMotoristaRequest2.QuantidadeItensPorPagina_Specified(Index: Integer): boolean;
begin
  Result := FQuantidadeItensPorPagina_Specified;
end;

function BuscaMotoristaRequest2.GetNumeroPagina(Index: Integer): Integer;
begin
  Result := FNumeroPagina;
end;

procedure BuscaMotoristaRequest2.SetNumeroPagina(Index: Integer; const AInteger: Integer);
begin
  FNumeroPagina := AInteger;
  FNumeroPagina_Specified := True;
end;

function BuscaMotoristaRequest2.NumeroPagina_Specified(Index: Integer): boolean;
begin
  Result := FNumeroPagina_Specified;
end;

function BuscaMotoristaRequest2.GetCPFCNPJTransportador(Index: Integer): string;
begin
  Result := FCPFCNPJTransportador;
end;

procedure BuscaMotoristaRequest2.SetCPFCNPJTransportador(Index: Integer; const Astring: string);
begin
  FCPFCNPJTransportador := Astring;
  FCPFCNPJTransportador_Specified := True;
end;

function BuscaMotoristaRequest2.CPFCNPJTransportador_Specified(Index: Integer): boolean;
begin
  Result := FCPFCNPJTransportador_Specified;
end;

function BuscaMotoristaRequest2.GetIdMotorista(Index: Integer): Integer;
begin
  Result := FIdMotorista;
end;

procedure BuscaMotoristaRequest2.SetIdMotorista(Index: Integer; const AInteger: Integer);
begin
  FIdMotorista := AInteger;
  FIdMotorista_Specified := True;
end;

function BuscaMotoristaRequest2.IdMotorista_Specified(Index: Integer): boolean;
begin
  Result := FIdMotorista_Specified;
end;

function BuscaMotoristaRequest2.GetCPF(Index: Integer): string;
begin
  Result := FCPF;
end;

procedure BuscaMotoristaRequest2.SetCPF(Index: Integer; const Astring: string);
begin
  FCPF := Astring;
  FCPF_Specified := True;
end;

function BuscaMotoristaRequest2.CPF_Specified(Index: Integer): boolean;
begin
  Result := FCPF_Specified;
end;

function BuscaMotoristaRequest2.GetAtivo(Index: Integer): Boolean;
begin
  Result := FAtivo;
end;

procedure BuscaMotoristaRequest2.SetAtivo(Index: Integer; const ABoolean: Boolean);
begin
  FAtivo := ABoolean;
  FAtivo_Specified := True;
end;

function BuscaMotoristaRequest2.Ativo_Specified(Index: Integer): boolean;
begin
  Result := FAtivo_Specified;
end;

function MotoristaResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure MotoristaResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function MotoristaResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function MotoristaResponse2.GetIdMotorista(Index: Integer): Integer;
begin
  Result := FIdMotorista;
end;

procedure MotoristaResponse2.SetIdMotorista(Index: Integer; const AInteger: Integer);
begin
  FIdMotorista := AInteger;
  FIdMotorista_Specified := True;
end;

function MotoristaResponse2.IdMotorista_Specified(Index: Integer): boolean;
begin
  Result := FIdMotorista_Specified;
end;

function MotoristaResponse2.GetNome(Index: Integer): string;
begin
  Result := FNome;
end;

procedure MotoristaResponse2.SetNome(Index: Integer; const Astring: string);
begin
  FNome := Astring;
  FNome_Specified := True;
end;

function MotoristaResponse2.Nome_Specified(Index: Integer): boolean;
begin
  Result := FNome_Specified;
end;

function MotoristaResponse2.GetSobrenome(Index: Integer): string;
begin
  Result := FSobrenome;
end;

procedure MotoristaResponse2.SetSobrenome(Index: Integer; const Astring: string);
begin
  FSobrenome := Astring;
  FSobrenome_Specified := True;
end;

function MotoristaResponse2.Sobrenome_Specified(Index: Integer): boolean;
begin
  Result := FSobrenome_Specified;
end;

function MotoristaResponse2.GetCPF(Index: Integer): string;
begin
  Result := FCPF;
end;

procedure MotoristaResponse2.SetCPF(Index: Integer; const Astring: string);
begin
  FCPF := Astring;
  FCPF_Specified := True;
end;

function MotoristaResponse2.CPF_Specified(Index: Integer): boolean;
begin
  Result := FCPF_Specified;
end;

function MotoristaResponse2.GetNumeroRG(Index: Integer): string;
begin
  Result := FNumeroRG;
end;

procedure MotoristaResponse2.SetNumeroRG(Index: Integer; const Astring: string);
begin
  FNumeroRG := Astring;
  FNumeroRG_Specified := True;
end;

function MotoristaResponse2.NumeroRG_Specified(Index: Integer): boolean;
begin
  Result := FNumeroRG_Specified;
end;

function MotoristaResponse2.GetOrgaoEmissorRg(Index: Integer): string;
begin
  Result := FOrgaoEmissorRg;
end;

procedure MotoristaResponse2.SetOrgaoEmissorRg(Index: Integer; const Astring: string);
begin
  FOrgaoEmissorRg := Astring;
  FOrgaoEmissorRg_Specified := True;
end;

function MotoristaResponse2.OrgaoEmissorRg_Specified(Index: Integer): boolean;
begin
  Result := FOrgaoEmissorRg_Specified;
end;

function MotoristaResponse2.GetDataNascimento(Index: Integer): TXSDateTime;
begin
  Result := FDataNascimento;
end;

procedure MotoristaResponse2.SetDataNascimento(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDataNascimento := ATXSDateTime;
  FDataNascimento_Specified := True;
end;

function MotoristaResponse2.DataNascimento_Specified(Index: Integer): boolean;
begin
  Result := FDataNascimento_Specified;
end;

function MotoristaResponse2.GetSexo(Index: Integer): string;
begin
  Result := FSexo;
end;

procedure MotoristaResponse2.SetSexo(Index: Integer; const Astring: string);
begin
  FSexo := Astring;
  FSexo_Specified := True;
end;

function MotoristaResponse2.Sexo_Specified(Index: Integer): boolean;
begin
  Result := FSexo_Specified;
end;

function MotoristaResponse2.GetEstadoCivil(Index: Integer): string;
begin
  Result := FEstadoCivil;
end;

procedure MotoristaResponse2.SetEstadoCivil(Index: Integer; const Astring: string);
begin
  FEstadoCivil := Astring;
  FEstadoCivil_Specified := True;
end;

function MotoristaResponse2.EstadoCivil_Specified(Index: Integer): boolean;
begin
  Result := FEstadoCivil_Specified;
end;

function MotoristaResponse2.GetNomePai(Index: Integer): string;
begin
  Result := FNomePai;
end;

procedure MotoristaResponse2.SetNomePai(Index: Integer; const Astring: string);
begin
  FNomePai := Astring;
  FNomePai_Specified := True;
end;

function MotoristaResponse2.NomePai_Specified(Index: Integer): boolean;
begin
  Result := FNomePai_Specified;
end;

function MotoristaResponse2.GetNomeMae(Index: Integer): string;
begin
  Result := FNomeMae;
end;

procedure MotoristaResponse2.SetNomeMae(Index: Integer; const Astring: string);
begin
  FNomeMae := Astring;
  FNomeMae_Specified := True;
end;

function MotoristaResponse2.NomeMae_Specified(Index: Integer): boolean;
begin
  Result := FNomeMae_Specified;
end;

function MotoristaResponse2.GetEmail(Index: Integer): string;
begin
  Result := FEmail;
end;

procedure MotoristaResponse2.SetEmail(Index: Integer; const Astring: string);
begin
  FEmail := Astring;
  FEmail_Specified := True;
end;

function MotoristaResponse2.Email_Specified(Index: Integer): boolean;
begin
  Result := FEmail_Specified;
end;

function MotoristaResponse2.GetTelefone(Index: Integer): string;
begin
  Result := FTelefone;
end;

procedure MotoristaResponse2.SetTelefone(Index: Integer; const Astring: string);
begin
  FTelefone := Astring;
  FTelefone_Specified := True;
end;

function MotoristaResponse2.Telefone_Specified(Index: Integer): boolean;
begin
  Result := FTelefone_Specified;
end;

function MotoristaResponse2.GetTelefoneCelular(Index: Integer): string;
begin
  Result := FTelefoneCelular;
end;

procedure MotoristaResponse2.SetTelefoneCelular(Index: Integer; const Astring: string);
begin
  FTelefoneCelular := Astring;
  FTelefoneCelular_Specified := True;
end;

function MotoristaResponse2.TelefoneCelular_Specified(Index: Integer): boolean;
begin
  Result := FTelefoneCelular_Specified;
end;

function MotoristaResponse2.GetNacionalidade(Index: Integer): string;
begin
  Result := FNacionalidade;
end;

procedure MotoristaResponse2.SetNacionalidade(Index: Integer; const Astring: string);
begin
  FNacionalidade := Astring;
  FNacionalidade_Specified := True;
end;

function MotoristaResponse2.Nacionalidade_Specified(Index: Integer): boolean;
begin
  Result := FNacionalidade_Specified;
end;

function MotoristaResponse2.GetEndereco(Index: Integer): string;
begin
  Result := FEndereco;
end;

procedure MotoristaResponse2.SetEndereco(Index: Integer; const Astring: string);
begin
  FEndereco := Astring;
  FEndereco_Specified := True;
end;

function MotoristaResponse2.Endereco_Specified(Index: Integer): boolean;
begin
  Result := FEndereco_Specified;
end;

function MotoristaResponse2.GetNumeroPorta(Index: Integer): string;
begin
  Result := FNumeroPorta;
end;

procedure MotoristaResponse2.SetNumeroPorta(Index: Integer; const Astring: string);
begin
  FNumeroPorta := Astring;
  FNumeroPorta_Specified := True;
end;

function MotoristaResponse2.NumeroPorta_Specified(Index: Integer): boolean;
begin
  Result := FNumeroPorta_Specified;
end;

function MotoristaResponse2.GetEnderecoComplemento(Index: Integer): string;
begin
  Result := FEnderecoComplemento;
end;

procedure MotoristaResponse2.SetEnderecoComplemento(Index: Integer; const Astring: string);
begin
  FEnderecoComplemento := Astring;
  FEnderecoComplemento_Specified := True;
end;

function MotoristaResponse2.EnderecoComplemento_Specified(Index: Integer): boolean;
begin
  Result := FEnderecoComplemento_Specified;
end;

function MotoristaResponse2.GetCEP(Index: Integer): string;
begin
  Result := FCEP;
end;

procedure MotoristaResponse2.SetCEP(Index: Integer; const Astring: string);
begin
  FCEP := Astring;
  FCEP_Specified := True;
end;

function MotoristaResponse2.CEP_Specified(Index: Integer): boolean;
begin
  Result := FCEP_Specified;
end;

function MotoristaResponse2.GetBairro(Index: Integer): string;
begin
  Result := FBairro;
end;

procedure MotoristaResponse2.SetBairro(Index: Integer; const Astring: string);
begin
  FBairro := Astring;
  FBairro_Specified := True;
end;

function MotoristaResponse2.Bairro_Specified(Index: Integer): boolean;
begin
  Result := FBairro_Specified;
end;

function MotoristaResponse2.GetCidade(Index: Integer): string;
begin
  Result := FCidade;
end;

procedure MotoristaResponse2.SetCidade(Index: Integer; const Astring: string);
begin
  FCidade := Astring;
  FCidade_Specified := True;
end;

function MotoristaResponse2.Cidade_Specified(Index: Integer): boolean;
begin
  Result := FCidade_Specified;
end;

function MotoristaResponse2.GetUF(Index: Integer): string;
begin
  Result := FUF;
end;

procedure MotoristaResponse2.SetUF(Index: Integer; const Astring: string);
begin
  FUF := Astring;
  FUF_Specified := True;
end;

function MotoristaResponse2.UF_Specified(Index: Integer): boolean;
begin
  Result := FUF_Specified;
end;

function MotoristaResponse2.GetCodigoBanco(Index: Integer): string;
begin
  Result := FCodigoBanco;
end;

procedure MotoristaResponse2.SetCodigoBanco(Index: Integer; const Astring: string);
begin
  FCodigoBanco := Astring;
  FCodigoBanco_Specified := True;
end;

function MotoristaResponse2.CodigoBanco_Specified(Index: Integer): boolean;
begin
  Result := FCodigoBanco_Specified;
end;

function MotoristaResponse2.GetCodigoAgencia(Index: Integer): string;
begin
  Result := FCodigoAgencia;
end;

procedure MotoristaResponse2.SetCodigoAgencia(Index: Integer; const Astring: string);
begin
  FCodigoAgencia := Astring;
  FCodigoAgencia_Specified := True;
end;

function MotoristaResponse2.CodigoAgencia_Specified(Index: Integer): boolean;
begin
  Result := FCodigoAgencia_Specified;
end;

function MotoristaResponse2.GetDigitoAgencia(Index: Integer): string;
begin
  Result := FDigitoAgencia;
end;

procedure MotoristaResponse2.SetDigitoAgencia(Index: Integer; const Astring: string);
begin
  FDigitoAgencia := Astring;
  FDigitoAgencia_Specified := True;
end;

function MotoristaResponse2.DigitoAgencia_Specified(Index: Integer): boolean;
begin
  Result := FDigitoAgencia_Specified;
end;

function MotoristaResponse2.GetContaCorrente(Index: Integer): string;
begin
  Result := FContaCorrente;
end;

procedure MotoristaResponse2.SetContaCorrente(Index: Integer; const Astring: string);
begin
  FContaCorrente := Astring;
  FContaCorrente_Specified := True;
end;

function MotoristaResponse2.ContaCorrente_Specified(Index: Integer): boolean;
begin
  Result := FContaCorrente_Specified;
end;

function MotoristaResponse2.GetDigitoContaCorrente(Index: Integer): string;
begin
  Result := FDigitoContaCorrente;
end;

procedure MotoristaResponse2.SetDigitoContaCorrente(Index: Integer; const Astring: string);
begin
  FDigitoContaCorrente := Astring;
  FDigitoContaCorrente_Specified := True;
end;

function MotoristaResponse2.DigitoContaCorrente_Specified(Index: Integer): boolean;
begin
  Result := FDigitoContaCorrente_Specified;
end;

function MotoristaResponse2.GetFlagContaPoupanca(Index: Integer): Boolean;
begin
  Result := FFlagContaPoupanca;
end;

procedure MotoristaResponse2.SetFlagContaPoupanca(Index: Integer; const ABoolean: Boolean);
begin
  FFlagContaPoupanca := ABoolean;
  FFlagContaPoupanca_Specified := True;
end;

function MotoristaResponse2.FlagContaPoupanca_Specified(Index: Integer): boolean;
begin
  Result := FFlagContaPoupanca_Specified;
end;

function MotoristaResponse2.GetVariacaoContaPoupanca(Index: Integer): string;
begin
  Result := FVariacaoContaPoupanca;
end;

procedure MotoristaResponse2.SetVariacaoContaPoupanca(Index: Integer; const Astring: string);
begin
  FVariacaoContaPoupanca := Astring;
  FVariacaoContaPoupanca_Specified := True;
end;

function MotoristaResponse2.VariacaoContaPoupanca_Specified(Index: Integer): boolean;
begin
  Result := FVariacaoContaPoupanca_Specified;
end;

function MotoristaResponse2.GetAtivo(Index: Integer): Boolean;
begin
  Result := FAtivo;
end;

procedure MotoristaResponse2.SetAtivo(Index: Integer; const ABoolean: Boolean);
begin
  FAtivo := ABoolean;
  FAtivo_Specified := True;
end;

function MotoristaResponse2.Ativo_Specified(Index: Integer): boolean;
begin
  Result := FAtivo_Specified;
end;

function MotoristaRequest2.GetInstrucao(Index: Integer): Integer;
begin
  Result := FInstrucao;
end;

procedure MotoristaRequest2.SetInstrucao(Index: Integer; const AInteger: Integer);
begin
  FInstrucao := AInteger;
  FInstrucao_Specified := True;
end;

function MotoristaRequest2.Instrucao_Specified(Index: Integer): boolean;
begin
  Result := FInstrucao_Specified;
end;

function MotoristaRequest2.GetCPFCNPJTransportador(Index: Integer): string;
begin
  Result := FCPFCNPJTransportador;
end;

procedure MotoristaRequest2.SetCPFCNPJTransportador(Index: Integer; const Astring: string);
begin
  FCPFCNPJTransportador := Astring;
  FCPFCNPJTransportador_Specified := True;
end;

function MotoristaRequest2.CPFCNPJTransportador_Specified(Index: Integer): boolean;
begin
  Result := FCPFCNPJTransportador_Specified;
end;

function MotoristaRequest2.GetIdMotorista(Index: Integer): Integer;
begin
  Result := FIdMotorista;
end;

procedure MotoristaRequest2.SetIdMotorista(Index: Integer; const AInteger: Integer);
begin
  FIdMotorista := AInteger;
  FIdMotorista_Specified := True;
end;

function MotoristaRequest2.IdMotorista_Specified(Index: Integer): boolean;
begin
  Result := FIdMotorista_Specified;
end;

function MotoristaRequest2.GetNome(Index: Integer): string;
begin
  Result := FNome;
end;

procedure MotoristaRequest2.SetNome(Index: Integer; const Astring: string);
begin
  FNome := Astring;
  FNome_Specified := True;
end;

function MotoristaRequest2.Nome_Specified(Index: Integer): boolean;
begin
  Result := FNome_Specified;
end;

function MotoristaRequest2.GetSobrenome(Index: Integer): string;
begin
  Result := FSobrenome;
end;

procedure MotoristaRequest2.SetSobrenome(Index: Integer; const Astring: string);
begin
  FSobrenome := Astring;
  FSobrenome_Specified := True;
end;

function MotoristaRequest2.Sobrenome_Specified(Index: Integer): boolean;
begin
  Result := FSobrenome_Specified;
end;

function MotoristaRequest2.GetCPF(Index: Integer): string;
begin
  Result := FCPF;
end;

procedure MotoristaRequest2.SetCPF(Index: Integer; const Astring: string);
begin
  FCPF := Astring;
  FCPF_Specified := True;
end;

function MotoristaRequest2.CPF_Specified(Index: Integer): boolean;
begin
  Result := FCPF_Specified;
end;

function MotoristaRequest2.GetNumeroRG(Index: Integer): string;
begin
  Result := FNumeroRG;
end;

procedure MotoristaRequest2.SetNumeroRG(Index: Integer; const Astring: string);
begin
  FNumeroRG := Astring;
  FNumeroRG_Specified := True;
end;

function MotoristaRequest2.NumeroRG_Specified(Index: Integer): boolean;
begin
  Result := FNumeroRG_Specified;
end;

function MotoristaRequest2.GetOrgaoEmissorRg(Index: Integer): string;
begin
  Result := FOrgaoEmissorRg;
end;

procedure MotoristaRequest2.SetOrgaoEmissorRg(Index: Integer; const Astring: string);
begin
  FOrgaoEmissorRg := Astring;
  FOrgaoEmissorRg_Specified := True;
end;

function MotoristaRequest2.OrgaoEmissorRg_Specified(Index: Integer): boolean;
begin
  Result := FOrgaoEmissorRg_Specified;
end;

function MotoristaRequest2.GetDataNascimento(Index: Integer): TXSDateTime;
begin
  Result := FDataNascimento;
end;

procedure MotoristaRequest2.SetDataNascimento(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDataNascimento := ATXSDateTime;
  FDataNascimento_Specified := True;
end;

function MotoristaRequest2.DataNascimento_Specified(Index: Integer): boolean;
begin
  Result := FDataNascimento_Specified;
end;

function MotoristaRequest2.GetSexo(Index: Integer): string;
begin
  Result := FSexo;
end;

procedure MotoristaRequest2.SetSexo(Index: Integer; const Astring: string);
begin
  FSexo := Astring;
  FSexo_Specified := True;
end;

function MotoristaRequest2.Sexo_Specified(Index: Integer): boolean;
begin
  Result := FSexo_Specified;
end;

function MotoristaRequest2.GetEstadoCivil(Index: Integer): string;
begin
  Result := FEstadoCivil;
end;

procedure MotoristaRequest2.SetEstadoCivil(Index: Integer; const Astring: string);
begin
  FEstadoCivil := Astring;
  FEstadoCivil_Specified := True;
end;

function MotoristaRequest2.EstadoCivil_Specified(Index: Integer): boolean;
begin
  Result := FEstadoCivil_Specified;
end;

function MotoristaRequest2.GetNomePai(Index: Integer): string;
begin
  Result := FNomePai;
end;

procedure MotoristaRequest2.SetNomePai(Index: Integer; const Astring: string);
begin
  FNomePai := Astring;
  FNomePai_Specified := True;
end;

function MotoristaRequest2.NomePai_Specified(Index: Integer): boolean;
begin
  Result := FNomePai_Specified;
end;

function MotoristaRequest2.GetNomeMae(Index: Integer): string;
begin
  Result := FNomeMae;
end;

procedure MotoristaRequest2.SetNomeMae(Index: Integer; const Astring: string);
begin
  FNomeMae := Astring;
  FNomeMae_Specified := True;
end;

function MotoristaRequest2.NomeMae_Specified(Index: Integer): boolean;
begin
  Result := FNomeMae_Specified;
end;

function MotoristaRequest2.GetEmail(Index: Integer): string;
begin
  Result := FEmail;
end;

procedure MotoristaRequest2.SetEmail(Index: Integer; const Astring: string);
begin
  FEmail := Astring;
  FEmail_Specified := True;
end;

function MotoristaRequest2.Email_Specified(Index: Integer): boolean;
begin
  Result := FEmail_Specified;
end;

function MotoristaRequest2.GetTelefone(Index: Integer): string;
begin
  Result := FTelefone;
end;

procedure MotoristaRequest2.SetTelefone(Index: Integer; const Astring: string);
begin
  FTelefone := Astring;
  FTelefone_Specified := True;
end;

function MotoristaRequest2.Telefone_Specified(Index: Integer): boolean;
begin
  Result := FTelefone_Specified;
end;

function MotoristaRequest2.GetTelefoneCelular(Index: Integer): string;
begin
  Result := FTelefoneCelular;
end;

procedure MotoristaRequest2.SetTelefoneCelular(Index: Integer; const Astring: string);
begin
  FTelefoneCelular := Astring;
  FTelefoneCelular_Specified := True;
end;

function MotoristaRequest2.TelefoneCelular_Specified(Index: Integer): boolean;
begin
  Result := FTelefoneCelular_Specified;
end;

function MotoristaRequest2.GetNacionalidade(Index: Integer): string;
begin
  Result := FNacionalidade;
end;

procedure MotoristaRequest2.SetNacionalidade(Index: Integer; const Astring: string);
begin
  FNacionalidade := Astring;
  FNacionalidade_Specified := True;
end;

function MotoristaRequest2.Nacionalidade_Specified(Index: Integer): boolean;
begin
  Result := FNacionalidade_Specified;
end;

function MotoristaRequest2.GetEndereco(Index: Integer): string;
begin
  Result := FEndereco;
end;

procedure MotoristaRequest2.SetEndereco(Index: Integer; const Astring: string);
begin
  FEndereco := Astring;
  FEndereco_Specified := True;
end;

function MotoristaRequest2.Endereco_Specified(Index: Integer): boolean;
begin
  Result := FEndereco_Specified;
end;

function MotoristaRequest2.GetNumeroEndereco(Index: Integer): string;
begin
  Result := FNumeroEndereco;
end;

procedure MotoristaRequest2.SetNumeroEndereco(Index: Integer; const Astring: string);
begin
  FNumeroEndereco := Astring;
  FNumeroEndereco_Specified := True;
end;

function MotoristaRequest2.NumeroEndereco_Specified(Index: Integer): boolean;
begin
  Result := FNumeroEndereco_Specified;
end;

function MotoristaRequest2.GetEnderecoComplemento(Index: Integer): string;
begin
  Result := FEnderecoComplemento;
end;

procedure MotoristaRequest2.SetEnderecoComplemento(Index: Integer; const Astring: string);
begin
  FEnderecoComplemento := Astring;
  FEnderecoComplemento_Specified := True;
end;

function MotoristaRequest2.EnderecoComplemento_Specified(Index: Integer): boolean;
begin
  Result := FEnderecoComplemento_Specified;
end;

function MotoristaRequest2.GetCEP(Index: Integer): string;
begin
  Result := FCEP;
end;

procedure MotoristaRequest2.SetCEP(Index: Integer; const Astring: string);
begin
  FCEP := Astring;
  FCEP_Specified := True;
end;

function MotoristaRequest2.CEP_Specified(Index: Integer): boolean;
begin
  Result := FCEP_Specified;
end;

function MotoristaRequest2.GetBairro(Index: Integer): string;
begin
  Result := FBairro;
end;

procedure MotoristaRequest2.SetBairro(Index: Integer; const Astring: string);
begin
  FBairro := Astring;
  FBairro_Specified := True;
end;

function MotoristaRequest2.Bairro_Specified(Index: Integer): boolean;
begin
  Result := FBairro_Specified;
end;

function MotoristaRequest2.GetCodigoIBGEMunicipio(Index: Integer): Integer;
begin
  Result := FCodigoIBGEMunicipio;
end;

procedure MotoristaRequest2.SetCodigoIBGEMunicipio(Index: Integer; const AInteger: Integer);
begin
  FCodigoIBGEMunicipio := AInteger;
  FCodigoIBGEMunicipio_Specified := True;
end;

function MotoristaRequest2.CodigoIBGEMunicipio_Specified(Index: Integer): boolean;
begin
  Result := FCodigoIBGEMunicipio_Specified;
end;

function MotoristaRequest2.GetCodigoBanco(Index: Integer): string;
begin
  Result := FCodigoBanco;
end;

procedure MotoristaRequest2.SetCodigoBanco(Index: Integer; const Astring: string);
begin
  FCodigoBanco := Astring;
  FCodigoBanco_Specified := True;
end;

function MotoristaRequest2.CodigoBanco_Specified(Index: Integer): boolean;
begin
  Result := FCodigoBanco_Specified;
end;

function MotoristaRequest2.GetCodigoAgencia(Index: Integer): string;
begin
  Result := FCodigoAgencia;
end;

procedure MotoristaRequest2.SetCodigoAgencia(Index: Integer; const Astring: string);
begin
  FCodigoAgencia := Astring;
  FCodigoAgencia_Specified := True;
end;

function MotoristaRequest2.CodigoAgencia_Specified(Index: Integer): boolean;
begin
  Result := FCodigoAgencia_Specified;
end;

function MotoristaRequest2.GetDigitoAgencia(Index: Integer): string;
begin
  Result := FDigitoAgencia;
end;

procedure MotoristaRequest2.SetDigitoAgencia(Index: Integer; const Astring: string);
begin
  FDigitoAgencia := Astring;
  FDigitoAgencia_Specified := True;
end;

function MotoristaRequest2.DigitoAgencia_Specified(Index: Integer): boolean;
begin
  Result := FDigitoAgencia_Specified;
end;

function MotoristaRequest2.GetContaCorrente(Index: Integer): string;
begin
  Result := FContaCorrente;
end;

procedure MotoristaRequest2.SetContaCorrente(Index: Integer; const Astring: string);
begin
  FContaCorrente := Astring;
  FContaCorrente_Specified := True;
end;

function MotoristaRequest2.ContaCorrente_Specified(Index: Integer): boolean;
begin
  Result := FContaCorrente_Specified;
end;

function MotoristaRequest2.GetDigitoContaCorrente(Index: Integer): string;
begin
  Result := FDigitoContaCorrente;
end;

procedure MotoristaRequest2.SetDigitoContaCorrente(Index: Integer; const Astring: string);
begin
  FDigitoContaCorrente := Astring;
  FDigitoContaCorrente_Specified := True;
end;

function MotoristaRequest2.DigitoContaCorrente_Specified(Index: Integer): boolean;
begin
  Result := FDigitoContaCorrente_Specified;
end;

function MotoristaRequest2.GetFlagContaPoupanca(Index: Integer): Boolean;
begin
  Result := FFlagContaPoupanca;
end;

procedure MotoristaRequest2.SetFlagContaPoupanca(Index: Integer; const ABoolean: Boolean);
begin
  FFlagContaPoupanca := ABoolean;
  FFlagContaPoupanca_Specified := True;
end;

function MotoristaRequest2.FlagContaPoupanca_Specified(Index: Integer): boolean;
begin
  Result := FFlagContaPoupanca_Specified;
end;

function MotoristaRequest2.GetVariacaoContaPoupanca(Index: Integer): string;
begin
  Result := FVariacaoContaPoupanca;
end;

procedure MotoristaRequest2.SetVariacaoContaPoupanca(Index: Integer; const Astring: string);
begin
  FVariacaoContaPoupanca := Astring;
  FVariacaoContaPoupanca_Specified := True;
end;

function MotoristaRequest2.VariacaoContaPoupanca_Specified(Index: Integer): boolean;
begin
  Result := FVariacaoContaPoupanca_Specified;
end;

function MotoristaRequest2.GetAtivo(Index: Integer): Boolean;
begin
  Result := FAtivo;
end;

procedure MotoristaRequest2.SetAtivo(Index: Integer; const ABoolean: Boolean);
begin
  FAtivo := ABoolean;
  FAtivo_Specified := True;
end;

function MotoristaRequest2.Ativo_Specified(Index: Integer): boolean;
begin
  Result := FAtivo_Specified;
end;

function OperacaoTransporteParcelasResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure OperacaoTransporteParcelasResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function OperacaoTransporteParcelasResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function OperacaoTransporteParcelasResponse2.GetIdOperacaoTransporteParcela(Index: Integer): Integer;
begin
  Result := FIdOperacaoTransporteParcela;
end;

procedure OperacaoTransporteParcelasResponse2.SetIdOperacaoTransporteParcela(Index: Integer; const AInteger: Integer);
begin
  FIdOperacaoTransporteParcela := AInteger;
  FIdOperacaoTransporteParcela_Specified := True;
end;

function OperacaoTransporteParcelasResponse2.IdOperacaoTransporteParcela_Specified(Index: Integer): boolean;
begin
  Result := FIdOperacaoTransporteParcela_Specified;
end;

function OperacaoTransporteParcelasResponse2.GetCIOTCompleto(Index: Integer): string;
begin
  Result := FCIOTCompleto;
end;

procedure OperacaoTransporteParcelasResponse2.SetCIOTCompleto(Index: Integer; const Astring: string);
begin
  FCIOTCompleto := Astring;
  FCIOTCompleto_Specified := True;
end;

function OperacaoTransporteParcelasResponse2.CIOTCompleto_Specified(Index: Integer): boolean;
begin
  Result := FCIOTCompleto_Specified;
end;

function OperacaoTransporteParcelasResponse2.GetValor(Index: Integer): TXSDecimal;
begin
  Result := FValor;
end;

procedure OperacaoTransporteParcelasResponse2.SetValor(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValor := ATXSDecimal;
  FValor_Specified := True;
end;

function OperacaoTransporteParcelasResponse2.Valor_Specified(Index: Integer): boolean;
begin
  Result := FValor_Specified;
end;

function OperacaoTransporteParcelasResponse2.GetDataVencimento(Index: Integer): TXSDateTime;
begin
  Result := FDataVencimento;
end;

procedure OperacaoTransporteParcelasResponse2.SetDataVencimento(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDataVencimento := ATXSDateTime;
  FDataVencimento_Specified := True;
end;

function OperacaoTransporteParcelasResponse2.DataVencimento_Specified(Index: Integer): boolean;
begin
  Result := FDataVencimento_Specified;
end;

function OperacaoTransporteParcelasResponse2.GetDataPagamento(Index: Integer): TXSDateTime;
begin
  Result := FDataPagamento;
end;

procedure OperacaoTransporteParcelasResponse2.SetDataPagamento(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDataPagamento := ATXSDateTime;
  FDataPagamento_Specified := True;
end;

function OperacaoTransporteParcelasResponse2.DataPagamento_Specified(Index: Integer): boolean;
begin
  Result := FDataPagamento_Specified;
end;

function OperacaoTransporteParcelasResponse2.GetNumeroParcela(Index: Integer): Integer;
begin
  Result := FNumeroParcela;
end;

procedure OperacaoTransporteParcelasResponse2.SetNumeroParcela(Index: Integer; const AInteger: Integer);
begin
  FNumeroParcela := AInteger;
  FNumeroParcela_Specified := True;
end;

function OperacaoTransporteParcelasResponse2.NumeroParcela_Specified(Index: Integer): boolean;
begin
  Result := FNumeroParcela_Specified;
end;

function OperacaoTransporteParcelasResponse2.GetQuantidadeParcelas(Index: Integer): Integer;
begin
  Result := FQuantidadeParcelas;
end;

procedure OperacaoTransporteParcelasResponse2.SetQuantidadeParcelas(Index: Integer; const AInteger: Integer);
begin
  FQuantidadeParcelas := AInteger;
  FQuantidadeParcelas_Specified := True;
end;

function OperacaoTransporteParcelasResponse2.QuantidadeParcelas_Specified(Index: Integer): boolean;
begin
  Result := FQuantidadeParcelas_Specified;
end;

function OperacaoTransporteParcelasResponse2.GetDataHoraRegistro(Index: Integer): TXSDateTime;
begin
  Result := FDataHoraRegistro;
end;

procedure OperacaoTransporteParcelasResponse2.SetDataHoraRegistro(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDataHoraRegistro := ATXSDateTime;
  FDataHoraRegistro_Specified := True;
end;

function OperacaoTransporteParcelasResponse2.DataHoraRegistro_Specified(Index: Integer): boolean;
begin
  Result := FDataHoraRegistro_Specified;
end;

function OperacaoTransporteParcelasResponse2.GetDescricaoParcela(Index: Integer): string;
begin
  Result := FDescricaoParcela;
end;

procedure OperacaoTransporteParcelasResponse2.SetDescricaoParcela(Index: Integer; const Astring: string);
begin
  FDescricaoParcela := Astring;
  FDescricaoParcela_Specified := True;
end;

function OperacaoTransporteParcelasResponse2.DescricaoParcela_Specified(Index: Integer): boolean;
begin
  Result := FDescricaoParcela_Specified;
end;

function OperacaoTransporteParcelasResponse2.GetCancelada(Index: Integer): Boolean;
begin
  Result := FCancelada;
end;

procedure OperacaoTransporteParcelasResponse2.SetCancelada(Index: Integer; const ABoolean: Boolean);
begin
  FCancelada := ABoolean;
  FCancelada_Specified := True;
end;

function OperacaoTransporteParcelasResponse2.Cancelada_Specified(Index: Integer): boolean;
begin
  Result := FCancelada_Specified;
end;

function OperacaoTransporteParcelasResponse2.GetFormaPagamento(Index: Integer): Integer;
begin
  Result := FFormaPagamento;
end;

procedure OperacaoTransporteParcelasResponse2.SetFormaPagamento(Index: Integer; const AInteger: Integer);
begin
  FFormaPagamento := AInteger;
  FFormaPagamento_Specified := True;
end;

function OperacaoTransporteParcelasResponse2.FormaPagamento_Specified(Index: Integer): boolean;
begin
  Result := FFormaPagamento_Specified;
end;

function OperacaoTransporteParcelasResponse2.GetCartaoPagamento(Index: Integer): string;
begin
  Result := FCartaoPagamento;
end;

procedure OperacaoTransporteParcelasResponse2.SetCartaoPagamento(Index: Integer; const Astring: string);
begin
  FCartaoPagamento := Astring;
  FCartaoPagamento_Specified := True;
end;

function OperacaoTransporteParcelasResponse2.CartaoPagamento_Specified(Index: Integer): boolean;
begin
  Result := FCartaoPagamento_Specified;
end;

function OperacaoTransporteParcelasResponse2.GetCodigoBanco(Index: Integer): string;
begin
  Result := FCodigoBanco;
end;

procedure OperacaoTransporteParcelasResponse2.SetCodigoBanco(Index: Integer; const Astring: string);
begin
  FCodigoBanco := Astring;
  FCodigoBanco_Specified := True;
end;

function OperacaoTransporteParcelasResponse2.CodigoBanco_Specified(Index: Integer): boolean;
begin
  Result := FCodigoBanco_Specified;
end;

function OperacaoTransporteParcelasResponse2.GetAgenciaDeposito(Index: Integer): string;
begin
  Result := FAgenciaDeposito;
end;

procedure OperacaoTransporteParcelasResponse2.SetAgenciaDeposito(Index: Integer; const Astring: string);
begin
  FAgenciaDeposito := Astring;
  FAgenciaDeposito_Specified := True;
end;

function OperacaoTransporteParcelasResponse2.AgenciaDeposito_Specified(Index: Integer): boolean;
begin
  Result := FAgenciaDeposito_Specified;
end;

function OperacaoTransporteParcelasResponse2.GetContaDeposito(Index: Integer): string;
begin
  Result := FContaDeposito;
end;

procedure OperacaoTransporteParcelasResponse2.SetContaDeposito(Index: Integer; const Astring: string);
begin
  FContaDeposito := Astring;
  FContaDeposito_Specified := True;
end;

function OperacaoTransporteParcelasResponse2.ContaDeposito_Specified(Index: Integer): boolean;
begin
  Result := FContaDeposito_Specified;
end;

function OperacaoTransporteParcelasResponse2.GetDigitoContaDeposito(Index: Integer): string;
begin
  Result := FDigitoContaDeposito;
end;

procedure OperacaoTransporteParcelasResponse2.SetDigitoContaDeposito(Index: Integer; const Astring: string);
begin
  FDigitoContaDeposito := Astring;
  FDigitoContaDeposito_Specified := True;
end;

function OperacaoTransporteParcelasResponse2.DigitoContaDeposito_Specified(Index: Integer): boolean;
begin
  Result := FDigitoContaDeposito_Specified;
end;

function OperacaoTransporteParcelasResponse2.GetStatusParcela(Index: Integer): Integer;
begin
  Result := FStatusParcela;
end;

procedure OperacaoTransporteParcelasResponse2.SetStatusParcela(Index: Integer; const AInteger: Integer);
begin
  FStatusParcela := AInteger;
  FStatusParcela_Specified := True;
end;

function OperacaoTransporteParcelasResponse2.StatusParcela_Specified(Index: Integer): boolean;
begin
  Result := FStatusParcela_Specified;
end;

function OperacaoTransporteParcelasResponse2.GetTipoParcelaOperacaoTransporte(Index: Integer): Integer;
begin
  Result := FTipoParcelaOperacaoTransporte;
end;

procedure OperacaoTransporteParcelasResponse2.SetTipoParcelaOperacaoTransporte(Index: Integer; const AInteger: Integer);
begin
  FTipoParcelaOperacaoTransporte := AInteger;
  FTipoParcelaOperacaoTransporte_Specified := True;
end;

function OperacaoTransporteParcelasResponse2.TipoParcelaOperacaoTransporte_Specified(Index: Integer): boolean;
begin
  Result := FTipoParcelaOperacaoTransporte_Specified;
end;

function OperacaoTransporteParcelasResponse2.GetFlagContaPoupanca(Index: Integer): Boolean;
begin
  Result := FFlagContaPoupanca;
end;

procedure OperacaoTransporteParcelasResponse2.SetFlagContaPoupanca(Index: Integer; const ABoolean: Boolean);
begin
  FFlagContaPoupanca := ABoolean;
  FFlagContaPoupanca_Specified := True;
end;

function OperacaoTransporteParcelasResponse2.FlagContaPoupanca_Specified(Index: Integer): boolean;
begin
  Result := FFlagContaPoupanca_Specified;
end;

function OperacaoTransporteParcelasResponse2.GetVariacaoContaPoupanca(Index: Integer): string;
begin
  Result := FVariacaoContaPoupanca;
end;

procedure OperacaoTransporteParcelasResponse2.SetVariacaoContaPoupanca(Index: Integer; const Astring: string);
begin
  FVariacaoContaPoupanca := Astring;
  FVariacaoContaPoupanca_Specified := True;
end;

function OperacaoTransporteParcelasResponse2.VariacaoContaPoupanca_Specified(Index: Integer): boolean;
begin
  Result := FVariacaoContaPoupanca_Specified;
end;

function OperacaoTransporteParcelasResponse2.GetItemFinanceiroParcela(Index: Integer): string;
begin
  Result := FItemFinanceiroParcela;
end;

procedure OperacaoTransporteParcelasResponse2.SetItemFinanceiroParcela(Index: Integer; const Astring: string);
begin
  FItemFinanceiroParcela := Astring;
  FItemFinanceiroParcela_Specified := True;
end;

function OperacaoTransporteParcelasResponse2.ItemFinanceiroParcela_Specified(Index: Integer): boolean;
begin
  Result := FItemFinanceiroParcela_Specified;
end;

function OperacaoTransporteParcelasResponse2.GetObservacao(Index: Integer): string;
begin
  Result := FObservacao;
end;

procedure OperacaoTransporteParcelasResponse2.SetObservacao(Index: Integer; const Astring: string);
begin
  FObservacao := Astring;
  FObservacao_Specified := True;
end;

function OperacaoTransporteParcelasResponse2.Observacao_Specified(Index: Integer): boolean;
begin
  Result := FObservacao_Specified;
end;

function CancelaCompraValePedagioRequest2.GetIdCompraValePedagio(Index: Integer): Integer;
begin
  Result := FIdCompraValePedagio;
end;

procedure CancelaCompraValePedagioRequest2.SetIdCompraValePedagio(Index: Integer; const AInteger: Integer);
begin
  FIdCompraValePedagio := AInteger;
  FIdCompraValePedagio_Specified := True;
end;

function CancelaCompraValePedagioRequest2.IdCompraValePedagio_Specified(Index: Integer): boolean;
begin
  Result := FIdCompraValePedagio_Specified;
end;

function CancelaCompraValePedagioRequest2.GetViaFacil(Index: Integer): Boolean;
begin
  Result := FViaFacil;
end;

procedure CancelaCompraValePedagioRequest2.SetViaFacil(Index: Integer; const ABoolean: Boolean);
begin
  FViaFacil := ABoolean;
  FViaFacil_Specified := True;
end;

function CancelaCompraValePedagioRequest2.ViaFacil_Specified(Index: Integer): boolean;
begin
  Result := FViaFacil_Specified;
end;

function CompraValePedagioRequest2.GetIdModoCompraValePedagio(Index: Integer): Integer;
begin
  Result := FIdModoCompraValePedagio;
end;

procedure CompraValePedagioRequest2.SetIdModoCompraValePedagio(Index: Integer; const AInteger: Integer);
begin
  FIdModoCompraValePedagio := AInteger;
  FIdModoCompraValePedagio_Specified := True;
end;

function CompraValePedagioRequest2.IdModoCompraValePedagio_Specified(Index: Integer): boolean;
begin
  Result := FIdModoCompraValePedagio_Specified;
end;

function CompraValePedagioRequest2.GetIdRotaModelo(Index: Integer): Integer;
begin
  Result := FIdRotaModelo;
end;

procedure CompraValePedagioRequest2.SetIdRotaModelo(Index: Integer; const AInteger: Integer);
begin
  FIdRotaModelo := AInteger;
  FIdRotaModelo_Specified := True;
end;

function CompraValePedagioRequest2.IdRotaModelo_Specified(Index: Integer): boolean;
begin
  Result := FIdRotaModelo_Specified;
end;

function CompraValePedagioRequest2.GetCodigoCategoriaVeiculo(Index: Integer): Integer;
begin
  Result := FCodigoCategoriaVeiculo;
end;

procedure CompraValePedagioRequest2.SetCodigoCategoriaVeiculo(Index: Integer; const AInteger: Integer);
begin
  FCodigoCategoriaVeiculo := AInteger;
  FCodigoCategoriaVeiculo_Specified := True;
end;

function CompraValePedagioRequest2.CodigoCategoriaVeiculo_Specified(Index: Integer): boolean;
begin
  Result := FCodigoCategoriaVeiculo_Specified;
end;

function CompraValePedagioRequest2.GetMunicipioOrigemCodigoIBGE(Index: Integer): Integer;
begin
  Result := FMunicipioOrigemCodigoIBGE;
end;

procedure CompraValePedagioRequest2.SetMunicipioOrigemCodigoIBGE(Index: Integer; const AInteger: Integer);
begin
  FMunicipioOrigemCodigoIBGE := AInteger;
  FMunicipioOrigemCodigoIBGE_Specified := True;
end;

function CompraValePedagioRequest2.MunicipioOrigemCodigoIBGE_Specified(Index: Integer): boolean;
begin
  Result := FMunicipioOrigemCodigoIBGE_Specified;
end;

function CompraValePedagioRequest2.GetMunicipioDestinoCodigoIBGE(Index: Integer): Integer;
begin
  Result := FMunicipioDestinoCodigoIBGE;
end;

procedure CompraValePedagioRequest2.SetMunicipioDestinoCodigoIBGE(Index: Integer; const AInteger: Integer);
begin
  FMunicipioDestinoCodigoIBGE := AInteger;
  FMunicipioDestinoCodigoIBGE_Specified := True;
end;

function CompraValePedagioRequest2.MunicipioDestinoCodigoIBGE_Specified(Index: Integer): boolean;
begin
  Result := FMunicipioDestinoCodigoIBGE_Specified;
end;

function CompraValePedagioRequest2.GetPlaca(Index: Integer): string;
begin
  Result := FPlaca;
end;

procedure CompraValePedagioRequest2.SetPlaca(Index: Integer; const Astring: string);
begin
  FPlaca := Astring;
  FPlaca_Specified := True;
end;

function CompraValePedagioRequest2.Placa_Specified(Index: Integer): boolean;
begin
  Result := FPlaca_Specified;
end;

function CompraValePedagioRequest2.GetNumeroCartao(Index: Integer): string;
begin
  Result := FNumeroCartao;
end;

procedure CompraValePedagioRequest2.SetNumeroCartao(Index: Integer; const Astring: string);
begin
  FNumeroCartao := Astring;
  FNumeroCartao_Specified := True;
end;

function CompraValePedagioRequest2.NumeroCartao_Specified(Index: Integer): boolean;
begin
  Result := FNumeroCartao_Specified;
end;

function CompraValePedagioRequest2.GetMotoristaNome(Index: Integer): string;
begin
  Result := FMotoristaNome;
end;

procedure CompraValePedagioRequest2.SetMotoristaNome(Index: Integer; const Astring: string);
begin
  FMotoristaNome := Astring;
  FMotoristaNome_Specified := True;
end;

function CompraValePedagioRequest2.MotoristaNome_Specified(Index: Integer): boolean;
begin
  Result := FMotoristaNome_Specified;
end;

function CompraValePedagioRequest2.GetMotoristaCPF(Index: Integer): string;
begin
  Result := FMotoristaCPF;
end;

procedure CompraValePedagioRequest2.SetMotoristaCPF(Index: Integer; const Astring: string);
begin
  FMotoristaCPF := Astring;
  FMotoristaCPF_Specified := True;
end;

function CompraValePedagioRequest2.MotoristaCPF_Specified(Index: Integer): boolean;
begin
  Result := FMotoristaCPF_Specified;
end;

function CompraValePedagioRequest2.GetMotoristaRNTRC(Index: Integer): string;
begin
  Result := FMotoristaRNTRC;
end;

procedure CompraValePedagioRequest2.SetMotoristaRNTRC(Index: Integer; const Astring: string);
begin
  FMotoristaRNTRC := Astring;
  FMotoristaRNTRC_Specified := True;
end;

function CompraValePedagioRequest2.MotoristaRNTRC_Specified(Index: Integer): boolean;
begin
  Result := FMotoristaRNTRC_Specified;
end;

function CompraValePedagioRequest2.GetIdIntegrador(Index: Integer): string;
begin
  Result := FIdIntegrador;
end;

procedure CompraValePedagioRequest2.SetIdIntegrador(Index: Integer; const Astring: string);
begin
  FIdIntegrador := Astring;
  FIdIntegrador_Specified := True;
end;

function CompraValePedagioRequest2.IdIntegrador_Specified(Index: Integer): boolean;
begin
  Result := FIdIntegrador_Specified;
end;

function CompraValePedagioRequest2.GetCodigoCentroDeCusto(Index: Integer): Integer;
begin
  Result := FCodigoCentroDeCusto;
end;

procedure CompraValePedagioRequest2.SetCodigoCentroDeCusto(Index: Integer; const AInteger: Integer);
begin
  FCodigoCentroDeCusto := AInteger;
  FCodigoCentroDeCusto_Specified := True;
end;

function CompraValePedagioRequest2.CodigoCentroDeCusto_Specified(Index: Integer): boolean;
begin
  Result := FCodigoCentroDeCusto_Specified;
end;

function CompraValePedagioRequest2.GetNumeroDocumentoEmbarque(Index: Integer): string;
begin
  Result := FNumeroDocumentoEmbarque;
end;

procedure CompraValePedagioRequest2.SetNumeroDocumentoEmbarque(Index: Integer; const Astring: string);
begin
  FNumeroDocumentoEmbarque := Astring;
  FNumeroDocumentoEmbarque_Specified := True;
end;

function CompraValePedagioRequest2.NumeroDocumentoEmbarque_Specified(Index: Integer): boolean;
begin
  Result := FNumeroDocumentoEmbarque_Specified;
end;

function CompraValePedagioRequest2.GetItemFinanceiro(Index: Integer): string;
begin
  Result := FItemFinanceiro;
end;

procedure CompraValePedagioRequest2.SetItemFinanceiro(Index: Integer; const Astring: string);
begin
  FItemFinanceiro := Astring;
  FItemFinanceiro_Specified := True;
end;

function CompraValePedagioRequest2.ItemFinanceiro_Specified(Index: Integer): boolean;
begin
  Result := FItemFinanceiro_Specified;
end;

function CompraValePedagioRequest2.GetInicioVigencia(Index: Integer): TXSDateTime;
begin
  Result := FInicioVigencia;
end;

procedure CompraValePedagioRequest2.SetInicioVigencia(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FInicioVigencia := ATXSDateTime;
  FInicioVigencia_Specified := True;
end;

function CompraValePedagioRequest2.InicioVigencia_Specified(Index: Integer): boolean;
begin
  Result := FInicioVigencia_Specified;
end;

function CompraValePedagioRequest2.GetFimVigencia(Index: Integer): TXSDateTime;
begin
  Result := FFimVigencia;
end;

procedure CompraValePedagioRequest2.SetFimVigencia(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FFimVigencia := ATXSDateTime;
  FFimVigencia_Specified := True;
end;

function CompraValePedagioRequest2.FimVigencia_Specified(Index: Integer): boolean;
begin
  Result := FFimVigencia_Specified;
end;

function CompraValePedagioRequest2.GetValorPrevioCalculado(Index: Integer): TXSDecimal;
begin
  Result := FValorPrevioCalculado;
end;

procedure CompraValePedagioRequest2.SetValorPrevioCalculado(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorPrevioCalculado := ATXSDecimal;
  FValorPrevioCalculado_Specified := True;
end;

function CompraValePedagioRequest2.ValorPrevioCalculado_Specified(Index: Integer): boolean;
begin
  Result := FValorPrevioCalculado_Specified;
end;

function CompraValePedagioRequest2.GetCompraSimples(Index: Integer): Boolean;
begin
  Result := FCompraSimples;
end;

procedure CompraValePedagioRequest2.SetCompraSimples(Index: Integer; const ABoolean: Boolean);
begin
  FCompraSimples := ABoolean;
  FCompraSimples_Specified := True;
end;

function CompraValePedagioRequest2.CompraSimples_Specified(Index: Integer): boolean;
begin
  Result := FCompraSimples_Specified;
end;

function CompraValePedagioRequest2.GetIdOperacaoTransporte(Index: Integer): Integer;
begin
  Result := FIdOperacaoTransporte;
end;

procedure CompraValePedagioRequest2.SetIdOperacaoTransporte(Index: Integer; const AInteger: Integer);
begin
  FIdOperacaoTransporte := AInteger;
  FIdOperacaoTransporte_Specified := True;
end;

function CompraValePedagioRequest2.IdOperacaoTransporte_Specified(Index: Integer): boolean;
begin
  Result := FIdOperacaoTransporte_Specified;
end;

function CompraValePedagioRequest2.GetDadosComplementares(Index: Integer): DadosComplementaresCompraValePedagio2;
begin
  Result := FDadosComplementares;
end;

procedure CompraValePedagioRequest2.SetDadosComplementares(Index: Integer; const ADadosComplementaresCompraValePedagio2: DadosComplementaresCompraValePedagio2);
begin
  FDadosComplementares := ADadosComplementaresCompraValePedagio2;
  FDadosComplementares_Specified := True;
end;

function CompraValePedagioRequest2.DadosComplementares_Specified(Index: Integer): boolean;
begin
  Result := FDadosComplementares_Specified;
end;

function CompraValePedagioRequest2.GetCargaDiferencial(Index: Integer): Boolean;
begin
  Result := FCargaDiferencial;
end;

procedure CompraValePedagioRequest2.SetCargaDiferencial(Index: Integer; const ABoolean: Boolean);
begin
  FCargaDiferencial := ABoolean;
  FCargaDiferencial_Specified := True;
end;

function CompraValePedagioRequest2.CargaDiferencial_Specified(Index: Integer): boolean;
begin
  Result := FCargaDiferencial_Specified;
end;

function ItemBuscarCartoesResponse2.GetNumeroCartao(Index: Integer): string;
begin
  Result := FNumeroCartao;
end;

procedure ItemBuscarCartoesResponse2.SetNumeroCartao(Index: Integer; const Astring: string);
begin
  FNumeroCartao := Astring;
  FNumeroCartao_Specified := True;
end;

function ItemBuscarCartoesResponse2.NumeroCartao_Specified(Index: Integer): boolean;
begin
  Result := FNumeroCartao_Specified;
end;

function ItemBuscarCartoesResponse2.GetVinculado(Index: Integer): Boolean;
begin
  Result := FVinculado;
end;

procedure ItemBuscarCartoesResponse2.SetVinculado(Index: Integer; const ABoolean: Boolean);
begin
  FVinculado := ABoolean;
  FVinculado_Specified := True;
end;

function ItemBuscarCartoesResponse2.Vinculado_Specified(Index: Integer): boolean;
begin
  Result := FVinculado_Specified;
end;

function ItemBuscarCartoesResponse2.GetCnpjEmpresarial(Index: Integer): string;
begin
  Result := FCnpjEmpresarial;
end;

procedure ItemBuscarCartoesResponse2.SetCnpjEmpresarial(Index: Integer; const Astring: string);
begin
  FCnpjEmpresarial := Astring;
  FCnpjEmpresarial_Specified := True;
end;

function ItemBuscarCartoesResponse2.CnpjEmpresarial_Specified(Index: Integer): boolean;
begin
  Result := FCnpjEmpresarial_Specified;
end;

function ItemBuscarCartoesResponse2.GetCpfPortador(Index: Integer): string;
begin
  Result := FCpfPortador;
end;

procedure ItemBuscarCartoesResponse2.SetCpfPortador(Index: Integer; const Astring: string);
begin
  FCpfPortador := Astring;
  FCpfPortador_Specified := True;
end;

function ItemBuscarCartoesResponse2.CpfPortador_Specified(Index: Integer): boolean;
begin
  Result := FCpfPortador_Specified;
end;

function ItemBuscarCartoesResponse2.GetNomePortador(Index: Integer): string;
begin
  Result := FNomePortador;
end;

procedure ItemBuscarCartoesResponse2.SetNomePortador(Index: Integer; const Astring: string);
begin
  FNomePortador := Astring;
  FNomePortador_Specified := True;
end;

function ItemBuscarCartoesResponse2.NomePortador_Specified(Index: Integer): boolean;
begin
  Result := FNomePortador_Specified;
end;

function ItemBuscarCartoesResponse2.GetAtivo(Index: Integer): Boolean;
begin
  Result := FAtivo;
end;

procedure ItemBuscarCartoesResponse2.SetAtivo(Index: Integer; const ABoolean: Boolean);
begin
  FAtivo := ABoolean;
  FAtivo_Specified := True;
end;

function ItemBuscarCartoesResponse2.Ativo_Specified(Index: Integer): boolean;
begin
  Result := FAtivo_Specified;
end;

function ItemBuscarCartoesResponse2.GetStatusCartao(Index: Integer): StatusCartao;
begin
  Result := FStatusCartao;
end;

procedure ItemBuscarCartoesResponse2.SetStatusCartao(Index: Integer; const AStatusCartao: StatusCartao);
begin
  FStatusCartao := AStatusCartao;
  FStatusCartao_Specified := True;
end;

function ItemBuscarCartoesResponse2.StatusCartao_Specified(Index: Integer): boolean;
begin
  Result := FStatusCartao_Specified;
end;

function ItemBuscarCartoesResponse2.GetValidade(Index: Integer): TXSDateTime;
begin
  Result := FValidade;
end;

procedure ItemBuscarCartoesResponse2.SetValidade(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FValidade := ATXSDateTime;
  FValidade_Specified := True;
end;

function ItemBuscarCartoesResponse2.Validade_Specified(Index: Integer): boolean;
begin
  Result := FValidade_Specified;
end;

function ItemBuscarCartoesResponse2.GetDescricaoProdutoCartao(Index: Integer): string;
begin
  Result := FDescricaoProdutoCartao;
end;

procedure ItemBuscarCartoesResponse2.SetDescricaoProdutoCartao(Index: Integer; const Astring: string);
begin
  FDescricaoProdutoCartao := Astring;
  FDescricaoProdutoCartao_Specified := True;
end;

function ItemBuscarCartoesResponse2.DescricaoProdutoCartao_Specified(Index: Integer): boolean;
begin
  Result := FDescricaoProdutoCartao_Specified;
end;

function ItemBuscarCartoesResponse2.GetLiberacaoCarga(Index: Integer): LiberacaoCarga;
begin
  Result := FLiberacaoCarga;
end;

procedure ItemBuscarCartoesResponse2.SetLiberacaoCarga(Index: Integer; const ALiberacaoCarga: LiberacaoCarga);
begin
  FLiberacaoCarga := ALiberacaoCarga;
  FLiberacaoCarga_Specified := True;
end;

function ItemBuscarCartoesResponse2.LiberacaoCarga_Specified(Index: Integer): boolean;
begin
  Result := FLiberacaoCarga_Specified;
end;

function AtualizaCompraValePedagioRequest2.GetIdModoCompraValePedagio(Index: Integer): Integer;
begin
  Result := FIdModoCompraValePedagio;
end;

procedure AtualizaCompraValePedagioRequest2.SetIdModoCompraValePedagio(Index: Integer; const AInteger: Integer);
begin
  FIdModoCompraValePedagio := AInteger;
  FIdModoCompraValePedagio_Specified := True;
end;

function AtualizaCompraValePedagioRequest2.IdModoCompraValePedagio_Specified(Index: Integer): boolean;
begin
  Result := FIdModoCompraValePedagio_Specified;
end;

function AtualizaCompraValePedagioRequest2.GetIdRotaModelo(Index: Integer): Integer;
begin
  Result := FIdRotaModelo;
end;

procedure AtualizaCompraValePedagioRequest2.SetIdRotaModelo(Index: Integer; const AInteger: Integer);
begin
  FIdRotaModelo := AInteger;
  FIdRotaModelo_Specified := True;
end;

function AtualizaCompraValePedagioRequest2.IdRotaModelo_Specified(Index: Integer): boolean;
begin
  Result := FIdRotaModelo_Specified;
end;

function AtualizaCompraValePedagioRequest2.GetCodigoCategoriaVeiculo(Index: Integer): Integer;
begin
  Result := FCodigoCategoriaVeiculo;
end;

procedure AtualizaCompraValePedagioRequest2.SetCodigoCategoriaVeiculo(Index: Integer; const AInteger: Integer);
begin
  FCodigoCategoriaVeiculo := AInteger;
  FCodigoCategoriaVeiculo_Specified := True;
end;

function AtualizaCompraValePedagioRequest2.CodigoCategoriaVeiculo_Specified(Index: Integer): boolean;
begin
  Result := FCodigoCategoriaVeiculo_Specified;
end;

function AtualizaCompraValePedagioRequest2.GetMunicipioOrigemCodigoIBGE(Index: Integer): Integer;
begin
  Result := FMunicipioOrigemCodigoIBGE;
end;

procedure AtualizaCompraValePedagioRequest2.SetMunicipioOrigemCodigoIBGE(Index: Integer; const AInteger: Integer);
begin
  FMunicipioOrigemCodigoIBGE := AInteger;
  FMunicipioOrigemCodigoIBGE_Specified := True;
end;

function AtualizaCompraValePedagioRequest2.MunicipioOrigemCodigoIBGE_Specified(Index: Integer): boolean;
begin
  Result := FMunicipioOrigemCodigoIBGE_Specified;
end;

function AtualizaCompraValePedagioRequest2.GetMunicipioDestinoCodigoIBGE(Index: Integer): Integer;
begin
  Result := FMunicipioDestinoCodigoIBGE;
end;

procedure AtualizaCompraValePedagioRequest2.SetMunicipioDestinoCodigoIBGE(Index: Integer; const AInteger: Integer);
begin
  FMunicipioDestinoCodigoIBGE := AInteger;
  FMunicipioDestinoCodigoIBGE_Specified := True;
end;

function AtualizaCompraValePedagioRequest2.MunicipioDestinoCodigoIBGE_Specified(Index: Integer): boolean;
begin
  Result := FMunicipioDestinoCodigoIBGE_Specified;
end;

function AtualizaCompraValePedagioRequest2.GetPlaca(Index: Integer): string;
begin
  Result := FPlaca;
end;

procedure AtualizaCompraValePedagioRequest2.SetPlaca(Index: Integer; const Astring: string);
begin
  FPlaca := Astring;
  FPlaca_Specified := True;
end;

function AtualizaCompraValePedagioRequest2.Placa_Specified(Index: Integer): boolean;
begin
  Result := FPlaca_Specified;
end;

function AtualizaCompraValePedagioRequest2.GetNumeroCartao(Index: Integer): string;
begin
  Result := FNumeroCartao;
end;

procedure AtualizaCompraValePedagioRequest2.SetNumeroCartao(Index: Integer; const Astring: string);
begin
  FNumeroCartao := Astring;
  FNumeroCartao_Specified := True;
end;

function AtualizaCompraValePedagioRequest2.NumeroCartao_Specified(Index: Integer): boolean;
begin
  Result := FNumeroCartao_Specified;
end;

function AtualizaCompraValePedagioRequest2.GetMotoristaNome(Index: Integer): string;
begin
  Result := FMotoristaNome;
end;

procedure AtualizaCompraValePedagioRequest2.SetMotoristaNome(Index: Integer; const Astring: string);
begin
  FMotoristaNome := Astring;
  FMotoristaNome_Specified := True;
end;

function AtualizaCompraValePedagioRequest2.MotoristaNome_Specified(Index: Integer): boolean;
begin
  Result := FMotoristaNome_Specified;
end;

function AtualizaCompraValePedagioRequest2.GetMotoristaCPF(Index: Integer): string;
begin
  Result := FMotoristaCPF;
end;

procedure AtualizaCompraValePedagioRequest2.SetMotoristaCPF(Index: Integer; const Astring: string);
begin
  FMotoristaCPF := Astring;
  FMotoristaCPF_Specified := True;
end;

function AtualizaCompraValePedagioRequest2.MotoristaCPF_Specified(Index: Integer): boolean;
begin
  Result := FMotoristaCPF_Specified;
end;

function AtualizaCompraValePedagioRequest2.GetMotoristaRNTRC(Index: Integer): string;
begin
  Result := FMotoristaRNTRC;
end;

procedure AtualizaCompraValePedagioRequest2.SetMotoristaRNTRC(Index: Integer; const Astring: string);
begin
  FMotoristaRNTRC := Astring;
  FMotoristaRNTRC_Specified := True;
end;

function AtualizaCompraValePedagioRequest2.MotoristaRNTRC_Specified(Index: Integer): boolean;
begin
  Result := FMotoristaRNTRC_Specified;
end;

function AtualizaCompraValePedagioRequest2.GetIdIntegrador(Index: Integer): string;
begin
  Result := FIdIntegrador;
end;

procedure AtualizaCompraValePedagioRequest2.SetIdIntegrador(Index: Integer; const Astring: string);
begin
  FIdIntegrador := Astring;
  FIdIntegrador_Specified := True;
end;

function AtualizaCompraValePedagioRequest2.IdIntegrador_Specified(Index: Integer): boolean;
begin
  Result := FIdIntegrador_Specified;
end;

function AtualizaCompraValePedagioRequest2.GetCodigoCentroDeCusto(Index: Integer): Integer;
begin
  Result := FCodigoCentroDeCusto;
end;

procedure AtualizaCompraValePedagioRequest2.SetCodigoCentroDeCusto(Index: Integer; const AInteger: Integer);
begin
  FCodigoCentroDeCusto := AInteger;
  FCodigoCentroDeCusto_Specified := True;
end;

function AtualizaCompraValePedagioRequest2.CodigoCentroDeCusto_Specified(Index: Integer): boolean;
begin
  Result := FCodigoCentroDeCusto_Specified;
end;

function AtualizaCompraValePedagioRequest2.GetNumeroDocumentoEmbarque(Index: Integer): string;
begin
  Result := FNumeroDocumentoEmbarque;
end;

procedure AtualizaCompraValePedagioRequest2.SetNumeroDocumentoEmbarque(Index: Integer; const Astring: string);
begin
  FNumeroDocumentoEmbarque := Astring;
  FNumeroDocumentoEmbarque_Specified := True;
end;

function AtualizaCompraValePedagioRequest2.NumeroDocumentoEmbarque_Specified(Index: Integer): boolean;
begin
  Result := FNumeroDocumentoEmbarque_Specified;
end;

function AtualizaCompraValePedagioRequest2.GetItemFinanceiro(Index: Integer): string;
begin
  Result := FItemFinanceiro;
end;

procedure AtualizaCompraValePedagioRequest2.SetItemFinanceiro(Index: Integer; const Astring: string);
begin
  FItemFinanceiro := Astring;
  FItemFinanceiro_Specified := True;
end;

function AtualizaCompraValePedagioRequest2.ItemFinanceiro_Specified(Index: Integer): boolean;
begin
  Result := FItemFinanceiro_Specified;
end;

function AtualizaCompraValePedagioRequest2.GetInicioVigencia(Index: Integer): TXSDateTime;
begin
  Result := FInicioVigencia;
end;

procedure AtualizaCompraValePedagioRequest2.SetInicioVigencia(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FInicioVigencia := ATXSDateTime;
  FInicioVigencia_Specified := True;
end;

function AtualizaCompraValePedagioRequest2.InicioVigencia_Specified(Index: Integer): boolean;
begin
  Result := FInicioVigencia_Specified;
end;

function AtualizaCompraValePedagioRequest2.GetFimVigencia(Index: Integer): TXSDateTime;
begin
  Result := FFimVigencia;
end;

procedure AtualizaCompraValePedagioRequest2.SetFimVigencia(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FFimVigencia := ATXSDateTime;
  FFimVigencia_Specified := True;
end;

function AtualizaCompraValePedagioRequest2.FimVigencia_Specified(Index: Integer): boolean;
begin
  Result := FFimVigencia_Specified;
end;

function AtualizaCompraValePedagioRequest2.GetValorPrevioCalculado(Index: Integer): TXSDecimal;
begin
  Result := FValorPrevioCalculado;
end;

procedure AtualizaCompraValePedagioRequest2.SetValorPrevioCalculado(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorPrevioCalculado := ATXSDecimal;
  FValorPrevioCalculado_Specified := True;
end;

function AtualizaCompraValePedagioRequest2.ValorPrevioCalculado_Specified(Index: Integer): boolean;
begin
  Result := FValorPrevioCalculado_Specified;
end;

function AtualizaCompraValePedagioRequest2.GetCompraSimples(Index: Integer): Boolean;
begin
  Result := FCompraSimples;
end;

procedure AtualizaCompraValePedagioRequest2.SetCompraSimples(Index: Integer; const ABoolean: Boolean);
begin
  FCompraSimples := ABoolean;
  FCompraSimples_Specified := True;
end;

function AtualizaCompraValePedagioRequest2.CompraSimples_Specified(Index: Integer): boolean;
begin
  Result := FCompraSimples_Specified;
end;

function AtualizaCompraValePedagioRequest2.GetIdCompraValePedagio(Index: Integer): Integer;
begin
  Result := FIdCompraValePedagio;
end;

procedure AtualizaCompraValePedagioRequest2.SetIdCompraValePedagio(Index: Integer; const AInteger: Integer);
begin
  FIdCompraValePedagio := AInteger;
  FIdCompraValePedagio_Specified := True;
end;

function AtualizaCompraValePedagioRequest2.IdCompraValePedagio_Specified(Index: Integer): boolean;
begin
  Result := FIdCompraValePedagio_Specified;
end;

function AtualizaCompraValePedagioRequest2.GetIdOperacaoTransporte(Index: Integer): Integer;
begin
  Result := FIdOperacaoTransporte;
end;

procedure AtualizaCompraValePedagioRequest2.SetIdOperacaoTransporte(Index: Integer; const AInteger: Integer);
begin
  FIdOperacaoTransporte := AInteger;
  FIdOperacaoTransporte_Specified := True;
end;

function AtualizaCompraValePedagioRequest2.IdOperacaoTransporte_Specified(Index: Integer): boolean;
begin
  Result := FIdOperacaoTransporte_Specified;
end;

function DadosQuitacaoFreteDocumentosResponse2.GetNomeDocumento(Index: Integer): string;
begin
  Result := FNomeDocumento;
end;

procedure DadosQuitacaoFreteDocumentosResponse2.SetNomeDocumento(Index: Integer; const Astring: string);
begin
  FNomeDocumento := Astring;
  FNomeDocumento_Specified := True;
end;

function DadosQuitacaoFreteDocumentosResponse2.NomeDocumento_Specified(Index: Integer): boolean;
begin
  Result := FNomeDocumento_Specified;
end;

function DadosQuitacaoFreteDocumentosResponse2.GetNumeroIdentificadorDocumento(Index: Integer): string;
begin
  Result := FNumeroIdentificadorDocumento;
end;

procedure DadosQuitacaoFreteDocumentosResponse2.SetNumeroIdentificadorDocumento(Index: Integer; const Astring: string);
begin
  FNumeroIdentificadorDocumento := Astring;
  FNumeroIdentificadorDocumento_Specified := True;
end;

function DadosQuitacaoFreteDocumentosResponse2.NumeroIdentificadorDocumento_Specified(Index: Integer): boolean;
begin
  Result := FNumeroIdentificadorDocumento_Specified;
end;

function DadosQuitacaoFreteDocumentosResponse2.GetObrigatorio(Index: Integer): Boolean;
begin
  Result := FObrigatorio;
end;

procedure DadosQuitacaoFreteDocumentosResponse2.SetObrigatorio(Index: Integer; const ABoolean: Boolean);
begin
  FObrigatorio := ABoolean;
  FObrigatorio_Specified := True;
end;

function DadosQuitacaoFreteDocumentosResponse2.Obrigatorio_Specified(Index: Integer): boolean;
begin
  Result := FObrigatorio_Specified;
end;

function InformacaoCartaoResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure InformacaoCartaoResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function InformacaoCartaoResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function InformacaoCartaoResponse2.GetAtivo(Index: Integer): Boolean;
begin
  Result := FAtivo;
end;

procedure InformacaoCartaoResponse2.SetAtivo(Index: Integer; const ABoolean: Boolean);
begin
  FAtivo := ABoolean;
  FAtivo_Specified := True;
end;

function InformacaoCartaoResponse2.Ativo_Specified(Index: Integer): boolean;
begin
  Result := FAtivo_Specified;
end;

function InformacaoCartaoResponse2.GetBloqueado(Index: Integer): Boolean;
begin
  Result := FBloqueado;
end;

procedure InformacaoCartaoResponse2.SetBloqueado(Index: Integer; const ABoolean: Boolean);
begin
  FBloqueado := ABoolean;
  FBloqueado_Specified := True;
end;

function InformacaoCartaoResponse2.Bloqueado_Specified(Index: Integer): boolean;
begin
  Result := FBloqueado_Specified;
end;

function InformacaoCartaoResponse2.GetCnpjEmpresarial(Index: Integer): string;
begin
  Result := FCnpjEmpresarial;
end;

procedure InformacaoCartaoResponse2.SetCnpjEmpresarial(Index: Integer; const Astring: string);
begin
  FCnpjEmpresarial := Astring;
  FCnpjEmpresarial_Specified := True;
end;

function InformacaoCartaoResponse2.CnpjEmpresarial_Specified(Index: Integer): boolean;
begin
  Result := FCnpjEmpresarial_Specified;
end;

function InformacaoCartaoResponse2.GetVinculado(Index: Integer): Boolean;
begin
  Result := FVinculado;
end;

procedure InformacaoCartaoResponse2.SetVinculado(Index: Integer; const ABoolean: Boolean);
begin
  FVinculado := ABoolean;
  FVinculado_Specified := True;
end;

function InformacaoCartaoResponse2.Vinculado_Specified(Index: Integer): boolean;
begin
  Result := FVinculado_Specified;
end;

function InformacaoCartaoResponse2.GetInfoPortador(Index: Integer): InfoPortadorResponse2;
begin
  Result := FInfoPortador;
end;

procedure InformacaoCartaoResponse2.SetInfoPortador(Index: Integer; const AInfoPortadorResponse2: InfoPortadorResponse2);
begin
  FInfoPortador := AInfoPortadorResponse2;
  FInfoPortador_Specified := True;
end;

function InformacaoCartaoResponse2.InfoPortador_Specified(Index: Integer): boolean;
begin
  Result := FInfoPortador_Specified;
end;

function InformacaoCartaoResponse2.GetLiberacaoCarga(Index: Integer): LiberacaoCarga;
begin
  Result := FLiberacaoCarga;
end;

procedure InformacaoCartaoResponse2.SetLiberacaoCarga(Index: Integer; const ALiberacaoCarga: LiberacaoCarga);
begin
  FLiberacaoCarga := ALiberacaoCarga;
  FLiberacaoCarga_Specified := True;
end;

function InformacaoCartaoResponse2.LiberacaoCarga_Specified(Index: Integer): boolean;
begin
  Result := FLiberacaoCarga_Specified;
end;

function InformacaoCartaoResponse2.GetAdministradoraCartao(Index: Integer): string;
begin
  Result := FAdministradoraCartao;
end;

procedure InformacaoCartaoResponse2.SetAdministradoraCartao(Index: Integer; const Astring: string);
begin
  FAdministradoraCartao := Astring;
  FAdministradoraCartao_Specified := True;
end;

function InformacaoCartaoResponse2.AdministradoraCartao_Specified(Index: Integer): boolean;
begin
  Result := FAdministradoraCartao_Specified;
end;

function InformacaoCartaoResponse2.GetTipoPessoaCartao(Index: Integer): TipoPessoaProdutoCartao;
begin
  Result := FTipoPessoaCartao;
end;

procedure InformacaoCartaoResponse2.SetTipoPessoaCartao(Index: Integer; const ATipoPessoaProdutoCartao: TipoPessoaProdutoCartao);
begin
  FTipoPessoaCartao := ATipoPessoaProdutoCartao;
  FTipoPessoaCartao_Specified := True;
end;

function InformacaoCartaoResponse2.TipoPessoaCartao_Specified(Index: Integer): boolean;
begin
  Result := FTipoPessoaCartao_Specified;
end;

function InformacaoCartaoResponse2.GetInfoProdutoCartao(Index: Integer): string;
begin
  Result := FInfoProdutoCartao;
end;

procedure InformacaoCartaoResponse2.SetInfoProdutoCartao(Index: Integer; const Astring: string);
begin
  FInfoProdutoCartao := Astring;
  FInfoProdutoCartao_Specified := True;
end;

function InformacaoCartaoResponse2.InfoProdutoCartao_Specified(Index: Integer): boolean;
begin
  Result := FInfoProdutoCartao_Specified;
end;

function InformacaoCartaoResponse2.GetNumeroCartao(Index: Integer): string;
begin
  Result := FNumeroCartao;
end;

procedure InformacaoCartaoResponse2.SetNumeroCartao(Index: Integer; const Astring: string);
begin
  FNumeroCartao := Astring;
  FNumeroCartao_Specified := True;
end;

function InformacaoCartaoResponse2.NumeroCartao_Specified(Index: Integer): boolean;
begin
  Result := FNumeroCartao_Specified;
end;

function InformacaoCartaoResponse2.GetStatusCartao(Index: Integer): StatusCartao;
begin
  Result := FStatusCartao;
end;

procedure InformacaoCartaoResponse2.SetStatusCartao(Index: Integer; const AStatusCartao: StatusCartao);
begin
  FStatusCartao := AStatusCartao;
  FStatusCartao_Specified := True;
end;

function InformacaoCartaoResponse2.StatusCartao_Specified(Index: Integer): boolean;
begin
  Result := FStatusCartao_Specified;
end;

function InformacaoCartaoResponse2.GetValidade(Index: Integer): TXSDateTime;
begin
  Result := FValidade;
end;

procedure InformacaoCartaoResponse2.SetValidade(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FValidade := ATXSDateTime;
  FValidade_Specified := True;
end;

function InformacaoCartaoResponse2.Validade_Specified(Index: Integer): boolean;
begin
  Result := FValidade_Specified;
end;

function InformacoesParcelasResponse2.GetValor(Index: Integer): TXSDecimal;
begin
  Result := FValor;
end;

procedure InformacoesParcelasResponse2.SetValor(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValor := ATXSDecimal;
  FValor_Specified := True;
end;

function InformacoesParcelasResponse2.Valor_Specified(Index: Integer): boolean;
begin
  Result := FValor_Specified;
end;

function InformacoesParcelasResponse2.GetDataVencimento(Index: Integer): TXSDateTime;
begin
  Result := FDataVencimento;
end;

procedure InformacoesParcelasResponse2.SetDataVencimento(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDataVencimento := ATXSDateTime;
  FDataVencimento_Specified := True;
end;

function InformacoesParcelasResponse2.DataVencimento_Specified(Index: Integer): boolean;
begin
  Result := FDataVencimento_Specified;
end;

function InformacoesParcelasResponse2.GetDataPagamento(Index: Integer): TXSDateTime;
begin
  Result := FDataPagamento;
end;

procedure InformacoesParcelasResponse2.SetDataPagamento(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDataPagamento := ATXSDateTime;
  FDataPagamento_Specified := True;
end;

function InformacoesParcelasResponse2.DataPagamento_Specified(Index: Integer): boolean;
begin
  Result := FDataPagamento_Specified;
end;

function InformacoesParcelasResponse2.GetNumeroParcela(Index: Integer): Integer;
begin
  Result := FNumeroParcela;
end;

procedure InformacoesParcelasResponse2.SetNumeroParcela(Index: Integer; const AInteger: Integer);
begin
  FNumeroParcela := AInteger;
  FNumeroParcela_Specified := True;
end;

function InformacoesParcelasResponse2.NumeroParcela_Specified(Index: Integer): boolean;
begin
  Result := FNumeroParcela_Specified;
end;

function InformacoesParcelasResponse2.GetDescricaoParcela(Index: Integer): string;
begin
  Result := FDescricaoParcela;
end;

procedure InformacoesParcelasResponse2.SetDescricaoParcela(Index: Integer; const Astring: string);
begin
  FDescricaoParcela := Astring;
  FDescricaoParcela_Specified := True;
end;

function InformacoesParcelasResponse2.DescricaoParcela_Specified(Index: Integer): boolean;
begin
  Result := FDescricaoParcela_Specified;
end;

function InformacoesParcelasResponse2.GetCancelada(Index: Integer): Boolean;
begin
  Result := FCancelada;
end;

procedure InformacoesParcelasResponse2.SetCancelada(Index: Integer; const ABoolean: Boolean);
begin
  FCancelada := ABoolean;
  FCancelada_Specified := True;
end;

function InformacoesParcelasResponse2.Cancelada_Specified(Index: Integer): boolean;
begin
  Result := FCancelada_Specified;
end;

function InformacoesParcelasResponse2.GetFormaPagamento(Index: Integer): string;
begin
  Result := FFormaPagamento;
end;

procedure InformacoesParcelasResponse2.SetFormaPagamento(Index: Integer; const Astring: string);
begin
  FFormaPagamento := Astring;
  FFormaPagamento_Specified := True;
end;

function InformacoesParcelasResponse2.FormaPagamento_Specified(Index: Integer): boolean;
begin
  Result := FFormaPagamento_Specified;
end;

function InformacoesParcelasResponse2.GetStatusParcela(Index: Integer): string;
begin
  Result := FStatusParcela;
end;

procedure InformacoesParcelasResponse2.SetStatusParcela(Index: Integer; const Astring: string);
begin
  FStatusParcela := Astring;
  FStatusParcela_Specified := True;
end;

function InformacoesParcelasResponse2.StatusParcela_Specified(Index: Integer): boolean;
begin
  Result := FStatusParcela_Specified;
end;

function InformacoesParcelasResponse2.GetObservacao(Index: Integer): string;
begin
  Result := FObservacao;
end;

procedure InformacoesParcelasResponse2.SetObservacao(Index: Integer; const Astring: string);
begin
  FObservacao := Astring;
  FObservacao_Specified := True;
end;

function InformacoesParcelasResponse2.Observacao_Specified(Index: Integer): boolean;
begin
  Result := FObservacao_Specified;
end;

function ParcelaAdicionalRequest2.GetIdOperacaoTransporte(Index: Integer): Integer;
begin
  Result := FIdOperacaoTransporte;
end;

procedure ParcelaAdicionalRequest2.SetIdOperacaoTransporte(Index: Integer; const AInteger: Integer);
begin
  FIdOperacaoTransporte := AInteger;
  FIdOperacaoTransporte_Specified := True;
end;

function ParcelaAdicionalRequest2.IdOperacaoTransporte_Specified(Index: Integer): boolean;
begin
  Result := FIdOperacaoTransporte_Specified;
end;

function ParcelaAdicionalRequest2.GetNumeroCartao(Index: Integer): string;
begin
  Result := FNumeroCartao;
end;

procedure ParcelaAdicionalRequest2.SetNumeroCartao(Index: Integer; const Astring: string);
begin
  FNumeroCartao := Astring;
  FNumeroCartao_Specified := True;
end;

function ParcelaAdicionalRequest2.NumeroCartao_Specified(Index: Integer): boolean;
begin
  Result := FNumeroCartao_Specified;
end;

function ParcelaAdicionalRequest2.GetValor(Index: Integer): TXSDecimal;
begin
  Result := FValor;
end;

procedure ParcelaAdicionalRequest2.SetValor(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValor := ATXSDecimal;
  FValor_Specified := True;
end;

function ParcelaAdicionalRequest2.Valor_Specified(Index: Integer): boolean;
begin
  Result := FValor_Specified;
end;

function ParcelaAdicionalRequest2.GetDataVencimento(Index: Integer): TXSDateTime;
begin
  Result := FDataVencimento;
end;

procedure ParcelaAdicionalRequest2.SetDataVencimento(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDataVencimento := ATXSDateTime;
  FDataVencimento_Specified := True;
end;

function ParcelaAdicionalRequest2.DataVencimento_Specified(Index: Integer): boolean;
begin
  Result := FDataVencimento_Specified;
end;

function ParcelaAdicionalRequest2.GetDescricao(Index: Integer): string;
begin
  Result := FDescricao;
end;

procedure ParcelaAdicionalRequest2.SetDescricao(Index: Integer; const Astring: string);
begin
  FDescricao := Astring;
  FDescricao_Specified := True;
end;

function ParcelaAdicionalRequest2.Descricao_Specified(Index: Integer): boolean;
begin
  Result := FDescricao_Specified;
end;

function ParcelaAdicionalRequest2.GetAutomatica(Index: Integer): Boolean;
begin
  Result := FAutomatica;
end;

procedure ParcelaAdicionalRequest2.SetAutomatica(Index: Integer; const ABoolean: Boolean);
begin
  FAutomatica := ABoolean;
  FAutomatica_Specified := True;
end;

function ParcelaAdicionalRequest2.Automatica_Specified(Index: Integer): boolean;
begin
  Result := FAutomatica_Specified;
end;

function ParcelaAdicionalRequest2.GetObservacao(Index: Integer): string;
begin
  Result := FObservacao;
end;

procedure ParcelaAdicionalRequest2.SetObservacao(Index: Integer; const Astring: string);
begin
  FObservacao := Astring;
  FObservacao_Specified := True;
end;

function ParcelaAdicionalRequest2.Observacao_Specified(Index: Integer): boolean;
begin
  Result := FObservacao_Specified;
end;

function ParcelaAdicionalRequest2.GetDeduzirImpostos(Index: Integer): Boolean;
begin
  Result := FDeduzirImpostos;
end;

procedure ParcelaAdicionalRequest2.SetDeduzirImpostos(Index: Integer; const ABoolean: Boolean);
begin
  FDeduzirImpostos := ABoolean;
  FDeduzirImpostos_Specified := True;
end;

function ParcelaAdicionalRequest2.DeduzirImpostos_Specified(Index: Integer): boolean;
begin
  Result := FDeduzirImpostos_Specified;
end;

function ParcelaAdicionalRequest2.GetValorImpostoSestSenat(Index: Integer): TXSDecimal;
begin
  Result := FValorImpostoSestSenat;
end;

procedure ParcelaAdicionalRequest2.SetValorImpostoSestSenat(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorImpostoSestSenat := ATXSDecimal;
  FValorImpostoSestSenat_Specified := True;
end;

function ParcelaAdicionalRequest2.ValorImpostoSestSenat_Specified(Index: Integer): boolean;
begin
  Result := FValorImpostoSestSenat_Specified;
end;

function ParcelaAdicionalRequest2.GetValorImpostoIRRF(Index: Integer): TXSDecimal;
begin
  Result := FValorImpostoIRRF;
end;

procedure ParcelaAdicionalRequest2.SetValorImpostoIRRF(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorImpostoIRRF := ATXSDecimal;
  FValorImpostoIRRF_Specified := True;
end;

function ParcelaAdicionalRequest2.ValorImpostoIRRF_Specified(Index: Integer): boolean;
begin
  Result := FValorImpostoIRRF_Specified;
end;

function ParcelaAdicionalRequest2.GetValorImpostoINSS(Index: Integer): TXSDecimal;
begin
  Result := FValorImpostoINSS;
end;

procedure ParcelaAdicionalRequest2.SetValorImpostoINSS(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorImpostoINSS := ATXSDecimal;
  FValorImpostoINSS_Specified := True;
end;

function ParcelaAdicionalRequest2.ValorImpostoINSS_Specified(Index: Integer): boolean;
begin
  Result := FValorImpostoINSS_Specified;
end;

function ParcelaAdicionalRequest2.GetValorImpostoISS(Index: Integer): TXSDecimal;
begin
  Result := FValorImpostoISS;
end;

procedure ParcelaAdicionalRequest2.SetValorImpostoISS(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorImpostoISS := ATXSDecimal;
  FValorImpostoISS_Specified := True;
end;

function ParcelaAdicionalRequest2.ValorImpostoISS_Specified(Index: Integer): boolean;
begin
  Result := FValorImpostoISS_Specified;
end;

function PagamentoParcelaIndividualResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure PagamentoParcelaIndividualResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function PagamentoParcelaIndividualResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function PagamentoParcelaIndividualResponse2.GetMensagem(Index: Integer): string;
begin
  Result := FMensagem;
end;

procedure PagamentoParcelaIndividualResponse2.SetMensagem(Index: Integer; const Astring: string);
begin
  FMensagem := Astring;
  FMensagem_Specified := True;
end;

function PagamentoParcelaIndividualResponse2.Mensagem_Specified(Index: Integer): boolean;
begin
  Result := FMensagem_Specified;
end;

function PagamentoParcelaIndividualResponse2.GetAgendadoAutomaticamente(Index: Integer): Boolean;
begin
  Result := FAgendadoAutomaticamente;
end;

procedure PagamentoParcelaIndividualResponse2.SetAgendadoAutomaticamente(Index: Integer; const ABoolean: Boolean);
begin
  FAgendadoAutomaticamente := ABoolean;
  FAgendadoAutomaticamente_Specified := True;
end;

function PagamentoParcelaIndividualResponse2.AgendadoAutomaticamente_Specified(Index: Integer): boolean;
begin
  Result := FAgendadoAutomaticamente_Specified;
end;

function ParticipanteResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure ParticipanteResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function ParticipanteResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function ParticipanteResponse2.GetIdParticipante(Index: Integer): Integer;
begin
  Result := FIdParticipante;
end;

procedure ParticipanteResponse2.SetIdParticipante(Index: Integer; const AInteger: Integer);
begin
  FIdParticipante := AInteger;
  FIdParticipante_Specified := True;
end;

function ParticipanteResponse2.IdParticipante_Specified(Index: Integer): boolean;
begin
  Result := FIdParticipante_Specified;
end;

function ParticipanteResponse2.GetIdDmTipoPessoa(Index: Integer): Integer;
begin
  Result := FIdDmTipoPessoa;
end;

procedure ParticipanteResponse2.SetIdDmTipoPessoa(Index: Integer; const AInteger: Integer);
begin
  FIdDmTipoPessoa := AInteger;
  FIdDmTipoPessoa_Specified := True;
end;

function ParticipanteResponse2.IdDmTipoPessoa_Specified(Index: Integer): boolean;
begin
  Result := FIdDmTipoPessoa_Specified;
end;

function ParticipanteResponse2.GetNome(Index: Integer): string;
begin
  Result := FNome;
end;

procedure ParticipanteResponse2.SetNome(Index: Integer; const Astring: string);
begin
  FNome := Astring;
  FNome_Specified := True;
end;

function ParticipanteResponse2.Nome_Specified(Index: Integer): boolean;
begin
  Result := FNome_Specified;
end;

function ParticipanteResponse2.GetRazaoSocial(Index: Integer): string;
begin
  Result := FRazaoSocial;
end;

procedure ParticipanteResponse2.SetRazaoSocial(Index: Integer; const Astring: string);
begin
  FRazaoSocial := Astring;
  FRazaoSocial_Specified := True;
end;

function ParticipanteResponse2.RazaoSocial_Specified(Index: Integer): boolean;
begin
  Result := FRazaoSocial_Specified;
end;

function ParticipanteResponse2.GetCPFCNPJ(Index: Integer): string;
begin
  Result := FCPFCNPJ;
end;

procedure ParticipanteResponse2.SetCPFCNPJ(Index: Integer; const Astring: string);
begin
  FCPFCNPJ := Astring;
  FCPFCNPJ_Specified := True;
end;

function ParticipanteResponse2.CPFCNPJ_Specified(Index: Integer): boolean;
begin
  Result := FCPFCNPJ_Specified;
end;

function ParticipanteResponse2.GetEndereco(Index: Integer): string;
begin
  Result := FEndereco;
end;

procedure ParticipanteResponse2.SetEndereco(Index: Integer; const Astring: string);
begin
  FEndereco := Astring;
  FEndereco_Specified := True;
end;

function ParticipanteResponse2.Endereco_Specified(Index: Integer): boolean;
begin
  Result := FEndereco_Specified;
end;

function ParticipanteResponse2.GetBairro(Index: Integer): string;
begin
  Result := FBairro;
end;

procedure ParticipanteResponse2.SetBairro(Index: Integer; const Astring: string);
begin
  FBairro := Astring;
  FBairro_Specified := True;
end;

function ParticipanteResponse2.Bairro_Specified(Index: Integer): boolean;
begin
  Result := FBairro_Specified;
end;

function ParticipanteResponse2.GetCEP(Index: Integer): string;
begin
  Result := FCEP;
end;

procedure ParticipanteResponse2.SetCEP(Index: Integer; const Astring: string);
begin
  FCEP := Astring;
  FCEP_Specified := True;
end;

function ParticipanteResponse2.CEP_Specified(Index: Integer): boolean;
begin
  Result := FCEP_Specified;
end;

function ParticipanteResponse2.GetMunicipioCodigoIBGE(Index: Integer): Integer;
begin
  Result := FMunicipioCodigoIBGE;
end;

procedure ParticipanteResponse2.SetMunicipioCodigoIBGE(Index: Integer; const AInteger: Integer);
begin
  FMunicipioCodigoIBGE := AInteger;
  FMunicipioCodigoIBGE_Specified := True;
end;

function ParticipanteResponse2.MunicipioCodigoIBGE_Specified(Index: Integer): boolean;
begin
  Result := FMunicipioCodigoIBGE_Specified;
end;

function ParticipanteResponse2.GetRNTRC(Index: Integer): string;
begin
  Result := FRNTRC;
end;

procedure ParticipanteResponse2.SetRNTRC(Index: Integer; const Astring: string);
begin
  FRNTRC := Astring;
  FRNTRC_Specified := True;
end;

function ParticipanteResponse2.RNTRC_Specified(Index: Integer): boolean;
begin
  Result := FRNTRC_Specified;
end;

function ParticipanteResponse2.GetAtivo(Index: Integer): Boolean;
begin
  Result := FAtivo;
end;

procedure ParticipanteResponse2.SetAtivo(Index: Integer; const ABoolean: Boolean);
begin
  FAtivo := ABoolean;
  FAtivo_Specified := True;
end;

function ParticipanteResponse2.Ativo_Specified(Index: Integer): boolean;
begin
  Result := FAtivo_Specified;
end;

function ParticipanteResponse2.GetEmail(Index: Integer): string;
begin
  Result := FEmail;
end;

procedure ParticipanteResponse2.SetEmail(Index: Integer; const Astring: string);
begin
  FEmail := Astring;
  FEmail_Specified := True;
end;

function ParticipanteResponse2.Email_Specified(Index: Integer): boolean;
begin
  Result := FEmail_Specified;
end;

function ParticipanteResponse2.GetTelefone(Index: Integer): string;
begin
  Result := FTelefone;
end;

procedure ParticipanteResponse2.SetTelefone(Index: Integer; const Astring: string);
begin
  FTelefone := Astring;
  FTelefone_Specified := True;
end;

function ParticipanteResponse2.Telefone_Specified(Index: Integer): boolean;
begin
  Result := FTelefone_Specified;
end;

function ParticipanteResponse2.GetTelefoneCelular(Index: Integer): string;
begin
  Result := FTelefoneCelular;
end;

procedure ParticipanteResponse2.SetTelefoneCelular(Index: Integer; const Astring: string);
begin
  FTelefoneCelular := Astring;
  FTelefoneCelular_Specified := True;
end;

function ParticipanteResponse2.TelefoneCelular_Specified(Index: Integer): boolean;
begin
  Result := FTelefoneCelular_Specified;
end;

function OperacaoTransporteParcelaRequest2.GetDescricaoParcela(Index: Integer): string;
begin
  Result := FDescricaoParcela;
end;

procedure OperacaoTransporteParcelaRequest2.SetDescricaoParcela(Index: Integer; const Astring: string);
begin
  FDescricaoParcela := Astring;
  FDescricaoParcela_Specified := True;
end;

function OperacaoTransporteParcelaRequest2.DescricaoParcela_Specified(Index: Integer): boolean;
begin
  Result := FDescricaoParcela_Specified;
end;

function OperacaoTransporteParcelaRequest2.GetValor(Index: Integer): TXSDecimal;
begin
  Result := FValor;
end;

procedure OperacaoTransporteParcelaRequest2.SetValor(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValor := ATXSDecimal;
  FValor_Specified := True;
end;

function OperacaoTransporteParcelaRequest2.Valor_Specified(Index: Integer): boolean;
begin
  Result := FValor_Specified;
end;

function OperacaoTransporteParcelaRequest2.GetNumeroParcela(Index: Integer): Integer;
begin
  Result := FNumeroParcela;
end;

procedure OperacaoTransporteParcelaRequest2.SetNumeroParcela(Index: Integer; const AInteger: Integer);
begin
  FNumeroParcela := AInteger;
  FNumeroParcela_Specified := True;
end;

function OperacaoTransporteParcelaRequest2.NumeroParcela_Specified(Index: Integer): boolean;
begin
  Result := FNumeroParcela_Specified;
end;

function OperacaoTransporteParcelaRequest2.GetDataVencimento(Index: Integer): TXSDateTime;
begin
  Result := FDataVencimento;
end;

procedure OperacaoTransporteParcelaRequest2.SetDataVencimento(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDataVencimento := ATXSDateTime;
  FDataVencimento_Specified := True;
end;

function OperacaoTransporteParcelaRequest2.DataVencimento_Specified(Index: Integer): boolean;
begin
  Result := FDataVencimento_Specified;
end;

function OperacaoTransporteParcelaRequest2.GetTipoDaParcela(Index: Integer): Integer;
begin
  Result := FTipoDaParcela;
end;

procedure OperacaoTransporteParcelaRequest2.SetTipoDaParcela(Index: Integer; const AInteger: Integer);
begin
  FTipoDaParcela := AInteger;
  FTipoDaParcela_Specified := True;
end;

function OperacaoTransporteParcelaRequest2.TipoDaParcela_Specified(Index: Integer): boolean;
begin
  Result := FTipoDaParcela_Specified;
end;

function OperacaoTransporteParcelaRequest2.GetFormaPagamento(Index: Integer): Integer;
begin
  Result := FFormaPagamento;
end;

procedure OperacaoTransporteParcelaRequest2.SetFormaPagamento(Index: Integer; const AInteger: Integer);
begin
  FFormaPagamento := AInteger;
  FFormaPagamento_Specified := True;
end;

function OperacaoTransporteParcelaRequest2.FormaPagamento_Specified(Index: Integer): boolean;
begin
  Result := FFormaPagamento_Specified;
end;

function OperacaoTransporteParcelaRequest2.GetCartaoPagamento(Index: Integer): string;
begin
  Result := FCartaoPagamento;
end;

procedure OperacaoTransporteParcelaRequest2.SetCartaoPagamento(Index: Integer; const Astring: string);
begin
  FCartaoPagamento := Astring;
  FCartaoPagamento_Specified := True;
end;

function OperacaoTransporteParcelaRequest2.CartaoPagamento_Specified(Index: Integer): boolean;
begin
  Result := FCartaoPagamento_Specified;
end;

function OperacaoTransporteParcelaRequest2.GetCodigoBanco(Index: Integer): string;
begin
  Result := FCodigoBanco;
end;

procedure OperacaoTransporteParcelaRequest2.SetCodigoBanco(Index: Integer; const Astring: string);
begin
  FCodigoBanco := Astring;
  FCodigoBanco_Specified := True;
end;

function OperacaoTransporteParcelaRequest2.CodigoBanco_Specified(Index: Integer): boolean;
begin
  Result := FCodigoBanco_Specified;
end;

function OperacaoTransporteParcelaRequest2.GetAgenciaDeposito(Index: Integer): string;
begin
  Result := FAgenciaDeposito;
end;

procedure OperacaoTransporteParcelaRequest2.SetAgenciaDeposito(Index: Integer; const Astring: string);
begin
  FAgenciaDeposito := Astring;
  FAgenciaDeposito_Specified := True;
end;

function OperacaoTransporteParcelaRequest2.AgenciaDeposito_Specified(Index: Integer): boolean;
begin
  Result := FAgenciaDeposito_Specified;
end;

function OperacaoTransporteParcelaRequest2.GetContaDeposito(Index: Integer): string;
begin
  Result := FContaDeposito;
end;

procedure OperacaoTransporteParcelaRequest2.SetContaDeposito(Index: Integer; const Astring: string);
begin
  FContaDeposito := Astring;
  FContaDeposito_Specified := True;
end;

function OperacaoTransporteParcelaRequest2.ContaDeposito_Specified(Index: Integer): boolean;
begin
  Result := FContaDeposito_Specified;
end;

function OperacaoTransporteParcelaRequest2.GetDigitoContaDeposito(Index: Integer): string;
begin
  Result := FDigitoContaDeposito;
end;

procedure OperacaoTransporteParcelaRequest2.SetDigitoContaDeposito(Index: Integer; const Astring: string);
begin
  FDigitoContaDeposito := Astring;
  FDigitoContaDeposito_Specified := True;
end;

function OperacaoTransporteParcelaRequest2.DigitoContaDeposito_Specified(Index: Integer): boolean;
begin
  Result := FDigitoContaDeposito_Specified;
end;

function OperacaoTransporteParcelaRequest2.GetProcessarAutomaticamente(Index: Integer): Boolean;
begin
  Result := FProcessarAutomaticamente;
end;

procedure OperacaoTransporteParcelaRequest2.SetProcessarAutomaticamente(Index: Integer; const ABoolean: Boolean);
begin
  FProcessarAutomaticamente := ABoolean;
  FProcessarAutomaticamente_Specified := True;
end;

function OperacaoTransporteParcelaRequest2.ProcessarAutomaticamente_Specified(Index: Integer): boolean;
begin
  Result := FProcessarAutomaticamente_Specified;
end;

function OperacaoTransporteParcelaRequest2.GetIdOperacaoTransporteParcela(Index: Integer): Integer;
begin
  Result := FIdOperacaoTransporteParcela;
end;

procedure OperacaoTransporteParcelaRequest2.SetIdOperacaoTransporteParcela(Index: Integer; const AInteger: Integer);
begin
  FIdOperacaoTransporteParcela := AInteger;
  FIdOperacaoTransporteParcela_Specified := True;
end;

function OperacaoTransporteParcelaRequest2.IdOperacaoTransporteParcela_Specified(Index: Integer): boolean;
begin
  Result := FIdOperacaoTransporteParcela_Specified;
end;

function OperacaoTransporteParcelaRequest2.GetFlagContaPoupanca(Index: Integer): Boolean;
begin
  Result := FFlagContaPoupanca;
end;

procedure OperacaoTransporteParcelaRequest2.SetFlagContaPoupanca(Index: Integer; const ABoolean: Boolean);
begin
  FFlagContaPoupanca := ABoolean;
  FFlagContaPoupanca_Specified := True;
end;

function OperacaoTransporteParcelaRequest2.FlagContaPoupanca_Specified(Index: Integer): boolean;
begin
  Result := FFlagContaPoupanca_Specified;
end;

function OperacaoTransporteParcelaRequest2.GetVariacaoContaPoupanca(Index: Integer): string;
begin
  Result := FVariacaoContaPoupanca;
end;

procedure OperacaoTransporteParcelaRequest2.SetVariacaoContaPoupanca(Index: Integer; const Astring: string);
begin
  FVariacaoContaPoupanca := Astring;
  FVariacaoContaPoupanca_Specified := True;
end;

function OperacaoTransporteParcelaRequest2.VariacaoContaPoupanca_Specified(Index: Integer): boolean;
begin
  Result := FVariacaoContaPoupanca_Specified;
end;

function OperacaoTransporteParcelaRequest2.GetItemFinanceiroParcela(Index: Integer): string;
begin
  Result := FItemFinanceiroParcela;
end;

procedure OperacaoTransporteParcelaRequest2.SetItemFinanceiroParcela(Index: Integer; const Astring: string);
begin
  FItemFinanceiroParcela := Astring;
  FItemFinanceiroParcela_Specified := True;
end;

function OperacaoTransporteParcelaRequest2.ItemFinanceiroParcela_Specified(Index: Integer): boolean;
begin
  Result := FItemFinanceiroParcela_Specified;
end;

function OperacaoTransporteParcelaRequest2.GetObservacao(Index: Integer): string;
begin
  Result := FObservacao;
end;

procedure OperacaoTransporteParcelaRequest2.SetObservacao(Index: Integer; const Astring: string);
begin
  FObservacao := Astring;
  FObservacao_Specified := True;
end;

function OperacaoTransporteParcelaRequest2.Observacao_Specified(Index: Integer): boolean;
begin
  Result := FObservacao_Specified;
end;

function OperacaoTransporteVeiculoRequest2.GetPlaca(Index: Integer): string;
begin
  Result := FPlaca;
end;

procedure OperacaoTransporteVeiculoRequest2.SetPlaca(Index: Integer; const Astring: string);
begin
  FPlaca := Astring;
  FPlaca_Specified := True;
end;

function OperacaoTransporteVeiculoRequest2.Placa_Specified(Index: Integer): boolean;
begin
  Result := FPlaca_Specified;
end;

function OperacaoTransporteVeiculoRequest2.GetRNTRC(Index: Integer): string;
begin
  Result := FRNTRC;
end;

procedure OperacaoTransporteVeiculoRequest2.SetRNTRC(Index: Integer; const Astring: string);
begin
  FRNTRC := Astring;
  FRNTRC_Specified := True;
end;

function OperacaoTransporteVeiculoRequest2.RNTRC_Specified(Index: Integer): boolean;
begin
  Result := FRNTRC_Specified;
end;

function RetificacaoValoresRequest2.GetValorFrete(Index: Integer): TXSDecimal;
begin
  Result := FValorFrete;
end;

procedure RetificacaoValoresRequest2.SetValorFrete(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorFrete := ATXSDecimal;
  FValorFrete_Specified := True;
end;

function RetificacaoValoresRequest2.ValorFrete_Specified(Index: Integer): boolean;
begin
  Result := FValorFrete_Specified;
end;

function RetificacaoValoresRequest2.GetValorCombustivel(Index: Integer): TXSDecimal;
begin
  Result := FValorCombustivel;
end;

procedure RetificacaoValoresRequest2.SetValorCombustivel(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorCombustivel := ATXSDecimal;
  FValorCombustivel_Specified := True;
end;

function RetificacaoValoresRequest2.ValorCombustivel_Specified(Index: Integer): boolean;
begin
  Result := FValorCombustivel_Specified;
end;

function RetificacaoValoresRequest2.GetValorPedagio(Index: Integer): TXSDecimal;
begin
  Result := FValorPedagio;
end;

procedure RetificacaoValoresRequest2.SetValorPedagio(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorPedagio := ATXSDecimal;
  FValorPedagio_Specified := True;
end;

function RetificacaoValoresRequest2.ValorPedagio_Specified(Index: Integer): boolean;
begin
  Result := FValorPedagio_Specified;
end;

function RetificacaoValoresRequest2.GetValorDespesas(Index: Integer): TXSDecimal;
begin
  Result := FValorDespesas;
end;

procedure RetificacaoValoresRequest2.SetValorDespesas(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorDespesas := ATXSDecimal;
  FValorDespesas_Specified := True;
end;

function RetificacaoValoresRequest2.ValorDespesas_Specified(Index: Integer): boolean;
begin
  Result := FValorDespesas_Specified;
end;

function RetificacaoValoresRequest2.GetValorImpostoSestSenat(Index: Integer): TXSDecimal;
begin
  Result := FValorImpostoSestSenat;
end;

procedure RetificacaoValoresRequest2.SetValorImpostoSestSenat(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorImpostoSestSenat := ATXSDecimal;
  FValorImpostoSestSenat_Specified := True;
end;

function RetificacaoValoresRequest2.ValorImpostoSestSenat_Specified(Index: Integer): boolean;
begin
  Result := FValorImpostoSestSenat_Specified;
end;

function RetificacaoValoresRequest2.GetValorImpostoIRRF(Index: Integer): TXSDecimal;
begin
  Result := FValorImpostoIRRF;
end;

procedure RetificacaoValoresRequest2.SetValorImpostoIRRF(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorImpostoIRRF := ATXSDecimal;
  FValorImpostoIRRF_Specified := True;
end;

function RetificacaoValoresRequest2.ValorImpostoIRRF_Specified(Index: Integer): boolean;
begin
  Result := FValorImpostoIRRF_Specified;
end;

function RetificacaoValoresRequest2.GetValorImpostoINSS(Index: Integer): TXSDecimal;
begin
  Result := FValorImpostoINSS;
end;

procedure RetificacaoValoresRequest2.SetValorImpostoINSS(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorImpostoINSS := ATXSDecimal;
  FValorImpostoINSS_Specified := True;
end;

function RetificacaoValoresRequest2.ValorImpostoINSS_Specified(Index: Integer): boolean;
begin
  Result := FValorImpostoINSS_Specified;
end;

function RetificacaoValoresRequest2.GetValorImpostoIcmsIssqn(Index: Integer): TXSDecimal;
begin
  Result := FValorImpostoIcmsIssqn;
end;

procedure RetificacaoValoresRequest2.SetValorImpostoIcmsIssqn(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorImpostoIcmsIssqn := ATXSDecimal;
  FValorImpostoIcmsIssqn_Specified := True;
end;

function RetificacaoValoresRequest2.ValorImpostoIcmsIssqn_Specified(Index: Integer): boolean;
begin
  Result := FValorImpostoIcmsIssqn_Specified;
end;

function RetificacaoValoresRequest2.GetValorDescontoAntecipado(Index: Integer): TXSDecimal;
begin
  Result := FValorDescontoAntecipado;
end;

procedure RetificacaoValoresRequest2.SetValorDescontoAntecipado(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorDescontoAntecipado := ATXSDecimal;
  FValorDescontoAntecipado_Specified := True;
end;

function RetificacaoValoresRequest2.ValorDescontoAntecipado_Specified(Index: Integer): boolean;
begin
  Result := FValorDescontoAntecipado_Specified;
end;

function RetificacaoValoresRequest2.GetValorAjusteCombustivel(Index: Integer): TXSDecimal;
begin
  Result := FValorAjusteCombustivel;
end;

procedure RetificacaoValoresRequest2.SetValorAjusteCombustivel(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorAjusteCombustivel := ATXSDecimal;
  FValorAjusteCombustivel_Specified := True;
end;

function RetificacaoValoresRequest2.ValorAjusteCombustivel_Specified(Index: Integer): boolean;
begin
  Result := FValorAjusteCombustivel_Specified;
end;

function RetificacaoValoresRequest2.GetValorAjusteServicos(Index: Integer): TXSDecimal;
begin
  Result := FValorAjusteServicos;
end;

procedure RetificacaoValoresRequest2.SetValorAjusteServicos(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorAjusteServicos := ATXSDecimal;
  FValorAjusteServicos_Specified := True;
end;

function RetificacaoValoresRequest2.ValorAjusteServicos_Specified(Index: Integer): boolean;
begin
  Result := FValorAjusteServicos_Specified;
end;

function RetificacaoValoresRequest2.GetValorAjusteManutencao(Index: Integer): TXSDecimal;
begin
  Result := FValorAjusteManutencao;
end;

procedure RetificacaoValoresRequest2.SetValorAjusteManutencao(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorAjusteManutencao := ATXSDecimal;
  FValorAjusteManutencao_Specified := True;
end;

function RetificacaoValoresRequest2.ValorAjusteManutencao_Specified(Index: Integer): boolean;
begin
  Result := FValorAjusteManutencao_Specified;
end;

function RetificacaoValoresRequest2.GetValorAjusteOutros(Index: Integer): TXSDecimal;
begin
  Result := FValorAjusteOutros;
end;

procedure RetificacaoValoresRequest2.SetValorAjusteOutros(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorAjusteOutros := ATXSDecimal;
  FValorAjusteOutros_Specified := True;
end;

function RetificacaoValoresRequest2.ValorAjusteOutros_Specified(Index: Integer): boolean;
begin
  Result := FValorAjusteOutros_Specified;
end;

function RetificacaoValoresRequest2.GetDeduzirImpostos(Index: Integer): Boolean;
begin
  Result := FDeduzirImpostos;
end;

procedure RetificacaoValoresRequest2.SetDeduzirImpostos(Index: Integer; const ABoolean: Boolean);
begin
  FDeduzirImpostos := ABoolean;
  FDeduzirImpostos_Specified := True;
end;

function RetificacaoValoresRequest2.DeduzirImpostos_Specified(Index: Integer): boolean;
begin
  Result := FDeduzirImpostos_Specified;
end;

function RetificacaoValoresRequest2.GetTarifasBancarias(Index: Integer): TXSDecimal;
begin
  Result := FTarifasBancarias;
end;

procedure RetificacaoValoresRequest2.SetTarifasBancarias(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FTarifasBancarias := ATXSDecimal;
  FTarifasBancarias_Specified := True;
end;

function RetificacaoValoresRequest2.TarifasBancarias_Specified(Index: Integer): boolean;
begin
  Result := FTarifasBancarias_Specified;
end;

function RetificacaoValoresRequest2.GetQuantidadeTarifasBancarias(Index: Integer): Integer;
begin
  Result := FQuantidadeTarifasBancarias;
end;

procedure RetificacaoValoresRequest2.SetQuantidadeTarifasBancarias(Index: Integer; const AInteger: Integer);
begin
  FQuantidadeTarifasBancarias := AInteger;
  FQuantidadeTarifasBancarias_Specified := True;
end;

function RetificacaoValoresRequest2.QuantidadeTarifasBancarias_Specified(Index: Integer): boolean;
begin
  Result := FQuantidadeTarifasBancarias_Specified;
end;

function RetificacaoValoresRequest2.GetParcelas(Index: Integer): ArrayOfOperacaoTransporteParcelaRequest;
begin
  Result := FParcelas;
end;

procedure RetificacaoValoresRequest2.SetParcelas(Index: Integer; const AArrayOfOperacaoTransporteParcelaRequest: ArrayOfOperacaoTransporteParcelaRequest);
begin
  FParcelas := AArrayOfOperacaoTransporteParcelaRequest;
  FParcelas_Specified := True;
end;

function RetificacaoValoresRequest2.Parcelas_Specified(Index: Integer): boolean;
begin
  Result := FParcelas_Specified;
end;

function RetificacaoValoresRequest2.GetValorImpostoISS(Index: Integer): TXSDecimal;
begin
  Result := FValorImpostoISS;
end;

procedure RetificacaoValoresRequest2.SetValorImpostoISS(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorImpostoISS := ATXSDecimal;
  FValorImpostoISS_Specified := True;
end;

function RetificacaoValoresRequest2.ValorImpostoISS_Specified(Index: Integer): boolean;
begin
  Result := FValorImpostoISS_Specified;
end;

function OperacaoTransporteRequest2.GetInstrucao(Index: Integer): Integer;
begin
  Result := FInstrucao;
end;

procedure OperacaoTransporteRequest2.SetInstrucao(Index: Integer; const AInteger: Integer);
begin
  FInstrucao := AInteger;
  FInstrucao_Specified := True;
end;

function OperacaoTransporteRequest2.Instrucao_Specified(Index: Integer): boolean;
begin
  Result := FInstrucao_Specified;
end;

function OperacaoTransporteRequest2.GetIdOperacaoTransporte(Index: Integer): Integer;
begin
  Result := FIdOperacaoTransporte;
end;

procedure OperacaoTransporteRequest2.SetIdOperacaoTransporte(Index: Integer; const AInteger: Integer);
begin
  FIdOperacaoTransporte := AInteger;
  FIdOperacaoTransporte_Specified := True;
end;

function OperacaoTransporteRequest2.IdOperacaoTransporte_Specified(Index: Integer): boolean;
begin
  Result := FIdOperacaoTransporte_Specified;
end;

function OperacaoTransporteRequest2.GetCodigoCentroDeCusto(Index: Integer): string;
begin
  Result := FCodigoCentroDeCusto;
end;

procedure OperacaoTransporteRequest2.SetCodigoCentroDeCusto(Index: Integer; const Astring: string);
begin
  FCodigoCentroDeCusto := Astring;
  FCodigoCentroDeCusto_Specified := True;
end;

function OperacaoTransporteRequest2.CodigoCentroDeCusto_Specified(Index: Integer): boolean;
begin
  Result := FCodigoCentroDeCusto_Specified;
end;

function OperacaoTransporteRequest2.GetNCM(Index: Integer): string;
begin
  Result := FNCM;
end;

procedure OperacaoTransporteRequest2.SetNCM(Index: Integer; const Astring: string);
begin
  FNCM := Astring;
  FNCM_Specified := True;
end;

function OperacaoTransporteRequest2.NCM_Specified(Index: Integer): boolean;
begin
  Result := FNCM_Specified;
end;

function OperacaoTransporteRequest2.GetProprietarioCarga(Index: Integer): Integer;
begin
  Result := FProprietarioCarga;
end;

procedure OperacaoTransporteRequest2.SetProprietarioCarga(Index: Integer; const AInteger: Integer);
begin
  FProprietarioCarga := AInteger;
  FProprietarioCarga_Specified := True;
end;

function OperacaoTransporteRequest2.ProprietarioCarga_Specified(Index: Integer): boolean;
begin
  Result := FProprietarioCarga_Specified;
end;

function OperacaoTransporteRequest2.GetPesoCarga(Index: Integer): TXSDecimal;
begin
  Result := FPesoCarga;
end;

procedure OperacaoTransporteRequest2.SetPesoCarga(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FPesoCarga := ATXSDecimal;
  FPesoCarga_Specified := True;
end;

function OperacaoTransporteRequest2.PesoCarga_Specified(Index: Integer): boolean;
begin
  Result := FPesoCarga_Specified;
end;

function OperacaoTransporteRequest2.GetTipoOperacao(Index: Integer): Integer;
begin
  Result := FTipoOperacao;
end;

procedure OperacaoTransporteRequest2.SetTipoOperacao(Index: Integer; const AInteger: Integer);
begin
  FTipoOperacao := AInteger;
  FTipoOperacao_Specified := True;
end;

function OperacaoTransporteRequest2.TipoOperacao_Specified(Index: Integer): boolean;
begin
  Result := FTipoOperacao_Specified;
end;

function OperacaoTransporteRequest2.GetMunicipioOrigemCodigoIBGE(Index: Integer): Integer;
begin
  Result := FMunicipioOrigemCodigoIBGE;
end;

procedure OperacaoTransporteRequest2.SetMunicipioOrigemCodigoIBGE(Index: Integer; const AInteger: Integer);
begin
  FMunicipioOrigemCodigoIBGE := AInteger;
  FMunicipioOrigemCodigoIBGE_Specified := True;
end;

function OperacaoTransporteRequest2.MunicipioOrigemCodigoIBGE_Specified(Index: Integer): boolean;
begin
  Result := FMunicipioOrigemCodigoIBGE_Specified;
end;

function OperacaoTransporteRequest2.GetMunicipioDestinoCodigoIBGE(Index: Integer): Integer;
begin
  Result := FMunicipioDestinoCodigoIBGE;
end;

procedure OperacaoTransporteRequest2.SetMunicipioDestinoCodigoIBGE(Index: Integer; const AInteger: Integer);
begin
  FMunicipioDestinoCodigoIBGE := AInteger;
  FMunicipioDestinoCodigoIBGE_Specified := True;
end;

function OperacaoTransporteRequest2.MunicipioDestinoCodigoIBGE_Specified(Index: Integer): boolean;
begin
  Result := FMunicipioDestinoCodigoIBGE_Specified;
end;

function OperacaoTransporteRequest2.GetDataHoraInicio(Index: Integer): TXSDateTime;
begin
  Result := FDataHoraInicio;
end;

procedure OperacaoTransporteRequest2.SetDataHoraInicio(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDataHoraInicio := ATXSDateTime;
  FDataHoraInicio_Specified := True;
end;

function OperacaoTransporteRequest2.DataHoraInicio_Specified(Index: Integer): boolean;
begin
  Result := FDataHoraInicio_Specified;
end;

function OperacaoTransporteRequest2.GetDataHoraTermino(Index: Integer): TXSDateTime;
begin
  Result := FDataHoraTermino;
end;

procedure OperacaoTransporteRequest2.SetDataHoraTermino(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDataHoraTermino := ATXSDateTime;
  FDataHoraTermino_Specified := True;
end;

function OperacaoTransporteRequest2.DataHoraTermino_Specified(Index: Integer): boolean;
begin
  Result := FDataHoraTermino_Specified;
end;

function OperacaoTransporteRequest2.GetCPFCNPJContratado(Index: Integer): string;
begin
  Result := FCPFCNPJContratado;
end;

procedure OperacaoTransporteRequest2.SetCPFCNPJContratado(Index: Integer; const Astring: string);
begin
  FCPFCNPJContratado := Astring;
  FCPFCNPJContratado_Specified := True;
end;

function OperacaoTransporteRequest2.CPFCNPJContratado_Specified(Index: Integer): boolean;
begin
  Result := FCPFCNPJContratado_Specified;
end;

function OperacaoTransporteRequest2.GetValorFrete(Index: Integer): TXSDecimal;
begin
  Result := FValorFrete;
end;

procedure OperacaoTransporteRequest2.SetValorFrete(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorFrete := ATXSDecimal;
  FValorFrete_Specified := True;
end;

function OperacaoTransporteRequest2.ValorFrete_Specified(Index: Integer): boolean;
begin
  Result := FValorFrete_Specified;
end;

function OperacaoTransporteRequest2.GetValorCombustivel(Index: Integer): TXSDecimal;
begin
  Result := FValorCombustivel;
end;

procedure OperacaoTransporteRequest2.SetValorCombustivel(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorCombustivel := ATXSDecimal;
  FValorCombustivel_Specified := True;
end;

function OperacaoTransporteRequest2.ValorCombustivel_Specified(Index: Integer): boolean;
begin
  Result := FValorCombustivel_Specified;
end;

function OperacaoTransporteRequest2.GetValorPedagio(Index: Integer): TXSDecimal;
begin
  Result := FValorPedagio;
end;

procedure OperacaoTransporteRequest2.SetValorPedagio(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorPedagio := ATXSDecimal;
  FValorPedagio_Specified := True;
end;

function OperacaoTransporteRequest2.ValorPedagio_Specified(Index: Integer): boolean;
begin
  Result := FValorPedagio_Specified;
end;

function OperacaoTransporteRequest2.GetValorDespesas(Index: Integer): TXSDecimal;
begin
  Result := FValorDespesas;
end;

procedure OperacaoTransporteRequest2.SetValorDespesas(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorDespesas := ATXSDecimal;
  FValorDespesas_Specified := True;
end;

function OperacaoTransporteRequest2.ValorDespesas_Specified(Index: Integer): boolean;
begin
  Result := FValorDespesas_Specified;
end;

function OperacaoTransporteRequest2.GetValorImpostoSestSenat(Index: Integer): TXSDecimal;
begin
  Result := FValorImpostoSestSenat;
end;

procedure OperacaoTransporteRequest2.SetValorImpostoSestSenat(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorImpostoSestSenat := ATXSDecimal;
  FValorImpostoSestSenat_Specified := True;
end;

function OperacaoTransporteRequest2.ValorImpostoSestSenat_Specified(Index: Integer): boolean;
begin
  Result := FValorImpostoSestSenat_Specified;
end;

function OperacaoTransporteRequest2.GetValorImpostoIRRF(Index: Integer): TXSDecimal;
begin
  Result := FValorImpostoIRRF;
end;

procedure OperacaoTransporteRequest2.SetValorImpostoIRRF(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorImpostoIRRF := ATXSDecimal;
  FValorImpostoIRRF_Specified := True;
end;

function OperacaoTransporteRequest2.ValorImpostoIRRF_Specified(Index: Integer): boolean;
begin
  Result := FValorImpostoIRRF_Specified;
end;

function OperacaoTransporteRequest2.GetValorImpostoINSS(Index: Integer): TXSDecimal;
begin
  Result := FValorImpostoINSS;
end;

procedure OperacaoTransporteRequest2.SetValorImpostoINSS(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorImpostoINSS := ATXSDecimal;
  FValorImpostoINSS_Specified := True;
end;

function OperacaoTransporteRequest2.ValorImpostoINSS_Specified(Index: Integer): boolean;
begin
  Result := FValorImpostoINSS_Specified;
end;

function OperacaoTransporteRequest2.GetValorImpostoIcmsIssqn(Index: Integer): TXSDecimal;
begin
  Result := FValorImpostoIcmsIssqn;
end;

procedure OperacaoTransporteRequest2.SetValorImpostoIcmsIssqn(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorImpostoIcmsIssqn := ATXSDecimal;
  FValorImpostoIcmsIssqn_Specified := True;
end;

function OperacaoTransporteRequest2.ValorImpostoIcmsIssqn_Specified(Index: Integer): boolean;
begin
  Result := FValorImpostoIcmsIssqn_Specified;
end;

function OperacaoTransporteRequest2.GetParcelaUnica(Index: Integer): Boolean;
begin
  Result := FParcelaUnica;
end;

procedure OperacaoTransporteRequest2.SetParcelaUnica(Index: Integer; const ABoolean: Boolean);
begin
  FParcelaUnica := ABoolean;
  FParcelaUnica_Specified := True;
end;

function OperacaoTransporteRequest2.ParcelaUnica_Specified(Index: Integer): boolean;
begin
  Result := FParcelaUnica_Specified;
end;

function OperacaoTransporteRequest2.GetModoCompraValePedagio(Index: Integer): Integer;
begin
  Result := FModoCompraValePedagio;
end;

procedure OperacaoTransporteRequest2.SetModoCompraValePedagio(Index: Integer; const AInteger: Integer);
begin
  FModoCompraValePedagio := AInteger;
  FModoCompraValePedagio_Specified := True;
end;

function OperacaoTransporteRequest2.ModoCompraValePedagio_Specified(Index: Integer): boolean;
begin
  Result := FModoCompraValePedagio_Specified;
end;

function OperacaoTransporteRequest2.GetCategoriaVeiculo(Index: Integer): Integer;
begin
  Result := FCategoriaVeiculo;
end;

procedure OperacaoTransporteRequest2.SetCategoriaVeiculo(Index: Integer; const AInteger: Integer);
begin
  FCategoriaVeiculo := AInteger;
  FCategoriaVeiculo_Specified := True;
end;

function OperacaoTransporteRequest2.CategoriaVeiculo_Specified(Index: Integer): boolean;
begin
  Result := FCategoriaVeiculo_Specified;
end;

function OperacaoTransporteRequest2.GetNomeMotorista(Index: Integer): string;
begin
  Result := FNomeMotorista;
end;

procedure OperacaoTransporteRequest2.SetNomeMotorista(Index: Integer; const Astring: string);
begin
  FNomeMotorista := Astring;
  FNomeMotorista_Specified := True;
end;

function OperacaoTransporteRequest2.NomeMotorista_Specified(Index: Integer): boolean;
begin
  Result := FNomeMotorista_Specified;
end;

function OperacaoTransporteRequest2.GetCPFMotorista(Index: Integer): string;
begin
  Result := FCPFMotorista;
end;

procedure OperacaoTransporteRequest2.SetCPFMotorista(Index: Integer; const Astring: string);
begin
  FCPFMotorista := Astring;
  FCPFMotorista_Specified := True;
end;

function OperacaoTransporteRequest2.CPFMotorista_Specified(Index: Integer): boolean;
begin
  Result := FCPFMotorista_Specified;
end;

function OperacaoTransporteRequest2.GetRNTRCMotorista(Index: Integer): string;
begin
  Result := FRNTRCMotorista;
end;

procedure OperacaoTransporteRequest2.SetRNTRCMotorista(Index: Integer; const Astring: string);
begin
  FRNTRCMotorista := Astring;
  FRNTRCMotorista_Specified := True;
end;

function OperacaoTransporteRequest2.RNTRCMotorista_Specified(Index: Integer): boolean;
begin
  Result := FRNTRCMotorista_Specified;
end;

function OperacaoTransporteRequest2.GetItemFinanceiro(Index: Integer): string;
begin
  Result := FItemFinanceiro;
end;

procedure OperacaoTransporteRequest2.SetItemFinanceiro(Index: Integer; const Astring: string);
begin
  FItemFinanceiro := Astring;
  FItemFinanceiro_Specified := True;
end;

function OperacaoTransporteRequest2.ItemFinanceiro_Specified(Index: Integer): boolean;
begin
  Result := FItemFinanceiro_Specified;
end;

function OperacaoTransporteRequest2.GetParcelas(Index: Integer): ArrayOfOperacaoTransporteParcelaRequest;
begin
  Result := FParcelas;
end;

procedure OperacaoTransporteRequest2.SetParcelas(Index: Integer; const AArrayOfOperacaoTransporteParcelaRequest: ArrayOfOperacaoTransporteParcelaRequest);
begin
  FParcelas := AArrayOfOperacaoTransporteParcelaRequest;
  FParcelas_Specified := True;
end;

function OperacaoTransporteRequest2.Parcelas_Specified(Index: Integer): boolean;
begin
  Result := FParcelas_Specified;
end;

function OperacaoTransporteRequest2.GetVeiculos(Index: Integer): ArrayOfOperacaoTransporteVeiculoRequest;
begin
  Result := FVeiculos;
end;

procedure OperacaoTransporteRequest2.SetVeiculos(Index: Integer; const AArrayOfOperacaoTransporteVeiculoRequest: ArrayOfOperacaoTransporteVeiculoRequest);
begin
  FVeiculos := AArrayOfOperacaoTransporteVeiculoRequest;
  FVeiculos_Specified := True;
end;

function OperacaoTransporteRequest2.Veiculos_Specified(Index: Integer): boolean;
begin
  Result := FVeiculos_Specified;
end;

function OperacaoTransporteRequest2.GetIdRotaModelo(Index: Integer): Integer;
begin
  Result := FIdRotaModelo;
end;

procedure OperacaoTransporteRequest2.SetIdRotaModelo(Index: Integer; const AInteger: Integer);
begin
  FIdRotaModelo := AInteger;
  FIdRotaModelo_Specified := True;
end;

function OperacaoTransporteRequest2.IdRotaModelo_Specified(Index: Integer): boolean;
begin
  Result := FIdRotaModelo_Specified;
end;

function OperacaoTransporteRequest2.GetDeduzirImpostos(Index: Integer): Boolean;
begin
  Result := FDeduzirImpostos;
end;

procedure OperacaoTransporteRequest2.SetDeduzirImpostos(Index: Integer; const ABoolean: Boolean);
begin
  FDeduzirImpostos := ABoolean;
  FDeduzirImpostos_Specified := True;
end;

function OperacaoTransporteRequest2.DeduzirImpostos_Specified(Index: Integer): boolean;
begin
  Result := FDeduzirImpostos_Specified;
end;

function OperacaoTransporteRequest2.GetTarifasBancarias(Index: Integer): TXSDecimal;
begin
  Result := FTarifasBancarias;
end;

procedure OperacaoTransporteRequest2.SetTarifasBancarias(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FTarifasBancarias := ATXSDecimal;
  FTarifasBancarias_Specified := True;
end;

function OperacaoTransporteRequest2.TarifasBancarias_Specified(Index: Integer): boolean;
begin
  Result := FTarifasBancarias_Specified;
end;

function OperacaoTransporteRequest2.GetQuantidadeTarifasBancarias(Index: Integer): Integer;
begin
  Result := FQuantidadeTarifasBancarias;
end;

procedure OperacaoTransporteRequest2.SetQuantidadeTarifasBancarias(Index: Integer; const AInteger: Integer);
begin
  FQuantidadeTarifasBancarias := AInteger;
  FQuantidadeTarifasBancarias_Specified := True;
end;

function OperacaoTransporteRequest2.QuantidadeTarifasBancarias_Specified(Index: Integer): boolean;
begin
  Result := FQuantidadeTarifasBancarias_Specified;
end;

function OperacaoTransporteRequest2.GetIdIntegrador(Index: Integer): string;
begin
  Result := FIdIntegrador;
end;

procedure OperacaoTransporteRequest2.SetIdIntegrador(Index: Integer; const Astring: string);
begin
  FIdIntegrador := Astring;
  FIdIntegrador_Specified := True;
end;

function OperacaoTransporteRequest2.IdIntegrador_Specified(Index: Integer): boolean;
begin
  Result := FIdIntegrador_Specified;
end;

function OperacaoTransporteRequest2.GetValorDescontoAntecipado(Index: Integer): TXSDecimal;
begin
  Result := FValorDescontoAntecipado;
end;

procedure OperacaoTransporteRequest2.SetValorDescontoAntecipado(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorDescontoAntecipado := ATXSDecimal;
  FValorDescontoAntecipado_Specified := True;
end;

function OperacaoTransporteRequest2.ValorDescontoAntecipado_Specified(Index: Integer): boolean;
begin
  Result := FValorDescontoAntecipado_Specified;
end;

function OperacaoTransporteRequest2.GetCPFCNPJParticipanteDestinatario(Index: Integer): string;
begin
  Result := FCPFCNPJParticipanteDestinatario;
end;

procedure OperacaoTransporteRequest2.SetCPFCNPJParticipanteDestinatario(Index: Integer; const Astring: string);
begin
  FCPFCNPJParticipanteDestinatario := Astring;
  FCPFCNPJParticipanteDestinatario_Specified := True;
end;

function OperacaoTransporteRequest2.CPFCNPJParticipanteDestinatario_Specified(Index: Integer): boolean;
begin
  Result := FCPFCNPJParticipanteDestinatario_Specified;
end;

function OperacaoTransporteRequest2.GetCPFCNPJParticipanteContratante(Index: Integer): string;
begin
  Result := FCPFCNPJParticipanteContratante;
end;

procedure OperacaoTransporteRequest2.SetCPFCNPJParticipanteContratante(Index: Integer; const Astring: string);
begin
  FCPFCNPJParticipanteContratante := Astring;
  FCPFCNPJParticipanteContratante_Specified := True;
end;

function OperacaoTransporteRequest2.CPFCNPJParticipanteContratante_Specified(Index: Integer): boolean;
begin
  Result := FCPFCNPJParticipanteContratante_Specified;
end;

function OperacaoTransporteRequest2.GetCPFCNPJParticipanteSubcontratante(Index: Integer): string;
begin
  Result := FCPFCNPJParticipanteSubcontratante;
end;

procedure OperacaoTransporteRequest2.SetCPFCNPJParticipanteSubcontratante(Index: Integer; const Astring: string);
begin
  FCPFCNPJParticipanteSubcontratante := Astring;
  FCPFCNPJParticipanteSubcontratante_Specified := True;
end;

function OperacaoTransporteRequest2.CPFCNPJParticipanteSubcontratante_Specified(Index: Integer): boolean;
begin
  Result := FCPFCNPJParticipanteSubcontratante_Specified;
end;

function OperacaoTransporteRequest2.GetCPFCNPJParticipanteConsignatario(Index: Integer): string;
begin
  Result := FCPFCNPJParticipanteConsignatario;
end;

procedure OperacaoTransporteRequest2.SetCPFCNPJParticipanteConsignatario(Index: Integer; const Astring: string);
begin
  FCPFCNPJParticipanteConsignatario := Astring;
  FCPFCNPJParticipanteConsignatario_Specified := True;
end;

function OperacaoTransporteRequest2.CPFCNPJParticipanteConsignatario_Specified(Index: Integer): boolean;
begin
  Result := FCPFCNPJParticipanteConsignatario_Specified;
end;

function OperacaoTransporteRequest2.GetNumeroLacreTransporteCombustivel(Index: Integer): string;
begin
  Result := FNumeroLacreTransporteCombustivel;
end;

procedure OperacaoTransporteRequest2.SetNumeroLacreTransporteCombustivel(Index: Integer; const Astring: string);
begin
  FNumeroLacreTransporteCombustivel := Astring;
  FNumeroLacreTransporteCombustivel_Specified := True;
end;

function OperacaoTransporteRequest2.NumeroLacreTransporteCombustivel_Specified(Index: Integer): boolean;
begin
  Result := FNumeroLacreTransporteCombustivel_Specified;
end;

function OperacaoTransporteRequest2.GetListaDestinatariosAdicionais(Index: Integer): ArrayOfParticipanteDestinatarioAdicionalRequest;
begin
  Result := FListaDestinatariosAdicionais;
end;

procedure OperacaoTransporteRequest2.SetListaDestinatariosAdicionais(Index: Integer; const AArrayOfParticipanteDestinatarioAdicionalRequest: ArrayOfParticipanteDestinatarioAdicionalRequest);
begin
  FListaDestinatariosAdicionais := AArrayOfParticipanteDestinatarioAdicionalRequest;
  FListaDestinatariosAdicionais_Specified := True;
end;

function OperacaoTransporteRequest2.ListaDestinatariosAdicionais_Specified(Index: Integer): boolean;
begin
  Result := FListaDestinatariosAdicionais_Specified;
end;

function OperacaoTransporteRequest2.GetNumeroCartaoValePedagio(Index: Integer): string;
begin
  Result := FNumeroCartaoValePedagio;
end;

procedure OperacaoTransporteRequest2.SetNumeroCartaoValePedagio(Index: Integer; const Astring: string);
begin
  FNumeroCartaoValePedagio := Astring;
  FNumeroCartaoValePedagio_Specified := True;
end;

function OperacaoTransporteRequest2.NumeroCartaoValePedagio_Specified(Index: Integer): boolean;
begin
  Result := FNumeroCartaoValePedagio_Specified;
end;

function OperacaoTransporteRequest2.GetQuitacao(Index: Integer): Boolean;
begin
  Result := FQuitacao;
end;

procedure OperacaoTransporteRequest2.SetQuitacao(Index: Integer; const ABoolean: Boolean);
begin
  FQuitacao := ABoolean;
  FQuitacao_Specified := True;
end;

function OperacaoTransporteRequest2.Quitacao_Specified(Index: Integer): boolean;
begin
  Result := FQuitacao_Specified;
end;

function OperacaoTransporteRequest2.GetDadosQuitacao(Index: Integer): DadosQuitacaoFreteRequest2;
begin
  Result := FDadosQuitacao;
end;

procedure OperacaoTransporteRequest2.SetDadosQuitacao(Index: Integer; const ADadosQuitacaoFreteRequest2: DadosQuitacaoFreteRequest2);
begin
  FDadosQuitacao := ADadosQuitacaoFreteRequest2;
  FDadosQuitacao_Specified := True;
end;

function OperacaoTransporteRequest2.DadosQuitacao_Specified(Index: Integer): boolean;
begin
  Result := FDadosQuitacao_Specified;
end;

function OperacaoTransporteRequest2.GetDocumentoValePedagio(Index: Integer): string;
begin
  Result := FDocumentoValePedagio;
end;

procedure OperacaoTransporteRequest2.SetDocumentoValePedagio(Index: Integer; const Astring: string);
begin
  FDocumentoValePedagio := Astring;
  FDocumentoValePedagio_Specified := True;
end;

function OperacaoTransporteRequest2.DocumentoValePedagio_Specified(Index: Integer): boolean;
begin
  Result := FDocumentoValePedagio_Specified;
end;

function OperacaoTransporteRequest2.GetValorImpostoISS(Index: Integer): TXSDecimal;
begin
  Result := FValorImpostoISS;
end;

procedure OperacaoTransporteRequest2.SetValorImpostoISS(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorImpostoISS := ATXSDecimal;
  FValorImpostoISS_Specified := True;
end;

function OperacaoTransporteRequest2.ValorImpostoISS_Specified(Index: Integer): boolean;
begin
  Result := FValorImpostoISS_Specified;
end;

function RetificacaoOperacaoTransporteRequest2.GetIdOperacaoTransporte(Index: Integer): Integer;
begin
  Result := FIdOperacaoTransporte;
end;

procedure RetificacaoOperacaoTransporteRequest2.SetIdOperacaoTransporte(Index: Integer; const AInteger: Integer);
begin
  FIdOperacaoTransporte := AInteger;
  FIdOperacaoTransporte_Specified := True;
end;

function RetificacaoOperacaoTransporteRequest2.IdOperacaoTransporte_Specified(Index: Integer): boolean;
begin
  Result := FIdOperacaoTransporte_Specified;
end;

function RetificacaoOperacaoTransporteRequest2.GetNCM(Index: Integer): string;
begin
  Result := FNCM;
end;

procedure RetificacaoOperacaoTransporteRequest2.SetNCM(Index: Integer; const Astring: string);
begin
  FNCM := Astring;
  FNCM_Specified := True;
end;

function RetificacaoOperacaoTransporteRequest2.NCM_Specified(Index: Integer): boolean;
begin
  Result := FNCM_Specified;
end;

function RetificacaoOperacaoTransporteRequest2.GetPesoCarga(Index: Integer): TXSDecimal;
begin
  Result := FPesoCarga;
end;

procedure RetificacaoOperacaoTransporteRequest2.SetPesoCarga(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FPesoCarga := ATXSDecimal;
  FPesoCarga_Specified := True;
end;

function RetificacaoOperacaoTransporteRequest2.PesoCarga_Specified(Index: Integer): boolean;
begin
  Result := FPesoCarga_Specified;
end;

function RetificacaoOperacaoTransporteRequest2.GetMunicipioOrigemCodigoIBGE(Index: Integer): Integer;
begin
  Result := FMunicipioOrigemCodigoIBGE;
end;

procedure RetificacaoOperacaoTransporteRequest2.SetMunicipioOrigemCodigoIBGE(Index: Integer; const AInteger: Integer);
begin
  FMunicipioOrigemCodigoIBGE := AInteger;
  FMunicipioOrigemCodigoIBGE_Specified := True;
end;

function RetificacaoOperacaoTransporteRequest2.MunicipioOrigemCodigoIBGE_Specified(Index: Integer): boolean;
begin
  Result := FMunicipioOrigemCodigoIBGE_Specified;
end;

function RetificacaoOperacaoTransporteRequest2.GetMunicipioDestinoCodigoIBGE(Index: Integer): Integer;
begin
  Result := FMunicipioDestinoCodigoIBGE;
end;

procedure RetificacaoOperacaoTransporteRequest2.SetMunicipioDestinoCodigoIBGE(Index: Integer; const AInteger: Integer);
begin
  FMunicipioDestinoCodigoIBGE := AInteger;
  FMunicipioDestinoCodigoIBGE_Specified := True;
end;

function RetificacaoOperacaoTransporteRequest2.MunicipioDestinoCodigoIBGE_Specified(Index: Integer): boolean;
begin
  Result := FMunicipioDestinoCodigoIBGE_Specified;
end;

function RetificacaoOperacaoTransporteRequest2.GetDataHoraInicio(Index: Integer): TXSDateTime;
begin
  Result := FDataHoraInicio;
end;

procedure RetificacaoOperacaoTransporteRequest2.SetDataHoraInicio(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDataHoraInicio := ATXSDateTime;
  FDataHoraInicio_Specified := True;
end;

function RetificacaoOperacaoTransporteRequest2.DataHoraInicio_Specified(Index: Integer): boolean;
begin
  Result := FDataHoraInicio_Specified;
end;

function RetificacaoOperacaoTransporteRequest2.GetDataHoraTermino(Index: Integer): TXSDateTime;
begin
  Result := FDataHoraTermino;
end;

procedure RetificacaoOperacaoTransporteRequest2.SetDataHoraTermino(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDataHoraTermino := ATXSDateTime;
  FDataHoraTermino_Specified := True;
end;

function RetificacaoOperacaoTransporteRequest2.DataHoraTermino_Specified(Index: Integer): boolean;
begin
  Result := FDataHoraTermino_Specified;
end;

function RetificacaoOperacaoTransporteRequest2.GetValores(Index: Integer): RetificacaoValoresRequest2;
begin
  Result := FValores;
end;

procedure RetificacaoOperacaoTransporteRequest2.SetValores(Index: Integer; const ARetificacaoValoresRequest2: RetificacaoValoresRequest2);
begin
  FValores := ARetificacaoValoresRequest2;
  FValores_Specified := True;
end;

function RetificacaoOperacaoTransporteRequest2.Valores_Specified(Index: Integer): boolean;
begin
  Result := FValores_Specified;
end;

function RetificacaoOperacaoTransporteRequest2.GetVeiculos(Index: Integer): ArrayOfOperacaoTransporteVeiculoRequest;
begin
  Result := FVeiculos;
end;

procedure RetificacaoOperacaoTransporteRequest2.SetVeiculos(Index: Integer; const AArrayOfOperacaoTransporteVeiculoRequest: ArrayOfOperacaoTransporteVeiculoRequest);
begin
  FVeiculos := AArrayOfOperacaoTransporteVeiculoRequest;
  FVeiculos_Specified := True;
end;

function RetificacaoOperacaoTransporteRequest2.Veiculos_Specified(Index: Integer): boolean;
begin
  Result := FVeiculos_Specified;
end;

function ParticipanteDestinatarioAdicionalRequest2.GetIdParticipante(Index: Integer): Integer;
begin
  Result := FIdParticipante;
end;

procedure ParticipanteDestinatarioAdicionalRequest2.SetIdParticipante(Index: Integer; const AInteger: Integer);
begin
  FIdParticipante := AInteger;
  FIdParticipante_Specified := True;
end;

function ParticipanteDestinatarioAdicionalRequest2.IdParticipante_Specified(Index: Integer): boolean;
begin
  Result := FIdParticipante_Specified;
end;

function ParticipanteDestinatarioAdicionalRequest2.GetCPFCNPJ(Index: Integer): string;
begin
  Result := FCPFCNPJ;
end;

procedure ParticipanteDestinatarioAdicionalRequest2.SetCPFCNPJ(Index: Integer; const Astring: string);
begin
  FCPFCNPJ := Astring;
  FCPFCNPJ_Specified := True;
end;

function ParticipanteDestinatarioAdicionalRequest2.CPFCNPJ_Specified(Index: Integer): boolean;
begin
  Result := FCPFCNPJ_Specified;
end;

function OperacaoTransporteResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure OperacaoTransporteResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function OperacaoTransporteResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function OperacaoTransporteResponse2.GetIdOperacaoTransporte(Index: Integer): Integer;
begin
  Result := FIdOperacaoTransporte;
end;

procedure OperacaoTransporteResponse2.SetIdOperacaoTransporte(Index: Integer; const AInteger: Integer);
begin
  FIdOperacaoTransporte := AInteger;
  FIdOperacaoTransporte_Specified := True;
end;

function OperacaoTransporteResponse2.IdOperacaoTransporte_Specified(Index: Integer): boolean;
begin
  Result := FIdOperacaoTransporte_Specified;
end;

function OperacaoTransporteResponse2.GetCIOT(Index: Integer): string;
begin
  Result := FCIOT;
end;

procedure OperacaoTransporteResponse2.SetCIOT(Index: Integer; const Astring: string);
begin
  FCIOT := Astring;
  FCIOT_Specified := True;
end;

function OperacaoTransporteResponse2.CIOT_Specified(Index: Integer): boolean;
begin
  Result := FCIOT_Specified;
end;

function OperacaoTransporteResponse2.GetCodigoCentroDeCusto(Index: Integer): string;
begin
  Result := FCodigoCentroDeCusto;
end;

procedure OperacaoTransporteResponse2.SetCodigoCentroDeCusto(Index: Integer; const Astring: string);
begin
  FCodigoCentroDeCusto := Astring;
  FCodigoCentroDeCusto_Specified := True;
end;

function OperacaoTransporteResponse2.CodigoCentroDeCusto_Specified(Index: Integer): boolean;
begin
  Result := FCodigoCentroDeCusto_Specified;
end;

function OperacaoTransporteResponse2.GetNCM(Index: Integer): string;
begin
  Result := FNCM;
end;

procedure OperacaoTransporteResponse2.SetNCM(Index: Integer; const Astring: string);
begin
  FNCM := Astring;
  FNCM_Specified := True;
end;

function OperacaoTransporteResponse2.NCM_Specified(Index: Integer): boolean;
begin
  Result := FNCM_Specified;
end;

function OperacaoTransporteResponse2.GetProprietarioCarga(Index: Integer): string;
begin
  Result := FProprietarioCarga;
end;

procedure OperacaoTransporteResponse2.SetProprietarioCarga(Index: Integer; const Astring: string);
begin
  FProprietarioCarga := Astring;
  FProprietarioCarga_Specified := True;
end;

function OperacaoTransporteResponse2.ProprietarioCarga_Specified(Index: Integer): boolean;
begin
  Result := FProprietarioCarga_Specified;
end;

function OperacaoTransporteResponse2.GetPesoCarga(Index: Integer): TXSDecimal;
begin
  Result := FPesoCarga;
end;

procedure OperacaoTransporteResponse2.SetPesoCarga(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FPesoCarga := ATXSDecimal;
  FPesoCarga_Specified := True;
end;

function OperacaoTransporteResponse2.PesoCarga_Specified(Index: Integer): boolean;
begin
  Result := FPesoCarga_Specified;
end;

function OperacaoTransporteResponse2.GetTipoOperacao(Index: Integer): string;
begin
  Result := FTipoOperacao;
end;

procedure OperacaoTransporteResponse2.SetTipoOperacao(Index: Integer; const Astring: string);
begin
  FTipoOperacao := Astring;
  FTipoOperacao_Specified := True;
end;

function OperacaoTransporteResponse2.TipoOperacao_Specified(Index: Integer): boolean;
begin
  Result := FTipoOperacao_Specified;
end;

function OperacaoTransporteResponse2.GetMunicipioOrigemCodigoIBGE(Index: Integer): Integer;
begin
  Result := FMunicipioOrigemCodigoIBGE;
end;

procedure OperacaoTransporteResponse2.SetMunicipioOrigemCodigoIBGE(Index: Integer; const AInteger: Integer);
begin
  FMunicipioOrigemCodigoIBGE := AInteger;
  FMunicipioOrigemCodigoIBGE_Specified := True;
end;

function OperacaoTransporteResponse2.MunicipioOrigemCodigoIBGE_Specified(Index: Integer): boolean;
begin
  Result := FMunicipioOrigemCodigoIBGE_Specified;
end;

function OperacaoTransporteResponse2.GetMunicipioDestinoCodigoIBGE(Index: Integer): Integer;
begin
  Result := FMunicipioDestinoCodigoIBGE;
end;

procedure OperacaoTransporteResponse2.SetMunicipioDestinoCodigoIBGE(Index: Integer; const AInteger: Integer);
begin
  FMunicipioDestinoCodigoIBGE := AInteger;
  FMunicipioDestinoCodigoIBGE_Specified := True;
end;

function OperacaoTransporteResponse2.MunicipioDestinoCodigoIBGE_Specified(Index: Integer): boolean;
begin
  Result := FMunicipioDestinoCodigoIBGE_Specified;
end;

function OperacaoTransporteResponse2.GetDataHoraInicio(Index: Integer): TXSDateTime;
begin
  Result := FDataHoraInicio;
end;

procedure OperacaoTransporteResponse2.SetDataHoraInicio(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDataHoraInicio := ATXSDateTime;
  FDataHoraInicio_Specified := True;
end;

function OperacaoTransporteResponse2.DataHoraInicio_Specified(Index: Integer): boolean;
begin
  Result := FDataHoraInicio_Specified;
end;

function OperacaoTransporteResponse2.GetDataHoraTermino(Index: Integer): TXSDateTime;
begin
  Result := FDataHoraTermino;
end;

procedure OperacaoTransporteResponse2.SetDataHoraTermino(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDataHoraTermino := ATXSDateTime;
  FDataHoraTermino_Specified := True;
end;

function OperacaoTransporteResponse2.DataHoraTermino_Specified(Index: Integer): boolean;
begin
  Result := FDataHoraTermino_Specified;
end;

function OperacaoTransporteResponse2.GetCPFCNPJContratado(Index: Integer): string;
begin
  Result := FCPFCNPJContratado;
end;

procedure OperacaoTransporteResponse2.SetCPFCNPJContratado(Index: Integer; const Astring: string);
begin
  FCPFCNPJContratado := Astring;
  FCPFCNPJContratado_Specified := True;
end;

function OperacaoTransporteResponse2.CPFCNPJContratado_Specified(Index: Integer): boolean;
begin
  Result := FCPFCNPJContratado_Specified;
end;

function OperacaoTransporteResponse2.GetValorFrete(Index: Integer): TXSDecimal;
begin
  Result := FValorFrete;
end;

procedure OperacaoTransporteResponse2.SetValorFrete(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorFrete := ATXSDecimal;
  FValorFrete_Specified := True;
end;

function OperacaoTransporteResponse2.ValorFrete_Specified(Index: Integer): boolean;
begin
  Result := FValorFrete_Specified;
end;

function OperacaoTransporteResponse2.GetValorCombustivel(Index: Integer): TXSDecimal;
begin
  Result := FValorCombustivel;
end;

procedure OperacaoTransporteResponse2.SetValorCombustivel(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorCombustivel := ATXSDecimal;
  FValorCombustivel_Specified := True;
end;

function OperacaoTransporteResponse2.ValorCombustivel_Specified(Index: Integer): boolean;
begin
  Result := FValorCombustivel_Specified;
end;

function OperacaoTransporteResponse2.GetValorPedagio(Index: Integer): TXSDecimal;
begin
  Result := FValorPedagio;
end;

procedure OperacaoTransporteResponse2.SetValorPedagio(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorPedagio := ATXSDecimal;
  FValorPedagio_Specified := True;
end;

function OperacaoTransporteResponse2.ValorPedagio_Specified(Index: Integer): boolean;
begin
  Result := FValorPedagio_Specified;
end;

function OperacaoTransporteResponse2.GetValorDespesas(Index: Integer): TXSDecimal;
begin
  Result := FValorDespesas;
end;

procedure OperacaoTransporteResponse2.SetValorDespesas(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorDespesas := ATXSDecimal;
  FValorDespesas_Specified := True;
end;

function OperacaoTransporteResponse2.ValorDespesas_Specified(Index: Integer): boolean;
begin
  Result := FValorDespesas_Specified;
end;

function OperacaoTransporteResponse2.GetValorImpostoSestSenat(Index: Integer): TXSDecimal;
begin
  Result := FValorImpostoSestSenat;
end;

procedure OperacaoTransporteResponse2.SetValorImpostoSestSenat(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorImpostoSestSenat := ATXSDecimal;
  FValorImpostoSestSenat_Specified := True;
end;

function OperacaoTransporteResponse2.ValorImpostoSestSenat_Specified(Index: Integer): boolean;
begin
  Result := FValorImpostoSestSenat_Specified;
end;

function OperacaoTransporteResponse2.GetValorImpostoIRRF(Index: Integer): TXSDecimal;
begin
  Result := FValorImpostoIRRF;
end;

procedure OperacaoTransporteResponse2.SetValorImpostoIRRF(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorImpostoIRRF := ATXSDecimal;
  FValorImpostoIRRF_Specified := True;
end;

function OperacaoTransporteResponse2.ValorImpostoIRRF_Specified(Index: Integer): boolean;
begin
  Result := FValorImpostoIRRF_Specified;
end;

function OperacaoTransporteResponse2.GetValorImpostoINSS(Index: Integer): TXSDecimal;
begin
  Result := FValorImpostoINSS;
end;

procedure OperacaoTransporteResponse2.SetValorImpostoINSS(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorImpostoINSS := ATXSDecimal;
  FValorImpostoINSS_Specified := True;
end;

function OperacaoTransporteResponse2.ValorImpostoINSS_Specified(Index: Integer): boolean;
begin
  Result := FValorImpostoINSS_Specified;
end;

function OperacaoTransporteResponse2.GetValorImpostoIcmsIssqn(Index: Integer): TXSDecimal;
begin
  Result := FValorImpostoIcmsIssqn;
end;

procedure OperacaoTransporteResponse2.SetValorImpostoIcmsIssqn(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorImpostoIcmsIssqn := ATXSDecimal;
  FValorImpostoIcmsIssqn_Specified := True;
end;

function OperacaoTransporteResponse2.ValorImpostoIcmsIssqn_Specified(Index: Integer): boolean;
begin
  Result := FValorImpostoIcmsIssqn_Specified;
end;

function OperacaoTransporteResponse2.GetParcelaUnica(Index: Integer): Boolean;
begin
  Result := FParcelaUnica;
end;

procedure OperacaoTransporteResponse2.SetParcelaUnica(Index: Integer; const ABoolean: Boolean);
begin
  FParcelaUnica := ABoolean;
  FParcelaUnica_Specified := True;
end;

function OperacaoTransporteResponse2.ParcelaUnica_Specified(Index: Integer): boolean;
begin
  Result := FParcelaUnica_Specified;
end;

function OperacaoTransporteResponse2.GetModoCompraValePedagio(Index: Integer): Integer;
begin
  Result := FModoCompraValePedagio;
end;

procedure OperacaoTransporteResponse2.SetModoCompraValePedagio(Index: Integer; const AInteger: Integer);
begin
  FModoCompraValePedagio := AInteger;
  FModoCompraValePedagio_Specified := True;
end;

function OperacaoTransporteResponse2.ModoCompraValePedagio_Specified(Index: Integer): boolean;
begin
  Result := FModoCompraValePedagio_Specified;
end;

function OperacaoTransporteResponse2.GetCategoriaVeiculo(Index: Integer): Integer;
begin
  Result := FCategoriaVeiculo;
end;

procedure OperacaoTransporteResponse2.SetCategoriaVeiculo(Index: Integer; const AInteger: Integer);
begin
  FCategoriaVeiculo := AInteger;
  FCategoriaVeiculo_Specified := True;
end;

function OperacaoTransporteResponse2.CategoriaVeiculo_Specified(Index: Integer): boolean;
begin
  Result := FCategoriaVeiculo_Specified;
end;

function OperacaoTransporteResponse2.GetNomeMotorista(Index: Integer): string;
begin
  Result := FNomeMotorista;
end;

procedure OperacaoTransporteResponse2.SetNomeMotorista(Index: Integer; const Astring: string);
begin
  FNomeMotorista := Astring;
  FNomeMotorista_Specified := True;
end;

function OperacaoTransporteResponse2.NomeMotorista_Specified(Index: Integer): boolean;
begin
  Result := FNomeMotorista_Specified;
end;

function OperacaoTransporteResponse2.GetCPFMotorista(Index: Integer): string;
begin
  Result := FCPFMotorista;
end;

procedure OperacaoTransporteResponse2.SetCPFMotorista(Index: Integer; const Astring: string);
begin
  FCPFMotorista := Astring;
  FCPFMotorista_Specified := True;
end;

function OperacaoTransporteResponse2.CPFMotorista_Specified(Index: Integer): boolean;
begin
  Result := FCPFMotorista_Specified;
end;

function OperacaoTransporteResponse2.GetRNTRCMotorista(Index: Integer): string;
begin
  Result := FRNTRCMotorista;
end;

procedure OperacaoTransporteResponse2.SetRNTRCMotorista(Index: Integer; const Astring: string);
begin
  FRNTRCMotorista := Astring;
  FRNTRCMotorista_Specified := True;
end;

function OperacaoTransporteResponse2.RNTRCMotorista_Specified(Index: Integer): boolean;
begin
  Result := FRNTRCMotorista_Specified;
end;

function OperacaoTransporteResponse2.GetTriada(Index: Integer): Boolean;
begin
  Result := FTriada;
end;

procedure OperacaoTransporteResponse2.SetTriada(Index: Integer; const ABoolean: Boolean);
begin
  FTriada := ABoolean;
  FTriada_Specified := True;
end;

function OperacaoTransporteResponse2.Triada_Specified(Index: Integer): boolean;
begin
  Result := FTriada_Specified;
end;

function OperacaoTransporteResponse2.GetItemFinanceiro(Index: Integer): string;
begin
  Result := FItemFinanceiro;
end;

procedure OperacaoTransporteResponse2.SetItemFinanceiro(Index: Integer; const Astring: string);
begin
  FItemFinanceiro := Astring;
  FItemFinanceiro_Specified := True;
end;

function OperacaoTransporteResponse2.ItemFinanceiro_Specified(Index: Integer): boolean;
begin
  Result := FItemFinanceiro_Specified;
end;

function OperacaoTransporteResponse2.GetParcelas(Index: Integer): ArrayOfOperacaoTransporteParcelasResponse;
begin
  Result := FParcelas;
end;

procedure OperacaoTransporteResponse2.SetParcelas(Index: Integer; const AArrayOfOperacaoTransporteParcelasResponse: ArrayOfOperacaoTransporteParcelasResponse);
begin
  FParcelas := AArrayOfOperacaoTransporteParcelasResponse;
  FParcelas_Specified := True;
end;

function OperacaoTransporteResponse2.Parcelas_Specified(Index: Integer): boolean;
begin
  Result := FParcelas_Specified;
end;

function OperacaoTransporteResponse2.GetVeiculos(Index: Integer): ArrayOfOperacaoTransporteVeiculoResponse;
begin
  Result := FVeiculos;
end;

procedure OperacaoTransporteResponse2.SetVeiculos(Index: Integer; const AArrayOfOperacaoTransporteVeiculoResponse: ArrayOfOperacaoTransporteVeiculoResponse);
begin
  FVeiculos := AArrayOfOperacaoTransporteVeiculoResponse;
  FVeiculos_Specified := True;
end;

function OperacaoTransporteResponse2.Veiculos_Specified(Index: Integer): boolean;
begin
  Result := FVeiculos_Specified;
end;

function OperacaoTransporteResponse2.GetValorContratado(Index: Integer): TXSDecimal;
begin
  Result := FValorContratado;
end;

procedure OperacaoTransporteResponse2.SetValorContratado(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorContratado := ATXSDecimal;
  FValorContratado_Specified := True;
end;

function OperacaoTransporteResponse2.ValorContratado_Specified(Index: Integer): boolean;
begin
  Result := FValorContratado_Specified;
end;

function OperacaoTransporteResponse2.GetDispensadoPelaANTT(Index: Integer): Boolean;
begin
  Result := FDispensadoPelaANTT;
end;

procedure OperacaoTransporteResponse2.SetDispensadoPelaANTT(Index: Integer; const ABoolean: Boolean);
begin
  FDispensadoPelaANTT := ABoolean;
  FDispensadoPelaANTT_Specified := True;
end;

function OperacaoTransporteResponse2.DispensadoPelaANTT_Specified(Index: Integer): boolean;
begin
  Result := FDispensadoPelaANTT_Specified;
end;

function OperacaoTransporteResponse2.GetTarifasBancarias(Index: Integer): TXSDecimal;
begin
  Result := FTarifasBancarias;
end;

procedure OperacaoTransporteResponse2.SetTarifasBancarias(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FTarifasBancarias := ATXSDecimal;
  FTarifasBancarias_Specified := True;
end;

function OperacaoTransporteResponse2.TarifasBancarias_Specified(Index: Integer): boolean;
begin
  Result := FTarifasBancarias_Specified;
end;

function OperacaoTransporteResponse2.GetValorImpostoPIS(Index: Integer): TXSDecimal;
begin
  Result := FValorImpostoPIS;
end;

procedure OperacaoTransporteResponse2.SetValorImpostoPIS(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorImpostoPIS := ATXSDecimal;
  FValorImpostoPIS_Specified := True;
end;

function OperacaoTransporteResponse2.ValorImpostoPIS_Specified(Index: Integer): boolean;
begin
  Result := FValorImpostoPIS_Specified;
end;

function OperacaoTransporteResponse2.GetValorImpostoCofins(Index: Integer): TXSDecimal;
begin
  Result := FValorImpostoCofins;
end;

procedure OperacaoTransporteResponse2.SetValorImpostoCofins(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorImpostoCofins := ATXSDecimal;
  FValorImpostoCofins_Specified := True;
end;

function OperacaoTransporteResponse2.ValorImpostoCofins_Specified(Index: Integer): boolean;
begin
  Result := FValorImpostoCofins_Specified;
end;

function OperacaoTransporteResponse2.GetBaseCalculoPISCofins(Index: Integer): TXSDecimal;
begin
  Result := FBaseCalculoPISCofins;
end;

procedure OperacaoTransporteResponse2.SetBaseCalculoPISCofins(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FBaseCalculoPISCofins := ATXSDecimal;
  FBaseCalculoPISCofins_Specified := True;
end;

function OperacaoTransporteResponse2.BaseCalculoPISCofins_Specified(Index: Integer): boolean;
begin
  Result := FBaseCalculoPISCofins_Specified;
end;

function OperacaoTransporteResponse2.GetValorDescontoAntecipado(Index: Integer): TXSDecimal;
begin
  Result := FValorDescontoAntecipado;
end;

procedure OperacaoTransporteResponse2.SetValorDescontoAntecipado(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorDescontoAntecipado := ATXSDecimal;
  FValorDescontoAntecipado_Specified := True;
end;

function OperacaoTransporteResponse2.ValorDescontoAntecipado_Specified(Index: Integer): boolean;
begin
  Result := FValorDescontoAntecipado_Specified;
end;

function OperacaoTransporteResponse2.GetIdCompraValePedagio(Index: Integer): Integer;
begin
  Result := FIdCompraValePedagio;
end;

procedure OperacaoTransporteResponse2.SetIdCompraValePedagio(Index: Integer; const AInteger: Integer);
begin
  FIdCompraValePedagio := AInteger;
  FIdCompraValePedagio_Specified := True;
end;

function OperacaoTransporteResponse2.IdCompraValePedagio_Specified(Index: Integer): boolean;
begin
  Result := FIdCompraValePedagio_Specified;
end;

function OperacaoTransporteResponse2.GetCPFCNPJParticipanteDestinatario(Index: Integer): string;
begin
  Result := FCPFCNPJParticipanteDestinatario;
end;

procedure OperacaoTransporteResponse2.SetCPFCNPJParticipanteDestinatario(Index: Integer; const Astring: string);
begin
  FCPFCNPJParticipanteDestinatario := Astring;
  FCPFCNPJParticipanteDestinatario_Specified := True;
end;

function OperacaoTransporteResponse2.CPFCNPJParticipanteDestinatario_Specified(Index: Integer): boolean;
begin
  Result := FCPFCNPJParticipanteDestinatario_Specified;
end;

function OperacaoTransporteResponse2.GetCPFCNPJParticipanteContratante(Index: Integer): string;
begin
  Result := FCPFCNPJParticipanteContratante;
end;

procedure OperacaoTransporteResponse2.SetCPFCNPJParticipanteContratante(Index: Integer; const Astring: string);
begin
  FCPFCNPJParticipanteContratante := Astring;
  FCPFCNPJParticipanteContratante_Specified := True;
end;

function OperacaoTransporteResponse2.CPFCNPJParticipanteContratante_Specified(Index: Integer): boolean;
begin
  Result := FCPFCNPJParticipanteContratante_Specified;
end;

function OperacaoTransporteResponse2.GetCPFCNPJParticipanteSubcontratante(Index: Integer): string;
begin
  Result := FCPFCNPJParticipanteSubcontratante;
end;

procedure OperacaoTransporteResponse2.SetCPFCNPJParticipanteSubcontratante(Index: Integer; const Astring: string);
begin
  FCPFCNPJParticipanteSubcontratante := Astring;
  FCPFCNPJParticipanteSubcontratante_Specified := True;
end;

function OperacaoTransporteResponse2.CPFCNPJParticipanteSubcontratante_Specified(Index: Integer): boolean;
begin
  Result := FCPFCNPJParticipanteSubcontratante_Specified;
end;

function OperacaoTransporteResponse2.GetCPFCNPJParticipanteConsignatario(Index: Integer): string;
begin
  Result := FCPFCNPJParticipanteConsignatario;
end;

procedure OperacaoTransporteResponse2.SetCPFCNPJParticipanteConsignatario(Index: Integer; const Astring: string);
begin
  FCPFCNPJParticipanteConsignatario := Astring;
  FCPFCNPJParticipanteConsignatario_Specified := True;
end;

function OperacaoTransporteResponse2.CPFCNPJParticipanteConsignatario_Specified(Index: Integer): boolean;
begin
  Result := FCPFCNPJParticipanteConsignatario_Specified;
end;

function OperacaoTransporteResponse2.GetNumeroLacreTransporteCombustivel(Index: Integer): string;
begin
  Result := FNumeroLacreTransporteCombustivel;
end;

procedure OperacaoTransporteResponse2.SetNumeroLacreTransporteCombustivel(Index: Integer; const Astring: string);
begin
  FNumeroLacreTransporteCombustivel := Astring;
  FNumeroLacreTransporteCombustivel_Specified := True;
end;

function OperacaoTransporteResponse2.NumeroLacreTransporteCombustivel_Specified(Index: Integer): boolean;
begin
  Result := FNumeroLacreTransporteCombustivel_Specified;
end;

function OperacaoTransporteResponse2.GetParticipantesDestinatarios(Index: Integer): string;
begin
  Result := FParticipantesDestinatarios;
end;

procedure OperacaoTransporteResponse2.SetParticipantesDestinatarios(Index: Integer; const Astring: string);
begin
  FParticipantesDestinatarios := Astring;
  FParticipantesDestinatarios_Specified := True;
end;

function OperacaoTransporteResponse2.ParticipantesDestinatarios_Specified(Index: Integer): boolean;
begin
  Result := FParticipantesDestinatarios_Specified;
end;

function OperacaoTransporteResponse2.GetStatusOperacao(Index: Integer): string;
begin
  Result := FStatusOperacao;
end;

procedure OperacaoTransporteResponse2.SetStatusOperacao(Index: Integer; const Astring: string);
begin
  FStatusOperacao := Astring;
  FStatusOperacao_Specified := True;
end;

function OperacaoTransporteResponse2.StatusOperacao_Specified(Index: Integer): boolean;
begin
  Result := FStatusOperacao_Specified;
end;

function OperacaoTransporteResponse2.GetQuitacao(Index: Integer): Boolean;
begin
  Result := FQuitacao;
end;

procedure OperacaoTransporteResponse2.SetQuitacao(Index: Integer; const ABoolean: Boolean);
begin
  FQuitacao := ABoolean;
  FQuitacao_Specified := True;
end;

function OperacaoTransporteResponse2.Quitacao_Specified(Index: Integer): boolean;
begin
  Result := FQuitacao_Specified;
end;

function OperacaoTransporteResponse2.GetDadosQuitacao(Index: Integer): DadosQuitacaoFreteResponse2;
begin
  Result := FDadosQuitacao;
end;

procedure OperacaoTransporteResponse2.SetDadosQuitacao(Index: Integer; const ADadosQuitacaoFreteResponse2: DadosQuitacaoFreteResponse2);
begin
  FDadosQuitacao := ADadosQuitacaoFreteResponse2;
  FDadosQuitacao_Specified := True;
end;

function OperacaoTransporteResponse2.DadosQuitacao_Specified(Index: Integer): boolean;
begin
  Result := FDadosQuitacao_Specified;
end;

function OperacaoTransporteResponse2.GetMensagemRetorno(Index: Integer): string;
begin
  Result := FMensagemRetorno;
end;

procedure OperacaoTransporteResponse2.SetMensagemRetorno(Index: Integer; const Astring: string);
begin
  FMensagemRetorno := Astring;
  FMensagemRetorno_Specified := True;
end;

function OperacaoTransporteResponse2.MensagemRetorno_Specified(Index: Integer): boolean;
begin
  Result := FMensagemRetorno_Specified;
end;

function OperacaoTransporteResponse2.GetDocumentoValePedagio(Index: Integer): string;
begin
  Result := FDocumentoValePedagio;
end;

procedure OperacaoTransporteResponse2.SetDocumentoValePedagio(Index: Integer; const Astring: string);
begin
  FDocumentoValePedagio := Astring;
  FDocumentoValePedagio_Specified := True;
end;

function OperacaoTransporteResponse2.DocumentoValePedagio_Specified(Index: Integer): boolean;
begin
  Result := FDocumentoValePedagio_Specified;
end;

function OperacaoTransporteResponse2.GetChaveQuitacao(Index: Integer): string;
begin
  Result := FChaveQuitacao;
end;

procedure OperacaoTransporteResponse2.SetChaveQuitacao(Index: Integer; const Astring: string);
begin
  FChaveQuitacao := Astring;
  FChaveQuitacao_Specified := True;
end;

function OperacaoTransporteResponse2.ChaveQuitacao_Specified(Index: Integer): boolean;
begin
  Result := FChaveQuitacao_Specified;
end;

function OperacaoTransporteResponse2.GetValorImpostoISS(Index: Integer): TXSDecimal;
begin
  Result := FValorImpostoISS;
end;

procedure OperacaoTransporteResponse2.SetValorImpostoISS(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorImpostoISS := ATXSDecimal;
  FValorImpostoISS_Specified := True;
end;

function OperacaoTransporteResponse2.ValorImpostoISS_Specified(Index: Integer): boolean;
begin
  Result := FValorImpostoISS_Specified;
end;

function DadosQuitacaoFreteResponse2.GetValorMercadoria(Index: Integer): TXSDecimal;
begin
  Result := FValorMercadoria;
end;

procedure DadosQuitacaoFreteResponse2.SetValorMercadoria(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorMercadoria := ATXSDecimal;
  FValorMercadoria_Specified := True;
end;

function DadosQuitacaoFreteResponse2.ValorMercadoria_Specified(Index: Integer): boolean;
begin
  Result := FValorMercadoria_Specified;
end;

function DadosQuitacaoFreteResponse2.GetPesoCarregadoMercadoria(Index: Integer): TXSDecimal;
begin
  Result := FPesoCarregadoMercadoria;
end;

procedure DadosQuitacaoFreteResponse2.SetPesoCarregadoMercadoria(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FPesoCarregadoMercadoria := ATXSDecimal;
  FPesoCarregadoMercadoria_Specified := True;
end;

function DadosQuitacaoFreteResponse2.PesoCarregadoMercadoria_Specified(Index: Integer): boolean;
begin
  Result := FPesoCarregadoMercadoria_Specified;
end;

function DadosQuitacaoFreteResponse2.GetQuantidadeCarregada(Index: Integer): Integer;
begin
  Result := FQuantidadeCarregada;
end;

procedure DadosQuitacaoFreteResponse2.SetQuantidadeCarregada(Index: Integer; const AInteger: Integer);
begin
  FQuantidadeCarregada := AInteger;
  FQuantidadeCarregada_Specified := True;
end;

function DadosQuitacaoFreteResponse2.QuantidadeCarregada_Specified(Index: Integer): boolean;
begin
  Result := FQuantidadeCarregada_Specified;
end;

function DadosQuitacaoFreteResponse2.GetTipoCalculoAvaria(Index: Integer): Integer;
begin
  Result := FTipoCalculoAvaria;
end;

procedure DadosQuitacaoFreteResponse2.SetTipoCalculoAvaria(Index: Integer; const AInteger: Integer);
begin
  FTipoCalculoAvaria := AInteger;
  FTipoCalculoAvaria_Specified := True;
end;

function DadosQuitacaoFreteResponse2.TipoCalculoAvaria_Specified(Index: Integer): boolean;
begin
  Result := FTipoCalculoAvaria_Specified;
end;

function DadosQuitacaoFreteResponse2.GetEncerraNaANTT(Index: Integer): Boolean;
begin
  Result := FEncerraNaANTT;
end;

procedure DadosQuitacaoFreteResponse2.SetEncerraNaANTT(Index: Integer; const ABoolean: Boolean);
begin
  FEncerraNaANTT := ABoolean;
  FEncerraNaANTT_Specified := True;
end;

function DadosQuitacaoFreteResponse2.EncerraNaANTT_Specified(Index: Integer): boolean;
begin
  Result := FEncerraNaANTT_Specified;
end;

function DadosQuitacaoFreteResponse2.GetPorcentagemToleranciaPeso(Index: Integer): TXSDecimal;
begin
  Result := FPorcentagemToleranciaPeso;
end;

procedure DadosQuitacaoFreteResponse2.SetPorcentagemToleranciaPeso(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FPorcentagemToleranciaPeso := ATXSDecimal;
  FPorcentagemToleranciaPeso_Specified := True;
end;

function DadosQuitacaoFreteResponse2.PorcentagemToleranciaPeso_Specified(Index: Integer): boolean;
begin
  Result := FPorcentagemToleranciaPeso_Specified;
end;

function DadosQuitacaoFreteResponse2.GetTipoToleranciaPeso(Index: Integer): Integer;
begin
  Result := FTipoToleranciaPeso;
end;

procedure DadosQuitacaoFreteResponse2.SetTipoToleranciaPeso(Index: Integer; const AInteger: Integer);
begin
  FTipoToleranciaPeso := AInteger;
  FTipoToleranciaPeso_Specified := True;
end;

function DadosQuitacaoFreteResponse2.TipoToleranciaPeso_Specified(Index: Integer): boolean;
begin
  Result := FTipoToleranciaPeso_Specified;
end;

function DadosQuitacaoFreteResponse2.GetPorcetagemPesoAMaior(Index: Integer): TXSDecimal;
begin
  Result := FPorcetagemPesoAMaior;
end;

procedure DadosQuitacaoFreteResponse2.SetPorcetagemPesoAMaior(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FPorcetagemPesoAMaior := ATXSDecimal;
  FPorcetagemPesoAMaior_Specified := True;
end;

function DadosQuitacaoFreteResponse2.PorcetagemPesoAMaior_Specified(Index: Integer): boolean;
begin
  Result := FPorcetagemPesoAMaior_Specified;
end;

function DadosQuitacaoFreteResponse2.GetDocumentosQuitacao(Index: Integer): ArrayOfDadosQuitacaoFreteDocumentosResponse;
begin
  Result := FDocumentosQuitacao;
end;

procedure DadosQuitacaoFreteResponse2.SetDocumentosQuitacao(Index: Integer; const AArrayOfDadosQuitacaoFreteDocumentosResponse: ArrayOfDadosQuitacaoFreteDocumentosResponse);
begin
  FDocumentosQuitacao := AArrayOfDadosQuitacaoFreteDocumentosResponse;
  FDocumentosQuitacao_Specified := True;
end;

function DadosQuitacaoFreteResponse2.DocumentosQuitacao_Specified(Index: Integer): boolean;
begin
  Result := FDocumentosQuitacao_Specified;
end;

function DadosQuitacaoFreteResponse2.GetIdsTerminaisCarregamento(Index: Integer): ArrayOfint;
begin
  Result := FIdsTerminaisCarregamento;
end;

procedure DadosQuitacaoFreteResponse2.SetIdsTerminaisCarregamento(Index: Integer; const AArrayOfint: ArrayOfint);
begin
  FIdsTerminaisCarregamento := AArrayOfint;
  FIdsTerminaisCarregamento_Specified := True;
end;

function DadosQuitacaoFreteResponse2.IdsTerminaisCarregamento_Specified(Index: Integer): boolean;
begin
  Result := FIdsTerminaisCarregamento_Specified;
end;

function DadosQuitacaoFreteResponse2.GetQuitaEmTodosTerminais(Index: Integer): Boolean;
begin
  Result := FQuitaEmTodosTerminais;
end;

procedure DadosQuitacaoFreteResponse2.SetQuitaEmTodosTerminais(Index: Integer; const ABoolean: Boolean);
begin
  FQuitaEmTodosTerminais := ABoolean;
  FQuitaEmTodosTerminais_Specified := True;
end;

function DadosQuitacaoFreteResponse2.QuitaEmTodosTerminais_Specified(Index: Integer): boolean;
begin
  Result := FQuitaEmTodosTerminais_Specified;
end;

function DadosQuitacaoFreteRequest2.GetValorMercadoria(Index: Integer): TXSDecimal;
begin
  Result := FValorMercadoria;
end;

procedure DadosQuitacaoFreteRequest2.SetValorMercadoria(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorMercadoria := ATXSDecimal;
  FValorMercadoria_Specified := True;
end;

function DadosQuitacaoFreteRequest2.ValorMercadoria_Specified(Index: Integer): boolean;
begin
  Result := FValorMercadoria_Specified;
end;

function DadosQuitacaoFreteRequest2.GetPesoCarregadoMercadoria(Index: Integer): TXSDecimal;
begin
  Result := FPesoCarregadoMercadoria;
end;

procedure DadosQuitacaoFreteRequest2.SetPesoCarregadoMercadoria(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FPesoCarregadoMercadoria := ATXSDecimal;
  FPesoCarregadoMercadoria_Specified := True;
end;

function DadosQuitacaoFreteRequest2.PesoCarregadoMercadoria_Specified(Index: Integer): boolean;
begin
  Result := FPesoCarregadoMercadoria_Specified;
end;

function DadosQuitacaoFreteRequest2.GetQuantidadeCarregada(Index: Integer): Integer;
begin
  Result := FQuantidadeCarregada;
end;

procedure DadosQuitacaoFreteRequest2.SetQuantidadeCarregada(Index: Integer; const AInteger: Integer);
begin
  FQuantidadeCarregada := AInteger;
  FQuantidadeCarregada_Specified := True;
end;

function DadosQuitacaoFreteRequest2.QuantidadeCarregada_Specified(Index: Integer): boolean;
begin
  Result := FQuantidadeCarregada_Specified;
end;

function DadosQuitacaoFreteRequest2.GetTipoCalculoAvaria(Index: Integer): Integer;
begin
  Result := FTipoCalculoAvaria;
end;

procedure DadosQuitacaoFreteRequest2.SetTipoCalculoAvaria(Index: Integer; const AInteger: Integer);
begin
  FTipoCalculoAvaria := AInteger;
  FTipoCalculoAvaria_Specified := True;
end;

function DadosQuitacaoFreteRequest2.TipoCalculoAvaria_Specified(Index: Integer): boolean;
begin
  Result := FTipoCalculoAvaria_Specified;
end;

function DadosQuitacaoFreteRequest2.GetEncerraNaANTT(Index: Integer): Boolean;
begin
  Result := FEncerraNaANTT;
end;

procedure DadosQuitacaoFreteRequest2.SetEncerraNaANTT(Index: Integer; const ABoolean: Boolean);
begin
  FEncerraNaANTT := ABoolean;
  FEncerraNaANTT_Specified := True;
end;

function DadosQuitacaoFreteRequest2.EncerraNaANTT_Specified(Index: Integer): boolean;
begin
  Result := FEncerraNaANTT_Specified;
end;

function DadosQuitacaoFreteRequest2.GetPorcentagemToleranciaPeso(Index: Integer): TXSDecimal;
begin
  Result := FPorcentagemToleranciaPeso;
end;

procedure DadosQuitacaoFreteRequest2.SetPorcentagemToleranciaPeso(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FPorcentagemToleranciaPeso := ATXSDecimal;
  FPorcentagemToleranciaPeso_Specified := True;
end;

function DadosQuitacaoFreteRequest2.PorcentagemToleranciaPeso_Specified(Index: Integer): boolean;
begin
  Result := FPorcentagemToleranciaPeso_Specified;
end;

function DadosQuitacaoFreteRequest2.GetTipoToleranciaPeso(Index: Integer): Integer;
begin
  Result := FTipoToleranciaPeso;
end;

procedure DadosQuitacaoFreteRequest2.SetTipoToleranciaPeso(Index: Integer; const AInteger: Integer);
begin
  FTipoToleranciaPeso := AInteger;
  FTipoToleranciaPeso_Specified := True;
end;

function DadosQuitacaoFreteRequest2.TipoToleranciaPeso_Specified(Index: Integer): boolean;
begin
  Result := FTipoToleranciaPeso_Specified;
end;

function DadosQuitacaoFreteRequest2.GetPorcetagemPesoAMaior(Index: Integer): TXSDecimal;
begin
  Result := FPorcetagemPesoAMaior;
end;

procedure DadosQuitacaoFreteRequest2.SetPorcetagemPesoAMaior(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FPorcetagemPesoAMaior := ATXSDecimal;
  FPorcetagemPesoAMaior_Specified := True;
end;

function DadosQuitacaoFreteRequest2.PorcetagemPesoAMaior_Specified(Index: Integer): boolean;
begin
  Result := FPorcetagemPesoAMaior_Specified;
end;

function DadosQuitacaoFreteRequest2.GetDocumentosQuitacao(Index: Integer): ArrayOfDadosQuitacaoFreteDocumentosRequest;
begin
  Result := FDocumentosQuitacao;
end;

procedure DadosQuitacaoFreteRequest2.SetDocumentosQuitacao(Index: Integer; const AArrayOfDadosQuitacaoFreteDocumentosRequest: ArrayOfDadosQuitacaoFreteDocumentosRequest);
begin
  FDocumentosQuitacao := AArrayOfDadosQuitacaoFreteDocumentosRequest;
  FDocumentosQuitacao_Specified := True;
end;

function DadosQuitacaoFreteRequest2.DocumentosQuitacao_Specified(Index: Integer): boolean;
begin
  Result := FDocumentosQuitacao_Specified;
end;

function DadosQuitacaoFreteRequest2.GetIdsTerminaisCarregamento(Index: Integer): ArrayOfint;
begin
  Result := FIdsTerminaisCarregamento;
end;

procedure DadosQuitacaoFreteRequest2.SetIdsTerminaisCarregamento(Index: Integer; const AArrayOfint: ArrayOfint);
begin
  FIdsTerminaisCarregamento := AArrayOfint;
  FIdsTerminaisCarregamento_Specified := True;
end;

function DadosQuitacaoFreteRequest2.IdsTerminaisCarregamento_Specified(Index: Integer): boolean;
begin
  Result := FIdsTerminaisCarregamento_Specified;
end;

function DadosQuitacaoFreteRequest2.GetQuitaEmTodosTerminais(Index: Integer): Boolean;
begin
  Result := FQuitaEmTodosTerminais;
end;

procedure DadosQuitacaoFreteRequest2.SetQuitaEmTodosTerminais(Index: Integer; const ABoolean: Boolean);
begin
  FQuitaEmTodosTerminais := ABoolean;
  FQuitaEmTodosTerminais_Specified := True;
end;

function DadosQuitacaoFreteRequest2.QuitaEmTodosTerminais_Specified(Index: Integer): boolean;
begin
  Result := FQuitaEmTodosTerminais_Specified;
end;

function DeclaracaoOperacaoTransporteResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure DeclaracaoOperacaoTransporteResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function DeclaracaoOperacaoTransporteResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function DeclaracaoOperacaoTransporteResponse2.GetIdOperacaoTransporte(Index: Integer): Integer;
begin
  Result := FIdOperacaoTransporte;
end;

procedure DeclaracaoOperacaoTransporteResponse2.SetIdOperacaoTransporte(Index: Integer; const AInteger: Integer);
begin
  FIdOperacaoTransporte := AInteger;
  FIdOperacaoTransporte_Specified := True;
end;

function DeclaracaoOperacaoTransporteResponse2.IdOperacaoTransporte_Specified(Index: Integer): boolean;
begin
  Result := FIdOperacaoTransporte_Specified;
end;

function DeclaracaoOperacaoTransporteResponse2.GetDataHoraRegistro(Index: Integer): TXSDateTime;
begin
  Result := FDataHoraRegistro;
end;

procedure DeclaracaoOperacaoTransporteResponse2.SetDataHoraRegistro(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDataHoraRegistro := ATXSDateTime;
  FDataHoraRegistro_Specified := True;
end;

function DeclaracaoOperacaoTransporteResponse2.DataHoraRegistro_Specified(Index: Integer): boolean;
begin
  Result := FDataHoraRegistro_Specified;
end;

function DeclaracaoOperacaoTransporteResponse2.GetNumeroCIOT(Index: Integer): string;
begin
  Result := FNumeroCIOT;
end;

procedure DeclaracaoOperacaoTransporteResponse2.SetNumeroCIOT(Index: Integer; const Astring: string);
begin
  FNumeroCIOT := Astring;
  FNumeroCIOT_Specified := True;
end;

function DeclaracaoOperacaoTransporteResponse2.NumeroCIOT_Specified(Index: Integer): boolean;
begin
  Result := FNumeroCIOT_Specified;
end;

function DeclaracaoOperacaoTransporteResponse2.GetProtocoloCIOT(Index: Integer): string;
begin
  Result := FProtocoloCIOT;
end;

procedure DeclaracaoOperacaoTransporteResponse2.SetProtocoloCIOT(Index: Integer; const Astring: string);
begin
  FProtocoloCIOT := Astring;
  FProtocoloCIOT_Specified := True;
end;

function DeclaracaoOperacaoTransporteResponse2.ProtocoloCIOT_Specified(Index: Integer): boolean;
begin
  Result := FProtocoloCIOT_Specified;
end;

function DeclaracaoOperacaoTransporteResponse2.GetDispensadoPelaANTT(Index: Integer): Boolean;
begin
  Result := FDispensadoPelaANTT;
end;

procedure DeclaracaoOperacaoTransporteResponse2.SetDispensadoPelaANTT(Index: Integer; const ABoolean: Boolean);
begin
  FDispensadoPelaANTT := ABoolean;
  FDispensadoPelaANTT_Specified := True;
end;

function DeclaracaoOperacaoTransporteResponse2.DispensadoPelaANTT_Specified(Index: Integer): boolean;
begin
  Result := FDispensadoPelaANTT_Specified;
end;

function DeclaracaoOperacaoTransporteResponse2.GetObservacoesANTT(Index: Integer): string;
begin
  Result := FObservacoesANTT;
end;

procedure DeclaracaoOperacaoTransporteResponse2.SetObservacoesANTT(Index: Integer; const Astring: string);
begin
  FObservacoesANTT := Astring;
  FObservacoesANTT_Specified := True;
end;

function DeclaracaoOperacaoTransporteResponse2.ObservacoesANTT_Specified(Index: Integer): boolean;
begin
  Result := FObservacoesANTT_Specified;
end;

function DeclaracaoOperacaoTransporteResponse2.GetIdCompraValePedagio(Index: Integer): Integer;
begin
  Result := FIdCompraValePedagio;
end;

procedure DeclaracaoOperacaoTransporteResponse2.SetIdCompraValePedagio(Index: Integer; const AInteger: Integer);
begin
  FIdCompraValePedagio := AInteger;
  FIdCompraValePedagio_Specified := True;
end;

function DeclaracaoOperacaoTransporteResponse2.IdCompraValePedagio_Specified(Index: Integer): boolean;
begin
  Result := FIdCompraValePedagio_Specified;
end;

function DeclaracaoOperacaoTransporteResponse2.GetModoCompraValePedagio(Index: Integer): Integer;
begin
  Result := FModoCompraValePedagio;
end;

procedure DeclaracaoOperacaoTransporteResponse2.SetModoCompraValePedagio(Index: Integer; const AInteger: Integer);
begin
  FModoCompraValePedagio := AInteger;
  FModoCompraValePedagio_Specified := True;
end;

function DeclaracaoOperacaoTransporteResponse2.ModoCompraValePedagio_Specified(Index: Integer): boolean;
begin
  Result := FModoCompraValePedagio_Specified;
end;

function DeclaracaoOperacaoTransporteResponse2.GetIdsParcelasOperacaoTransporte(Index: Integer): ArrayOfint;
begin
  Result := FIdsParcelasOperacaoTransporte;
end;

procedure DeclaracaoOperacaoTransporteResponse2.SetIdsParcelasOperacaoTransporte(Index: Integer; const AArrayOfint: ArrayOfint);
begin
  FIdsParcelasOperacaoTransporte := AArrayOfint;
  FIdsParcelasOperacaoTransporte_Specified := True;
end;

function DeclaracaoOperacaoTransporteResponse2.IdsParcelasOperacaoTransporte_Specified(Index: Integer): boolean;
begin
  Result := FIdsParcelasOperacaoTransporte_Specified;
end;

function DadosQuitacaoFreteDocumentosRequest2.GetNomeDocumento(Index: Integer): string;
begin
  Result := FNomeDocumento;
end;

procedure DadosQuitacaoFreteDocumentosRequest2.SetNomeDocumento(Index: Integer; const Astring: string);
begin
  FNomeDocumento := Astring;
  FNomeDocumento_Specified := True;
end;

function DadosQuitacaoFreteDocumentosRequest2.NomeDocumento_Specified(Index: Integer): boolean;
begin
  Result := FNomeDocumento_Specified;
end;

function DadosQuitacaoFreteDocumentosRequest2.GetNumeroIdentificadorDocumento(Index: Integer): string;
begin
  Result := FNumeroIdentificadorDocumento;
end;

procedure DadosQuitacaoFreteDocumentosRequest2.SetNumeroIdentificadorDocumento(Index: Integer; const Astring: string);
begin
  FNumeroIdentificadorDocumento := Astring;
  FNumeroIdentificadorDocumento_Specified := True;
end;

function DadosQuitacaoFreteDocumentosRequest2.NumeroIdentificadorDocumento_Specified(Index: Integer): boolean;
begin
  Result := FNumeroIdentificadorDocumento_Specified;
end;

function DadosQuitacaoFreteDocumentosRequest2.GetObrigatorio(Index: Integer): Boolean;
begin
  Result := FObrigatorio;
end;

procedure DadosQuitacaoFreteDocumentosRequest2.SetObrigatorio(Index: Integer; const ABoolean: Boolean);
begin
  FObrigatorio := ABoolean;
  FObrigatorio_Specified := True;
end;

function DadosQuitacaoFreteDocumentosRequest2.Obrigatorio_Specified(Index: Integer): boolean;
begin
  Result := FObrigatorio_Specified;
end;

function DadosQuitacaoFreteDocumentosRequest2.GetDocumentoGeradoDestino(Index: Integer): Boolean;
begin
  Result := FDocumentoGeradoDestino;
end;

procedure DadosQuitacaoFreteDocumentosRequest2.SetDocumentoGeradoDestino(Index: Integer; const ABoolean: Boolean);
begin
  FDocumentoGeradoDestino := ABoolean;
  FDocumentoGeradoDestino_Specified := True;
end;

function DadosQuitacaoFreteDocumentosRequest2.DocumentoGeradoDestino_Specified(Index: Integer): boolean;
begin
  Result := FDocumentoGeradoDestino_Specified;
end;

function BuscaPagamentoAvulsoCartaoResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure BuscaPagamentoAvulsoCartaoResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function BuscaPagamentoAvulsoCartaoResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function BuscaPagamentoAvulsoCartaoResponse2.GetDataCompra(Index: Integer): TXSDateTime;
begin
  Result := FDataCompra;
end;

procedure BuscaPagamentoAvulsoCartaoResponse2.SetDataCompra(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDataCompra := ATXSDateTime;
  FDataCompra_Specified := True;
end;

function BuscaPagamentoAvulsoCartaoResponse2.DataCompra_Specified(Index: Integer): boolean;
begin
  Result := FDataCompra_Specified;
end;

function BuscaPagamentoAvulsoCartaoResponse2.GetNumeroCartao(Index: Integer): string;
begin
  Result := FNumeroCartao;
end;

procedure BuscaPagamentoAvulsoCartaoResponse2.SetNumeroCartao(Index: Integer; const Astring: string);
begin
  FNumeroCartao := Astring;
  FNumeroCartao_Specified := True;
end;

function BuscaPagamentoAvulsoCartaoResponse2.NumeroCartao_Specified(Index: Integer): boolean;
begin
  Result := FNumeroCartao_Specified;
end;

function BuscaPagamentoAvulsoCartaoResponse2.GetValor(Index: Integer): TXSDecimal;
begin
  Result := FValor;
end;

procedure BuscaPagamentoAvulsoCartaoResponse2.SetValor(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValor := ATXSDecimal;
  FValor_Specified := True;
end;

function BuscaPagamentoAvulsoCartaoResponse2.Valor_Specified(Index: Integer): boolean;
begin
  Result := FValor_Specified;
end;

function BuscaPagamentoAvulsoCartaoResponse2.GetComentario(Index: Integer): string;
begin
  Result := FComentario;
end;

procedure BuscaPagamentoAvulsoCartaoResponse2.SetComentario(Index: Integer; const Astring: string);
begin
  FComentario := Astring;
  FComentario_Specified := True;
end;

function BuscaPagamentoAvulsoCartaoResponse2.Comentario_Specified(Index: Integer): boolean;
begin
  Result := FComentario_Specified;
end;

function BuscaPagamentoAvulsoCartaoResponse2.GetSituacaoTransacao(Index: Integer): string;
begin
  Result := FSituacaoTransacao;
end;

procedure BuscaPagamentoAvulsoCartaoResponse2.SetSituacaoTransacao(Index: Integer; const Astring: string);
begin
  FSituacaoTransacao := Astring;
  FSituacaoTransacao_Specified := True;
end;

function BuscaPagamentoAvulsoCartaoResponse2.SituacaoTransacao_Specified(Index: Integer): boolean;
begin
  Result := FSituacaoTransacao_Specified;
end;

function BuscaPagamentoAvulsoCartaoResponse2.GetItemFinanceiro(Index: Integer): string;
begin
  Result := FItemFinanceiro;
end;

procedure BuscaPagamentoAvulsoCartaoResponse2.SetItemFinanceiro(Index: Integer; const Astring: string);
begin
  FItemFinanceiro := Astring;
  FItemFinanceiro_Specified := True;
end;

function BuscaPagamentoAvulsoCartaoResponse2.ItemFinanceiro_Specified(Index: Integer): boolean;
begin
  Result := FItemFinanceiro_Specified;
end;

function BuscaPagamentoAvulsoCartaoResponse2.GetNumeroDocumentoEmbarque(Index: Integer): string;
begin
  Result := FNumeroDocumentoEmbarque;
end;

procedure BuscaPagamentoAvulsoCartaoResponse2.SetNumeroDocumentoEmbarque(Index: Integer; const Astring: string);
begin
  FNumeroDocumentoEmbarque := Astring;
  FNumeroDocumentoEmbarque_Specified := True;
end;

function BuscaPagamentoAvulsoCartaoResponse2.NumeroDocumentoEmbarque_Specified(Index: Integer): boolean;
begin
  Result := FNumeroDocumentoEmbarque_Specified;
end;

function BuscaPagamentoAvulsoCartaoResponse2.GetPlaca(Index: Integer): string;
begin
  Result := FPlaca;
end;

procedure BuscaPagamentoAvulsoCartaoResponse2.SetPlaca(Index: Integer; const Astring: string);
begin
  FPlaca := Astring;
  FPlaca_Specified := True;
end;

function BuscaPagamentoAvulsoCartaoResponse2.Placa_Specified(Index: Integer): boolean;
begin
  Result := FPlaca_Specified;
end;

function CombustivelAvulsoCartaoRequest2.GetNumeroCartao(Index: Integer): string;
begin
  Result := FNumeroCartao;
end;

procedure CombustivelAvulsoCartaoRequest2.SetNumeroCartao(Index: Integer; const Astring: string);
begin
  FNumeroCartao := Astring;
  FNumeroCartao_Specified := True;
end;

function CombustivelAvulsoCartaoRequest2.NumeroCartao_Specified(Index: Integer): boolean;
begin
  Result := FNumeroCartao_Specified;
end;

function CombustivelAvulsoCartaoRequest2.GetValor(Index: Integer): TXSDecimal;
begin
  Result := FValor;
end;

procedure CombustivelAvulsoCartaoRequest2.SetValor(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValor := ATXSDecimal;
  FValor_Specified := True;
end;

function CombustivelAvulsoCartaoRequest2.Valor_Specified(Index: Integer): boolean;
begin
  Result := FValor_Specified;
end;

function CombustivelAvulsoCartaoRequest2.GetComentario(Index: Integer): string;
begin
  Result := FComentario;
end;

procedure CombustivelAvulsoCartaoRequest2.SetComentario(Index: Integer; const Astring: string);
begin
  FComentario := Astring;
  FComentario_Specified := True;
end;

function CombustivelAvulsoCartaoRequest2.Comentario_Specified(Index: Integer): boolean;
begin
  Result := FComentario_Specified;
end;

function CombustivelAvulsoCartaoRequest2.GetIdCentroDeCusto(Index: Integer): Integer;
begin
  Result := FIdCentroDeCusto;
end;

procedure CombustivelAvulsoCartaoRequest2.SetIdCentroDeCusto(Index: Integer; const AInteger: Integer);
begin
  FIdCentroDeCusto := AInteger;
  FIdCentroDeCusto_Specified := True;
end;

function CombustivelAvulsoCartaoRequest2.IdCentroDeCusto_Specified(Index: Integer): boolean;
begin
  Result := FIdCentroDeCusto_Specified;
end;

function CombustivelAvulsoCartaoRequest2.GetNSU(Index: Integer): Int64;
begin
  Result := FNSU;
end;

procedure CombustivelAvulsoCartaoRequest2.SetNSU(Index: Integer; const AInt64: Int64);
begin
  FNSU := AInt64;
  FNSU_Specified := True;
end;

function CombustivelAvulsoCartaoRequest2.NSU_Specified(Index: Integer): boolean;
begin
  Result := FNSU_Specified;
end;

function CombustivelAvulsoCartaoRequest2.GetIdIntegrador(Index: Integer): string;
begin
  Result := FIdIntegrador;
end;

procedure CombustivelAvulsoCartaoRequest2.SetIdIntegrador(Index: Integer; const Astring: string);
begin
  FIdIntegrador := Astring;
  FIdIntegrador_Specified := True;
end;

function CombustivelAvulsoCartaoRequest2.IdIntegrador_Specified(Index: Integer): boolean;
begin
  Result := FIdIntegrador_Specified;
end;

function CombustivelAvulsoCartaoRequest2.GetProcessarManualmente(Index: Integer): Boolean;
begin
  Result := FProcessarManualmente;
end;

procedure CombustivelAvulsoCartaoRequest2.SetProcessarManualmente(Index: Integer; const ABoolean: Boolean);
begin
  FProcessarManualmente := ABoolean;
  FProcessarManualmente_Specified := True;
end;

function CombustivelAvulsoCartaoRequest2.ProcessarManualmente_Specified(Index: Integer): boolean;
begin
  Result := FProcessarManualmente_Specified;
end;

function CombustivelAvulsoCartaoRequest2.GetNumeroDocumentoEmbarque(Index: Integer): string;
begin
  Result := FNumeroDocumentoEmbarque;
end;

procedure CombustivelAvulsoCartaoRequest2.SetNumeroDocumentoEmbarque(Index: Integer; const Astring: string);
begin
  FNumeroDocumentoEmbarque := Astring;
  FNumeroDocumentoEmbarque_Specified := True;
end;

function CombustivelAvulsoCartaoRequest2.NumeroDocumentoEmbarque_Specified(Index: Integer): boolean;
begin
  Result := FNumeroDocumentoEmbarque_Specified;
end;

function CombustivelAvulsoCartaoRequest2.GetPlaca(Index: Integer): string;
begin
  Result := FPlaca;
end;

procedure CombustivelAvulsoCartaoRequest2.SetPlaca(Index: Integer; const Astring: string);
begin
  FPlaca := Astring;
  FPlaca_Specified := True;
end;

function CombustivelAvulsoCartaoRequest2.Placa_Specified(Index: Integer): boolean;
begin
  Result := FPlaca_Specified;
end;

function CombustivelAvulsoCartaoRequest2.GetItemFinanceiro(Index: Integer): string;
begin
  Result := FItemFinanceiro;
end;

procedure CombustivelAvulsoCartaoRequest2.SetItemFinanceiro(Index: Integer; const Astring: string);
begin
  FItemFinanceiro := Astring;
  FItemFinanceiro_Specified := True;
end;

function CombustivelAvulsoCartaoRequest2.ItemFinanceiro_Specified(Index: Integer): boolean;
begin
  Result := FItemFinanceiro_Specified;
end;

function CombustivelAvulsoCartaoResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure CombustivelAvulsoCartaoResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function CombustivelAvulsoCartaoResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function CombustivelAvulsoCartaoResponse2.GetIdTransacaoCartao(Index: Integer): Integer;
begin
  Result := FIdTransacaoCartao;
end;

procedure CombustivelAvulsoCartaoResponse2.SetIdTransacaoCartao(Index: Integer; const AInteger: Integer);
begin
  FIdTransacaoCartao := AInteger;
  FIdTransacaoCartao_Specified := True;
end;

function CombustivelAvulsoCartaoResponse2.IdTransacaoCartao_Specified(Index: Integer): boolean;
begin
  Result := FIdTransacaoCartao_Specified;
end;

function CombustivelAvulsoCartaoResponse2.GetDataHoraProcessamento(Index: Integer): TXSDateTime;
begin
  Result := FDataHoraProcessamento;
end;

procedure CombustivelAvulsoCartaoResponse2.SetDataHoraProcessamento(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDataHoraProcessamento := ATXSDateTime;
  FDataHoraProcessamento_Specified := True;
end;

function CombustivelAvulsoCartaoResponse2.DataHoraProcessamento_Specified(Index: Integer): boolean;
begin
  Result := FDataHoraProcessamento_Specified;
end;

function CombustivelAvulsoCartaoResponse2.GetProcessamentoOffline(Index: Integer): Boolean;
begin
  Result := FProcessamentoOffline;
end;

procedure CombustivelAvulsoCartaoResponse2.SetProcessamentoOffline(Index: Integer; const ABoolean: Boolean);
begin
  FProcessamentoOffline := ABoolean;
  FProcessamentoOffline_Specified := True;
end;

function CombustivelAvulsoCartaoResponse2.ProcessamentoOffline_Specified(Index: Integer): boolean;
begin
  Result := FProcessamentoOffline_Specified;
end;

function PagamentoAvulsoCartaoResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure PagamentoAvulsoCartaoResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function PagamentoAvulsoCartaoResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function PagamentoAvulsoCartaoResponse2.GetIdTransacaoCartao(Index: Integer): Integer;
begin
  Result := FIdTransacaoCartao;
end;

procedure PagamentoAvulsoCartaoResponse2.SetIdTransacaoCartao(Index: Integer; const AInteger: Integer);
begin
  FIdTransacaoCartao := AInteger;
  FIdTransacaoCartao_Specified := True;
end;

function PagamentoAvulsoCartaoResponse2.IdTransacaoCartao_Specified(Index: Integer): boolean;
begin
  Result := FIdTransacaoCartao_Specified;
end;

function PagamentoAvulsoCartaoResponse2.GetDataHoraProcessamento(Index: Integer): TXSDateTime;
begin
  Result := FDataHoraProcessamento;
end;

procedure PagamentoAvulsoCartaoResponse2.SetDataHoraProcessamento(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDataHoraProcessamento := ATXSDateTime;
  FDataHoraProcessamento_Specified := True;
end;

function PagamentoAvulsoCartaoResponse2.DataHoraProcessamento_Specified(Index: Integer): boolean;
begin
  Result := FDataHoraProcessamento_Specified;
end;

function PagamentoAvulsoCartaoResponse2.GetProcessamentoOffline(Index: Integer): Boolean;
begin
  Result := FProcessamentoOffline;
end;

procedure PagamentoAvulsoCartaoResponse2.SetProcessamentoOffline(Index: Integer; const ABoolean: Boolean);
begin
  FProcessamentoOffline := ABoolean;
  FProcessamentoOffline_Specified := True;
end;

function PagamentoAvulsoCartaoResponse2.ProcessamentoOffline_Specified(Index: Integer): boolean;
begin
  Result := FProcessamentoOffline_Specified;
end;

function BuscaPagamentoAvulsoCartaoRequest2.GetQuantidadeItensPorPagina(Index: Integer): Integer;
begin
  Result := FQuantidadeItensPorPagina;
end;

procedure BuscaPagamentoAvulsoCartaoRequest2.SetQuantidadeItensPorPagina(Index: Integer; const AInteger: Integer);
begin
  FQuantidadeItensPorPagina := AInteger;
  FQuantidadeItensPorPagina_Specified := True;
end;

function BuscaPagamentoAvulsoCartaoRequest2.QuantidadeItensPorPagina_Specified(Index: Integer): boolean;
begin
  Result := FQuantidadeItensPorPagina_Specified;
end;

function BuscaPagamentoAvulsoCartaoRequest2.GetNumeroPagina(Index: Integer): Integer;
begin
  Result := FNumeroPagina;
end;

procedure BuscaPagamentoAvulsoCartaoRequest2.SetNumeroPagina(Index: Integer; const AInteger: Integer);
begin
  FNumeroPagina := AInteger;
  FNumeroPagina_Specified := True;
end;

function BuscaPagamentoAvulsoCartaoRequest2.NumeroPagina_Specified(Index: Integer): boolean;
begin
  Result := FNumeroPagina_Specified;
end;

function BuscaPagamentoAvulsoCartaoRequest2.GetDataInicioPeriodo(Index: Integer): TXSDateTime;
begin
  Result := FDataInicioPeriodo;
end;

procedure BuscaPagamentoAvulsoCartaoRequest2.SetDataInicioPeriodo(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDataInicioPeriodo := ATXSDateTime;
  FDataInicioPeriodo_Specified := True;
end;

function BuscaPagamentoAvulsoCartaoRequest2.DataInicioPeriodo_Specified(Index: Integer): boolean;
begin
  Result := FDataInicioPeriodo_Specified;
end;

function BuscaPagamentoAvulsoCartaoRequest2.GetDataFimPeriodo(Index: Integer): TXSDateTime;
begin
  Result := FDataFimPeriodo;
end;

procedure BuscaPagamentoAvulsoCartaoRequest2.SetDataFimPeriodo(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDataFimPeriodo := ATXSDateTime;
  FDataFimPeriodo_Specified := True;
end;

function BuscaPagamentoAvulsoCartaoRequest2.DataFimPeriodo_Specified(Index: Integer): boolean;
begin
  Result := FDataFimPeriodo_Specified;
end;

function BuscaPagamentoAvulsoCartaoRequest2.GetIdTransacao(Index: Integer): Integer;
begin
  Result := FIdTransacao;
end;

procedure BuscaPagamentoAvulsoCartaoRequest2.SetIdTransacao(Index: Integer; const AInteger: Integer);
begin
  FIdTransacao := AInteger;
  FIdTransacao_Specified := True;
end;

function BuscaPagamentoAvulsoCartaoRequest2.IdTransacao_Specified(Index: Integer): boolean;
begin
  Result := FIdTransacao_Specified;
end;

function ResultadoPaginadoBuscaPagamentoAvulsoCartaoResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure ResultadoPaginadoBuscaPagamentoAvulsoCartaoResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function ResultadoPaginadoBuscaPagamentoAvulsoCartaoResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function ResultadoPaginadoBuscaPagamentoAvulsoCartaoResponse2.GetItens(Index: Integer): ArrayOfBuscaPagamentoAvulsoCartaoResponse;
begin
  Result := FItens;
end;

procedure ResultadoPaginadoBuscaPagamentoAvulsoCartaoResponse2.SetItens(Index: Integer; const AArrayOfBuscaPagamentoAvulsoCartaoResponse: ArrayOfBuscaPagamentoAvulsoCartaoResponse);
begin
  FItens := AArrayOfBuscaPagamentoAvulsoCartaoResponse;
  FItens_Specified := True;
end;

function ResultadoPaginadoBuscaPagamentoAvulsoCartaoResponse2.Itens_Specified(Index: Integer): boolean;
begin
  Result := FItens_Specified;
end;

function ResultadoPaginadoBuscaPagamentoAvulsoCartaoResponse2.GetNumeroPagina(Index: Integer): Integer;
begin
  Result := FNumeroPagina;
end;

procedure ResultadoPaginadoBuscaPagamentoAvulsoCartaoResponse2.SetNumeroPagina(Index: Integer; const AInteger: Integer);
begin
  FNumeroPagina := AInteger;
  FNumeroPagina_Specified := True;
end;

function ResultadoPaginadoBuscaPagamentoAvulsoCartaoResponse2.NumeroPagina_Specified(Index: Integer): boolean;
begin
  Result := FNumeroPagina_Specified;
end;

function ResultadoPaginadoBuscaPagamentoAvulsoCartaoResponse2.GetQuantidadeItensPorPagina(Index: Integer): Integer;
begin
  Result := FQuantidadeItensPorPagina;
end;

procedure ResultadoPaginadoBuscaPagamentoAvulsoCartaoResponse2.SetQuantidadeItensPorPagina(Index: Integer; const AInteger: Integer);
begin
  FQuantidadeItensPorPagina := AInteger;
  FQuantidadeItensPorPagina_Specified := True;
end;

function ResultadoPaginadoBuscaPagamentoAvulsoCartaoResponse2.QuantidadeItensPorPagina_Specified(Index: Integer): boolean;
begin
  Result := FQuantidadeItensPorPagina_Specified;
end;

function ResultadoPaginadoBuscaPagamentoAvulsoCartaoResponse2.GetQuantidadeTotalItens(Index: Integer): Integer;
begin
  Result := FQuantidadeTotalItens;
end;

procedure ResultadoPaginadoBuscaPagamentoAvulsoCartaoResponse2.SetQuantidadeTotalItens(Index: Integer; const AInteger: Integer);
begin
  FQuantidadeTotalItens := AInteger;
  FQuantidadeTotalItens_Specified := True;
end;

function ResultadoPaginadoBuscaPagamentoAvulsoCartaoResponse2.QuantidadeTotalItens_Specified(Index: Integer): boolean;
begin
  Result := FQuantidadeTotalItens_Specified;
end;

function ResultadoPaginadoBuscaPagamentoAvulsoCartaoResponse2.GetQuantidadeTotalPaginas(Index: Integer): Integer;
begin
  Result := FQuantidadeTotalPaginas;
end;

procedure ResultadoPaginadoBuscaPagamentoAvulsoCartaoResponse2.SetQuantidadeTotalPaginas(Index: Integer; const AInteger: Integer);
begin
  FQuantidadeTotalPaginas := AInteger;
  FQuantidadeTotalPaginas_Specified := True;
end;

function ResultadoPaginadoBuscaPagamentoAvulsoCartaoResponse2.QuantidadeTotalPaginas_Specified(Index: Integer): boolean;
begin
  Result := FQuantidadeTotalPaginas_Specified;
end;

function BuscaCombustivelAvulsoCartaoRequest2.GetQuantidadeItensPorPagina(Index: Integer): Integer;
begin
  Result := FQuantidadeItensPorPagina;
end;

procedure BuscaCombustivelAvulsoCartaoRequest2.SetQuantidadeItensPorPagina(Index: Integer; const AInteger: Integer);
begin
  FQuantidadeItensPorPagina := AInteger;
  FQuantidadeItensPorPagina_Specified := True;
end;

function BuscaCombustivelAvulsoCartaoRequest2.QuantidadeItensPorPagina_Specified(Index: Integer): boolean;
begin
  Result := FQuantidadeItensPorPagina_Specified;
end;

function BuscaCombustivelAvulsoCartaoRequest2.GetNumeroPagina(Index: Integer): Integer;
begin
  Result := FNumeroPagina;
end;

procedure BuscaCombustivelAvulsoCartaoRequest2.SetNumeroPagina(Index: Integer; const AInteger: Integer);
begin
  FNumeroPagina := AInteger;
  FNumeroPagina_Specified := True;
end;

function BuscaCombustivelAvulsoCartaoRequest2.NumeroPagina_Specified(Index: Integer): boolean;
begin
  Result := FNumeroPagina_Specified;
end;

function BuscaCombustivelAvulsoCartaoRequest2.GetDataInicioPeriodo(Index: Integer): TXSDateTime;
begin
  Result := FDataInicioPeriodo;
end;

procedure BuscaCombustivelAvulsoCartaoRequest2.SetDataInicioPeriodo(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDataInicioPeriodo := ATXSDateTime;
  FDataInicioPeriodo_Specified := True;
end;

function BuscaCombustivelAvulsoCartaoRequest2.DataInicioPeriodo_Specified(Index: Integer): boolean;
begin
  Result := FDataInicioPeriodo_Specified;
end;

function BuscaCombustivelAvulsoCartaoRequest2.GetDataFimPeriodo(Index: Integer): TXSDateTime;
begin
  Result := FDataFimPeriodo;
end;

procedure BuscaCombustivelAvulsoCartaoRequest2.SetDataFimPeriodo(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDataFimPeriodo := ATXSDateTime;
  FDataFimPeriodo_Specified := True;
end;

function BuscaCombustivelAvulsoCartaoRequest2.DataFimPeriodo_Specified(Index: Integer): boolean;
begin
  Result := FDataFimPeriodo_Specified;
end;

function BuscaCombustivelAvulsoCartaoRequest2.GetIdTransacao(Index: Integer): Integer;
begin
  Result := FIdTransacao;
end;

procedure BuscaCombustivelAvulsoCartaoRequest2.SetIdTransacao(Index: Integer; const AInteger: Integer);
begin
  FIdTransacao := AInteger;
  FIdTransacao_Specified := True;
end;

function BuscaCombustivelAvulsoCartaoRequest2.IdTransacao_Specified(Index: Integer): boolean;
begin
  Result := FIdTransacao_Specified;
end;

function ResultadoPaginadoBuscaCompraValePedagioResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure ResultadoPaginadoBuscaCompraValePedagioResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function ResultadoPaginadoBuscaCompraValePedagioResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function ResultadoPaginadoBuscaCompraValePedagioResponse2.GetItens(Index: Integer): ArrayOfBuscaCompraValePedagioResponse;
begin
  Result := FItens;
end;

procedure ResultadoPaginadoBuscaCompraValePedagioResponse2.SetItens(Index: Integer; const AArrayOfBuscaCompraValePedagioResponse: ArrayOfBuscaCompraValePedagioResponse);
begin
  FItens := AArrayOfBuscaCompraValePedagioResponse;
  FItens_Specified := True;
end;

function ResultadoPaginadoBuscaCompraValePedagioResponse2.Itens_Specified(Index: Integer): boolean;
begin
  Result := FItens_Specified;
end;

function ResultadoPaginadoBuscaCompraValePedagioResponse2.GetNumeroPagina(Index: Integer): Integer;
begin
  Result := FNumeroPagina;
end;

procedure ResultadoPaginadoBuscaCompraValePedagioResponse2.SetNumeroPagina(Index: Integer; const AInteger: Integer);
begin
  FNumeroPagina := AInteger;
  FNumeroPagina_Specified := True;
end;

function ResultadoPaginadoBuscaCompraValePedagioResponse2.NumeroPagina_Specified(Index: Integer): boolean;
begin
  Result := FNumeroPagina_Specified;
end;

function ResultadoPaginadoBuscaCompraValePedagioResponse2.GetQuantidadeItensPorPagina(Index: Integer): Integer;
begin
  Result := FQuantidadeItensPorPagina;
end;

procedure ResultadoPaginadoBuscaCompraValePedagioResponse2.SetQuantidadeItensPorPagina(Index: Integer; const AInteger: Integer);
begin
  FQuantidadeItensPorPagina := AInteger;
  FQuantidadeItensPorPagina_Specified := True;
end;

function ResultadoPaginadoBuscaCompraValePedagioResponse2.QuantidadeItensPorPagina_Specified(Index: Integer): boolean;
begin
  Result := FQuantidadeItensPorPagina_Specified;
end;

function ResultadoPaginadoBuscaCompraValePedagioResponse2.GetQuantidadeTotalItens(Index: Integer): Integer;
begin
  Result := FQuantidadeTotalItens;
end;

procedure ResultadoPaginadoBuscaCompraValePedagioResponse2.SetQuantidadeTotalItens(Index: Integer; const AInteger: Integer);
begin
  FQuantidadeTotalItens := AInteger;
  FQuantidadeTotalItens_Specified := True;
end;

function ResultadoPaginadoBuscaCompraValePedagioResponse2.QuantidadeTotalItens_Specified(Index: Integer): boolean;
begin
  Result := FQuantidadeTotalItens_Specified;
end;

function ResultadoPaginadoBuscaCompraValePedagioResponse2.GetQuantidadeTotalPaginas(Index: Integer): Integer;
begin
  Result := FQuantidadeTotalPaginas;
end;

procedure ResultadoPaginadoBuscaCompraValePedagioResponse2.SetQuantidadeTotalPaginas(Index: Integer; const AInteger: Integer);
begin
  FQuantidadeTotalPaginas := AInteger;
  FQuantidadeTotalPaginas_Specified := True;
end;

function ResultadoPaginadoBuscaCompraValePedagioResponse2.QuantidadeTotalPaginas_Specified(Index: Integer): boolean;
begin
  Result := FQuantidadeTotalPaginas_Specified;
end;

function BuscaCompraValePedagioResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure BuscaCompraValePedagioResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function BuscaCompraValePedagioResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function BuscaCompraValePedagioResponse2.GetTipoCompra(Index: Integer): string;
begin
  Result := FTipoCompra;
end;

procedure BuscaCompraValePedagioResponse2.SetTipoCompra(Index: Integer; const Astring: string);
begin
  FTipoCompra := Astring;
  FTipoCompra_Specified := True;
end;

function BuscaCompraValePedagioResponse2.TipoCompra_Specified(Index: Integer): boolean;
begin
  Result := FTipoCompra_Specified;
end;

function BuscaCompraValePedagioResponse2.GetIdCompra(Index: Integer): Integer;
begin
  Result := FIdCompra;
end;

procedure BuscaCompraValePedagioResponse2.SetIdCompra(Index: Integer; const AInteger: Integer);
begin
  FIdCompra := AInteger;
  FIdCompra_Specified := True;
end;

function BuscaCompraValePedagioResponse2.IdCompra_Specified(Index: Integer): boolean;
begin
  Result := FIdCompra_Specified;
end;

function BuscaCompraValePedagioResponse2.GetDataHoraCompra(Index: Integer): TXSDateTime;
begin
  Result := FDataHoraCompra;
end;

procedure BuscaCompraValePedagioResponse2.SetDataHoraCompra(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDataHoraCompra := ATXSDateTime;
  FDataHoraCompra_Specified := True;
end;

function BuscaCompraValePedagioResponse2.DataHoraCompra_Specified(Index: Integer): boolean;
begin
  Result := FDataHoraCompra_Specified;
end;

function BuscaCompraValePedagioResponse2.GetDataHoraCargaConfirmacao(Index: Integer): TXSDateTime;
begin
  Result := FDataHoraCargaConfirmacao;
end;

procedure BuscaCompraValePedagioResponse2.SetDataHoraCargaConfirmacao(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDataHoraCargaConfirmacao := ATXSDateTime;
  FDataHoraCargaConfirmacao_Specified := True;
end;

function BuscaCompraValePedagioResponse2.DataHoraCargaConfirmacao_Specified(Index: Integer): boolean;
begin
  Result := FDataHoraCargaConfirmacao_Specified;
end;

function BuscaCompraValePedagioResponse2.GetTagOuCartao(Index: Integer): string;
begin
  Result := FTagOuCartao;
end;

procedure BuscaCompraValePedagioResponse2.SetTagOuCartao(Index: Integer; const Astring: string);
begin
  FTagOuCartao := Astring;
  FTagOuCartao_Specified := True;
end;

function BuscaCompraValePedagioResponse2.TagOuCartao_Specified(Index: Integer): boolean;
begin
  Result := FTagOuCartao_Specified;
end;

function BuscaCompraValePedagioResponse2.GetValor(Index: Integer): TXSDecimal;
begin
  Result := FValor;
end;

procedure BuscaCompraValePedagioResponse2.SetValor(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValor := ATXSDecimal;
  FValor_Specified := True;
end;

function BuscaCompraValePedagioResponse2.Valor_Specified(Index: Integer): boolean;
begin
  Result := FValor_Specified;
end;

function BuscaCompraValePedagioResponse2.GetCIOT(Index: Integer): string;
begin
  Result := FCIOT;
end;

procedure BuscaCompraValePedagioResponse2.SetCIOT(Index: Integer; const Astring: string);
begin
  FCIOT := Astring;
  FCIOT_Specified := True;
end;

function BuscaCompraValePedagioResponse2.CIOT_Specified(Index: Integer): boolean;
begin
  Result := FCIOT_Specified;
end;

function BuscaCompraValePedagioResponse2.GetVarejo(Index: Integer): Boolean;
begin
  Result := FVarejo;
end;

procedure BuscaCompraValePedagioResponse2.SetVarejo(Index: Integer; const ABoolean: Boolean);
begin
  FVarejo := ABoolean;
  FVarejo_Specified := True;
end;

function BuscaCompraValePedagioResponse2.Varejo_Specified(Index: Integer): boolean;
begin
  Result := FVarejo_Specified;
end;

function BuscaCompraValePedagioResponse2.GetNomePortador(Index: Integer): string;
begin
  Result := FNomePortador;
end;

procedure BuscaCompraValePedagioResponse2.SetNomePortador(Index: Integer; const Astring: string);
begin
  FNomePortador := Astring;
  FNomePortador_Specified := True;
end;

function BuscaCompraValePedagioResponse2.NomePortador_Specified(Index: Integer): boolean;
begin
  Result := FNomePortador_Specified;
end;

function BuscaCompraValePedagioResponse2.GetOrigemCompra(Index: Integer): string;
begin
  Result := FOrigemCompra;
end;

procedure BuscaCompraValePedagioResponse2.SetOrigemCompra(Index: Integer; const Astring: string);
begin
  FOrigemCompra := Astring;
  FOrigemCompra_Specified := True;
end;

function BuscaCompraValePedagioResponse2.OrigemCompra_Specified(Index: Integer): boolean;
begin
  Result := FOrigemCompra_Specified;
end;

function BuscaCompraValePedagioResponse2.GetPodeEmitirRecibo(Index: Integer): Boolean;
begin
  Result := FPodeEmitirRecibo;
end;

procedure BuscaCompraValePedagioResponse2.SetPodeEmitirRecibo(Index: Integer; const ABoolean: Boolean);
begin
  FPodeEmitirRecibo := ABoolean;
  FPodeEmitirRecibo_Specified := True;
end;

function BuscaCompraValePedagioResponse2.PodeEmitirRecibo_Specified(Index: Integer): boolean;
begin
  Result := FPodeEmitirRecibo_Specified;
end;

function BuscaCompraValePedagioResponse2.GetPodeCarregar(Index: Integer): Boolean;
begin
  Result := FPodeCarregar;
end;

procedure BuscaCompraValePedagioResponse2.SetPodeCarregar(Index: Integer; const ABoolean: Boolean);
begin
  FPodeCarregar := ABoolean;
  FPodeCarregar_Specified := True;
end;

function BuscaCompraValePedagioResponse2.PodeCarregar_Specified(Index: Integer): boolean;
begin
  Result := FPodeCarregar_Specified;
end;

function BuscaCompraValePedagioResponse2.GetIdStatusCompraValePedagio(Index: Integer): Integer;
begin
  Result := FIdStatusCompraValePedagio;
end;

procedure BuscaCompraValePedagioResponse2.SetIdStatusCompraValePedagio(Index: Integer; const AInteger: Integer);
begin
  FIdStatusCompraValePedagio := AInteger;
  FIdStatusCompraValePedagio_Specified := True;
end;

function BuscaCompraValePedagioResponse2.IdStatusCompraValePedagio_Specified(Index: Integer): boolean;
begin
  Result := FIdStatusCompraValePedagio_Specified;
end;

function BuscaCompraValePedagioResponse2.GetOrigemCarga(Index: Integer): string;
begin
  Result := FOrigemCarga;
end;

procedure BuscaCompraValePedagioResponse2.SetOrigemCarga(Index: Integer; const Astring: string);
begin
  FOrigemCarga := Astring;
  FOrigemCarga_Specified := True;
end;

function BuscaCompraValePedagioResponse2.OrigemCarga_Specified(Index: Integer): boolean;
begin
  Result := FOrigemCarga_Specified;
end;

function BuscaCompraValePedagioResponse2.GetIdOperacaoTransporte(Index: Integer): Integer;
begin
  Result := FIdOperacaoTransporte;
end;

procedure BuscaCompraValePedagioResponse2.SetIdOperacaoTransporte(Index: Integer; const AInteger: Integer);
begin
  FIdOperacaoTransporte := AInteger;
  FIdOperacaoTransporte_Specified := True;
end;

function BuscaCompraValePedagioResponse2.IdOperacaoTransporte_Specified(Index: Integer): boolean;
begin
  Result := FIdOperacaoTransporte_Specified;
end;

function BuscaCompraValePedagioResponse2.GetDocumentoRelacionado(Index: Integer): string;
begin
  Result := FDocumentoRelacionado;
end;

procedure BuscaCompraValePedagioResponse2.SetDocumentoRelacionado(Index: Integer; const Astring: string);
begin
  FDocumentoRelacionado := Astring;
  FDocumentoRelacionado_Specified := True;
end;

function BuscaCompraValePedagioResponse2.DocumentoRelacionado_Specified(Index: Integer): boolean;
begin
  Result := FDocumentoRelacionado_Specified;
end;

function BuscaCompraValePedagioResponse2.GetNomeFantasia(Index: Integer): string;
begin
  Result := FNomeFantasia;
end;

procedure BuscaCompraValePedagioResponse2.SetNomeFantasia(Index: Integer; const Astring: string);
begin
  FNomeFantasia := Astring;
  FNomeFantasia_Specified := True;
end;

function BuscaCompraValePedagioResponse2.NomeFantasia_Specified(Index: Integer): boolean;
begin
  Result := FNomeFantasia_Specified;
end;

function BuscaCompraValePedagioResponse2.GetCPFCondutor(Index: Integer): string;
begin
  Result := FCPFCondutor;
end;

procedure BuscaCompraValePedagioResponse2.SetCPFCondutor(Index: Integer; const Astring: string);
begin
  FCPFCondutor := Astring;
  FCPFCondutor_Specified := True;
end;

function BuscaCompraValePedagioResponse2.CPFCondutor_Specified(Index: Integer): boolean;
begin
  Result := FCPFCondutor_Specified;
end;

function BuscaCompraValePedagioResponse2.GetPodeCancelarCompra(Index: Integer): Boolean;
begin
  Result := FPodeCancelarCompra;
end;

procedure BuscaCompraValePedagioResponse2.SetPodeCancelarCompra(Index: Integer; const ABoolean: Boolean);
begin
  FPodeCancelarCompra := ABoolean;
  FPodeCancelarCompra_Specified := True;
end;

function BuscaCompraValePedagioResponse2.PodeCancelarCompra_Specified(Index: Integer): boolean;
begin
  Result := FPodeCancelarCompra_Specified;
end;

function BuscaCompraValePedagioResponse2.GetUsuarioComprador(Index: Integer): string;
begin
  Result := FUsuarioComprador;
end;

procedure BuscaCompraValePedagioResponse2.SetUsuarioComprador(Index: Integer; const Astring: string);
begin
  FUsuarioComprador := Astring;
  FUsuarioComprador_Specified := True;
end;

function BuscaCompraValePedagioResponse2.UsuarioComprador_Specified(Index: Integer): boolean;
begin
  Result := FUsuarioComprador_Specified;
end;

function BuscaCompraValePedagioResponse2.GetNomeRota(Index: Integer): string;
begin
  Result := FNomeRota;
end;

procedure BuscaCompraValePedagioResponse2.SetNomeRota(Index: Integer; const Astring: string);
begin
  FNomeRota := Astring;
  FNomeRota_Specified := True;
end;

function BuscaCompraValePedagioResponse2.NomeRota_Specified(Index: Integer): boolean;
begin
  Result := FNomeRota_Specified;
end;

function BuscaCompraValePedagioResponse2.GetIdRota(Index: Integer): Integer;
begin
  Result := FIdRota;
end;

procedure BuscaCompraValePedagioResponse2.SetIdRota(Index: Integer; const AInteger: Integer);
begin
  FIdRota := AInteger;
  FIdRota_Specified := True;
end;

function BuscaCompraValePedagioResponse2.IdRota_Specified(Index: Integer): boolean;
begin
  Result := FIdRota_Specified;
end;

function BuscaCompraValePedagioResponse2.GetSimples(Index: Integer): Boolean;
begin
  Result := FSimples;
end;

procedure BuscaCompraValePedagioResponse2.SetSimples(Index: Integer; const ABoolean: Boolean);
begin
  FSimples := ABoolean;
  FSimples_Specified := True;
end;

function BuscaCompraValePedagioResponse2.Simples_Specified(Index: Integer): boolean;
begin
  Result := FSimples_Specified;
end;

function BuscaCompraValePedagioResponse2.GetNumeroRecibo(Index: Integer): string;
begin
  Result := FNumeroRecibo;
end;

procedure BuscaCompraValePedagioResponse2.SetNumeroRecibo(Index: Integer; const Astring: string);
begin
  FNumeroRecibo := Astring;
  FNumeroRecibo_Specified := True;
end;

function BuscaCompraValePedagioResponse2.NumeroRecibo_Specified(Index: Integer): boolean;
begin
  Result := FNumeroRecibo_Specified;
end;

function BuscaCompraValePedagioResponse2.GetIdIntegrador(Index: Integer): string;
begin
  Result := FIdIntegrador;
end;

procedure BuscaCompraValePedagioResponse2.SetIdIntegrador(Index: Integer; const Astring: string);
begin
  FIdIntegrador := Astring;
  FIdIntegrador_Specified := True;
end;

function BuscaCompraValePedagioResponse2.IdIntegrador_Specified(Index: Integer): boolean;
begin
  Result := FIdIntegrador_Specified;
end;

function BuscaCompraValePedagioResponse2.GetSaldoAnteriorCartao(Index: Integer): TXSDecimal;
begin
  Result := FSaldoAnteriorCartao;
end;

procedure BuscaCompraValePedagioResponse2.SetSaldoAnteriorCartao(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FSaldoAnteriorCartao := ATXSDecimal;
  FSaldoAnteriorCartao_Specified := True;
end;

function BuscaCompraValePedagioResponse2.SaldoAnteriorCartao_Specified(Index: Integer): boolean;
begin
  Result := FSaldoAnteriorCartao_Specified;
end;

function BuscaCompraValePedagioResponse2.GetSaldoPosteriorCartao(Index: Integer): TXSDecimal;
begin
  Result := FSaldoPosteriorCartao;
end;

procedure BuscaCompraValePedagioResponse2.SetSaldoPosteriorCartao(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FSaldoPosteriorCartao := ATXSDecimal;
  FSaldoPosteriorCartao_Specified := True;
end;

function BuscaCompraValePedagioResponse2.SaldoPosteriorCartao_Specified(Index: Integer): boolean;
begin
  Result := FSaldoPosteriorCartao_Specified;
end;

function BuscaCompraValePedagioResponse2.GetValorCarregadoCartao(Index: Integer): TXSDecimal;
begin
  Result := FValorCarregadoCartao;
end;

procedure BuscaCompraValePedagioResponse2.SetValorCarregadoCartao(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorCarregadoCartao := ATXSDecimal;
  FValorCarregadoCartao_Specified := True;
end;

function BuscaCompraValePedagioResponse2.ValorCarregadoCartao_Specified(Index: Integer): boolean;
begin
  Result := FValorCarregadoCartao_Specified;
end;

function BuscaCompraValePedagioResponse2.GetMotoristaNome(Index: Integer): string;
begin
  Result := FMotoristaNome;
end;

procedure BuscaCompraValePedagioResponse2.SetMotoristaNome(Index: Integer; const Astring: string);
begin
  FMotoristaNome := Astring;
  FMotoristaNome_Specified := True;
end;

function BuscaCompraValePedagioResponse2.MotoristaNome_Specified(Index: Integer): boolean;
begin
  Result := FMotoristaNome_Specified;
end;

function BuscaCompraValePedagioResponse2.GetMotoristaCPF(Index: Integer): string;
begin
  Result := FMotoristaCPF;
end;

procedure BuscaCompraValePedagioResponse2.SetMotoristaCPF(Index: Integer; const Astring: string);
begin
  FMotoristaCPF := Astring;
  FMotoristaCPF_Specified := True;
end;

function BuscaCompraValePedagioResponse2.MotoristaCPF_Specified(Index: Integer): boolean;
begin
  Result := FMotoristaCPF_Specified;
end;

function BuscaCompraValePedagioResponse2.GetMotoristaRNTRC(Index: Integer): string;
begin
  Result := FMotoristaRNTRC;
end;

procedure BuscaCompraValePedagioResponse2.SetMotoristaRNTRC(Index: Integer; const Astring: string);
begin
  FMotoristaRNTRC := Astring;
  FMotoristaRNTRC_Specified := True;
end;

function BuscaCompraValePedagioResponse2.MotoristaRNTRC_Specified(Index: Integer): boolean;
begin
  Result := FMotoristaRNTRC_Specified;
end;

function BuscaCompraValePedagioRequest2.GetIdStatusValePedagio(Index: Integer): Integer;
begin
  Result := FIdStatusValePedagio;
end;

procedure BuscaCompraValePedagioRequest2.SetIdStatusValePedagio(Index: Integer; const AInteger: Integer);
begin
  FIdStatusValePedagio := AInteger;
  FIdStatusValePedagio_Specified := True;
end;

function BuscaCompraValePedagioRequest2.IdStatusValePedagio_Specified(Index: Integer): boolean;
begin
  Result := FIdStatusValePedagio_Specified;
end;

function BuscaCompraValePedagioRequest2.GetQuantidadeItensPorPagina(Index: Integer): Integer;
begin
  Result := FQuantidadeItensPorPagina;
end;

procedure BuscaCompraValePedagioRequest2.SetQuantidadeItensPorPagina(Index: Integer; const AInteger: Integer);
begin
  FQuantidadeItensPorPagina := AInteger;
  FQuantidadeItensPorPagina_Specified := True;
end;

function BuscaCompraValePedagioRequest2.QuantidadeItensPorPagina_Specified(Index: Integer): boolean;
begin
  Result := FQuantidadeItensPorPagina_Specified;
end;

function BuscaCompraValePedagioRequest2.GetNumeroPagina(Index: Integer): Integer;
begin
  Result := FNumeroPagina;
end;

procedure BuscaCompraValePedagioRequest2.SetNumeroPagina(Index: Integer; const AInteger: Integer);
begin
  FNumeroPagina := AInteger;
  FNumeroPagina_Specified := True;
end;

function BuscaCompraValePedagioRequest2.NumeroPagina_Specified(Index: Integer): boolean;
begin
  Result := FNumeroPagina_Specified;
end;

function BuscaCompraValePedagioRequest2.GetIdModoCompraValePedagio(Index: Integer): Integer;
begin
  Result := FIdModoCompraValePedagio;
end;

procedure BuscaCompraValePedagioRequest2.SetIdModoCompraValePedagio(Index: Integer; const AInteger: Integer);
begin
  FIdModoCompraValePedagio := AInteger;
  FIdModoCompraValePedagio_Specified := True;
end;

function BuscaCompraValePedagioRequest2.IdModoCompraValePedagio_Specified(Index: Integer): boolean;
begin
  Result := FIdModoCompraValePedagio_Specified;
end;

function BuscaCompraValePedagioRequest2.GetDataInicioPeriodo(Index: Integer): TXSDateTime;
begin
  Result := FDataInicioPeriodo;
end;

procedure BuscaCompraValePedagioRequest2.SetDataInicioPeriodo(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDataInicioPeriodo := ATXSDateTime;
  FDataInicioPeriodo_Specified := True;
end;

function BuscaCompraValePedagioRequest2.DataInicioPeriodo_Specified(Index: Integer): boolean;
begin
  Result := FDataInicioPeriodo_Specified;
end;

function BuscaCompraValePedagioRequest2.GetDataFimPeriodo(Index: Integer): TXSDateTime;
begin
  Result := FDataFimPeriodo;
end;

procedure BuscaCompraValePedagioRequest2.SetDataFimPeriodo(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDataFimPeriodo := ATXSDateTime;
  FDataFimPeriodo_Specified := True;
end;

function BuscaCompraValePedagioRequest2.DataFimPeriodo_Specified(Index: Integer): boolean;
begin
  Result := FDataFimPeriodo_Specified;
end;

function BuscaCompraValePedagioRequest2.GetIdCompraValePedagio(Index: Integer): Integer;
begin
  Result := FIdCompraValePedagio;
end;

procedure BuscaCompraValePedagioRequest2.SetIdCompraValePedagio(Index: Integer; const AInteger: Integer);
begin
  FIdCompraValePedagio := AInteger;
  FIdCompraValePedagio_Specified := True;
end;

function BuscaCompraValePedagioRequest2.IdCompraValePedagio_Specified(Index: Integer): boolean;
begin
  Result := FIdCompraValePedagio_Specified;
end;

function BuscaCompraValePedagioRequest2.GetIdIntegrador(Index: Integer): string;
begin
  Result := FIdIntegrador;
end;

procedure BuscaCompraValePedagioRequest2.SetIdIntegrador(Index: Integer; const Astring: string);
begin
  FIdIntegrador := Astring;
  FIdIntegrador_Specified := True;
end;

function BuscaCompraValePedagioRequest2.IdIntegrador_Specified(Index: Integer): boolean;
begin
  Result := FIdIntegrador_Specified;
end;

function BuscaCompraValePedagioRequest2.GetTipoBuscaUnitaria(Index: Integer): Integer;
begin
  Result := FTipoBuscaUnitaria;
end;

procedure BuscaCompraValePedagioRequest2.SetTipoBuscaUnitaria(Index: Integer; const AInteger: Integer);
begin
  FTipoBuscaUnitaria := AInteger;
  FTipoBuscaUnitaria_Specified := True;
end;

function BuscaCompraValePedagioRequest2.TipoBuscaUnitaria_Specified(Index: Integer): boolean;
begin
  Result := FTipoBuscaUnitaria_Specified;
end;

function ResultadoPaginadoBuscaCombustivelAvulsoCartaoResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure ResultadoPaginadoBuscaCombustivelAvulsoCartaoResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function ResultadoPaginadoBuscaCombustivelAvulsoCartaoResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function ResultadoPaginadoBuscaCombustivelAvulsoCartaoResponse2.GetItens(Index: Integer): ArrayOfBuscaCombustivelAvulsoCartaoResponse;
begin
  Result := FItens;
end;

procedure ResultadoPaginadoBuscaCombustivelAvulsoCartaoResponse2.SetItens(Index: Integer; const AArrayOfBuscaCombustivelAvulsoCartaoResponse: ArrayOfBuscaCombustivelAvulsoCartaoResponse);
begin
  FItens := AArrayOfBuscaCombustivelAvulsoCartaoResponse;
  FItens_Specified := True;
end;

function ResultadoPaginadoBuscaCombustivelAvulsoCartaoResponse2.Itens_Specified(Index: Integer): boolean;
begin
  Result := FItens_Specified;
end;

function ResultadoPaginadoBuscaCombustivelAvulsoCartaoResponse2.GetNumeroPagina(Index: Integer): Integer;
begin
  Result := FNumeroPagina;
end;

procedure ResultadoPaginadoBuscaCombustivelAvulsoCartaoResponse2.SetNumeroPagina(Index: Integer; const AInteger: Integer);
begin
  FNumeroPagina := AInteger;
  FNumeroPagina_Specified := True;
end;

function ResultadoPaginadoBuscaCombustivelAvulsoCartaoResponse2.NumeroPagina_Specified(Index: Integer): boolean;
begin
  Result := FNumeroPagina_Specified;
end;

function ResultadoPaginadoBuscaCombustivelAvulsoCartaoResponse2.GetQuantidadeItensPorPagina(Index: Integer): Integer;
begin
  Result := FQuantidadeItensPorPagina;
end;

procedure ResultadoPaginadoBuscaCombustivelAvulsoCartaoResponse2.SetQuantidadeItensPorPagina(Index: Integer; const AInteger: Integer);
begin
  FQuantidadeItensPorPagina := AInteger;
  FQuantidadeItensPorPagina_Specified := True;
end;

function ResultadoPaginadoBuscaCombustivelAvulsoCartaoResponse2.QuantidadeItensPorPagina_Specified(Index: Integer): boolean;
begin
  Result := FQuantidadeItensPorPagina_Specified;
end;

function ResultadoPaginadoBuscaCombustivelAvulsoCartaoResponse2.GetQuantidadeTotalItens(Index: Integer): Integer;
begin
  Result := FQuantidadeTotalItens;
end;

procedure ResultadoPaginadoBuscaCombustivelAvulsoCartaoResponse2.SetQuantidadeTotalItens(Index: Integer; const AInteger: Integer);
begin
  FQuantidadeTotalItens := AInteger;
  FQuantidadeTotalItens_Specified := True;
end;

function ResultadoPaginadoBuscaCombustivelAvulsoCartaoResponse2.QuantidadeTotalItens_Specified(Index: Integer): boolean;
begin
  Result := FQuantidadeTotalItens_Specified;
end;

function ResultadoPaginadoBuscaCombustivelAvulsoCartaoResponse2.GetQuantidadeTotalPaginas(Index: Integer): Integer;
begin
  Result := FQuantidadeTotalPaginas;
end;

procedure ResultadoPaginadoBuscaCombustivelAvulsoCartaoResponse2.SetQuantidadeTotalPaginas(Index: Integer; const AInteger: Integer);
begin
  FQuantidadeTotalPaginas := AInteger;
  FQuantidadeTotalPaginas_Specified := True;
end;

function ResultadoPaginadoBuscaCombustivelAvulsoCartaoResponse2.QuantidadeTotalPaginas_Specified(Index: Integer): boolean;
begin
  Result := FQuantidadeTotalPaginas_Specified;
end;

function BuscaCombustivelAvulsoCartaoResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure BuscaCombustivelAvulsoCartaoResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function BuscaCombustivelAvulsoCartaoResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function BuscaCombustivelAvulsoCartaoResponse2.GetDataCompra(Index: Integer): TXSDateTime;
begin
  Result := FDataCompra;
end;

procedure BuscaCombustivelAvulsoCartaoResponse2.SetDataCompra(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDataCompra := ATXSDateTime;
  FDataCompra_Specified := True;
end;

function BuscaCombustivelAvulsoCartaoResponse2.DataCompra_Specified(Index: Integer): boolean;
begin
  Result := FDataCompra_Specified;
end;

function BuscaCombustivelAvulsoCartaoResponse2.GetNumeroCartao(Index: Integer): string;
begin
  Result := FNumeroCartao;
end;

procedure BuscaCombustivelAvulsoCartaoResponse2.SetNumeroCartao(Index: Integer; const Astring: string);
begin
  FNumeroCartao := Astring;
  FNumeroCartao_Specified := True;
end;

function BuscaCombustivelAvulsoCartaoResponse2.NumeroCartao_Specified(Index: Integer): boolean;
begin
  Result := FNumeroCartao_Specified;
end;

function BuscaCombustivelAvulsoCartaoResponse2.GetValor(Index: Integer): TXSDecimal;
begin
  Result := FValor;
end;

procedure BuscaCombustivelAvulsoCartaoResponse2.SetValor(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValor := ATXSDecimal;
  FValor_Specified := True;
end;

function BuscaCombustivelAvulsoCartaoResponse2.Valor_Specified(Index: Integer): boolean;
begin
  Result := FValor_Specified;
end;

function BuscaCombustivelAvulsoCartaoResponse2.GetComentario(Index: Integer): string;
begin
  Result := FComentario;
end;

procedure BuscaCombustivelAvulsoCartaoResponse2.SetComentario(Index: Integer; const Astring: string);
begin
  FComentario := Astring;
  FComentario_Specified := True;
end;

function BuscaCombustivelAvulsoCartaoResponse2.Comentario_Specified(Index: Integer): boolean;
begin
  Result := FComentario_Specified;
end;

function BuscaCombustivelAvulsoCartaoResponse2.GetSituacaoTransacao(Index: Integer): string;
begin
  Result := FSituacaoTransacao;
end;

procedure BuscaCombustivelAvulsoCartaoResponse2.SetSituacaoTransacao(Index: Integer; const Astring: string);
begin
  FSituacaoTransacao := Astring;
  FSituacaoTransacao_Specified := True;
end;

function BuscaCombustivelAvulsoCartaoResponse2.SituacaoTransacao_Specified(Index: Integer): boolean;
begin
  Result := FSituacaoTransacao_Specified;
end;

function BuscaCombustivelAvulsoCartaoResponse2.GetItemFinanceiro(Index: Integer): string;
begin
  Result := FItemFinanceiro;
end;

procedure BuscaCombustivelAvulsoCartaoResponse2.SetItemFinanceiro(Index: Integer; const Astring: string);
begin
  FItemFinanceiro := Astring;
  FItemFinanceiro_Specified := True;
end;

function BuscaCombustivelAvulsoCartaoResponse2.ItemFinanceiro_Specified(Index: Integer): boolean;
begin
  Result := FItemFinanceiro_Specified;
end;

function BuscaCombustivelAvulsoCartaoResponse2.GetNumeroDocumentoEmbarque(Index: Integer): string;
begin
  Result := FNumeroDocumentoEmbarque;
end;

procedure BuscaCombustivelAvulsoCartaoResponse2.SetNumeroDocumentoEmbarque(Index: Integer; const Astring: string);
begin
  FNumeroDocumentoEmbarque := Astring;
  FNumeroDocumentoEmbarque_Specified := True;
end;

function BuscaCombustivelAvulsoCartaoResponse2.NumeroDocumentoEmbarque_Specified(Index: Integer): boolean;
begin
  Result := FNumeroDocumentoEmbarque_Specified;
end;

function BuscaCombustivelAvulsoCartaoResponse2.GetPlaca(Index: Integer): string;
begin
  Result := FPlaca;
end;

procedure BuscaCombustivelAvulsoCartaoResponse2.SetPlaca(Index: Integer; const Astring: string);
begin
  FPlaca := Astring;
  FPlaca_Specified := True;
end;

function BuscaCombustivelAvulsoCartaoResponse2.Placa_Specified(Index: Integer): boolean;
begin
  Result := FPlaca_Specified;
end;

function RotaDetalhadaInfoPedagio2.GetNomePedagio(Index: Integer): string;
begin
  Result := FNomePedagio;
end;

procedure RotaDetalhadaInfoPedagio2.SetNomePedagio(Index: Integer; const Astring: string);
begin
  FNomePedagio := Astring;
  FNomePedagio_Specified := True;
end;

function RotaDetalhadaInfoPedagio2.NomePedagio_Specified(Index: Integer): boolean;
begin
  Result := FNomePedagio_Specified;
end;

function RotaDetalhadaInfoPedagio2.GetIdDmCategoriaVeiculo(Index: Integer): Integer;
begin
  Result := FIdDmCategoriaVeiculo;
end;

procedure RotaDetalhadaInfoPedagio2.SetIdDmCategoriaVeiculo(Index: Integer; const AInteger: Integer);
begin
  FIdDmCategoriaVeiculo := AInteger;
  FIdDmCategoriaVeiculo_Specified := True;
end;

function RotaDetalhadaInfoPedagio2.IdDmCategoriaVeiculo_Specified(Index: Integer): boolean;
begin
  Result := FIdDmCategoriaVeiculo_Specified;
end;

function RotaDetalhadaInfoPedagio2.GetValor(Index: Integer): TXSDecimal;
begin
  Result := FValor;
end;

procedure RotaDetalhadaInfoPedagio2.SetValor(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValor := ATXSDecimal;
  FValor_Specified := True;
end;

function RotaDetalhadaInfoPedagio2.Valor_Specified(Index: Integer): boolean;
begin
  Result := FValor_Specified;
end;

function RotaDetalhadaInfoPedagio2.GetOrdem(Index: Integer): Integer;
begin
  Result := FOrdem;
end;

procedure RotaDetalhadaInfoPedagio2.SetOrdem(Index: Integer; const AInteger: Integer);
begin
  FOrdem := AInteger;
  FOrdem_Specified := True;
end;

function RotaDetalhadaInfoPedagio2.Ordem_Specified(Index: Integer): boolean;
begin
  Result := FOrdem_Specified;
end;

function CompraValePedagioPorPracaRequest2.GetIdModoCompraValePedagio(Index: Integer): Integer;
begin
  Result := FIdModoCompraValePedagio;
end;

procedure CompraValePedagioPorPracaRequest2.SetIdModoCompraValePedagio(Index: Integer; const AInteger: Integer);
begin
  FIdModoCompraValePedagio := AInteger;
  FIdModoCompraValePedagio_Specified := True;
end;

function CompraValePedagioPorPracaRequest2.IdModoCompraValePedagio_Specified(Index: Integer): boolean;
begin
  Result := FIdModoCompraValePedagio_Specified;
end;

function CompraValePedagioPorPracaRequest2.GetCodigoCategoriaVeiculo(Index: Integer): Integer;
begin
  Result := FCodigoCategoriaVeiculo;
end;

procedure CompraValePedagioPorPracaRequest2.SetCodigoCategoriaVeiculo(Index: Integer; const AInteger: Integer);
begin
  FCodigoCategoriaVeiculo := AInteger;
  FCodigoCategoriaVeiculo_Specified := True;
end;

function CompraValePedagioPorPracaRequest2.CodigoCategoriaVeiculo_Specified(Index: Integer): boolean;
begin
  Result := FCodigoCategoriaVeiculo_Specified;
end;

function CompraValePedagioPorPracaRequest2.GetPlaca(Index: Integer): string;
begin
  Result := FPlaca;
end;

procedure CompraValePedagioPorPracaRequest2.SetPlaca(Index: Integer; const Astring: string);
begin
  FPlaca := Astring;
  FPlaca_Specified := True;
end;

function CompraValePedagioPorPracaRequest2.Placa_Specified(Index: Integer): boolean;
begin
  Result := FPlaca_Specified;
end;

function CompraValePedagioPorPracaRequest2.GetIdsPracasPedagio(Index: Integer): ArrayOfIdentificadorPracaPedagio;
begin
  Result := FIdsPracasPedagio;
end;

procedure CompraValePedagioPorPracaRequest2.SetIdsPracasPedagio(Index: Integer; const AArrayOfIdentificadorPracaPedagio: ArrayOfIdentificadorPracaPedagio);
begin
  FIdsPracasPedagio := AArrayOfIdentificadorPracaPedagio;
  FIdsPracasPedagio_Specified := True;
end;

function CompraValePedagioPorPracaRequest2.IdsPracasPedagio_Specified(Index: Integer): boolean;
begin
  Result := FIdsPracasPedagio_Specified;
end;

function CompraValePedagioPorPracaRequest2.GetInicioVigencia(Index: Integer): TXSDateTime;
begin
  Result := FInicioVigencia;
end;

procedure CompraValePedagioPorPracaRequest2.SetInicioVigencia(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FInicioVigencia := ATXSDateTime;
  FInicioVigencia_Specified := True;
end;

function CompraValePedagioPorPracaRequest2.InicioVigencia_Specified(Index: Integer): boolean;
begin
  Result := FInicioVigencia_Specified;
end;

function CompraValePedagioPorPracaRequest2.GetFimVigencia(Index: Integer): TXSDateTime;
begin
  Result := FFimVigencia;
end;

procedure CompraValePedagioPorPracaRequest2.SetFimVigencia(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FFimVigencia := ATXSDateTime;
  FFimVigencia_Specified := True;
end;

function CompraValePedagioPorPracaRequest2.FimVigencia_Specified(Index: Integer): boolean;
begin
  Result := FFimVigencia_Specified;
end;

function CompraValePedagioPorPracaRequest2.GetCodigoCentroDeCusto(Index: Integer): Integer;
begin
  Result := FCodigoCentroDeCusto;
end;

procedure CompraValePedagioPorPracaRequest2.SetCodigoCentroDeCusto(Index: Integer; const AInteger: Integer);
begin
  FCodigoCentroDeCusto := AInteger;
  FCodigoCentroDeCusto_Specified := True;
end;

function CompraValePedagioPorPracaRequest2.CodigoCentroDeCusto_Specified(Index: Integer): boolean;
begin
  Result := FCodigoCentroDeCusto_Specified;
end;

function CompraValePedagioPorPracaRequest2.GetNumeroDocumentoEmbarque(Index: Integer): string;
begin
  Result := FNumeroDocumentoEmbarque;
end;

procedure CompraValePedagioPorPracaRequest2.SetNumeroDocumentoEmbarque(Index: Integer; const Astring: string);
begin
  FNumeroDocumentoEmbarque := Astring;
  FNumeroDocumentoEmbarque_Specified := True;
end;

function CompraValePedagioPorPracaRequest2.NumeroDocumentoEmbarque_Specified(Index: Integer): boolean;
begin
  Result := FNumeroDocumentoEmbarque_Specified;
end;

function CompraValePedagioPorPracaRequest2.GetItemFinanceiro(Index: Integer): string;
begin
  Result := FItemFinanceiro;
end;

procedure CompraValePedagioPorPracaRequest2.SetItemFinanceiro(Index: Integer; const Astring: string);
begin
  FItemFinanceiro := Astring;
  FItemFinanceiro_Specified := True;
end;

function CompraValePedagioPorPracaRequest2.ItemFinanceiro_Specified(Index: Integer): boolean;
begin
  Result := FItemFinanceiro_Specified;
end;

function CompraValePedagioPorPracaRequest2.GetIdIntegrador(Index: Integer): string;
begin
  Result := FIdIntegrador;
end;

procedure CompraValePedagioPorPracaRequest2.SetIdIntegrador(Index: Integer; const Astring: string);
begin
  FIdIntegrador := Astring;
  FIdIntegrador_Specified := True;
end;

function CompraValePedagioPorPracaRequest2.IdIntegrador_Specified(Index: Integer): boolean;
begin
  Result := FIdIntegrador_Specified;
end;

function CompraValePedagioPorPracaRequest2.GetValorPrevioCalculado(Index: Integer): TXSDecimal;
begin
  Result := FValorPrevioCalculado;
end;

procedure CompraValePedagioPorPracaRequest2.SetValorPrevioCalculado(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorPrevioCalculado := ATXSDecimal;
  FValorPrevioCalculado_Specified := True;
end;

function CompraValePedagioPorPracaRequest2.ValorPrevioCalculado_Specified(Index: Integer): boolean;
begin
  Result := FValorPrevioCalculado_Specified;
end;

function CompraValePedagioPorPracaRequest2.GetDadosComplementares(Index: Integer): DadosComplementaresCompraValePedagio2;
begin
  Result := FDadosComplementares;
end;

procedure CompraValePedagioPorPracaRequest2.SetDadosComplementares(Index: Integer; const ADadosComplementaresCompraValePedagio2: DadosComplementaresCompraValePedagio2);
begin
  FDadosComplementares := ADadosComplementaresCompraValePedagio2;
  FDadosComplementares_Specified := True;
end;

function CompraValePedagioPorPracaRequest2.DadosComplementares_Specified(Index: Integer): boolean;
begin
  Result := FDadosComplementares_Specified;
end;

function CompraValePedagioPorPracaRequest2.GetDadosPagamentoCartao(Index: Integer): DadosPagamentoPedagioCartao2;
begin
  Result := FDadosPagamentoCartao;
end;

procedure CompraValePedagioPorPracaRequest2.SetDadosPagamentoCartao(Index: Integer; const ADadosPagamentoPedagioCartao2: DadosPagamentoPedagioCartao2);
begin
  FDadosPagamentoCartao := ADadosPagamentoPedagioCartao2;
  FDadosPagamentoCartao_Specified := True;
end;

function CompraValePedagioPorPracaRequest2.DadosPagamentoCartao_Specified(Index: Integer): boolean;
begin
  Result := FDadosPagamentoCartao_Specified;
end;

function RotaDetalhadaResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure RotaDetalhadaResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function RotaDetalhadaResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function RotaDetalhadaResponse2.GetIdRotaCliente(Index: Integer): Integer;
begin
  Result := FIdRotaCliente;
end;

procedure RotaDetalhadaResponse2.SetIdRotaCliente(Index: Integer; const AInteger: Integer);
begin
  FIdRotaCliente := AInteger;
  FIdRotaCliente_Specified := True;
end;

function RotaDetalhadaResponse2.IdRotaCliente_Specified(Index: Integer): boolean;
begin
  Result := FIdRotaCliente_Specified;
end;

function RotaDetalhadaResponse2.GetNomeRota(Index: Integer): string;
begin
  Result := FNomeRota;
end;

procedure RotaDetalhadaResponse2.SetNomeRota(Index: Integer; const Astring: string);
begin
  FNomeRota := Astring;
  FNomeRota_Specified := True;
end;

function RotaDetalhadaResponse2.NomeRota_Specified(Index: Integer): boolean;
begin
  Result := FNomeRota_Specified;
end;

function RotaDetalhadaResponse2.GetOrigem(Index: Integer): RotaDetalhadaInfoParada2;
begin
  Result := FOrigem;
end;

procedure RotaDetalhadaResponse2.SetOrigem(Index: Integer; const ARotaDetalhadaInfoParada2: RotaDetalhadaInfoParada2);
begin
  FOrigem := ARotaDetalhadaInfoParada2;
  FOrigem_Specified := True;
end;

function RotaDetalhadaResponse2.Origem_Specified(Index: Integer): boolean;
begin
  Result := FOrigem_Specified;
end;

function RotaDetalhadaResponse2.GetDestino(Index: Integer): RotaDetalhadaInfoParada2;
begin
  Result := FDestino;
end;

procedure RotaDetalhadaResponse2.SetDestino(Index: Integer; const ARotaDetalhadaInfoParada2: RotaDetalhadaInfoParada2);
begin
  FDestino := ARotaDetalhadaInfoParada2;
  FDestino_Specified := True;
end;

function RotaDetalhadaResponse2.Destino_Specified(Index: Integer): boolean;
begin
  Result := FDestino_Specified;
end;

function RotaDetalhadaResponse2.GetParadas(Index: Integer): ArrayOfRotaDetalhadaInfoParada;
begin
  Result := FParadas;
end;

procedure RotaDetalhadaResponse2.SetParadas(Index: Integer; const AArrayOfRotaDetalhadaInfoParada: ArrayOfRotaDetalhadaInfoParada);
begin
  FParadas := AArrayOfRotaDetalhadaInfoParada;
  FParadas_Specified := True;
end;

function RotaDetalhadaResponse2.Paradas_Specified(Index: Integer): boolean;
begin
  Result := FParadas_Specified;
end;

function RotaDetalhadaResponse2.GetPedagios(Index: Integer): ArrayOfRotaDetalhadaInfoPedagio;
begin
  Result := FPedagios;
end;

procedure RotaDetalhadaResponse2.SetPedagios(Index: Integer; const AArrayOfRotaDetalhadaInfoPedagio: ArrayOfRotaDetalhadaInfoPedagio);
begin
  FPedagios := AArrayOfRotaDetalhadaInfoPedagio;
  FPedagios_Specified := True;
end;

function RotaDetalhadaResponse2.Pedagios_Specified(Index: Integer): boolean;
begin
  Result := FPedagios_Specified;
end;

function RotaDetalhadaResponse2.GetValorTotalPedagio(Index: Integer): TXSDecimal;
begin
  Result := FValorTotalPedagio;
end;

procedure RotaDetalhadaResponse2.SetValorTotalPedagio(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorTotalPedagio := ATXSDecimal;
  FValorTotalPedagio_Specified := True;
end;

function RotaDetalhadaResponse2.ValorTotalPedagio_Specified(Index: Integer): boolean;
begin
  Result := FValorTotalPedagio_Specified;
end;

function DadosPagamentoPedagioCartao2.GetNumeroCartao(Index: Integer): string;
begin
  Result := FNumeroCartao;
end;

procedure DadosPagamentoPedagioCartao2.SetNumeroCartao(Index: Integer; const Astring: string);
begin
  FNumeroCartao := Astring;
  FNumeroCartao_Specified := True;
end;

function DadosPagamentoPedagioCartao2.NumeroCartao_Specified(Index: Integer): boolean;
begin
  Result := FNumeroCartao_Specified;
end;

function DadosPagamentoPedagioCartao2.GetMotoristaNome(Index: Integer): string;
begin
  Result := FMotoristaNome;
end;

procedure DadosPagamentoPedagioCartao2.SetMotoristaNome(Index: Integer; const Astring: string);
begin
  FMotoristaNome := Astring;
  FMotoristaNome_Specified := True;
end;

function DadosPagamentoPedagioCartao2.MotoristaNome_Specified(Index: Integer): boolean;
begin
  Result := FMotoristaNome_Specified;
end;

function DadosPagamentoPedagioCartao2.GetMotoristaCPF(Index: Integer): string;
begin
  Result := FMotoristaCPF;
end;

procedure DadosPagamentoPedagioCartao2.SetMotoristaCPF(Index: Integer; const Astring: string);
begin
  FMotoristaCPF := Astring;
  FMotoristaCPF_Specified := True;
end;

function DadosPagamentoPedagioCartao2.MotoristaCPF_Specified(Index: Integer): boolean;
begin
  Result := FMotoristaCPF_Specified;
end;

function DadosPagamentoPedagioCartao2.GetMotoristaRNTRC(Index: Integer): string;
begin
  Result := FMotoristaRNTRC;
end;

procedure DadosPagamentoPedagioCartao2.SetMotoristaRNTRC(Index: Integer; const Astring: string);
begin
  FMotoristaRNTRC := Astring;
  FMotoristaRNTRC_Specified := True;
end;

function DadosPagamentoPedagioCartao2.MotoristaRNTRC_Specified(Index: Integer): boolean;
begin
  Result := FMotoristaRNTRC_Specified;
end;

function ResumoPracaPedagio2.GetIdPracaPedagio(Index: Integer): Integer;
begin
  Result := FIdPracaPedagio;
end;

procedure ResumoPracaPedagio2.SetIdPracaPedagio(Index: Integer; const AInteger: Integer);
begin
  FIdPracaPedagio := AInteger;
  FIdPracaPedagio_Specified := True;
end;

function ResumoPracaPedagio2.IdPracaPedagio_Specified(Index: Integer): boolean;
begin
  Result := FIdPracaPedagio_Specified;
end;

function ResumoPracaPedagio2.GetKmPraca(Index: Integer): Integer;
begin
  Result := FKmPraca;
end;

procedure ResumoPracaPedagio2.SetKmPraca(Index: Integer; const AInteger: Integer);
begin
  FKmPraca := AInteger;
  FKmPraca_Specified := True;
end;

function ResumoPracaPedagio2.KmPraca_Specified(Index: Integer): boolean;
begin
  Result := FKmPraca_Specified;
end;

function ResumoPracaPedagio2.GetNome(Index: Integer): string;
begin
  Result := FNome;
end;

procedure ResumoPracaPedagio2.SetNome(Index: Integer; const Astring: string);
begin
  FNome := Astring;
  FNome_Specified := True;
end;

function ResumoPracaPedagio2.Nome_Specified(Index: Integer): boolean;
begin
  Result := FNome_Specified;
end;

function ResumoPracaPedagio2.GetRodovia(Index: Integer): string;
begin
  Result := FRodovia;
end;

procedure ResumoPracaPedagio2.SetRodovia(Index: Integer; const Astring: string);
begin
  FRodovia := Astring;
  FRodovia_Specified := True;
end;

function ResumoPracaPedagio2.Rodovia_Specified(Index: Integer): boolean;
begin
  Result := FRodovia_Specified;
end;

function ResumoPracaPedagio2.GetUF(Index: Integer): string;
begin
  Result := FUF;
end;

procedure ResumoPracaPedagio2.SetUF(Index: Integer; const Astring: string);
begin
  FUF := Astring;
  FUF_Specified := True;
end;

function ResumoPracaPedagio2.UF_Specified(Index: Integer): boolean;
begin
  Result := FUF_Specified;
end;

function IdentificadorPracaPedagio2.GetIdTipoIdentificadorPraca(Index: Integer): Integer;
begin
  Result := FIdTipoIdentificadorPraca;
end;

procedure IdentificadorPracaPedagio2.SetIdTipoIdentificadorPraca(Index: Integer; const AInteger: Integer);
begin
  FIdTipoIdentificadorPraca := AInteger;
  FIdTipoIdentificadorPraca_Specified := True;
end;

function IdentificadorPracaPedagio2.IdTipoIdentificadorPraca_Specified(Index: Integer): boolean;
begin
  Result := FIdTipoIdentificadorPraca_Specified;
end;

function IdentificadorPracaPedagio2.GetIdPraca(Index: Integer): string;
begin
  Result := FIdPraca;
end;

procedure IdentificadorPracaPedagio2.SetIdPraca(Index: Integer; const Astring: string);
begin
  FIdPraca := Astring;
  FIdPraca_Specified := True;
end;

function IdentificadorPracaPedagio2.IdPraca_Specified(Index: Integer): boolean;
begin
  Result := FIdPraca_Specified;
end;

function IdentificadorPracaPedagio2.GetCodigoCategoriaVeiculoAlterada(Index: Integer): Integer;
begin
  Result := FCodigoCategoriaVeiculoAlterada;
end;

procedure IdentificadorPracaPedagio2.SetCodigoCategoriaVeiculoAlterada(Index: Integer; const AInteger: Integer);
begin
  FCodigoCategoriaVeiculoAlterada := AInteger;
  FCodigoCategoriaVeiculoAlterada_Specified := True;
end;

function IdentificadorPracaPedagio2.CodigoCategoriaVeiculoAlterada_Specified(Index: Integer): boolean;
begin
  Result := FCodigoCategoriaVeiculoAlterada_Specified;
end;

function ObtencaoCustoRotaPorPracasRequest2.GetIdModoCompraValePedagio(Index: Integer): Integer;
begin
  Result := FIdModoCompraValePedagio;
end;

procedure ObtencaoCustoRotaPorPracasRequest2.SetIdModoCompraValePedagio(Index: Integer; const AInteger: Integer);
begin
  FIdModoCompraValePedagio := AInteger;
  FIdModoCompraValePedagio_Specified := True;
end;

function ObtencaoCustoRotaPorPracasRequest2.IdModoCompraValePedagio_Specified(Index: Integer): boolean;
begin
  Result := FIdModoCompraValePedagio_Specified;
end;

function ObtencaoCustoRotaPorPracasRequest2.GetCodigoCategoriaVeiculo(Index: Integer): Integer;
begin
  Result := FCodigoCategoriaVeiculo;
end;

procedure ObtencaoCustoRotaPorPracasRequest2.SetCodigoCategoriaVeiculo(Index: Integer; const AInteger: Integer);
begin
  FCodigoCategoriaVeiculo := AInteger;
  FCodigoCategoriaVeiculo_Specified := True;
end;

function ObtencaoCustoRotaPorPracasRequest2.CodigoCategoriaVeiculo_Specified(Index: Integer): boolean;
begin
  Result := FCodigoCategoriaVeiculo_Specified;
end;

function ObtencaoCustoRotaPorPracasRequest2.GetPlaca(Index: Integer): string;
begin
  Result := FPlaca;
end;

procedure ObtencaoCustoRotaPorPracasRequest2.SetPlaca(Index: Integer; const Astring: string);
begin
  FPlaca := Astring;
  FPlaca_Specified := True;
end;

function ObtencaoCustoRotaPorPracasRequest2.Placa_Specified(Index: Integer): boolean;
begin
  Result := FPlaca_Specified;
end;

function ObtencaoCustoRotaPorPracasRequest2.GetIdsPracasPedagio(Index: Integer): ArrayOfIdentificadorPracaPedagio;
begin
  Result := FIdsPracasPedagio;
end;

procedure ObtencaoCustoRotaPorPracasRequest2.SetIdsPracasPedagio(Index: Integer; const AArrayOfIdentificadorPracaPedagio: ArrayOfIdentificadorPracaPedagio);
begin
  FIdsPracasPedagio := AArrayOfIdentificadorPracaPedagio;
  FIdsPracasPedagio_Specified := True;
end;

function ObtencaoCustoRotaPorPracasRequest2.IdsPracasPedagio_Specified(Index: Integer): boolean;
begin
  Result := FIdsPracasPedagio_Specified;
end;

function ObtencaoCustoRotaPorPracasRequest2.GetInicioVigencia(Index: Integer): TXSDateTime;
begin
  Result := FInicioVigencia;
end;

procedure ObtencaoCustoRotaPorPracasRequest2.SetInicioVigencia(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FInicioVigencia := ATXSDateTime;
  FInicioVigencia_Specified := True;
end;

function ObtencaoCustoRotaPorPracasRequest2.InicioVigencia_Specified(Index: Integer): boolean;
begin
  Result := FInicioVigencia_Specified;
end;

function ObtencaoCustoRotaPorPracasRequest2.GetFimVigencia(Index: Integer): TXSDateTime;
begin
  Result := FFimVigencia;
end;

procedure ObtencaoCustoRotaPorPracasRequest2.SetFimVigencia(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FFimVigencia := ATXSDateTime;
  FFimVigencia_Specified := True;
end;

function ObtencaoCustoRotaPorPracasRequest2.FimVigencia_Specified(Index: Integer): boolean;
begin
  Result := FFimVigencia_Specified;
end;

function ObtencaoCustoRotaPorPracaResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure ObtencaoCustoRotaPorPracaResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function ObtencaoCustoRotaPorPracaResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function ObtencaoCustoRotaPorPracaResponse2.GetPracasPedagio(Index: Integer): ArrayOfResumoPracaPedagio;
begin
  Result := FPracasPedagio;
end;

procedure ObtencaoCustoRotaPorPracaResponse2.SetPracasPedagio(Index: Integer; const AArrayOfResumoPracaPedagio: ArrayOfResumoPracaPedagio);
begin
  FPracasPedagio := AArrayOfResumoPracaPedagio;
  FPracasPedagio_Specified := True;
end;

function ObtencaoCustoRotaPorPracaResponse2.PracasPedagio_Specified(Index: Integer): boolean;
begin
  Result := FPracasPedagio_Specified;
end;

function ObtencaoCustoRotaPorPracaResponse2.GetValorPedagioTotal(Index: Integer): TXSDecimal;
begin
  Result := FValorPedagioTotal;
end;

procedure ObtencaoCustoRotaPorPracaResponse2.SetValorPedagioTotal(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorPedagioTotal := ATXSDecimal;
  FValorPedagioTotal_Specified := True;
end;

function ObtencaoCustoRotaPorPracaResponse2.ValorPedagioTotal_Specified(Index: Integer): boolean;
begin
  Result := FValorPedagioTotal_Specified;
end;

function CondutorResponse2.GetTipoPessoaCartao(Index: Integer): string;
begin
  Result := FTipoPessoaCartao;
end;

procedure CondutorResponse2.SetTipoPessoaCartao(Index: Integer; const Astring: string);
begin
  FTipoPessoaCartao := Astring;
  FTipoPessoaCartao_Specified := True;
end;

function CondutorResponse2.TipoPessoaCartao_Specified(Index: Integer): boolean;
begin
  Result := FTipoPessoaCartao_Specified;
end;

function CondutorResponse2.GetNumeroCartao(Index: Integer): string;
begin
  Result := FNumeroCartao;
end;

procedure CondutorResponse2.SetNumeroCartao(Index: Integer; const Astring: string);
begin
  FNumeroCartao := Astring;
  FNumeroCartao_Specified := True;
end;

function CondutorResponse2.NumeroCartao_Specified(Index: Integer): boolean;
begin
  Result := FNumeroCartao_Specified;
end;

function CondutorResponse2.GetCpf(Index: Integer): string;
begin
  Result := FCpf;
end;

procedure CondutorResponse2.SetCpf(Index: Integer; const Astring: string);
begin
  FCpf := Astring;
  FCpf_Specified := True;
end;

function CondutorResponse2.Cpf_Specified(Index: Integer): boolean;
begin
  Result := FCpf_Specified;
end;

function CondutorResponse2.GetRntrc(Index: Integer): string;
begin
  Result := FRntrc;
end;

procedure CondutorResponse2.SetRntrc(Index: Integer; const Astring: string);
begin
  FRntrc := Astring;
  FRntrc_Specified := True;
end;

function CondutorResponse2.Rntrc_Specified(Index: Integer): boolean;
begin
  Result := FRntrc_Specified;
end;

function CondutorResponse2.GetNome(Index: Integer): string;
begin
  Result := FNome;
end;

procedure CondutorResponse2.SetNome(Index: Integer; const Astring: string);
begin
  FNome := Astring;
  FNome_Specified := True;
end;

function CondutorResponse2.Nome_Specified(Index: Integer): boolean;
begin
  Result := FNome_Specified;
end;

function CondutorResponse2.GetResponsavel(Index: Integer): Boolean;
begin
  Result := FResponsavel;
end;

procedure CondutorResponse2.SetResponsavel(Index: Integer; const ABoolean: Boolean);
begin
  FResponsavel := ABoolean;
  FResponsavel_Specified := True;
end;

function CondutorResponse2.Responsavel_Specified(Index: Integer): boolean;
begin
  Result := FResponsavel_Specified;
end;

function BuscaTransacoesFinanceirasRequest2.GetQuantidadeItensPorPagina(Index: Integer): Integer;
begin
  Result := FQuantidadeItensPorPagina;
end;

procedure BuscaTransacoesFinanceirasRequest2.SetQuantidadeItensPorPagina(Index: Integer; const AInteger: Integer);
begin
  FQuantidadeItensPorPagina := AInteger;
  FQuantidadeItensPorPagina_Specified := True;
end;

function BuscaTransacoesFinanceirasRequest2.QuantidadeItensPorPagina_Specified(Index: Integer): boolean;
begin
  Result := FQuantidadeItensPorPagina_Specified;
end;

function BuscaTransacoesFinanceirasRequest2.GetNumeroPagina(Index: Integer): Integer;
begin
  Result := FNumeroPagina;
end;

procedure BuscaTransacoesFinanceirasRequest2.SetNumeroPagina(Index: Integer; const AInteger: Integer);
begin
  FNumeroPagina := AInteger;
  FNumeroPagina_Specified := True;
end;

function BuscaTransacoesFinanceirasRequest2.NumeroPagina_Specified(Index: Integer): boolean;
begin
  Result := FNumeroPagina_Specified;
end;

function BuscaTransacoesFinanceirasRequest2.GetTipoBuscaUnitaria(Index: Integer): Integer;
begin
  Result := FTipoBuscaUnitaria;
end;

procedure BuscaTransacoesFinanceirasRequest2.SetTipoBuscaUnitaria(Index: Integer; const AInteger: Integer);
begin
  FTipoBuscaUnitaria := AInteger;
  FTipoBuscaUnitaria_Specified := True;
end;

function BuscaTransacoesFinanceirasRequest2.TipoBuscaUnitaria_Specified(Index: Integer): boolean;
begin
  Result := FTipoBuscaUnitaria_Specified;
end;

function BuscaTransacoesFinanceirasRequest2.GetTipoTransacaoFinanceira(Index: Integer): Integer;
begin
  Result := FTipoTransacaoFinanceira;
end;

procedure BuscaTransacoesFinanceirasRequest2.SetTipoTransacaoFinanceira(Index: Integer; const AInteger: Integer);
begin
  FTipoTransacaoFinanceira := AInteger;
  FTipoTransacaoFinanceira_Specified := True;
end;

function BuscaTransacoesFinanceirasRequest2.TipoTransacaoFinanceira_Specified(Index: Integer): boolean;
begin
  Result := FTipoTransacaoFinanceira_Specified;
end;

function BuscaTransacoesFinanceirasRequest2.GetIdEntidadeTransacaoFinanceira(Index: Integer): Integer;
begin
  Result := FIdEntidadeTransacaoFinanceira;
end;

procedure BuscaTransacoesFinanceirasRequest2.SetIdEntidadeTransacaoFinanceira(Index: Integer; const AInteger: Integer);
begin
  FIdEntidadeTransacaoFinanceira := AInteger;
  FIdEntidadeTransacaoFinanceira_Specified := True;
end;

function BuscaTransacoesFinanceirasRequest2.IdEntidadeTransacaoFinanceira_Specified(Index: Integer): boolean;
begin
  Result := FIdEntidadeTransacaoFinanceira_Specified;
end;

function BuscaTransacoesFinanceirasRequest2.GetDataInicioPeriodo(Index: Integer): TXSDateTime;
begin
  Result := FDataInicioPeriodo;
end;

procedure BuscaTransacoesFinanceirasRequest2.SetDataInicioPeriodo(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDataInicioPeriodo := ATXSDateTime;
  FDataInicioPeriodo_Specified := True;
end;

function BuscaTransacoesFinanceirasRequest2.DataInicioPeriodo_Specified(Index: Integer): boolean;
begin
  Result := FDataInicioPeriodo_Specified;
end;

function BuscaTransacoesFinanceirasRequest2.GetDataFimPeriodo(Index: Integer): TXSDateTime;
begin
  Result := FDataFimPeriodo;
end;

procedure BuscaTransacoesFinanceirasRequest2.SetDataFimPeriodo(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDataFimPeriodo := ATXSDateTime;
  FDataFimPeriodo_Specified := True;
end;

function BuscaTransacoesFinanceirasRequest2.DataFimPeriodo_Specified(Index: Integer): boolean;
begin
  Result := FDataFimPeriodo_Specified;
end;

function BuscaTransacoesFinanceirasRequest2.GetIdIntegrador(Index: Integer): string;
begin
  Result := FIdIntegrador;
end;

procedure BuscaTransacoesFinanceirasRequest2.SetIdIntegrador(Index: Integer; const Astring: string);
begin
  FIdIntegrador := Astring;
  FIdIntegrador_Specified := True;
end;

function BuscaTransacoesFinanceirasRequest2.IdIntegrador_Specified(Index: Integer): boolean;
begin
  Result := FIdIntegrador_Specified;
end;

function BuscaTransacoesFinanceirasRequest2.GetDocumentoRelacionado(Index: Integer): string;
begin
  Result := FDocumentoRelacionado;
end;

procedure BuscaTransacoesFinanceirasRequest2.SetDocumentoRelacionado(Index: Integer; const Astring: string);
begin
  FDocumentoRelacionado := Astring;
  FDocumentoRelacionado_Specified := True;
end;

function BuscaTransacoesFinanceirasRequest2.DocumentoRelacionado_Specified(Index: Integer): boolean;
begin
  Result := FDocumentoRelacionado_Specified;
end;

function BuscaTransacoesFinanceirasRequest2.GetPago(Index: Integer): Boolean;
begin
  Result := FPago;
end;

procedure BuscaTransacoesFinanceirasRequest2.SetPago(Index: Integer; const ABoolean: Boolean);
begin
  FPago := ABoolean;
  FPago_Specified := True;
end;

function BuscaTransacoesFinanceirasRequest2.Pago_Specified(Index: Integer): boolean;
begin
  Result := FPago_Specified;
end;

function BuscaInformacoesContratacaoRequest2.GetCpfCnpj(Index: Integer): string;
begin
  Result := FCpfCnpj;
end;

procedure BuscaInformacoesContratacaoRequest2.SetCpfCnpj(Index: Integer; const Astring: string);
begin
  FCpfCnpj := Astring;
  FCpfCnpj_Specified := True;
end;

function BuscaInformacoesContratacaoRequest2.CpfCnpj_Specified(Index: Integer): boolean;
begin
  Result := FCpfCnpj_Specified;
end;

function BuscaInformacoesContratacaoResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure BuscaInformacoesContratacaoResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function BuscaInformacoesContratacaoResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function BuscaInformacoesContratacaoResponse2.GetNomeContratado(Index: Integer): string;
begin
  Result := FNomeContratado;
end;

procedure BuscaInformacoesContratacaoResponse2.SetNomeContratado(Index: Integer; const Astring: string);
begin
  FNomeContratado := Astring;
  FNomeContratado_Specified := True;
end;

function BuscaInformacoesContratacaoResponse2.NomeContratado_Specified(Index: Integer): boolean;
begin
  Result := FNomeContratado_Specified;
end;

function BuscaInformacoesContratacaoResponse2.GetRazaoSocialContratado(Index: Integer): string;
begin
  Result := FRazaoSocialContratado;
end;

procedure BuscaInformacoesContratacaoResponse2.SetRazaoSocialContratado(Index: Integer; const Astring: string);
begin
  FRazaoSocialContratado := Astring;
  FRazaoSocialContratado_Specified := True;
end;

function BuscaInformacoesContratacaoResponse2.RazaoSocialContratado_Specified(Index: Integer): boolean;
begin
  Result := FRazaoSocialContratado_Specified;
end;

function BuscaInformacoesContratacaoResponse2.GetCpfCnpjContratado(Index: Integer): string;
begin
  Result := FCpfCnpjContratado;
end;

procedure BuscaInformacoesContratacaoResponse2.SetCpfCnpjContratado(Index: Integer; const Astring: string);
begin
  FCpfCnpjContratado := Astring;
  FCpfCnpjContratado_Specified := True;
end;

function BuscaInformacoesContratacaoResponse2.CpfCnpjContratado_Specified(Index: Integer): boolean;
begin
  Result := FCpfCnpjContratado_Specified;
end;

function BuscaInformacoesContratacaoResponse2.GetDadosContaBancaria(Index: Integer): DadosContaBancariaResponse2;
begin
  Result := FDadosContaBancaria;
end;

procedure BuscaInformacoesContratacaoResponse2.SetDadosContaBancaria(Index: Integer; const ADadosContaBancariaResponse2: DadosContaBancariaResponse2);
begin
  FDadosContaBancaria := ADadosContaBancariaResponse2;
  FDadosContaBancaria_Specified := True;
end;

function BuscaInformacoesContratacaoResponse2.DadosContaBancaria_Specified(Index: Integer): boolean;
begin
  Result := FDadosContaBancaria_Specified;
end;

function BuscaInformacoesContratacaoResponse2.GetListaCondutorResponse(Index: Integer): ArrayOfCondutorResponse;
begin
  Result := FListaCondutorResponse;
end;

procedure BuscaInformacoesContratacaoResponse2.SetListaCondutorResponse(Index: Integer; const AArrayOfCondutorResponse: ArrayOfCondutorResponse);
begin
  FListaCondutorResponse := AArrayOfCondutorResponse;
  FListaCondutorResponse_Specified := True;
end;

function BuscaInformacoesContratacaoResponse2.ListaCondutorResponse_Specified(Index: Integer): boolean;
begin
  Result := FListaCondutorResponse_Specified;
end;

function DadosContaBancariaResponse2.GetCodigoBanco(Index: Integer): string;
begin
  Result := FCodigoBanco;
end;

procedure DadosContaBancariaResponse2.SetCodigoBanco(Index: Integer; const Astring: string);
begin
  FCodigoBanco := Astring;
  FCodigoBanco_Specified := True;
end;

function DadosContaBancariaResponse2.CodigoBanco_Specified(Index: Integer): boolean;
begin
  Result := FCodigoBanco_Specified;
end;

function DadosContaBancariaResponse2.GetAgenciaDeposito(Index: Integer): string;
begin
  Result := FAgenciaDeposito;
end;

procedure DadosContaBancariaResponse2.SetAgenciaDeposito(Index: Integer; const Astring: string);
begin
  FAgenciaDeposito := Astring;
  FAgenciaDeposito_Specified := True;
end;

function DadosContaBancariaResponse2.AgenciaDeposito_Specified(Index: Integer): boolean;
begin
  Result := FAgenciaDeposito_Specified;
end;

function DadosContaBancariaResponse2.GetDigitoAgencia(Index: Integer): string;
begin
  Result := FDigitoAgencia;
end;

procedure DadosContaBancariaResponse2.SetDigitoAgencia(Index: Integer; const Astring: string);
begin
  FDigitoAgencia := Astring;
  FDigitoAgencia_Specified := True;
end;

function DadosContaBancariaResponse2.DigitoAgencia_Specified(Index: Integer): boolean;
begin
  Result := FDigitoAgencia_Specified;
end;

function DadosContaBancariaResponse2.GetContaDeposito(Index: Integer): string;
begin
  Result := FContaDeposito;
end;

procedure DadosContaBancariaResponse2.SetContaDeposito(Index: Integer; const Astring: string);
begin
  FContaDeposito := Astring;
  FContaDeposito_Specified := True;
end;

function DadosContaBancariaResponse2.ContaDeposito_Specified(Index: Integer): boolean;
begin
  Result := FContaDeposito_Specified;
end;

function DadosContaBancariaResponse2.GetDigitoContaDeposito(Index: Integer): string;
begin
  Result := FDigitoContaDeposito;
end;

procedure DadosContaBancariaResponse2.SetDigitoContaDeposito(Index: Integer; const Astring: string);
begin
  FDigitoContaDeposito := Astring;
  FDigitoContaDeposito_Specified := True;
end;

function DadosContaBancariaResponse2.DigitoContaDeposito_Specified(Index: Integer): boolean;
begin
  Result := FDigitoContaDeposito_Specified;
end;

function DadosContaBancariaResponse2.GetContaPoupanca(Index: Integer): Boolean;
begin
  Result := FContaPoupanca;
end;

procedure DadosContaBancariaResponse2.SetContaPoupanca(Index: Integer; const ABoolean: Boolean);
begin
  FContaPoupanca := ABoolean;
  FContaPoupanca_Specified := True;
end;

function DadosContaBancariaResponse2.ContaPoupanca_Specified(Index: Integer): boolean;
begin
  Result := FContaPoupanca_Specified;
end;

function DadosContaBancariaResponse2.GetVariacaoContaPoupanca(Index: Integer): string;
begin
  Result := FVariacaoContaPoupanca;
end;

procedure DadosContaBancariaResponse2.SetVariacaoContaPoupanca(Index: Integer; const Astring: string);
begin
  FVariacaoContaPoupanca := Astring;
  FVariacaoContaPoupanca_Specified := True;
end;

function DadosContaBancariaResponse2.VariacaoContaPoupanca_Specified(Index: Integer): boolean;
begin
  Result := FVariacaoContaPoupanca_Specified;
end;

function ResultadoPaginadoBuscaTransacoesFinanceirasResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure ResultadoPaginadoBuscaTransacoesFinanceirasResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function ResultadoPaginadoBuscaTransacoesFinanceirasResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function ResultadoPaginadoBuscaTransacoesFinanceirasResponse2.GetItens(Index: Integer): ArrayOfBuscaTransacoesFinanceirasResponse;
begin
  Result := FItens;
end;

procedure ResultadoPaginadoBuscaTransacoesFinanceirasResponse2.SetItens(Index: Integer; const AArrayOfBuscaTransacoesFinanceirasResponse: ArrayOfBuscaTransacoesFinanceirasResponse);
begin
  FItens := AArrayOfBuscaTransacoesFinanceirasResponse;
  FItens_Specified := True;
end;

function ResultadoPaginadoBuscaTransacoesFinanceirasResponse2.Itens_Specified(Index: Integer): boolean;
begin
  Result := FItens_Specified;
end;

function ResultadoPaginadoBuscaTransacoesFinanceirasResponse2.GetNumeroPagina(Index: Integer): Integer;
begin
  Result := FNumeroPagina;
end;

procedure ResultadoPaginadoBuscaTransacoesFinanceirasResponse2.SetNumeroPagina(Index: Integer; const AInteger: Integer);
begin
  FNumeroPagina := AInteger;
  FNumeroPagina_Specified := True;
end;

function ResultadoPaginadoBuscaTransacoesFinanceirasResponse2.NumeroPagina_Specified(Index: Integer): boolean;
begin
  Result := FNumeroPagina_Specified;
end;

function ResultadoPaginadoBuscaTransacoesFinanceirasResponse2.GetQuantidadeItensPorPagina(Index: Integer): Integer;
begin
  Result := FQuantidadeItensPorPagina;
end;

procedure ResultadoPaginadoBuscaTransacoesFinanceirasResponse2.SetQuantidadeItensPorPagina(Index: Integer; const AInteger: Integer);
begin
  FQuantidadeItensPorPagina := AInteger;
  FQuantidadeItensPorPagina_Specified := True;
end;

function ResultadoPaginadoBuscaTransacoesFinanceirasResponse2.QuantidadeItensPorPagina_Specified(Index: Integer): boolean;
begin
  Result := FQuantidadeItensPorPagina_Specified;
end;

function ResultadoPaginadoBuscaTransacoesFinanceirasResponse2.GetQuantidadeTotalItens(Index: Integer): Integer;
begin
  Result := FQuantidadeTotalItens;
end;

procedure ResultadoPaginadoBuscaTransacoesFinanceirasResponse2.SetQuantidadeTotalItens(Index: Integer; const AInteger: Integer);
begin
  FQuantidadeTotalItens := AInteger;
  FQuantidadeTotalItens_Specified := True;
end;

function ResultadoPaginadoBuscaTransacoesFinanceirasResponse2.QuantidadeTotalItens_Specified(Index: Integer): boolean;
begin
  Result := FQuantidadeTotalItens_Specified;
end;

function ResultadoPaginadoBuscaTransacoesFinanceirasResponse2.GetQuantidadeTotalPaginas(Index: Integer): Integer;
begin
  Result := FQuantidadeTotalPaginas;
end;

procedure ResultadoPaginadoBuscaTransacoesFinanceirasResponse2.SetQuantidadeTotalPaginas(Index: Integer; const AInteger: Integer);
begin
  FQuantidadeTotalPaginas := AInteger;
  FQuantidadeTotalPaginas_Specified := True;
end;

function ResultadoPaginadoBuscaTransacoesFinanceirasResponse2.QuantidadeTotalPaginas_Specified(Index: Integer): boolean;
begin
  Result := FQuantidadeTotalPaginas_Specified;
end;

function ConsultaTaxasCalculadasResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure ConsultaTaxasCalculadasResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function ConsultaTaxasCalculadasResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function ConsultaTaxasCalculadasResponse2.GetIdTaxaCalculada(Index: Integer): Integer;
begin
  Result := FIdTaxaCalculada;
end;

procedure ConsultaTaxasCalculadasResponse2.SetIdTaxaCalculada(Index: Integer; const AInteger: Integer);
begin
  FIdTaxaCalculada := AInteger;
  FIdTaxaCalculada_Specified := True;
end;

function ConsultaTaxasCalculadasResponse2.IdTaxaCalculada_Specified(Index: Integer): boolean;
begin
  Result := FIdTaxaCalculada_Specified;
end;

function ConsultaTaxasCalculadasResponse2.GetTipoTransacaoFinanceira(Index: Integer): string;
begin
  Result := FTipoTransacaoFinanceira;
end;

procedure ConsultaTaxasCalculadasResponse2.SetTipoTransacaoFinanceira(Index: Integer; const Astring: string);
begin
  FTipoTransacaoFinanceira := Astring;
  FTipoTransacaoFinanceira_Specified := True;
end;

function ConsultaTaxasCalculadasResponse2.TipoTransacaoFinanceira_Specified(Index: Integer): boolean;
begin
  Result := FTipoTransacaoFinanceira_Specified;
end;

function ConsultaTaxasCalculadasResponse2.GetAvulso(Index: Integer): Boolean;
begin
  Result := FAvulso;
end;

procedure ConsultaTaxasCalculadasResponse2.SetAvulso(Index: Integer; const ABoolean: Boolean);
begin
  FAvulso := ABoolean;
  FAvulso_Specified := True;
end;

function ConsultaTaxasCalculadasResponse2.Avulso_Specified(Index: Integer): boolean;
begin
  Result := FAvulso_Specified;
end;

function ConsultaTaxasCalculadasResponse2.GetIdEntidadeTransacaoFinanceira(Index: Integer): Integer;
begin
  Result := FIdEntidadeTransacaoFinanceira;
end;

procedure ConsultaTaxasCalculadasResponse2.SetIdEntidadeTransacaoFinanceira(Index: Integer; const AInteger: Integer);
begin
  FIdEntidadeTransacaoFinanceira := AInteger;
  FIdEntidadeTransacaoFinanceira_Specified := True;
end;

function ConsultaTaxasCalculadasResponse2.IdEntidadeTransacaoFinanceira_Specified(Index: Integer): boolean;
begin
  Result := FIdEntidadeTransacaoFinanceira_Specified;
end;

function ConsultaTaxasCalculadasResponse2.GetIdOperacaoTransporteRelacionada(Index: Integer): Integer;
begin
  Result := FIdOperacaoTransporteRelacionada;
end;

procedure ConsultaTaxasCalculadasResponse2.SetIdOperacaoTransporteRelacionada(Index: Integer; const AInteger: Integer);
begin
  FIdOperacaoTransporteRelacionada := AInteger;
  FIdOperacaoTransporteRelacionada_Specified := True;
end;

function ConsultaTaxasCalculadasResponse2.IdOperacaoTransporteRelacionada_Specified(Index: Integer): boolean;
begin
  Result := FIdOperacaoTransporteRelacionada_Specified;
end;

function ConsultaTaxasCalculadasResponse2.GetValorTransacao(Index: Integer): TXSDecimal;
begin
  Result := FValorTransacao;
end;

procedure ConsultaTaxasCalculadasResponse2.SetValorTransacao(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorTransacao := ATXSDecimal;
  FValorTransacao_Specified := True;
end;

function ConsultaTaxasCalculadasResponse2.ValorTransacao_Specified(Index: Integer): boolean;
begin
  Result := FValorTransacao_Specified;
end;

function ConsultaTaxasCalculadasResponse2.GetValorTaxa(Index: Integer): TXSDecimal;
begin
  Result := FValorTaxa;
end;

procedure ConsultaTaxasCalculadasResponse2.SetValorTaxa(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorTaxa := ATXSDecimal;
  FValorTaxa_Specified := True;
end;

function ConsultaTaxasCalculadasResponse2.ValorTaxa_Specified(Index: Integer): boolean;
begin
  Result := FValorTaxa_Specified;
end;

function ConsultaTaxasCalculadasResponse2.GetDataCalculoTaxa(Index: Integer): TXSDateTime;
begin
  Result := FDataCalculoTaxa;
end;

procedure ConsultaTaxasCalculadasResponse2.SetDataCalculoTaxa(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDataCalculoTaxa := ATXSDateTime;
  FDataCalculoTaxa_Specified := True;
end;

function ConsultaTaxasCalculadasResponse2.DataCalculoTaxa_Specified(Index: Integer): boolean;
begin
  Result := FDataCalculoTaxa_Specified;
end;

function TrocaPlacaCompraValePedagioTAGRequest2.GetIdCompraValePedagioViaFacil(Index: Integer): Integer;
begin
  Result := FIdCompraValePedagioViaFacil;
end;

procedure TrocaPlacaCompraValePedagioTAGRequest2.SetIdCompraValePedagioViaFacil(Index: Integer; const AInteger: Integer);
begin
  FIdCompraValePedagioViaFacil := AInteger;
  FIdCompraValePedagioViaFacil_Specified := True;
end;

function TrocaPlacaCompraValePedagioTAGRequest2.IdCompraValePedagioViaFacil_Specified(Index: Integer): boolean;
begin
  Result := FIdCompraValePedagioViaFacil_Specified;
end;

function TrocaPlacaCompraValePedagioTAGRequest2.GetNovaPlaca(Index: Integer): string;
begin
  Result := FNovaPlaca;
end;

procedure TrocaPlacaCompraValePedagioTAGRequest2.SetNovaPlaca(Index: Integer; const Astring: string);
begin
  FNovaPlaca := Astring;
  FNovaPlaca_Specified := True;
end;

function TrocaPlacaCompraValePedagioTAGRequest2.NovaPlaca_Specified(Index: Integer): boolean;
begin
  Result := FNovaPlaca_Specified;
end;

function TrocaPlacaCompraValePedagioTAGResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure TrocaPlacaCompraValePedagioTAGResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function TrocaPlacaCompraValePedagioTAGResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function TrocaPlacaCompraValePedagioTAGResponse2.GetMensagem(Index: Integer): string;
begin
  Result := FMensagem;
end;

procedure TrocaPlacaCompraValePedagioTAGResponse2.SetMensagem(Index: Integer; const Astring: string);
begin
  FMensagem := Astring;
  FMensagem_Specified := True;
end;

function TrocaPlacaCompraValePedagioTAGResponse2.Mensagem_Specified(Index: Integer): boolean;
begin
  Result := FMensagem_Specified;
end;

function BuscaTransacoesFinanceirasResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure BuscaTransacoesFinanceirasResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function BuscaTransacoesFinanceirasResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function BuscaTransacoesFinanceirasResponse2.GetIdEntidadeTransacaoFinanceira(Index: Integer): Integer;
begin
  Result := FIdEntidadeTransacaoFinanceira;
end;

procedure BuscaTransacoesFinanceirasResponse2.SetIdEntidadeTransacaoFinanceira(Index: Integer; const AInteger: Integer);
begin
  FIdEntidadeTransacaoFinanceira := AInteger;
  FIdEntidadeTransacaoFinanceira_Specified := True;
end;

function BuscaTransacoesFinanceirasResponse2.IdEntidadeTransacaoFinanceira_Specified(Index: Integer): boolean;
begin
  Result := FIdEntidadeTransacaoFinanceira_Specified;
end;

function BuscaTransacoesFinanceirasResponse2.GetIdOperacaoTransporteRelacionada(Index: Integer): Integer;
begin
  Result := FIdOperacaoTransporteRelacionada;
end;

procedure BuscaTransacoesFinanceirasResponse2.SetIdOperacaoTransporteRelacionada(Index: Integer; const AInteger: Integer);
begin
  FIdOperacaoTransporteRelacionada := AInteger;
  FIdOperacaoTransporteRelacionada_Specified := True;
end;

function BuscaTransacoesFinanceirasResponse2.IdOperacaoTransporteRelacionada_Specified(Index: Integer): boolean;
begin
  Result := FIdOperacaoTransporteRelacionada_Specified;
end;

function BuscaTransacoesFinanceirasResponse2.GetTipoTransacaoFinanceira(Index: Integer): string;
begin
  Result := FTipoTransacaoFinanceira;
end;

procedure BuscaTransacoesFinanceirasResponse2.SetTipoTransacaoFinanceira(Index: Integer; const Astring: string);
begin
  FTipoTransacaoFinanceira := Astring;
  FTipoTransacaoFinanceira_Specified := True;
end;

function BuscaTransacoesFinanceirasResponse2.TipoTransacaoFinanceira_Specified(Index: Integer): boolean;
begin
  Result := FTipoTransacaoFinanceira_Specified;
end;

function BuscaTransacoesFinanceirasResponse2.GetValor(Index: Integer): TXSDecimal;
begin
  Result := FValor;
end;

procedure BuscaTransacoesFinanceirasResponse2.SetValor(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValor := ATXSDecimal;
  FValor_Specified := True;
end;

function BuscaTransacoesFinanceirasResponse2.Valor_Specified(Index: Integer): boolean;
begin
  Result := FValor_Specified;
end;

function BuscaTransacoesFinanceirasResponse2.GetSituacao(Index: Integer): string;
begin
  Result := FSituacao;
end;

procedure BuscaTransacoesFinanceirasResponse2.SetSituacao(Index: Integer; const Astring: string);
begin
  FSituacao := Astring;
  FSituacao_Specified := True;
end;

function BuscaTransacoesFinanceirasResponse2.Situacao_Specified(Index: Integer): boolean;
begin
  Result := FSituacao_Specified;
end;

function BuscaTransacoesFinanceirasResponse2.GetModoPagamento(Index: Integer): string;
begin
  Result := FModoPagamento;
end;

procedure BuscaTransacoesFinanceirasResponse2.SetModoPagamento(Index: Integer; const Astring: string);
begin
  FModoPagamento := Astring;
  FModoPagamento_Specified := True;
end;

function BuscaTransacoesFinanceirasResponse2.ModoPagamento_Specified(Index: Integer): boolean;
begin
  Result := FModoPagamento_Specified;
end;

function BuscaTransacoesFinanceirasResponse2.GetComentario(Index: Integer): string;
begin
  Result := FComentario;
end;

procedure BuscaTransacoesFinanceirasResponse2.SetComentario(Index: Integer; const Astring: string);
begin
  FComentario := Astring;
  FComentario_Specified := True;
end;

function BuscaTransacoesFinanceirasResponse2.Comentario_Specified(Index: Integer): boolean;
begin
  Result := FComentario_Specified;
end;

function BuscaTransacoesFinanceirasResponse2.GetDataRegistro(Index: Integer): TXSDateTime;
begin
  Result := FDataRegistro;
end;

procedure BuscaTransacoesFinanceirasResponse2.SetDataRegistro(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDataRegistro := ATXSDateTime;
  FDataRegistro_Specified := True;
end;

function BuscaTransacoesFinanceirasResponse2.DataRegistro_Specified(Index: Integer): boolean;
begin
  Result := FDataRegistro_Specified;
end;

function BuscaTransacoesFinanceirasResponse2.GetDataPagamento(Index: Integer): TXSDateTime;
begin
  Result := FDataPagamento;
end;

procedure BuscaTransacoesFinanceirasResponse2.SetDataPagamento(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDataPagamento := ATXSDateTime;
  FDataPagamento_Specified := True;
end;

function BuscaTransacoesFinanceirasResponse2.DataPagamento_Specified(Index: Integer): boolean;
begin
  Result := FDataPagamento_Specified;
end;

function ConsultaTaxasCalculadasRequest2.GetQuantidadeItensPorPagina(Index: Integer): Integer;
begin
  Result := FQuantidadeItensPorPagina;
end;

procedure ConsultaTaxasCalculadasRequest2.SetQuantidadeItensPorPagina(Index: Integer; const AInteger: Integer);
begin
  FQuantidadeItensPorPagina := AInteger;
  FQuantidadeItensPorPagina_Specified := True;
end;

function ConsultaTaxasCalculadasRequest2.QuantidadeItensPorPagina_Specified(Index: Integer): boolean;
begin
  Result := FQuantidadeItensPorPagina_Specified;
end;

function ConsultaTaxasCalculadasRequest2.GetNumeroPagina(Index: Integer): Integer;
begin
  Result := FNumeroPagina;
end;

procedure ConsultaTaxasCalculadasRequest2.SetNumeroPagina(Index: Integer; const AInteger: Integer);
begin
  FNumeroPagina := AInteger;
  FNumeroPagina_Specified := True;
end;

function ConsultaTaxasCalculadasRequest2.NumeroPagina_Specified(Index: Integer): boolean;
begin
  Result := FNumeroPagina_Specified;
end;

function ConsultaTaxasCalculadasRequest2.GetTipoTransacaoFinanceira(Index: Integer): Integer;
begin
  Result := FTipoTransacaoFinanceira;
end;

procedure ConsultaTaxasCalculadasRequest2.SetTipoTransacaoFinanceira(Index: Integer; const AInteger: Integer);
begin
  FTipoTransacaoFinanceira := AInteger;
  FTipoTransacaoFinanceira_Specified := True;
end;

function ConsultaTaxasCalculadasRequest2.TipoTransacaoFinanceira_Specified(Index: Integer): boolean;
begin
  Result := FTipoTransacaoFinanceira_Specified;
end;

function ConsultaTaxasCalculadasRequest2.GetTipoBuscaUnitaria(Index: Integer): Integer;
begin
  Result := FTipoBuscaUnitaria;
end;

procedure ConsultaTaxasCalculadasRequest2.SetTipoBuscaUnitaria(Index: Integer; const AInteger: Integer);
begin
  FTipoBuscaUnitaria := AInteger;
  FTipoBuscaUnitaria_Specified := True;
end;

function ConsultaTaxasCalculadasRequest2.TipoBuscaUnitaria_Specified(Index: Integer): boolean;
begin
  Result := FTipoBuscaUnitaria_Specified;
end;

function ConsultaTaxasCalculadasRequest2.GetIdEntidadeTransacaoFinanceira(Index: Integer): Integer;
begin
  Result := FIdEntidadeTransacaoFinanceira;
end;

procedure ConsultaTaxasCalculadasRequest2.SetIdEntidadeTransacaoFinanceira(Index: Integer; const AInteger: Integer);
begin
  FIdEntidadeTransacaoFinanceira := AInteger;
  FIdEntidadeTransacaoFinanceira_Specified := True;
end;

function ConsultaTaxasCalculadasRequest2.IdEntidadeTransacaoFinanceira_Specified(Index: Integer): boolean;
begin
  Result := FIdEntidadeTransacaoFinanceira_Specified;
end;

function ConsultaTaxasCalculadasRequest2.GetDataInicioPeriodo(Index: Integer): TXSDateTime;
begin
  Result := FDataInicioPeriodo;
end;

procedure ConsultaTaxasCalculadasRequest2.SetDataInicioPeriodo(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDataInicioPeriodo := ATXSDateTime;
  FDataInicioPeriodo_Specified := True;
end;

function ConsultaTaxasCalculadasRequest2.DataInicioPeriodo_Specified(Index: Integer): boolean;
begin
  Result := FDataInicioPeriodo_Specified;
end;

function ConsultaTaxasCalculadasRequest2.GetDataFimPeriodo(Index: Integer): TXSDateTime;
begin
  Result := FDataFimPeriodo;
end;

procedure ConsultaTaxasCalculadasRequest2.SetDataFimPeriodo(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDataFimPeriodo := ATXSDateTime;
  FDataFimPeriodo_Specified := True;
end;

function ConsultaTaxasCalculadasRequest2.DataFimPeriodo_Specified(Index: Integer): boolean;
begin
  Result := FDataFimPeriodo_Specified;
end;

function ConsultaTaxasCalculadasRequest2.GetIdIntegrador(Index: Integer): string;
begin
  Result := FIdIntegrador;
end;

procedure ConsultaTaxasCalculadasRequest2.SetIdIntegrador(Index: Integer; const Astring: string);
begin
  FIdIntegrador := Astring;
  FIdIntegrador_Specified := True;
end;

function ConsultaTaxasCalculadasRequest2.IdIntegrador_Specified(Index: Integer): boolean;
begin
  Result := FIdIntegrador_Specified;
end;

function ConsultaTaxasCalculadasRequest2.GetDocumentoRelacionado(Index: Integer): string;
begin
  Result := FDocumentoRelacionado;
end;

procedure ConsultaTaxasCalculadasRequest2.SetDocumentoRelacionado(Index: Integer; const Astring: string);
begin
  FDocumentoRelacionado := Astring;
  FDocumentoRelacionado_Specified := True;
end;

function ConsultaTaxasCalculadasRequest2.DocumentoRelacionado_Specified(Index: Integer): boolean;
begin
  Result := FDocumentoRelacionado_Specified;
end;

function ResultadoPaginadoConsultaTaxasCalculadasResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure ResultadoPaginadoConsultaTaxasCalculadasResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function ResultadoPaginadoConsultaTaxasCalculadasResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function ResultadoPaginadoConsultaTaxasCalculadasResponse2.GetItens(Index: Integer): ArrayOfConsultaTaxasCalculadasResponse;
begin
  Result := FItens;
end;

procedure ResultadoPaginadoConsultaTaxasCalculadasResponse2.SetItens(Index: Integer; const AArrayOfConsultaTaxasCalculadasResponse: ArrayOfConsultaTaxasCalculadasResponse);
begin
  FItens := AArrayOfConsultaTaxasCalculadasResponse;
  FItens_Specified := True;
end;

function ResultadoPaginadoConsultaTaxasCalculadasResponse2.Itens_Specified(Index: Integer): boolean;
begin
  Result := FItens_Specified;
end;

function ResultadoPaginadoConsultaTaxasCalculadasResponse2.GetNumeroPagina(Index: Integer): Integer;
begin
  Result := FNumeroPagina;
end;

procedure ResultadoPaginadoConsultaTaxasCalculadasResponse2.SetNumeroPagina(Index: Integer; const AInteger: Integer);
begin
  FNumeroPagina := AInteger;
  FNumeroPagina_Specified := True;
end;

function ResultadoPaginadoConsultaTaxasCalculadasResponse2.NumeroPagina_Specified(Index: Integer): boolean;
begin
  Result := FNumeroPagina_Specified;
end;

function ResultadoPaginadoConsultaTaxasCalculadasResponse2.GetQuantidadeItensPorPagina(Index: Integer): Integer;
begin
  Result := FQuantidadeItensPorPagina;
end;

procedure ResultadoPaginadoConsultaTaxasCalculadasResponse2.SetQuantidadeItensPorPagina(Index: Integer; const AInteger: Integer);
begin
  FQuantidadeItensPorPagina := AInteger;
  FQuantidadeItensPorPagina_Specified := True;
end;

function ResultadoPaginadoConsultaTaxasCalculadasResponse2.QuantidadeItensPorPagina_Specified(Index: Integer): boolean;
begin
  Result := FQuantidadeItensPorPagina_Specified;
end;

function ResultadoPaginadoConsultaTaxasCalculadasResponse2.GetQuantidadeTotalItens(Index: Integer): Integer;
begin
  Result := FQuantidadeTotalItens;
end;

procedure ResultadoPaginadoConsultaTaxasCalculadasResponse2.SetQuantidadeTotalItens(Index: Integer; const AInteger: Integer);
begin
  FQuantidadeTotalItens := AInteger;
  FQuantidadeTotalItens_Specified := True;
end;

function ResultadoPaginadoConsultaTaxasCalculadasResponse2.QuantidadeTotalItens_Specified(Index: Integer): boolean;
begin
  Result := FQuantidadeTotalItens_Specified;
end;

function ResultadoPaginadoConsultaTaxasCalculadasResponse2.GetQuantidadeTotalPaginas(Index: Integer): Integer;
begin
  Result := FQuantidadeTotalPaginas;
end;

procedure ResultadoPaginadoConsultaTaxasCalculadasResponse2.SetQuantidadeTotalPaginas(Index: Integer; const AInteger: Integer);
begin
  FQuantidadeTotalPaginas := AInteger;
  FQuantidadeTotalPaginas_Specified := True;
end;

function ResultadoPaginadoConsultaTaxasCalculadasResponse2.QuantidadeTotalPaginas_Specified(Index: Integer): boolean;
begin
  Result := FQuantidadeTotalPaginas_Specified;
end;

function ConsultaRotaMapLinkPedagiosResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure ConsultaRotaMapLinkPedagiosResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function ConsultaRotaMapLinkPedagiosResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function ConsultaRotaMapLinkPedagiosResponse2.GetIdPedagio(Index: Integer): Integer;
begin
  Result := FIdPedagio;
end;

procedure ConsultaRotaMapLinkPedagiosResponse2.SetIdPedagio(Index: Integer; const AInteger: Integer);
begin
  FIdPedagio := AInteger;
  FIdPedagio_Specified := True;
end;

function ConsultaRotaMapLinkPedagiosResponse2.IdPedagio_Specified(Index: Integer): boolean;
begin
  Result := FIdPedagio_Specified;
end;

function ConsultaRotaMapLinkPedagiosResponse2.GetFormaPagamento(Index: Integer): string;
begin
  Result := FFormaPagamento;
end;

procedure ConsultaRotaMapLinkPedagiosResponse2.SetFormaPagamento(Index: Integer; const Astring: string);
begin
  FFormaPagamento := Astring;
  FFormaPagamento_Specified := True;
end;

function ConsultaRotaMapLinkPedagiosResponse2.FormaPagamento_Specified(Index: Integer): boolean;
begin
  Result := FFormaPagamento_Specified;
end;

function ConsultaRotaMapLinkPedagiosResponse2.GetValor(Index: Integer): TXSDecimal;
begin
  Result := FValor;
end;

procedure ConsultaRotaMapLinkPedagiosResponse2.SetValor(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValor := ATXSDecimal;
  FValor_Specified := True;
end;

function ConsultaRotaMapLinkPedagiosResponse2.Valor_Specified(Index: Integer): boolean;
begin
  Result := FValor_Specified;
end;

function ConsultaRotaMapLinkPedagiosResponse2.GetNome(Index: Integer): string;
begin
  Result := FNome;
end;

procedure ConsultaRotaMapLinkPedagiosResponse2.SetNome(Index: Integer; const Astring: string);
begin
  FNome := Astring;
  FNome_Specified := True;
end;

function ConsultaRotaMapLinkPedagiosResponse2.Nome_Specified(Index: Integer): boolean;
begin
  Result := FNome_Specified;
end;

function ConsultaRotaMapLinkParadaResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure ConsultaRotaMapLinkParadaResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function ConsultaRotaMapLinkParadaResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function ConsultaRotaMapLinkParadaResponse2.GetDescricao(Index: Integer): string;
begin
  Result := FDescricao;
end;

procedure ConsultaRotaMapLinkParadaResponse2.SetDescricao(Index: Integer; const Astring: string);
begin
  FDescricao := Astring;
  FDescricao_Specified := True;
end;

function ConsultaRotaMapLinkParadaResponse2.Descricao_Specified(Index: Integer): boolean;
begin
  Result := FDescricao_Specified;
end;

function ConsultaRotaMapLinkParadaResponse2.GetPontoX(Index: Integer): Double;
begin
  Result := FPontoX;
end;

procedure ConsultaRotaMapLinkParadaResponse2.SetPontoX(Index: Integer; const ADouble: Double);
begin
  FPontoX := ADouble;
  FPontoX_Specified := True;
end;

function ConsultaRotaMapLinkParadaResponse2.PontoX_Specified(Index: Integer): boolean;
begin
  Result := FPontoX_Specified;
end;

function ConsultaRotaMapLinkParadaResponse2.GetPontoY(Index: Integer): Double;
begin
  Result := FPontoY;
end;

procedure ConsultaRotaMapLinkParadaResponse2.SetPontoY(Index: Integer; const ADouble: Double);
begin
  FPontoY := ADouble;
  FPontoY_Specified := True;
end;

function ConsultaRotaMapLinkParadaResponse2.PontoY_Specified(Index: Integer): boolean;
begin
  Result := FPontoY_Specified;
end;

function RotaDetalhadaParada2.GetLAT(Index: Integer): Double;
begin
  Result := FLAT;
end;

procedure RotaDetalhadaParada2.SetLAT(Index: Integer; const ADouble: Double);
begin
  FLAT := ADouble;
  FLAT_Specified := True;
end;

function RotaDetalhadaParada2.LAT_Specified(Index: Integer): boolean;
begin
  Result := FLAT_Specified;
end;

function RotaDetalhadaParada2.GetLNG(Index: Integer): Double;
begin
  Result := FLNG;
end;

procedure RotaDetalhadaParada2.SetLNG(Index: Integer; const ADouble: Double);
begin
  FLNG := ADouble;
  FLNG_Specified := True;
end;

function RotaDetalhadaParada2.LNG_Specified(Index: Integer): boolean;
begin
  Result := FLNG_Specified;
end;

function RotaDetalhadaParada2.GetCEP(Index: Integer): string;
begin
  Result := FCEP;
end;

procedure RotaDetalhadaParada2.SetCEP(Index: Integer; const Astring: string);
begin
  FCEP := Astring;
  FCEP_Specified := True;
end;

function RotaDetalhadaParada2.CEP_Specified(Index: Integer): boolean;
begin
  Result := FCEP_Specified;
end;

function RotaDetalhadaParada2.GetCodigoIBGEMunicipio(Index: Integer): Integer;
begin
  Result := FCodigoIBGEMunicipio;
end;

procedure RotaDetalhadaParada2.SetCodigoIBGEMunicipio(Index: Integer; const AInteger: Integer);
begin
  FCodigoIBGEMunicipio := AInteger;
  FCodigoIBGEMunicipio_Specified := True;
end;

function RotaDetalhadaParada2.CodigoIBGEMunicipio_Specified(Index: Integer): boolean;
begin
  Result := FCodigoIBGEMunicipio_Specified;
end;

function RotaDetalhadaInfoParada2.GetCidade(Index: Integer): string;
begin
  Result := FCidade;
end;

procedure RotaDetalhadaInfoParada2.SetCidade(Index: Integer; const Astring: string);
begin
  FCidade := Astring;
  FCidade_Specified := True;
end;

function RotaDetalhadaInfoParada2.Cidade_Specified(Index: Integer): boolean;
begin
  Result := FCidade_Specified;
end;

function RotaDetalhadaInfoParada2.GetEndereco(Index: Integer): string;
begin
  Result := FEndereco;
end;

procedure RotaDetalhadaInfoParada2.SetEndereco(Index: Integer; const Astring: string);
begin
  FEndereco := Astring;
  FEndereco_Specified := True;
end;

function RotaDetalhadaInfoParada2.Endereco_Specified(Index: Integer): boolean;
begin
  Result := FEndereco_Specified;
end;

function RotaDetalhadaInfoParada2.GetLatitude(Index: Integer): Double;
begin
  Result := FLatitude;
end;

procedure RotaDetalhadaInfoParada2.SetLatitude(Index: Integer; const ADouble: Double);
begin
  FLatitude := ADouble;
  FLatitude_Specified := True;
end;

function RotaDetalhadaInfoParada2.Latitude_Specified(Index: Integer): boolean;
begin
  Result := FLatitude_Specified;
end;

function RotaDetalhadaInfoParada2.GetLongitude(Index: Integer): Double;
begin
  Result := FLongitude;
end;

procedure RotaDetalhadaInfoParada2.SetLongitude(Index: Integer; const ADouble: Double);
begin
  FLongitude := ADouble;
  FLongitude_Specified := True;
end;

function RotaDetalhadaInfoParada2.Longitude_Specified(Index: Integer): boolean;
begin
  Result := FLongitude_Specified;
end;

function RotaDetalhadaInfoParada2.GetCep(Index: Integer): string;
begin
  Result := FCep;
end;

procedure RotaDetalhadaInfoParada2.SetCep(Index: Integer; const Astring: string);
begin
  FCep := Astring;
  FCep_Specified := True;
end;

function RotaDetalhadaInfoParada2.Cep_Specified(Index: Integer): boolean;
begin
  Result := FCep_Specified;
end;

function RotaDetalhadaInfoParada2.GetOrdem(Index: Integer): Integer;
begin
  Result := FOrdem;
end;

procedure RotaDetalhadaInfoParada2.SetOrdem(Index: Integer; const AInteger: Integer);
begin
  FOrdem := AInteger;
  FOrdem_Specified := True;
end;

function RotaDetalhadaInfoParada2.Ordem_Specified(Index: Integer): boolean;
begin
  Result := FOrdem_Specified;
end;

function RotaResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure RotaResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function RotaResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function RotaResponse2.GetIdRotaCliente(Index: Integer): Integer;
begin
  Result := FIdRotaCliente;
end;

procedure RotaResponse2.SetIdRotaCliente(Index: Integer; const AInteger: Integer);
begin
  FIdRotaCliente := AInteger;
  FIdRotaCliente_Specified := True;
end;

function RotaResponse2.IdRotaCliente_Specified(Index: Integer): boolean;
begin
  Result := FIdRotaCliente_Specified;
end;

function RotaResponse2.GetNomeRota(Index: Integer): string;
begin
  Result := FNomeRota;
end;

procedure RotaResponse2.SetNomeRota(Index: Integer; const Astring: string);
begin
  FNomeRota := Astring;
  FNomeRota_Specified := True;
end;

function RotaResponse2.NomeRota_Specified(Index: Integer): boolean;
begin
  Result := FNomeRota_Specified;
end;

function RotaResponse2.GetDataHoraCadastro(Index: Integer): TXSDateTime;
begin
  Result := FDataHoraCadastro;
end;

procedure RotaResponse2.SetDataHoraCadastro(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDataHoraCadastro := ATXSDateTime;
  FDataHoraCadastro_Specified := True;
end;

function RotaResponse2.DataHoraCadastro_Specified(Index: Integer): boolean;
begin
  Result := FDataHoraCadastro_Specified;
end;

function RotaResponse2.GetValorCombustivel(Index: Integer): TXSDecimal;
begin
  Result := FValorCombustivel;
end;

procedure RotaResponse2.SetValorCombustivel(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorCombustivel := ATXSDecimal;
  FValorCombustivel_Specified := True;
end;

function RotaResponse2.ValorCombustivel_Specified(Index: Integer): boolean;
begin
  Result := FValorCombustivel_Specified;
end;

function RotaResponse2.GetDistanciaPercorrida(Index: Integer): TXSDecimal;
begin
  Result := FDistanciaPercorrida;
end;

procedure RotaResponse2.SetDistanciaPercorrida(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FDistanciaPercorrida := ATXSDecimal;
  FDistanciaPercorrida_Specified := True;
end;

function RotaResponse2.DistanciaPercorrida_Specified(Index: Integer): boolean;
begin
  Result := FDistanciaPercorrida_Specified;
end;

function RotaResponse2.GetTempoViagem(Index: Integer): Double;
begin
  Result := FTempoViagem;
end;

procedure RotaResponse2.SetTempoViagem(Index: Integer; const ADouble: Double);
begin
  FTempoViagem := ADouble;
  FTempoViagem_Specified := True;
end;

function RotaResponse2.TempoViagem_Specified(Index: Integer): boolean;
begin
  Result := FTempoViagem_Specified;
end;

function RotaResponse2.GetOrigem(Index: Integer): string;
begin
  Result := FOrigem;
end;

procedure RotaResponse2.SetOrigem(Index: Integer; const Astring: string);
begin
  FOrigem := Astring;
  FOrigem_Specified := True;
end;

function RotaResponse2.Origem_Specified(Index: Integer): boolean;
begin
  Result := FOrigem_Specified;
end;

function RotaResponse2.GetDestino(Index: Integer): string;
begin
  Result := FDestino;
end;

procedure RotaResponse2.SetDestino(Index: Integer; const Astring: string);
begin
  FDestino := Astring;
  FDestino_Specified := True;
end;

function RotaResponse2.Destino_Specified(Index: Integer): boolean;
begin
  Result := FDestino_Specified;
end;

function RotaResponse2.GetDataHoraAtualizacao(Index: Integer): TXSDateTime;
begin
  Result := FDataHoraAtualizacao;
end;

procedure RotaResponse2.SetDataHoraAtualizacao(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDataHoraAtualizacao := ATXSDateTime;
  FDataHoraAtualizacao_Specified := True;
end;

function RotaResponse2.DataHoraAtualizacao_Specified(Index: Integer): boolean;
begin
  Result := FDataHoraAtualizacao_Specified;
end;

function RotaResponse2.GetAtivo(Index: Integer): Boolean;
begin
  Result := FAtivo;
end;

procedure RotaResponse2.SetAtivo(Index: Integer; const ABoolean: Boolean);
begin
  FAtivo := ABoolean;
  FAtivo_Specified := True;
end;

function RotaResponse2.Ativo_Specified(Index: Integer): boolean;
begin
  Result := FAtivo_Specified;
end;

function ObtencaoCustoRotaRequest2.GetCategoriaVeiculo(Index: Integer): Integer;
begin
  Result := FCategoriaVeiculo;
end;

procedure ObtencaoCustoRotaRequest2.SetCategoriaVeiculo(Index: Integer; const AInteger: Integer);
begin
  FCategoriaVeiculo := AInteger;
  FCategoriaVeiculo_Specified := True;
end;

function ObtencaoCustoRotaRequest2.CategoriaVeiculo_Specified(Index: Integer): boolean;
begin
  Result := FCategoriaVeiculo_Specified;
end;

function ObtencaoCustoRotaRequest2.GetIdRotaModelo(Index: Integer): Integer;
begin
  Result := FIdRotaModelo;
end;

procedure ObtencaoCustoRotaRequest2.SetIdRotaModelo(Index: Integer; const AInteger: Integer);
begin
  FIdRotaModelo := AInteger;
  FIdRotaModelo_Specified := True;
end;

function ObtencaoCustoRotaRequest2.IdRotaModelo_Specified(Index: Integer): boolean;
begin
  Result := FIdRotaModelo_Specified;
end;

function ObtencaoCustoRotaRequest2.GetModoPagamentoRota(Index: Integer): Integer;
begin
  Result := FModoPagamentoRota;
end;

procedure ObtencaoCustoRotaRequest2.SetModoPagamentoRota(Index: Integer; const AInteger: Integer);
begin
  FModoPagamentoRota := AInteger;
  FModoPagamentoRota_Specified := True;
end;

function ObtencaoCustoRotaRequest2.ModoPagamentoRota_Specified(Index: Integer): boolean;
begin
  Result := FModoPagamentoRota_Specified;
end;

function ObtencaoCustoRotaResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure ObtencaoCustoRotaResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function ObtencaoCustoRotaResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function ObtencaoCustoRotaResponse2.GetParadas(Index: Integer): ArrayOfConsultaRotaMapLinkParadaResponse;
begin
  Result := FParadas;
end;

procedure ObtencaoCustoRotaResponse2.SetParadas(Index: Integer; const AArrayOfConsultaRotaMapLinkParadaResponse: ArrayOfConsultaRotaMapLinkParadaResponse);
begin
  FParadas := AArrayOfConsultaRotaMapLinkParadaResponse;
  FParadas_Specified := True;
end;

function ObtencaoCustoRotaResponse2.Paradas_Specified(Index: Integer): boolean;
begin
  Result := FParadas_Specified;
end;

function ObtencaoCustoRotaResponse2.GetPedagios(Index: Integer): ArrayOfConsultaRotaMapLinkPedagiosResponse;
begin
  Result := FPedagios;
end;

procedure ObtencaoCustoRotaResponse2.SetPedagios(Index: Integer; const AArrayOfConsultaRotaMapLinkPedagiosResponse: ArrayOfConsultaRotaMapLinkPedagiosResponse);
begin
  FPedagios := AArrayOfConsultaRotaMapLinkPedagiosResponse;
  FPedagios_Specified := True;
end;

function ObtencaoCustoRotaResponse2.Pedagios_Specified(Index: Integer): boolean;
begin
  Result := FPedagios_Specified;
end;

function ObtencaoCustoRotaResponse2.GetOtimizada(Index: Integer): Boolean;
begin
  Result := FOtimizada;
end;

procedure ObtencaoCustoRotaResponse2.SetOtimizada(Index: Integer; const ABoolean: Boolean);
begin
  FOtimizada := ABoolean;
  FOtimizada_Specified := True;
end;

function ObtencaoCustoRotaResponse2.Otimizada_Specified(Index: Integer): boolean;
begin
  Result := FOtimizada_Specified;
end;

function ObtencaoCustoRotaResponse2.GetTipo(Index: Integer): Integer;
begin
  Result := FTipo;
end;

procedure ObtencaoCustoRotaResponse2.SetTipo(Index: Integer; const AInteger: Integer);
begin
  FTipo := AInteger;
  FTipo_Specified := True;
end;

function ObtencaoCustoRotaResponse2.Tipo_Specified(Index: Integer): boolean;
begin
  Result := FTipo_Specified;
end;

function ObtencaoCustoRotaResponse2.GetCategoriaVeiculo(Index: Integer): Integer;
begin
  Result := FCategoriaVeiculo;
end;

procedure ObtencaoCustoRotaResponse2.SetCategoriaVeiculo(Index: Integer; const AInteger: Integer);
begin
  FCategoriaVeiculo := AInteger;
  FCategoriaVeiculo_Specified := True;
end;

function ObtencaoCustoRotaResponse2.CategoriaVeiculo_Specified(Index: Integer): boolean;
begin
  Result := FCategoriaVeiculo_Specified;
end;

function ObtencaoCustoRotaResponse2.GetValorPedagioTotal(Index: Integer): TXSDecimal;
begin
  Result := FValorPedagioTotal;
end;

procedure ObtencaoCustoRotaResponse2.SetValorPedagioTotal(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorPedagioTotal := ATXSDecimal;
  FValorPedagioTotal_Specified := True;
end;

function ObtencaoCustoRotaResponse2.ValorPedagioTotal_Specified(Index: Integer): boolean;
begin
  Result := FValorPedagioTotal_Specified;
end;

function ObtencaoCustoRotaResponse2.GetValorPedagioTARGET(Index: Integer): TXSDecimal;
begin
  Result := FValorPedagioTARGET;
end;

procedure ObtencaoCustoRotaResponse2.SetValorPedagioTARGET(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorPedagioTARGET := ATXSDecimal;
  FValorPedagioTARGET_Specified := True;
end;

function ObtencaoCustoRotaResponse2.ValorPedagioTARGET_Specified(Index: Integer): boolean;
begin
  Result := FValorPedagioTARGET_Specified;
end;

function ObtencaoCustoRotaResponse2.GetValorPedagioViaFacil(Index: Integer): TXSDecimal;
begin
  Result := FValorPedagioViaFacil;
end;

procedure ObtencaoCustoRotaResponse2.SetValorPedagioViaFacil(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorPedagioViaFacil := ATXSDecimal;
  FValorPedagioViaFacil_Specified := True;
end;

function ObtencaoCustoRotaResponse2.ValorPedagioViaFacil_Specified(Index: Integer): boolean;
begin
  Result := FValorPedagioViaFacil_Specified;
end;

function ObtencaoCustoRotaResponse2.GetIdRotaCliente(Index: Integer): Integer;
begin
  Result := FIdRotaCliente;
end;

procedure ObtencaoCustoRotaResponse2.SetIdRotaCliente(Index: Integer; const AInteger: Integer);
begin
  FIdRotaCliente := AInteger;
  FIdRotaCliente_Specified := True;
end;

function ObtencaoCustoRotaResponse2.IdRotaCliente_Specified(Index: Integer): boolean;
begin
  Result := FIdRotaCliente_Specified;
end;

function ObtencaoCustoRotaResponse2.GetNomeRotaCliente(Index: Integer): string;
begin
  Result := FNomeRotaCliente;
end;

procedure ObtencaoCustoRotaResponse2.SetNomeRotaCliente(Index: Integer; const Astring: string);
begin
  FNomeRotaCliente := Astring;
  FNomeRotaCliente_Specified := True;
end;

function ObtencaoCustoRotaResponse2.NomeRotaCliente_Specified(Index: Integer): boolean;
begin
  Result := FNomeRotaCliente_Specified;
end;

function ObtencaoCustoRotaResponse2.GetDescricaoCategoriaVeiculo(Index: Integer): string;
begin
  Result := FDescricaoCategoriaVeiculo;
end;

procedure ObtencaoCustoRotaResponse2.SetDescricaoCategoriaVeiculo(Index: Integer; const Astring: string);
begin
  FDescricaoCategoriaVeiculo := Astring;
  FDescricaoCategoriaVeiculo_Specified := True;
end;

function ObtencaoCustoRotaResponse2.DescricaoCategoriaVeiculo_Specified(Index: Integer): boolean;
begin
  Result := FDescricaoCategoriaVeiculo_Specified;
end;

function ObtencaoCustoRotaResponse2.GetIdOrigemRota(Index: Integer): Integer;
begin
  Result := FIdOrigemRota;
end;

procedure ObtencaoCustoRotaResponse2.SetIdOrigemRota(Index: Integer; const AInteger: Integer);
begin
  FIdOrigemRota := AInteger;
  FIdOrigemRota_Specified := True;
end;

function ObtencaoCustoRotaResponse2.IdOrigemRota_Specified(Index: Integer): boolean;
begin
  Result := FIdOrigemRota_Specified;
end;

function ObtencaoCustoRotaResponse2.GetNomeOrigemRota(Index: Integer): string;
begin
  Result := FNomeOrigemRota;
end;

procedure ObtencaoCustoRotaResponse2.SetNomeOrigemRota(Index: Integer; const Astring: string);
begin
  FNomeOrigemRota := Astring;
  FNomeOrigemRota_Specified := True;
end;

function ObtencaoCustoRotaResponse2.NomeOrigemRota_Specified(Index: Integer): boolean;
begin
  Result := FNomeOrigemRota_Specified;
end;

function ObtencaoCustoRotaResponse2.GetCodigoIBGEOrigemRota(Index: Integer): Integer;
begin
  Result := FCodigoIBGEOrigemRota;
end;

procedure ObtencaoCustoRotaResponse2.SetCodigoIBGEOrigemRota(Index: Integer; const AInteger: Integer);
begin
  FCodigoIBGEOrigemRota := AInteger;
  FCodigoIBGEOrigemRota_Specified := True;
end;

function ObtencaoCustoRotaResponse2.CodigoIBGEOrigemRota_Specified(Index: Integer): boolean;
begin
  Result := FCodigoIBGEOrigemRota_Specified;
end;

function ObtencaoCustoRotaResponse2.GetIdDestinoRota(Index: Integer): Integer;
begin
  Result := FIdDestinoRota;
end;

procedure ObtencaoCustoRotaResponse2.SetIdDestinoRota(Index: Integer; const AInteger: Integer);
begin
  FIdDestinoRota := AInteger;
  FIdDestinoRota_Specified := True;
end;

function ObtencaoCustoRotaResponse2.IdDestinoRota_Specified(Index: Integer): boolean;
begin
  Result := FIdDestinoRota_Specified;
end;

function ObtencaoCustoRotaResponse2.GetNomeDestinoRota(Index: Integer): string;
begin
  Result := FNomeDestinoRota;
end;

procedure ObtencaoCustoRotaResponse2.SetNomeDestinoRota(Index: Integer; const Astring: string);
begin
  FNomeDestinoRota := Astring;
  FNomeDestinoRota_Specified := True;
end;

function ObtencaoCustoRotaResponse2.NomeDestinoRota_Specified(Index: Integer): boolean;
begin
  Result := FNomeDestinoRota_Specified;
end;

function ObtencaoCustoRotaResponse2.GetCodigoIBGEDestinoRota(Index: Integer): Integer;
begin
  Result := FCodigoIBGEDestinoRota;
end;

procedure ObtencaoCustoRotaResponse2.SetCodigoIBGEDestinoRota(Index: Integer; const AInteger: Integer);
begin
  FCodigoIBGEDestinoRota := AInteger;
  FCodigoIBGEDestinoRota_Specified := True;
end;

function ObtencaoCustoRotaResponse2.CodigoIBGEDestinoRota_Specified(Index: Integer): boolean;
begin
  Result := FCodigoIBGEDestinoRota_Specified;
end;

function RoteiroRequest2.GetNomeRoteiro(Index: Integer): string;
begin
  Result := FNomeRoteiro;
end;

procedure RoteiroRequest2.SetNomeRoteiro(Index: Integer; const Astring: string);
begin
  FNomeRoteiro := Astring;
  FNomeRoteiro_Specified := True;
end;

function RoteiroRequest2.NomeRoteiro_Specified(Index: Integer): boolean;
begin
  Result := FNomeRoteiro_Specified;
end;

function RoteiroRequest2.GetCategoriaVeiculo(Index: Integer): Integer;
begin
  Result := FCategoriaVeiculo;
end;

procedure RoteiroRequest2.SetCategoriaVeiculo(Index: Integer; const AInteger: Integer);
begin
  FCategoriaVeiculo := AInteger;
  FCategoriaVeiculo_Specified := True;
end;

function RoteiroRequest2.CategoriaVeiculo_Specified(Index: Integer): boolean;
begin
  Result := FCategoriaVeiculo_Specified;
end;

function RoteiroRequest2.GetCodigoIBGEMunicipioOrigem(Index: Integer): Integer;
begin
  Result := FCodigoIBGEMunicipioOrigem;
end;

procedure RoteiroRequest2.SetCodigoIBGEMunicipioOrigem(Index: Integer; const AInteger: Integer);
begin
  FCodigoIBGEMunicipioOrigem := AInteger;
  FCodigoIBGEMunicipioOrigem_Specified := True;
end;

function RoteiroRequest2.CodigoIBGEMunicipioOrigem_Specified(Index: Integer): boolean;
begin
  Result := FCodigoIBGEMunicipioOrigem_Specified;
end;

function RoteiroRequest2.GetCodigosIBGEMunicipioParadas(Index: Integer): ArrayOfint;
begin
  Result := FCodigosIBGEMunicipioParadas;
end;

procedure RoteiroRequest2.SetCodigosIBGEMunicipioParadas(Index: Integer; const AArrayOfint: ArrayOfint);
begin
  FCodigosIBGEMunicipioParadas := AArrayOfint;
  FCodigosIBGEMunicipioParadas_Specified := True;
end;

function RoteiroRequest2.CodigosIBGEMunicipioParadas_Specified(Index: Integer): boolean;
begin
  Result := FCodigosIBGEMunicipioParadas_Specified;
end;

function RoteiroRequest2.GetCodigoIBGEMunicipioDestino(Index: Integer): Integer;
begin
  Result := FCodigoIBGEMunicipioDestino;
end;

procedure RoteiroRequest2.SetCodigoIBGEMunicipioDestino(Index: Integer; const AInteger: Integer);
begin
  FCodigoIBGEMunicipioDestino := AInteger;
  FCodigoIBGEMunicipioDestino_Specified := True;
end;

function RoteiroRequest2.CodigoIBGEMunicipioDestino_Specified(Index: Integer): boolean;
begin
  Result := FCodigoIBGEMunicipioDestino_Specified;
end;

function RoteiroRequest2.GetRotaOtimizada(Index: Integer): Boolean;
begin
  Result := FRotaOtimizada;
end;

procedure RoteiroRequest2.SetRotaOtimizada(Index: Integer; const ABoolean: Boolean);
begin
  FRotaOtimizada := ABoolean;
  FRotaOtimizada_Specified := True;
end;

function RoteiroRequest2.RotaOtimizada_Specified(Index: Integer): boolean;
begin
  Result := FRotaOtimizada_Specified;
end;

function EmissaoDocumentoRequest2.GetTipo(Index: Integer): Integer;
begin
  Result := FTipo;
end;

procedure EmissaoDocumentoRequest2.SetTipo(Index: Integer; const AInteger: Integer);
begin
  FTipo := AInteger;
  FTipo_Specified := True;
end;

function EmissaoDocumentoRequest2.Tipo_Specified(Index: Integer): boolean;
begin
  Result := FTipo_Specified;
end;

function EmissaoDocumentoRequest2.GetIdEntidade(Index: Integer): Integer;
begin
  Result := FIdEntidade;
end;

procedure EmissaoDocumentoRequest2.SetIdEntidade(Index: Integer; const AInteger: Integer);
begin
  FIdEntidade := AInteger;
  FIdEntidade_Specified := True;
end;

function EmissaoDocumentoRequest2.IdEntidade_Specified(Index: Integer): boolean;
begin
  Result := FIdEntidade_Specified;
end;

function EmissaoDocumentoResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure EmissaoDocumentoResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function EmissaoDocumentoResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function EmissaoDocumentoResponse2.GetDocumentoBinario(Index: Integer): TByteSOAPArray;
begin
  Result := FDocumentoBinario;
end;

procedure EmissaoDocumentoResponse2.SetDocumentoBinario(Index: Integer; const ATByteSOAPArray: TByteSOAPArray);
begin
  FDocumentoBinario := ATByteSOAPArray;
  FDocumentoBinario_Specified := True;
end;

function EmissaoDocumentoResponse2.DocumentoBinario_Specified(Index: Integer): boolean;
begin
  Result := FDocumentoBinario_Specified;
end;

function EmissaoDocumentoResponse2.GetTipo(Index: Integer): Integer;
begin
  Result := FTipo;
end;

procedure EmissaoDocumentoResponse2.SetTipo(Index: Integer; const AInteger: Integer);
begin
  FTipo := AInteger;
  FTipo_Specified := True;
end;

function EmissaoDocumentoResponse2.Tipo_Specified(Index: Integer): boolean;
begin
  Result := FTipo_Specified;
end;

function EmissaoDocumentoResponse2.GetUrlDocumento(Index: Integer): string;
begin
  Result := FUrlDocumento;
end;

procedure EmissaoDocumentoResponse2.SetUrlDocumento(Index: Integer; const Astring: string);
begin
  FUrlDocumento := Astring;
  FUrlDocumento_Specified := True;
end;

function EmissaoDocumentoResponse2.UrlDocumento_Specified(Index: Integer): boolean;
begin
  Result := FUrlDocumento_Specified;
end;

function EmissaoDocumentoResponse2.GetDataHoraExpiracaoUrl(Index: Integer): TXSDateTime;
begin
  Result := FDataHoraExpiracaoUrl;
end;

procedure EmissaoDocumentoResponse2.SetDataHoraExpiracaoUrl(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDataHoraExpiracaoUrl := ATXSDateTime;
  FDataHoraExpiracaoUrl_Specified := True;
end;

function EmissaoDocumentoResponse2.DataHoraExpiracaoUrl_Specified(Index: Integer): boolean;
begin
  Result := FDataHoraExpiracaoUrl_Specified;
end;

function RoteiroResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure RoteiroResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function RoteiroResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function RoteiroResponse2.GetIdRoteiro(Index: Integer): Integer;
begin
  Result := FIdRoteiro;
end;

procedure RoteiroResponse2.SetIdRoteiro(Index: Integer; const AInteger: Integer);
begin
  FIdRoteiro := AInteger;
  FIdRoteiro_Specified := True;
end;

function RoteiroResponse2.IdRoteiro_Specified(Index: Integer): boolean;
begin
  Result := FIdRoteiro_Specified;
end;

function RoteiroResponse2.GetNomeRoteiro(Index: Integer): string;
begin
  Result := FNomeRoteiro;
end;

procedure RoteiroResponse2.SetNomeRoteiro(Index: Integer; const Astring: string);
begin
  FNomeRoteiro := Astring;
  FNomeRoteiro_Specified := True;
end;

function RoteiroResponse2.NomeRoteiro_Specified(Index: Integer): boolean;
begin
  Result := FNomeRoteiro_Specified;
end;

function RoteiroResponse2.GetOrigem(Index: Integer): string;
begin
  Result := FOrigem;
end;

procedure RoteiroResponse2.SetOrigem(Index: Integer; const Astring: string);
begin
  FOrigem := Astring;
  FOrigem_Specified := True;
end;

function RoteiroResponse2.Origem_Specified(Index: Integer): boolean;
begin
  Result := FOrigem_Specified;
end;

function RoteiroResponse2.GetDestino(Index: Integer): string;
begin
  Result := FDestino;
end;

procedure RoteiroResponse2.SetDestino(Index: Integer; const Astring: string);
begin
  FDestino := Astring;
  FDestino_Specified := True;
end;

function RoteiroResponse2.Destino_Specified(Index: Integer): boolean;
begin
  Result := FDestino_Specified;
end;

function RoteiroResponse2.GetDistancia(Index: Integer): TXSDecimal;
begin
  Result := FDistancia;
end;

procedure RoteiroResponse2.SetDistancia(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FDistancia := ATXSDecimal;
  FDistancia_Specified := True;
end;

function RoteiroResponse2.Distancia_Specified(Index: Integer): boolean;
begin
  Result := FDistancia_Specified;
end;

function RoteiroResponse2.GetCustoPedagioTotal(Index: Integer): TXSDecimal;
begin
  Result := FCustoPedagioTotal;
end;

procedure RoteiroResponse2.SetCustoPedagioTotal(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FCustoPedagioTotal := ATXSDecimal;
  FCustoPedagioTotal_Specified := True;
end;

function RoteiroResponse2.CustoPedagioTotal_Specified(Index: Integer): boolean;
begin
  Result := FCustoPedagioTotal_Specified;
end;

function RoteiroResponse2.GetCustoTotalRota(Index: Integer): TXSDecimal;
begin
  Result := FCustoTotalRota;
end;

procedure RoteiroResponse2.SetCustoTotalRota(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FCustoTotalRota := ATXSDecimal;
  FCustoTotalRota_Specified := True;
end;

function RoteiroResponse2.CustoTotalRota_Specified(Index: Integer): boolean;
begin
  Result := FCustoTotalRota_Specified;
end;

function BuscaRoteiroRequest2.GetQuantidadeItensPorPagina(Index: Integer): Integer;
begin
  Result := FQuantidadeItensPorPagina;
end;

procedure BuscaRoteiroRequest2.SetQuantidadeItensPorPagina(Index: Integer; const AInteger: Integer);
begin
  FQuantidadeItensPorPagina := AInteger;
  FQuantidadeItensPorPagina_Specified := True;
end;

function BuscaRoteiroRequest2.QuantidadeItensPorPagina_Specified(Index: Integer): boolean;
begin
  Result := FQuantidadeItensPorPagina_Specified;
end;

function BuscaRoteiroRequest2.GetNumeroPagina(Index: Integer): Integer;
begin
  Result := FNumeroPagina;
end;

procedure BuscaRoteiroRequest2.SetNumeroPagina(Index: Integer; const AInteger: Integer);
begin
  FNumeroPagina := AInteger;
  FNumeroPagina_Specified := True;
end;

function BuscaRoteiroRequest2.NumeroPagina_Specified(Index: Integer): boolean;
begin
  Result := FNumeroPagina_Specified;
end;

function BuscaRoteiroRequest2.GetIdRoteiro(Index: Integer): Integer;
begin
  Result := FIdRoteiro;
end;

procedure BuscaRoteiroRequest2.SetIdRoteiro(Index: Integer; const AInteger: Integer);
begin
  FIdRoteiro := AInteger;
  FIdRoteiro_Specified := True;
end;

function BuscaRoteiroRequest2.IdRoteiro_Specified(Index: Integer): boolean;
begin
  Result := FIdRoteiro_Specified;
end;

function BuscaRoteiroRequest2.GetNomeRoteiro(Index: Integer): string;
begin
  Result := FNomeRoteiro;
end;

procedure BuscaRoteiroRequest2.SetNomeRoteiro(Index: Integer; const Astring: string);
begin
  FNomeRoteiro := Astring;
  FNomeRoteiro_Specified := True;
end;

function BuscaRoteiroRequest2.NomeRoteiro_Specified(Index: Integer): boolean;
begin
  Result := FNomeRoteiro_Specified;
end;

function ResultadoPaginadoRoteiroResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure ResultadoPaginadoRoteiroResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function ResultadoPaginadoRoteiroResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function ResultadoPaginadoRoteiroResponse2.GetItens(Index: Integer): ArrayOfRoteiroResponse;
begin
  Result := FItens;
end;

procedure ResultadoPaginadoRoteiroResponse2.SetItens(Index: Integer; const AArrayOfRoteiroResponse: ArrayOfRoteiroResponse);
begin
  FItens := AArrayOfRoteiroResponse;
  FItens_Specified := True;
end;

function ResultadoPaginadoRoteiroResponse2.Itens_Specified(Index: Integer): boolean;
begin
  Result := FItens_Specified;
end;

function ResultadoPaginadoRoteiroResponse2.GetNumeroPagina(Index: Integer): Integer;
begin
  Result := FNumeroPagina;
end;

procedure ResultadoPaginadoRoteiroResponse2.SetNumeroPagina(Index: Integer; const AInteger: Integer);
begin
  FNumeroPagina := AInteger;
  FNumeroPagina_Specified := True;
end;

function ResultadoPaginadoRoteiroResponse2.NumeroPagina_Specified(Index: Integer): boolean;
begin
  Result := FNumeroPagina_Specified;
end;

function ResultadoPaginadoRoteiroResponse2.GetQuantidadeItensPorPagina(Index: Integer): Integer;
begin
  Result := FQuantidadeItensPorPagina;
end;

procedure ResultadoPaginadoRoteiroResponse2.SetQuantidadeItensPorPagina(Index: Integer; const AInteger: Integer);
begin
  FQuantidadeItensPorPagina := AInteger;
  FQuantidadeItensPorPagina_Specified := True;
end;

function ResultadoPaginadoRoteiroResponse2.QuantidadeItensPorPagina_Specified(Index: Integer): boolean;
begin
  Result := FQuantidadeItensPorPagina_Specified;
end;

function ResultadoPaginadoRoteiroResponse2.GetQuantidadeTotalItens(Index: Integer): Integer;
begin
  Result := FQuantidadeTotalItens;
end;

procedure ResultadoPaginadoRoteiroResponse2.SetQuantidadeTotalItens(Index: Integer; const AInteger: Integer);
begin
  FQuantidadeTotalItens := AInteger;
  FQuantidadeTotalItens_Specified := True;
end;

function ResultadoPaginadoRoteiroResponse2.QuantidadeTotalItens_Specified(Index: Integer): boolean;
begin
  Result := FQuantidadeTotalItens_Specified;
end;

function ResultadoPaginadoRoteiroResponse2.GetQuantidadeTotalPaginas(Index: Integer): Integer;
begin
  Result := FQuantidadeTotalPaginas;
end;

procedure ResultadoPaginadoRoteiroResponse2.SetQuantidadeTotalPaginas(Index: Integer; const AInteger: Integer);
begin
  FQuantidadeTotalPaginas := AInteger;
  FQuantidadeTotalPaginas_Specified := True;
end;

function ResultadoPaginadoRoteiroResponse2.QuantidadeTotalPaginas_Specified(Index: Integer): boolean;
begin
  Result := FQuantidadeTotalPaginas_Specified;
end;

function CancelamentoSolicitacaoPagamentoAvulsoCartaoRequest2.GetIdTransacaoCartao(Index: Integer): Integer;
begin
  Result := FIdTransacaoCartao;
end;

procedure CancelamentoSolicitacaoPagamentoAvulsoCartaoRequest2.SetIdTransacaoCartao(Index: Integer; const AInteger: Integer);
begin
  FIdTransacaoCartao := AInteger;
  FIdTransacaoCartao_Specified := True;
end;

function CancelamentoSolicitacaoPagamentoAvulsoCartaoRequest2.IdTransacaoCartao_Specified(Index: Integer): boolean;
begin
  Result := FIdTransacaoCartao_Specified;
end;

function CancelamentoSolicitacaoPagamentoAvulsoCartaoResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure CancelamentoSolicitacaoPagamentoAvulsoCartaoResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function CancelamentoSolicitacaoPagamentoAvulsoCartaoResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function CancelamentoSolicitacaoPagamentoAvulsoCartaoResponse2.GetIdTransacaoCartao(Index: Integer): Integer;
begin
  Result := FIdTransacaoCartao;
end;

procedure CancelamentoSolicitacaoPagamentoAvulsoCartaoResponse2.SetIdTransacaoCartao(Index: Integer; const AInteger: Integer);
begin
  FIdTransacaoCartao := AInteger;
  FIdTransacaoCartao_Specified := True;
end;

function CancelamentoSolicitacaoPagamentoAvulsoCartaoResponse2.IdTransacaoCartao_Specified(Index: Integer): boolean;
begin
  Result := FIdTransacaoCartao_Specified;
end;

function CancelamentoSolicitacaoPagamentoAvulsoCartaoResponse2.GetMensagemRetorno(Index: Integer): string;
begin
  Result := FMensagemRetorno;
end;

procedure CancelamentoSolicitacaoPagamentoAvulsoCartaoResponse2.SetMensagemRetorno(Index: Integer; const Astring: string);
begin
  FMensagemRetorno := Astring;
  FMensagemRetorno_Specified := True;
end;

function CancelamentoSolicitacaoPagamentoAvulsoCartaoResponse2.MensagemRetorno_Specified(Index: Integer): boolean;
begin
  Result := FMensagemRetorno_Specified;
end;

function PagamentoCombustivelAvulsoCartaoManualmenteRequest2.GetIdTransacaoCartao(Index: Integer): Integer;
begin
  Result := FIdTransacaoCartao;
end;

procedure PagamentoCombustivelAvulsoCartaoManualmenteRequest2.SetIdTransacaoCartao(Index: Integer; const AInteger: Integer);
begin
  FIdTransacaoCartao := AInteger;
  FIdTransacaoCartao_Specified := True;
end;

function PagamentoCombustivelAvulsoCartaoManualmenteRequest2.IdTransacaoCartao_Specified(Index: Integer): boolean;
begin
  Result := FIdTransacaoCartao_Specified;
end;

function PagamentoAvulsoCartaoManualmenteResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure PagamentoAvulsoCartaoManualmenteResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function PagamentoAvulsoCartaoManualmenteResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function PagamentoAvulsoCartaoManualmenteResponse2.GetIdTransacaoCartao(Index: Integer): Integer;
begin
  Result := FIdTransacaoCartao;
end;

procedure PagamentoAvulsoCartaoManualmenteResponse2.SetIdTransacaoCartao(Index: Integer; const AInteger: Integer);
begin
  FIdTransacaoCartao := AInteger;
  FIdTransacaoCartao_Specified := True;
end;

function PagamentoAvulsoCartaoManualmenteResponse2.IdTransacaoCartao_Specified(Index: Integer): boolean;
begin
  Result := FIdTransacaoCartao_Specified;
end;

function PagamentoAvulsoCartaoManualmenteResponse2.GetMensagemRetorno(Index: Integer): string;
begin
  Result := FMensagemRetorno;
end;

procedure PagamentoAvulsoCartaoManualmenteResponse2.SetMensagemRetorno(Index: Integer; const Astring: string);
begin
  FMensagemRetorno := Astring;
  FMensagemRetorno_Specified := True;
end;

function PagamentoAvulsoCartaoManualmenteResponse2.MensagemRetorno_Specified(Index: Integer): boolean;
begin
  Result := FMensagemRetorno_Specified;
end;

function CalculoValoresPisCofinsRequest2.GetValorLiquido(Index: Integer): TXSDecimal;
begin
  Result := FValorLiquido;
end;

procedure CalculoValoresPisCofinsRequest2.SetValorLiquido(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorLiquido := ATXSDecimal;
  FValorLiquido_Specified := True;
end;

function CalculoValoresPisCofinsRequest2.ValorLiquido_Specified(Index: Integer): boolean;
begin
  Result := FValorLiquido_Specified;
end;

function CalculoValoresPisCofinsResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure CalculoValoresPisCofinsResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function CalculoValoresPisCofinsResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function CalculoValoresPisCofinsResponse2.GetValorCalculadoPis(Index: Integer): TXSDecimal;
begin
  Result := FValorCalculadoPis;
end;

procedure CalculoValoresPisCofinsResponse2.SetValorCalculadoPis(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorCalculadoPis := ATXSDecimal;
  FValorCalculadoPis_Specified := True;
end;

function CalculoValoresPisCofinsResponse2.ValorCalculadoPis_Specified(Index: Integer): boolean;
begin
  Result := FValorCalculadoPis_Specified;
end;

function CalculoValoresPisCofinsResponse2.GetValorCalculadoCofins(Index: Integer): TXSDecimal;
begin
  Result := FValorCalculadoCofins;
end;

procedure CalculoValoresPisCofinsResponse2.SetValorCalculadoCofins(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorCalculadoCofins := ATXSDecimal;
  FValorCalculadoCofins_Specified := True;
end;

function CalculoValoresPisCofinsResponse2.ValorCalculadoCofins_Specified(Index: Integer): boolean;
begin
  Result := FValorCalculadoCofins_Specified;
end;

function CalculoValoresPisCofinsResponse2.GetDemonstrativoCalculo(Index: Integer): string;
begin
  Result := FDemonstrativoCalculo;
end;

procedure CalculoValoresPisCofinsResponse2.SetDemonstrativoCalculo(Index: Integer; const Astring: string);
begin
  FDemonstrativoCalculo := Astring;
  FDemonstrativoCalculo_Specified := True;
end;

function CalculoValoresPisCofinsResponse2.DemonstrativoCalculo_Specified(Index: Integer): boolean;
begin
  Result := FDemonstrativoCalculo_Specified;
end;

function CalculoValoresPisCofinsResponse2.GetBaseCalculoPISCofins(Index: Integer): TXSDecimal;
begin
  Result := FBaseCalculoPISCofins;
end;

procedure CalculoValoresPisCofinsResponse2.SetBaseCalculoPISCofins(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FBaseCalculoPISCofins := ATXSDecimal;
  FBaseCalculoPISCofins_Specified := True;
end;

function CalculoValoresPisCofinsResponse2.BaseCalculoPISCofins_Specified(Index: Integer): boolean;
begin
  Result := FBaseCalculoPISCofins_Specified;
end;

function PagamentoAvulsoCartaoManualmenteRequest2.GetIdTransacaoCartao(Index: Integer): Integer;
begin
  Result := FIdTransacaoCartao;
end;

procedure PagamentoAvulsoCartaoManualmenteRequest2.SetIdTransacaoCartao(Index: Integer; const AInteger: Integer);
begin
  FIdTransacaoCartao := AInteger;
  FIdTransacaoCartao_Specified := True;
end;

function PagamentoAvulsoCartaoManualmenteRequest2.IdTransacaoCartao_Specified(Index: Integer): boolean;
begin
  Result := FIdTransacaoCartao_Specified;
end;

function PagamentoCombustivelAvulsoCartaoManualmenteResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure PagamentoCombustivelAvulsoCartaoManualmenteResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function PagamentoCombustivelAvulsoCartaoManualmenteResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function PagamentoCombustivelAvulsoCartaoManualmenteResponse2.GetIdTransacaoCartao(Index: Integer): Integer;
begin
  Result := FIdTransacaoCartao;
end;

procedure PagamentoCombustivelAvulsoCartaoManualmenteResponse2.SetIdTransacaoCartao(Index: Integer; const AInteger: Integer);
begin
  FIdTransacaoCartao := AInteger;
  FIdTransacaoCartao_Specified := True;
end;

function PagamentoCombustivelAvulsoCartaoManualmenteResponse2.IdTransacaoCartao_Specified(Index: Integer): boolean;
begin
  Result := FIdTransacaoCartao_Specified;
end;

function PagamentoCombustivelAvulsoCartaoManualmenteResponse2.GetMensagemRetorno(Index: Integer): string;
begin
  Result := FMensagemRetorno;
end;

procedure PagamentoCombustivelAvulsoCartaoManualmenteResponse2.SetMensagemRetorno(Index: Integer; const Astring: string);
begin
  FMensagemRetorno := Astring;
  FMensagemRetorno_Specified := True;
end;

function PagamentoCombustivelAvulsoCartaoManualmenteResponse2.MensagemRetorno_Specified(Index: Integer): boolean;
begin
  Result := FMensagemRetorno_Specified;
end;

function TerminalCarregamentoResponse2.GetidTerminalCarregamento(Index: Integer): Integer;
begin
  Result := FidTerminalCarregamento;
end;

procedure TerminalCarregamentoResponse2.SetidTerminalCarregamento(Index: Integer; const AInteger: Integer);
begin
  FidTerminalCarregamento := AInteger;
  FidTerminalCarregamento_Specified := True;
end;

function TerminalCarregamentoResponse2.idTerminalCarregamento_Specified(Index: Integer): boolean;
begin
  Result := FidTerminalCarregamento_Specified;
end;

function TerminalCarregamentoResponse2.GetRazaoSocial(Index: Integer): string;
begin
  Result := FRazaoSocial;
end;

procedure TerminalCarregamentoResponse2.SetRazaoSocial(Index: Integer; const Astring: string);
begin
  FRazaoSocial := Astring;
  FRazaoSocial_Specified := True;
end;

function TerminalCarregamentoResponse2.RazaoSocial_Specified(Index: Integer): boolean;
begin
  Result := FRazaoSocial_Specified;
end;

function TerminalCarregamentoResponse2.GetCPFCNPJ(Index: Integer): string;
begin
  Result := FCPFCNPJ;
end;

procedure TerminalCarregamentoResponse2.SetCPFCNPJ(Index: Integer; const Astring: string);
begin
  FCPFCNPJ := Astring;
  FCPFCNPJ_Specified := True;
end;

function TerminalCarregamentoResponse2.CPFCNPJ_Specified(Index: Integer): boolean;
begin
  Result := FCPFCNPJ_Specified;
end;

function RotaDetalhadaRequest2.GetNomeRota(Index: Integer): string;
begin
  Result := FNomeRota;
end;

procedure RotaDetalhadaRequest2.SetNomeRota(Index: Integer; const Astring: string);
begin
  FNomeRota := Astring;
  FNomeRota_Specified := True;
end;

function RotaDetalhadaRequest2.NomeRota_Specified(Index: Integer): boolean;
begin
  Result := FNomeRota_Specified;
end;

function RotaDetalhadaRequest2.GetCategoriaVeiculo(Index: Integer): Integer;
begin
  Result := FCategoriaVeiculo;
end;

procedure RotaDetalhadaRequest2.SetCategoriaVeiculo(Index: Integer; const AInteger: Integer);
begin
  FCategoriaVeiculo := AInteger;
  FCategoriaVeiculo_Specified := True;
end;

function RotaDetalhadaRequest2.CategoriaVeiculo_Specified(Index: Integer): boolean;
begin
  Result := FCategoriaVeiculo_Specified;
end;

function RotaDetalhadaRequest2.GetParadas(Index: Integer): ArrayOfRotaDetalhadaParada;
begin
  Result := FParadas;
end;

procedure RotaDetalhadaRequest2.SetParadas(Index: Integer; const AArrayOfRotaDetalhadaParada: ArrayOfRotaDetalhadaParada);
begin
  FParadas := AArrayOfRotaDetalhadaParada;
  FParadas_Specified := True;
end;

function RotaDetalhadaRequest2.Paradas_Specified(Index: Integer): boolean;
begin
  Result := FParadas_Specified;
end;

function RotaDetalhadaRequest2.GetRotaTemporaria(Index: Integer): Boolean;
begin
  Result := FRotaTemporaria;
end;

procedure RotaDetalhadaRequest2.SetRotaTemporaria(Index: Integer; const ABoolean: Boolean);
begin
  FRotaTemporaria := ABoolean;
  FRotaTemporaria_Specified := True;
end;

function RotaDetalhadaRequest2.RotaTemporaria_Specified(Index: Integer): boolean;
begin
  Result := FRotaTemporaria_Specified;
end;

function RotaDetalhadaRequest2.GetSomenteCalculo(Index: Integer): Boolean;
begin
  Result := FSomenteCalculo;
end;

procedure RotaDetalhadaRequest2.SetSomenteCalculo(Index: Integer; const ABoolean: Boolean);
begin
  FSomenteCalculo := ABoolean;
  FSomenteCalculo_Specified := True;
end;

function RotaDetalhadaRequest2.SomenteCalculo_Specified(Index: Integer): boolean;
begin
  Result := FSomenteCalculo_Specified;
end;

function RotaDetalhadaRequest2.GetIdTipoCaminhoRota(Index: Integer): Integer;
begin
  Result := FIdTipoCaminhoRota;
end;

procedure RotaDetalhadaRequest2.SetIdTipoCaminhoRota(Index: Integer; const AInteger: Integer);
begin
  FIdTipoCaminhoRota := AInteger;
  FIdTipoCaminhoRota_Specified := True;
end;

function RotaDetalhadaRequest2.IdTipoCaminhoRota_Specified(Index: Integer): boolean;
begin
  Result := FIdTipoCaminhoRota_Specified;
end;

function CancelamentoSolicitacaoPagamentoCombustivelAvulsoCartaoRequest2.GetIdTransacaoCartao(Index: Integer): Integer;
begin
  Result := FIdTransacaoCartao;
end;

procedure CancelamentoSolicitacaoPagamentoCombustivelAvulsoCartaoRequest2.SetIdTransacaoCartao(Index: Integer; const AInteger: Integer);
begin
  FIdTransacaoCartao := AInteger;
  FIdTransacaoCartao_Specified := True;
end;

function CancelamentoSolicitacaoPagamentoCombustivelAvulsoCartaoRequest2.IdTransacaoCartao_Specified(Index: Integer): boolean;
begin
  Result := FIdTransacaoCartao_Specified;
end;

function CancelamentoSolicitacaoPagamentoCombustivelAvulsoCartaoResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure CancelamentoSolicitacaoPagamentoCombustivelAvulsoCartaoResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function CancelamentoSolicitacaoPagamentoCombustivelAvulsoCartaoResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function CancelamentoSolicitacaoPagamentoCombustivelAvulsoCartaoResponse2.GetIdTransacaoCartao(Index: Integer): Integer;
begin
  Result := FIdTransacaoCartao;
end;

procedure CancelamentoSolicitacaoPagamentoCombustivelAvulsoCartaoResponse2.SetIdTransacaoCartao(Index: Integer; const AInteger: Integer);
begin
  FIdTransacaoCartao := AInteger;
  FIdTransacaoCartao_Specified := True;
end;

function CancelamentoSolicitacaoPagamentoCombustivelAvulsoCartaoResponse2.IdTransacaoCartao_Specified(Index: Integer): boolean;
begin
  Result := FIdTransacaoCartao_Specified;
end;

function CancelamentoSolicitacaoPagamentoCombustivelAvulsoCartaoResponse2.GetMensagemRetorno(Index: Integer): string;
begin
  Result := FMensagemRetorno;
end;

procedure CancelamentoSolicitacaoPagamentoCombustivelAvulsoCartaoResponse2.SetMensagemRetorno(Index: Integer; const Astring: string);
begin
  FMensagemRetorno := Astring;
  FMensagemRetorno_Specified := True;
end;

function CancelamentoSolicitacaoPagamentoCombustivelAvulsoCartaoResponse2.MensagemRetorno_Specified(Index: Integer): boolean;
begin
  Result := FMensagemRetorno_Specified;
end;

function BuscaTerminaisCarregamentoAutorizadosResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure BuscaTerminaisCarregamentoAutorizadosResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function BuscaTerminaisCarregamentoAutorizadosResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function BuscaTerminaisCarregamentoAutorizadosResponse2.GetTerminaisCarregamento(Index: Integer): ArrayOfTerminalCarregamentoResponse;
begin
  Result := FTerminaisCarregamento;
end;

procedure BuscaTerminaisCarregamentoAutorizadosResponse2.SetTerminaisCarregamento(Index: Integer; const AArrayOfTerminalCarregamentoResponse: ArrayOfTerminalCarregamentoResponse);
begin
  FTerminaisCarregamento := AArrayOfTerminalCarregamentoResponse;
  FTerminaisCarregamento_Specified := True;
end;

function BuscaTerminaisCarregamentoAutorizadosResponse2.TerminaisCarregamento_Specified(Index: Integer): boolean;
begin
  Result := FTerminaisCarregamento_Specified;
end;

function CadastroRoteiroCustomizadoResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure CadastroRoteiroCustomizadoResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function CadastroRoteiroCustomizadoResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function CadastroRoteiroCustomizadoResponse2.GetIdRoteiro(Index: Integer): Integer;
begin
  Result := FIdRoteiro;
end;

procedure CadastroRoteiroCustomizadoResponse2.SetIdRoteiro(Index: Integer; const AInteger: Integer);
begin
  FIdRoteiro := AInteger;
  FIdRoteiro_Specified := True;
end;

function CadastroRoteiroCustomizadoResponse2.IdRoteiro_Specified(Index: Integer): boolean;
begin
  Result := FIdRoteiro_Specified;
end;

function CadastroRoteiroCustomizadoResponse2.GetNomeRoteiro(Index: Integer): string;
begin
  Result := FNomeRoteiro;
end;

procedure CadastroRoteiroCustomizadoResponse2.SetNomeRoteiro(Index: Integer; const Astring: string);
begin
  FNomeRoteiro := Astring;
  FNomeRoteiro_Specified := True;
end;

function CadastroRoteiroCustomizadoResponse2.NomeRoteiro_Specified(Index: Integer): boolean;
begin
  Result := FNomeRoteiro_Specified;
end;

function CadastroRoteiroCustomizadoResponse2.GetOrigem(Index: Integer): string;
begin
  Result := FOrigem;
end;

procedure CadastroRoteiroCustomizadoResponse2.SetOrigem(Index: Integer; const Astring: string);
begin
  FOrigem := Astring;
  FOrigem_Specified := True;
end;

function CadastroRoteiroCustomizadoResponse2.Origem_Specified(Index: Integer): boolean;
begin
  Result := FOrigem_Specified;
end;

function CadastroRoteiroCustomizadoResponse2.GetDestino(Index: Integer): string;
begin
  Result := FDestino;
end;

procedure CadastroRoteiroCustomizadoResponse2.SetDestino(Index: Integer; const Astring: string);
begin
  FDestino := Astring;
  FDestino_Specified := True;
end;

function CadastroRoteiroCustomizadoResponse2.Destino_Specified(Index: Integer): boolean;
begin
  Result := FDestino_Specified;
end;

function CadastroRoteiroCustomizadoResponse2.GetDistancia(Index: Integer): TXSDecimal;
begin
  Result := FDistancia;
end;

procedure CadastroRoteiroCustomizadoResponse2.SetDistancia(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FDistancia := ATXSDecimal;
  FDistancia_Specified := True;
end;

function CadastroRoteiroCustomizadoResponse2.Distancia_Specified(Index: Integer): boolean;
begin
  Result := FDistancia_Specified;
end;

function CadastroRoteiroCustomizadoResponse2.GetCustoPedagioTotal(Index: Integer): TXSDecimal;
begin
  Result := FCustoPedagioTotal;
end;

procedure CadastroRoteiroCustomizadoResponse2.SetCustoPedagioTotal(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FCustoPedagioTotal := ATXSDecimal;
  FCustoPedagioTotal_Specified := True;
end;

function CadastroRoteiroCustomizadoResponse2.CustoPedagioTotal_Specified(Index: Integer): boolean;
begin
  Result := FCustoPedagioTotal_Specified;
end;

function CadastroRoteiroCustomizadoResponse2.GetCustoTotalRota(Index: Integer): TXSDecimal;
begin
  Result := FCustoTotalRota;
end;

procedure CadastroRoteiroCustomizadoResponse2.SetCustoTotalRota(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FCustoTotalRota := ATXSDecimal;
  FCustoTotalRota_Specified := True;
end;

function CadastroRoteiroCustomizadoResponse2.CustoTotalRota_Specified(Index: Integer): boolean;
begin
  Result := FCustoTotalRota_Specified;
end;

function ConsultaSituacaoEmpresaTransportadorAnttRequest2.GetCPFCNPJ(Index: Integer): string;
begin
  Result := FCPFCNPJ;
end;

procedure ConsultaSituacaoEmpresaTransportadorAnttRequest2.SetCPFCNPJ(Index: Integer; const Astring: string);
begin
  FCPFCNPJ := Astring;
  FCPFCNPJ_Specified := True;
end;

function ConsultaSituacaoEmpresaTransportadorAnttRequest2.CPFCNPJ_Specified(Index: Integer): boolean;
begin
  Result := FCPFCNPJ_Specified;
end;

function ConsultaSituacaoEmpresaTransportadorAnttRequest2.GetRNTRC(Index: Integer): string;
begin
  Result := FRNTRC;
end;

procedure ConsultaSituacaoEmpresaTransportadorAnttRequest2.SetRNTRC(Index: Integer; const Astring: string);
begin
  FRNTRC := Astring;
  FRNTRC_Specified := True;
end;

function ConsultaSituacaoEmpresaTransportadorAnttRequest2.RNTRC_Specified(Index: Integer): boolean;
begin
  Result := FRNTRC_Specified;
end;

function ConsultaSituacaoEmpresaTransportadorAnttRequest2.GetNomeRazaoSocialTransportador(Index: Integer): string;
begin
  Result := FNomeRazaoSocialTransportador;
end;

procedure ConsultaSituacaoEmpresaTransportadorAnttRequest2.SetNomeRazaoSocialTransportador(Index: Integer; const Astring: string);
begin
  FNomeRazaoSocialTransportador := Astring;
  FNomeRazaoSocialTransportador_Specified := True;
end;

function ConsultaSituacaoEmpresaTransportadorAnttRequest2.NomeRazaoSocialTransportador_Specified(Index: Integer): boolean;
begin
  Result := FNomeRazaoSocialTransportador_Specified;
end;

function ConsultaSituacaoEmpresaTransportadorAnttRequest2.GetTelefoneContatoTransportador(Index: Integer): string;
begin
  Result := FTelefoneContatoTransportador;
end;

procedure ConsultaSituacaoEmpresaTransportadorAnttRequest2.SetTelefoneContatoTransportador(Index: Integer; const Astring: string);
begin
  FTelefoneContatoTransportador := Astring;
  FTelefoneContatoTransportador_Specified := True;
end;

function ConsultaSituacaoEmpresaTransportadorAnttRequest2.TelefoneContatoTransportador_Specified(Index: Integer): boolean;
begin
  Result := FTelefoneContatoTransportador_Specified;
end;

function ConsultaSituacaoEmpresaTransportadorAnttRequest2.GetEmailTransportador(Index: Integer): string;
begin
  Result := FEmailTransportador;
end;

procedure ConsultaSituacaoEmpresaTransportadorAnttRequest2.SetEmailTransportador(Index: Integer; const Astring: string);
begin
  FEmailTransportador := Astring;
  FEmailTransportador_Specified := True;
end;

function ConsultaSituacaoEmpresaTransportadorAnttRequest2.EmailTransportador_Specified(Index: Integer): boolean;
begin
  Result := FEmailTransportador_Specified;
end;

function ConsultaSituacaoEmpresaTransportadorAnttRequest2.GetTipoTransportador(Index: Integer): Integer;
begin
  Result := FTipoTransportador;
end;

procedure ConsultaSituacaoEmpresaTransportadorAnttRequest2.SetTipoTransportador(Index: Integer; const AInteger: Integer);
begin
  FTipoTransportador := AInteger;
  FTipoTransportador_Specified := True;
end;

function ConsultaSituacaoEmpresaTransportadorAnttRequest2.TipoTransportador_Specified(Index: Integer): boolean;
begin
  Result := FTipoTransportador_Specified;
end;

function CadastroRoteiroCustomizadoRequest2.GetNomeRoteiro(Index: Integer): string;
begin
  Result := FNomeRoteiro;
end;

procedure CadastroRoteiroCustomizadoRequest2.SetNomeRoteiro(Index: Integer; const Astring: string);
begin
  FNomeRoteiro := Astring;
  FNomeRoteiro_Specified := True;
end;

function CadastroRoteiroCustomizadoRequest2.NomeRoteiro_Specified(Index: Integer): boolean;
begin
  Result := FNomeRoteiro_Specified;
end;

function CadastroRoteiroCustomizadoRequest2.GetCategoriaVeiculo(Index: Integer): Integer;
begin
  Result := FCategoriaVeiculo;
end;

procedure CadastroRoteiroCustomizadoRequest2.SetCategoriaVeiculo(Index: Integer; const AInteger: Integer);
begin
  FCategoriaVeiculo := AInteger;
  FCategoriaVeiculo_Specified := True;
end;

function CadastroRoteiroCustomizadoRequest2.CategoriaVeiculo_Specified(Index: Integer): boolean;
begin
  Result := FCategoriaVeiculo_Specified;
end;

function CadastroRoteiroCustomizadoRequest2.GetCodigoIBGEMunicipioOrigem(Index: Integer): Integer;
begin
  Result := FCodigoIBGEMunicipioOrigem;
end;

procedure CadastroRoteiroCustomizadoRequest2.SetCodigoIBGEMunicipioOrigem(Index: Integer; const AInteger: Integer);
begin
  FCodigoIBGEMunicipioOrigem := AInteger;
  FCodigoIBGEMunicipioOrigem_Specified := True;
end;

function CadastroRoteiroCustomizadoRequest2.CodigoIBGEMunicipioOrigem_Specified(Index: Integer): boolean;
begin
  Result := FCodigoIBGEMunicipioOrigem_Specified;
end;

function CadastroRoteiroCustomizadoRequest2.GetIdsPracas(Index: Integer): ArrayOfint;
begin
  Result := FIdsPracas;
end;

procedure CadastroRoteiroCustomizadoRequest2.SetIdsPracas(Index: Integer; const AArrayOfint: ArrayOfint);
begin
  FIdsPracas := AArrayOfint;
  FIdsPracas_Specified := True;
end;

function CadastroRoteiroCustomizadoRequest2.IdsPracas_Specified(Index: Integer): boolean;
begin
  Result := FIdsPracas_Specified;
end;

function CadastroRoteiroCustomizadoRequest2.GetCodigoIBGEMunicipioDestino(Index: Integer): Integer;
begin
  Result := FCodigoIBGEMunicipioDestino;
end;

procedure CadastroRoteiroCustomizadoRequest2.SetCodigoIBGEMunicipioDestino(Index: Integer; const AInteger: Integer);
begin
  FCodigoIBGEMunicipioDestino := AInteger;
  FCodigoIBGEMunicipioDestino_Specified := True;
end;

function CadastroRoteiroCustomizadoRequest2.CodigoIBGEMunicipioDestino_Specified(Index: Integer): boolean;
begin
  Result := FCodigoIBGEMunicipioDestino_Specified;
end;

function CadastroRoteiroCustomizadoRequest2.GetRotaOtimizada(Index: Integer): Boolean;
begin
  Result := FRotaOtimizada;
end;

procedure CadastroRoteiroCustomizadoRequest2.SetRotaOtimizada(Index: Integer; const ABoolean: Boolean);
begin
  FRotaOtimizada := ABoolean;
  FRotaOtimizada_Specified := True;
end;

function CadastroRoteiroCustomizadoRequest2.RotaOtimizada_Specified(Index: Integer): boolean;
begin
  Result := FRotaOtimizada_Specified;
end;

function ConsultaSituacaoTransportadorAnttRequest2.GetCPFCNPJ(Index: Integer): string;
begin
  Result := FCPFCNPJ;
end;

procedure ConsultaSituacaoTransportadorAnttRequest2.SetCPFCNPJ(Index: Integer; const Astring: string);
begin
  FCPFCNPJ := Astring;
  FCPFCNPJ_Specified := True;
end;

function ConsultaSituacaoTransportadorAnttRequest2.CPFCNPJ_Specified(Index: Integer): boolean;
begin
  Result := FCPFCNPJ_Specified;
end;

function ConsultaSituacaoTransportadorAnttRequest2.GetRNTRC(Index: Integer): string;
begin
  Result := FRNTRC;
end;

procedure ConsultaSituacaoTransportadorAnttRequest2.SetRNTRC(Index: Integer; const Astring: string);
begin
  FRNTRC := Astring;
  FRNTRC_Specified := True;
end;

function ConsultaSituacaoTransportadorAnttRequest2.RNTRC_Specified(Index: Integer): boolean;
begin
  Result := FRNTRC_Specified;
end;

function ConsultaSituacaoTransportadorAnttRequest2.GetPlaca(Index: Integer): string;
begin
  Result := FPlaca;
end;

procedure ConsultaSituacaoTransportadorAnttRequest2.SetPlaca(Index: Integer; const Astring: string);
begin
  FPlaca := Astring;
  FPlaca_Specified := True;
end;

function ConsultaSituacaoTransportadorAnttRequest2.Placa_Specified(Index: Integer): boolean;
begin
  Result := FPlaca_Specified;
end;

function ConsultaSituacaoTransportadorAnttResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure ConsultaSituacaoTransportadorAnttResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function ConsultaSituacaoTransportadorAnttResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function ConsultaSituacaoTransportadorAnttResponse2.GetCPFCNPJTransportador(Index: Integer): string;
begin
  Result := FCPFCNPJTransportador;
end;

procedure ConsultaSituacaoTransportadorAnttResponse2.SetCPFCNPJTransportador(Index: Integer; const Astring: string);
begin
  FCPFCNPJTransportador := Astring;
  FCPFCNPJTransportador_Specified := True;
end;

function ConsultaSituacaoTransportadorAnttResponse2.CPFCNPJTransportador_Specified(Index: Integer): boolean;
begin
  Result := FCPFCNPJTransportador_Specified;
end;

function ConsultaSituacaoTransportadorAnttResponse2.GetDataValidadeRNTRC(Index: Integer): TXSDateTime;
begin
  Result := FDataValidadeRNTRC;
end;

procedure ConsultaSituacaoTransportadorAnttResponse2.SetDataValidadeRNTRC(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDataValidadeRNTRC := ATXSDateTime;
  FDataValidadeRNTRC_Specified := True;
end;

function ConsultaSituacaoTransportadorAnttResponse2.DataValidadeRNTRC_Specified(Index: Integer): boolean;
begin
  Result := FDataValidadeRNTRC_Specified;
end;

function ConsultaSituacaoTransportadorAnttResponse2.GetEquiparadoTAC(Index: Integer): Boolean;
begin
  Result := FEquiparadoTAC;
end;

procedure ConsultaSituacaoTransportadorAnttResponse2.SetEquiparadoTAC(Index: Integer; const ABoolean: Boolean);
begin
  FEquiparadoTAC := ABoolean;
  FEquiparadoTAC_Specified := True;
end;

function ConsultaSituacaoTransportadorAnttResponse2.EquiparadoTAC_Specified(Index: Integer): boolean;
begin
  Result := FEquiparadoTAC_Specified;
end;

function ConsultaSituacaoTransportadorAnttResponse2.GetNomeRazaoSocialTransportador(Index: Integer): string;
begin
  Result := FNomeRazaoSocialTransportador;
end;

procedure ConsultaSituacaoTransportadorAnttResponse2.SetNomeRazaoSocialTransportador(Index: Integer; const Astring: string);
begin
  FNomeRazaoSocialTransportador := Astring;
  FNomeRazaoSocialTransportador_Specified := True;
end;

function ConsultaSituacaoTransportadorAnttResponse2.NomeRazaoSocialTransportador_Specified(Index: Integer): boolean;
begin
  Result := FNomeRazaoSocialTransportador_Specified;
end;

function ConsultaSituacaoTransportadorAnttResponse2.GetRNTRCAtivo(Index: Integer): Boolean;
begin
  Result := FRNTRCAtivo;
end;

procedure ConsultaSituacaoTransportadorAnttResponse2.SetRNTRCAtivo(Index: Integer; const ABoolean: Boolean);
begin
  FRNTRCAtivo := ABoolean;
  FRNTRCAtivo_Specified := True;
end;

function ConsultaSituacaoTransportadorAnttResponse2.RNTRCAtivo_Specified(Index: Integer): boolean;
begin
  Result := FRNTRCAtivo_Specified;
end;

function ConsultaSituacaoTransportadorAnttResponse2.GetRNTRCTransportador(Index: Integer): string;
begin
  Result := FRNTRCTransportador;
end;

procedure ConsultaSituacaoTransportadorAnttResponse2.SetRNTRCTransportador(Index: Integer; const Astring: string);
begin
  FRNTRCTransportador := Astring;
  FRNTRCTransportador_Specified := True;
end;

function ConsultaSituacaoTransportadorAnttResponse2.RNTRCTransportador_Specified(Index: Integer): boolean;
begin
  Result := FRNTRCTransportador_Specified;
end;

function ConsultaSituacaoTransportadorAnttResponse2.GetTipoTransportador(Index: Integer): TipoTransportador;
begin
  Result := FTipoTransportador;
end;

procedure ConsultaSituacaoTransportadorAnttResponse2.SetTipoTransportador(Index: Integer; const ATipoTransportador: TipoTransportador);
begin
  FTipoTransportador := ATipoTransportador;
  FTipoTransportador_Specified := True;
end;

function ConsultaSituacaoTransportadorAnttResponse2.TipoTransportador_Specified(Index: Integer): boolean;
begin
  Result := FTipoTransportador_Specified;
end;

function ConsultaSituacaoTransportadorAnttResponse2.GetMensagemRetorno(Index: Integer): string;
begin
  Result := FMensagemRetorno;
end;

procedure ConsultaSituacaoTransportadorAnttResponse2.SetMensagemRetorno(Index: Integer; const Astring: string);
begin
  FMensagemRetorno := Astring;
  FMensagemRetorno_Specified := True;
end;

function ConsultaSituacaoTransportadorAnttResponse2.MensagemRetorno_Specified(Index: Integer): boolean;
begin
  Result := FMensagemRetorno_Specified;
end;

function ConsultaSituacaoTransportadorAnttResponse2.GetDispensadoPelaANTT(Index: Integer): Boolean;
begin
  Result := FDispensadoPelaANTT;
end;

procedure ConsultaSituacaoTransportadorAnttResponse2.SetDispensadoPelaANTT(Index: Integer; const ABoolean: Boolean);
begin
  FDispensadoPelaANTT := ABoolean;
  FDispensadoPelaANTT_Specified := True;
end;

function ConsultaSituacaoTransportadorAnttResponse2.DispensadoPelaANTT_Specified(Index: Integer): boolean;
begin
  Result := FDispensadoPelaANTT_Specified;
end;

function ConsultaSituacaoTransportadorAnttResponse2.GetPlacaInformadaConsulta(Index: Integer): string;
begin
  Result := FPlacaInformadaConsulta;
end;

procedure ConsultaSituacaoTransportadorAnttResponse2.SetPlacaInformadaConsulta(Index: Integer; const Astring: string);
begin
  FPlacaInformadaConsulta := Astring;
  FPlacaInformadaConsulta_Specified := True;
end;

function ConsultaSituacaoTransportadorAnttResponse2.PlacaInformadaConsulta_Specified(Index: Integer): boolean;
begin
  Result := FPlacaInformadaConsulta_Specified;
end;

function ConsultaSituacaoTransportadorAnttResponse2.GetPlacaHabilitadaTransportadorANTT(Index: Integer): Boolean;
begin
  Result := FPlacaHabilitadaTransportadorANTT;
end;

procedure ConsultaSituacaoTransportadorAnttResponse2.SetPlacaHabilitadaTransportadorANTT(Index: Integer; const ABoolean: Boolean);
begin
  FPlacaHabilitadaTransportadorANTT := ABoolean;
  FPlacaHabilitadaTransportadorANTT_Specified := True;
end;

function ConsultaSituacaoTransportadorAnttResponse2.PlacaHabilitadaTransportadorANTT_Specified(Index: Integer): boolean;
begin
  Result := FPlacaHabilitadaTransportadorANTT_Specified;
end;

function ConsultaSituacaoEmpresaTransportadorAnttResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure ConsultaSituacaoEmpresaTransportadorAnttResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function ConsultaSituacaoEmpresaTransportadorAnttResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function ConsultaSituacaoEmpresaTransportadorAnttResponse2.GetCPFCNPJTransportador(Index: Integer): string;
begin
  Result := FCPFCNPJTransportador;
end;

procedure ConsultaSituacaoEmpresaTransportadorAnttResponse2.SetCPFCNPJTransportador(Index: Integer; const Astring: string);
begin
  FCPFCNPJTransportador := Astring;
  FCPFCNPJTransportador_Specified := True;
end;

function ConsultaSituacaoEmpresaTransportadorAnttResponse2.CPFCNPJTransportador_Specified(Index: Integer): boolean;
begin
  Result := FCPFCNPJTransportador_Specified;
end;

function ConsultaSituacaoEmpresaTransportadorAnttResponse2.GetDataValidadeRNTRC(Index: Integer): TXSDateTime;
begin
  Result := FDataValidadeRNTRC;
end;

procedure ConsultaSituacaoEmpresaTransportadorAnttResponse2.SetDataValidadeRNTRC(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDataValidadeRNTRC := ATXSDateTime;
  FDataValidadeRNTRC_Specified := True;
end;

function ConsultaSituacaoEmpresaTransportadorAnttResponse2.DataValidadeRNTRC_Specified(Index: Integer): boolean;
begin
  Result := FDataValidadeRNTRC_Specified;
end;

function ConsultaSituacaoEmpresaTransportadorAnttResponse2.GetEquiparadoTAC(Index: Integer): Boolean;
begin
  Result := FEquiparadoTAC;
end;

procedure ConsultaSituacaoEmpresaTransportadorAnttResponse2.SetEquiparadoTAC(Index: Integer; const ABoolean: Boolean);
begin
  FEquiparadoTAC := ABoolean;
  FEquiparadoTAC_Specified := True;
end;

function ConsultaSituacaoEmpresaTransportadorAnttResponse2.EquiparadoTAC_Specified(Index: Integer): boolean;
begin
  Result := FEquiparadoTAC_Specified;
end;

function ConsultaSituacaoEmpresaTransportadorAnttResponse2.GetNomeRazaoSocialTransportador(Index: Integer): string;
begin
  Result := FNomeRazaoSocialTransportador;
end;

procedure ConsultaSituacaoEmpresaTransportadorAnttResponse2.SetNomeRazaoSocialTransportador(Index: Integer; const Astring: string);
begin
  FNomeRazaoSocialTransportador := Astring;
  FNomeRazaoSocialTransportador_Specified := True;
end;

function ConsultaSituacaoEmpresaTransportadorAnttResponse2.NomeRazaoSocialTransportador_Specified(Index: Integer): boolean;
begin
  Result := FNomeRazaoSocialTransportador_Specified;
end;

function ConsultaSituacaoEmpresaTransportadorAnttResponse2.GetRNTRCAtivo(Index: Integer): Boolean;
begin
  Result := FRNTRCAtivo;
end;

procedure ConsultaSituacaoEmpresaTransportadorAnttResponse2.SetRNTRCAtivo(Index: Integer; const ABoolean: Boolean);
begin
  FRNTRCAtivo := ABoolean;
  FRNTRCAtivo_Specified := True;
end;

function ConsultaSituacaoEmpresaTransportadorAnttResponse2.RNTRCAtivo_Specified(Index: Integer): boolean;
begin
  Result := FRNTRCAtivo_Specified;
end;

function ConsultaSituacaoEmpresaTransportadorAnttResponse2.GetRNTRCTransportador(Index: Integer): string;
begin
  Result := FRNTRCTransportador;
end;

procedure ConsultaSituacaoEmpresaTransportadorAnttResponse2.SetRNTRCTransportador(Index: Integer; const Astring: string);
begin
  FRNTRCTransportador := Astring;
  FRNTRCTransportador_Specified := True;
end;

function ConsultaSituacaoEmpresaTransportadorAnttResponse2.RNTRCTransportador_Specified(Index: Integer): boolean;
begin
  Result := FRNTRCTransportador_Specified;
end;

function ConsultaSituacaoEmpresaTransportadorAnttResponse2.GetTipoTransportador(Index: Integer): TipoTransportador;
begin
  Result := FTipoTransportador;
end;

procedure ConsultaSituacaoEmpresaTransportadorAnttResponse2.SetTipoTransportador(Index: Integer; const ATipoTransportador: TipoTransportador);
begin
  FTipoTransportador := ATipoTransportador;
  FTipoTransportador_Specified := True;
end;

function ConsultaSituacaoEmpresaTransportadorAnttResponse2.TipoTransportador_Specified(Index: Integer): boolean;
begin
  Result := FTipoTransportador_Specified;
end;

function ConsultaSituacaoEmpresaTransportadorAnttResponse2.GetMensagemRetorno(Index: Integer): string;
begin
  Result := FMensagemRetorno;
end;

procedure ConsultaSituacaoEmpresaTransportadorAnttResponse2.SetMensagemRetorno(Index: Integer; const Astring: string);
begin
  FMensagemRetorno := Astring;
  FMensagemRetorno_Specified := True;
end;

function ConsultaSituacaoEmpresaTransportadorAnttResponse2.MensagemRetorno_Specified(Index: Integer): boolean;
begin
  Result := FMensagemRetorno_Specified;
end;

function ConsultaSituacaoEmpresaTransportadorAnttResponse2.GetDispensadoPelaANTT(Index: Integer): Boolean;
begin
  Result := FDispensadoPelaANTT;
end;

procedure ConsultaSituacaoEmpresaTransportadorAnttResponse2.SetDispensadoPelaANTT(Index: Integer; const ABoolean: Boolean);
begin
  FDispensadoPelaANTT := ABoolean;
  FDispensadoPelaANTT_Specified := True;
end;

function ConsultaSituacaoEmpresaTransportadorAnttResponse2.DispensadoPelaANTT_Specified(Index: Integer): boolean;
begin
  Result := FDispensadoPelaANTT_Specified;
end;

function CadastroAtualizacaoDadosItemReguaImpostoRequest2.GetInstrucao(Index: Integer): Integer;
begin
  Result := FInstrucao;
end;

procedure CadastroAtualizacaoDadosItemReguaImpostoRequest2.SetInstrucao(Index: Integer; const AInteger: Integer);
begin
  FInstrucao := AInteger;
  FInstrucao_Specified := True;
end;

function CadastroAtualizacaoDadosItemReguaImpostoRequest2.Instrucao_Specified(Index: Integer): boolean;
begin
  Result := FInstrucao_Specified;
end;

function CadastroAtualizacaoDadosItemReguaImpostoRequest2.GetIdReguaImpostos(Index: Integer): Integer;
begin
  Result := FIdReguaImpostos;
end;

procedure CadastroAtualizacaoDadosItemReguaImpostoRequest2.SetIdReguaImpostos(Index: Integer; const AInteger: Integer);
begin
  FIdReguaImpostos := AInteger;
  FIdReguaImpostos_Specified := True;
end;

function CadastroAtualizacaoDadosItemReguaImpostoRequest2.IdReguaImpostos_Specified(Index: Integer): boolean;
begin
  Result := FIdReguaImpostos_Specified;
end;

function CadastroAtualizacaoDadosItemReguaImpostoRequest2.GetAnoVigencia(Index: Integer): Integer;
begin
  Result := FAnoVigencia;
end;

procedure CadastroAtualizacaoDadosItemReguaImpostoRequest2.SetAnoVigencia(Index: Integer; const AInteger: Integer);
begin
  FAnoVigencia := AInteger;
  FAnoVigencia_Specified := True;
end;

function CadastroAtualizacaoDadosItemReguaImpostoRequest2.AnoVigencia_Specified(Index: Integer): boolean;
begin
  Result := FAnoVigencia_Specified;
end;

function CadastroAtualizacaoDadosItemReguaImpostoRequest2.GetDataVigencia(Index: Integer): TXSDateTime;
begin
  Result := FDataVigencia;
end;

procedure CadastroAtualizacaoDadosItemReguaImpostoRequest2.SetDataVigencia(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDataVigencia := ATXSDateTime;
  FDataVigencia_Specified := True;
end;

function CadastroAtualizacaoDadosItemReguaImpostoRequest2.DataVigencia_Specified(Index: Integer): boolean;
begin
  Result := FDataVigencia_Specified;
end;

function CadastroAtualizacaoDadosItemReguaImpostoRequest2.GetTipoImposto(Index: Integer): Integer;
begin
  Result := FTipoImposto;
end;

procedure CadastroAtualizacaoDadosItemReguaImpostoRequest2.SetTipoImposto(Index: Integer; const AInteger: Integer);
begin
  FTipoImposto := AInteger;
  FTipoImposto_Specified := True;
end;

function CadastroAtualizacaoDadosItemReguaImpostoRequest2.TipoImposto_Specified(Index: Integer): boolean;
begin
  Result := FTipoImposto_Specified;
end;

function CadastroAtualizacaoDadosItemReguaImpostoRequest2.GetBaseCalculoMinima(Index: Integer): TXSDecimal;
begin
  Result := FBaseCalculoMinima;
end;

procedure CadastroAtualizacaoDadosItemReguaImpostoRequest2.SetBaseCalculoMinima(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FBaseCalculoMinima := ATXSDecimal;
  FBaseCalculoMinima_Specified := True;
end;

function CadastroAtualizacaoDadosItemReguaImpostoRequest2.BaseCalculoMinima_Specified(Index: Integer): boolean;
begin
  Result := FBaseCalculoMinima_Specified;
end;

function CadastroAtualizacaoDadosItemReguaImpostoRequest2.GetBaseCalculoMaxima(Index: Integer): TXSDecimal;
begin
  Result := FBaseCalculoMaxima;
end;

procedure CadastroAtualizacaoDadosItemReguaImpostoRequest2.SetBaseCalculoMaxima(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FBaseCalculoMaxima := ATXSDecimal;
  FBaseCalculoMaxima_Specified := True;
end;

function CadastroAtualizacaoDadosItemReguaImpostoRequest2.BaseCalculoMaxima_Specified(Index: Integer): boolean;
begin
  Result := FBaseCalculoMaxima_Specified;
end;

function CadastroAtualizacaoDadosItemReguaImpostoRequest2.GetAliquota(Index: Integer): TXSDecimal;
begin
  Result := FAliquota;
end;

procedure CadastroAtualizacaoDadosItemReguaImpostoRequest2.SetAliquota(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FAliquota := ATXSDecimal;
  FAliquota_Specified := True;
end;

function CadastroAtualizacaoDadosItemReguaImpostoRequest2.Aliquota_Specified(Index: Integer): boolean;
begin
  Result := FAliquota_Specified;
end;

function CadastroAtualizacaoDadosItemReguaImpostoRequest2.GetValorDeducao(Index: Integer): TXSDecimal;
begin
  Result := FValorDeducao;
end;

procedure CadastroAtualizacaoDadosItemReguaImpostoRequest2.SetValorDeducao(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorDeducao := ATXSDecimal;
  FValorDeducao_Specified := True;
end;

function CadastroAtualizacaoDadosItemReguaImpostoRequest2.ValorDeducao_Specified(Index: Integer): boolean;
begin
  Result := FValorDeducao_Specified;
end;

function CadastroAtualizacaoDadosItemReguaImpostoRequest2.GetBaseIncidencia(Index: Integer): TXSDecimal;
begin
  Result := FBaseIncidencia;
end;

procedure CadastroAtualizacaoDadosItemReguaImpostoRequest2.SetBaseIncidencia(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FBaseIncidencia := ATXSDecimal;
  FBaseIncidencia_Specified := True;
end;

function CadastroAtualizacaoDadosItemReguaImpostoRequest2.BaseIncidencia_Specified(Index: Integer): boolean;
begin
  Result := FBaseIncidencia_Specified;
end;

function CadastroAtualizacaoDadosItemReguaImpostoRequest2.GetAtivo(Index: Integer): Boolean;
begin
  Result := FAtivo;
end;

procedure CadastroAtualizacaoDadosItemReguaImpostoRequest2.SetAtivo(Index: Integer; const ABoolean: Boolean);
begin
  FAtivo := ABoolean;
  FAtivo_Specified := True;
end;

function CadastroAtualizacaoDadosItemReguaImpostoRequest2.Ativo_Specified(Index: Integer): boolean;
begin
  Result := FAtivo_Specified;
end;

function CadastroAtualizacaoDadosItemReguaImpostoRequest2.GetOrdemFaixa(Index: Integer): Integer;
begin
  Result := FOrdemFaixa;
end;

procedure CadastroAtualizacaoDadosItemReguaImpostoRequest2.SetOrdemFaixa(Index: Integer; const AInteger: Integer);
begin
  FOrdemFaixa := AInteger;
  FOrdemFaixa_Specified := True;
end;

function CadastroAtualizacaoDadosItemReguaImpostoRequest2.OrdemFaixa_Specified(Index: Integer): boolean;
begin
  Result := FOrdemFaixa_Specified;
end;

function CadastroAtualizacaoDadosItemReguaImpostoRequest2.GetCodigoIBGEMunicipioISS(Index: Integer): Integer;
begin
  Result := FCodigoIBGEMunicipioISS;
end;

procedure CadastroAtualizacaoDadosItemReguaImpostoRequest2.SetCodigoIBGEMunicipioISS(Index: Integer; const AInteger: Integer);
begin
  FCodigoIBGEMunicipioISS := AInteger;
  FCodigoIBGEMunicipioISS_Specified := True;
end;

function CadastroAtualizacaoDadosItemReguaImpostoRequest2.CodigoIBGEMunicipioISS_Specified(Index: Integer): boolean;
begin
  Result := FCodigoIBGEMunicipioISS_Specified;
end;

function ResultadoPaginadoBuscaItemReguaImpostoResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure ResultadoPaginadoBuscaItemReguaImpostoResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function ResultadoPaginadoBuscaItemReguaImpostoResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function ResultadoPaginadoBuscaItemReguaImpostoResponse2.GetItens(Index: Integer): ArrayOfBuscaItemReguaImpostoResponse;
begin
  Result := FItens;
end;

procedure ResultadoPaginadoBuscaItemReguaImpostoResponse2.SetItens(Index: Integer; const AArrayOfBuscaItemReguaImpostoResponse: ArrayOfBuscaItemReguaImpostoResponse);
begin
  FItens := AArrayOfBuscaItemReguaImpostoResponse;
  FItens_Specified := True;
end;

function ResultadoPaginadoBuscaItemReguaImpostoResponse2.Itens_Specified(Index: Integer): boolean;
begin
  Result := FItens_Specified;
end;

function ResultadoPaginadoBuscaItemReguaImpostoResponse2.GetNumeroPagina(Index: Integer): Integer;
begin
  Result := FNumeroPagina;
end;

procedure ResultadoPaginadoBuscaItemReguaImpostoResponse2.SetNumeroPagina(Index: Integer; const AInteger: Integer);
begin
  FNumeroPagina := AInteger;
  FNumeroPagina_Specified := True;
end;

function ResultadoPaginadoBuscaItemReguaImpostoResponse2.NumeroPagina_Specified(Index: Integer): boolean;
begin
  Result := FNumeroPagina_Specified;
end;

function ResultadoPaginadoBuscaItemReguaImpostoResponse2.GetQuantidadeItensPorPagina(Index: Integer): Integer;
begin
  Result := FQuantidadeItensPorPagina;
end;

procedure ResultadoPaginadoBuscaItemReguaImpostoResponse2.SetQuantidadeItensPorPagina(Index: Integer; const AInteger: Integer);
begin
  FQuantidadeItensPorPagina := AInteger;
  FQuantidadeItensPorPagina_Specified := True;
end;

function ResultadoPaginadoBuscaItemReguaImpostoResponse2.QuantidadeItensPorPagina_Specified(Index: Integer): boolean;
begin
  Result := FQuantidadeItensPorPagina_Specified;
end;

function ResultadoPaginadoBuscaItemReguaImpostoResponse2.GetQuantidadeTotalItens(Index: Integer): Integer;
begin
  Result := FQuantidadeTotalItens;
end;

procedure ResultadoPaginadoBuscaItemReguaImpostoResponse2.SetQuantidadeTotalItens(Index: Integer; const AInteger: Integer);
begin
  FQuantidadeTotalItens := AInteger;
  FQuantidadeTotalItens_Specified := True;
end;

function ResultadoPaginadoBuscaItemReguaImpostoResponse2.QuantidadeTotalItens_Specified(Index: Integer): boolean;
begin
  Result := FQuantidadeTotalItens_Specified;
end;

function ResultadoPaginadoBuscaItemReguaImpostoResponse2.GetQuantidadeTotalPaginas(Index: Integer): Integer;
begin
  Result := FQuantidadeTotalPaginas;
end;

procedure ResultadoPaginadoBuscaItemReguaImpostoResponse2.SetQuantidadeTotalPaginas(Index: Integer; const AInteger: Integer);
begin
  FQuantidadeTotalPaginas := AInteger;
  FQuantidadeTotalPaginas_Specified := True;
end;

function ResultadoPaginadoBuscaItemReguaImpostoResponse2.QuantidadeTotalPaginas_Specified(Index: Integer): boolean;
begin
  Result := FQuantidadeTotalPaginas_Specified;
end;

function BuscaItemReguaImpostoResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure BuscaItemReguaImpostoResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function BuscaItemReguaImpostoResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function BuscaItemReguaImpostoResponse2.GetIdReguaImpostos(Index: Integer): Integer;
begin
  Result := FIdReguaImpostos;
end;

procedure BuscaItemReguaImpostoResponse2.SetIdReguaImpostos(Index: Integer; const AInteger: Integer);
begin
  FIdReguaImpostos := AInteger;
  FIdReguaImpostos_Specified := True;
end;

function BuscaItemReguaImpostoResponse2.IdReguaImpostos_Specified(Index: Integer): boolean;
begin
  Result := FIdReguaImpostos_Specified;
end;

function BuscaItemReguaImpostoResponse2.GetAnoVigencia(Index: Integer): Integer;
begin
  Result := FAnoVigencia;
end;

procedure BuscaItemReguaImpostoResponse2.SetAnoVigencia(Index: Integer; const AInteger: Integer);
begin
  FAnoVigencia := AInteger;
  FAnoVigencia_Specified := True;
end;

function BuscaItemReguaImpostoResponse2.AnoVigencia_Specified(Index: Integer): boolean;
begin
  Result := FAnoVigencia_Specified;
end;

function BuscaItemReguaImpostoResponse2.GetDataVigencia(Index: Integer): TXSDateTime;
begin
  Result := FDataVigencia;
end;

procedure BuscaItemReguaImpostoResponse2.SetDataVigencia(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDataVigencia := ATXSDateTime;
  FDataVigencia_Specified := True;
end;

function BuscaItemReguaImpostoResponse2.DataVigencia_Specified(Index: Integer): boolean;
begin
  Result := FDataVigencia_Specified;
end;

function BuscaItemReguaImpostoResponse2.GetTipoImposto(Index: Integer): string;
begin
  Result := FTipoImposto;
end;

procedure BuscaItemReguaImpostoResponse2.SetTipoImposto(Index: Integer; const Astring: string);
begin
  FTipoImposto := Astring;
  FTipoImposto_Specified := True;
end;

function BuscaItemReguaImpostoResponse2.TipoImposto_Specified(Index: Integer): boolean;
begin
  Result := FTipoImposto_Specified;
end;

function BuscaItemReguaImpostoResponse2.GetBaseCalculoMinima(Index: Integer): TXSDecimal;
begin
  Result := FBaseCalculoMinima;
end;

procedure BuscaItemReguaImpostoResponse2.SetBaseCalculoMinima(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FBaseCalculoMinima := ATXSDecimal;
  FBaseCalculoMinima_Specified := True;
end;

function BuscaItemReguaImpostoResponse2.BaseCalculoMinima_Specified(Index: Integer): boolean;
begin
  Result := FBaseCalculoMinima_Specified;
end;

function BuscaItemReguaImpostoResponse2.GetBaseCalculoMaxima(Index: Integer): TXSDecimal;
begin
  Result := FBaseCalculoMaxima;
end;

procedure BuscaItemReguaImpostoResponse2.SetBaseCalculoMaxima(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FBaseCalculoMaxima := ATXSDecimal;
  FBaseCalculoMaxima_Specified := True;
end;

function BuscaItemReguaImpostoResponse2.BaseCalculoMaxima_Specified(Index: Integer): boolean;
begin
  Result := FBaseCalculoMaxima_Specified;
end;

function BuscaItemReguaImpostoResponse2.GetAliquota(Index: Integer): TXSDecimal;
begin
  Result := FAliquota;
end;

procedure BuscaItemReguaImpostoResponse2.SetAliquota(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FAliquota := ATXSDecimal;
  FAliquota_Specified := True;
end;

function BuscaItemReguaImpostoResponse2.Aliquota_Specified(Index: Integer): boolean;
begin
  Result := FAliquota_Specified;
end;

function BuscaItemReguaImpostoResponse2.GetValorDeducao(Index: Integer): TXSDecimal;
begin
  Result := FValorDeducao;
end;

procedure BuscaItemReguaImpostoResponse2.SetValorDeducao(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorDeducao := ATXSDecimal;
  FValorDeducao_Specified := True;
end;

function BuscaItemReguaImpostoResponse2.ValorDeducao_Specified(Index: Integer): boolean;
begin
  Result := FValorDeducao_Specified;
end;

function BuscaItemReguaImpostoResponse2.GetBaseIncidencia(Index: Integer): TXSDecimal;
begin
  Result := FBaseIncidencia;
end;

procedure BuscaItemReguaImpostoResponse2.SetBaseIncidencia(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FBaseIncidencia := ATXSDecimal;
  FBaseIncidencia_Specified := True;
end;

function BuscaItemReguaImpostoResponse2.BaseIncidencia_Specified(Index: Integer): boolean;
begin
  Result := FBaseIncidencia_Specified;
end;

function BuscaItemReguaImpostoResponse2.GetAtivo(Index: Integer): Boolean;
begin
  Result := FAtivo;
end;

procedure BuscaItemReguaImpostoResponse2.SetAtivo(Index: Integer; const ABoolean: Boolean);
begin
  FAtivo := ABoolean;
  FAtivo_Specified := True;
end;

function BuscaItemReguaImpostoResponse2.Ativo_Specified(Index: Integer): boolean;
begin
  Result := FAtivo_Specified;
end;

function BuscaItemReguaImpostoResponse2.GetOrdemFaixa(Index: Integer): Integer;
begin
  Result := FOrdemFaixa;
end;

procedure BuscaItemReguaImpostoResponse2.SetOrdemFaixa(Index: Integer; const AInteger: Integer);
begin
  FOrdemFaixa := AInteger;
  FOrdemFaixa_Specified := True;
end;

function BuscaItemReguaImpostoResponse2.OrdemFaixa_Specified(Index: Integer): boolean;
begin
  Result := FOrdemFaixa_Specified;
end;

function BuscaItemReguaImpostoResponse2.GetCodigoIBGEMunicipioISS(Index: Integer): Integer;
begin
  Result := FCodigoIBGEMunicipioISS;
end;

procedure BuscaItemReguaImpostoResponse2.SetCodigoIBGEMunicipioISS(Index: Integer; const AInteger: Integer);
begin
  FCodigoIBGEMunicipioISS := AInteger;
  FCodigoIBGEMunicipioISS_Specified := True;
end;

function BuscaItemReguaImpostoResponse2.CodigoIBGEMunicipioISS_Specified(Index: Integer): boolean;
begin
  Result := FCodigoIBGEMunicipioISS_Specified;
end;

function BuscaItemReguaImpostoRequest2.GetQuantidadeItensPorPagina(Index: Integer): Integer;
begin
  Result := FQuantidadeItensPorPagina;
end;

procedure BuscaItemReguaImpostoRequest2.SetQuantidadeItensPorPagina(Index: Integer; const AInteger: Integer);
begin
  FQuantidadeItensPorPagina := AInteger;
  FQuantidadeItensPorPagina_Specified := True;
end;

function BuscaItemReguaImpostoRequest2.QuantidadeItensPorPagina_Specified(Index: Integer): boolean;
begin
  Result := FQuantidadeItensPorPagina_Specified;
end;

function BuscaItemReguaImpostoRequest2.GetNumeroPagina(Index: Integer): Integer;
begin
  Result := FNumeroPagina;
end;

procedure BuscaItemReguaImpostoRequest2.SetNumeroPagina(Index: Integer; const AInteger: Integer);
begin
  FNumeroPagina := AInteger;
  FNumeroPagina_Specified := True;
end;

function BuscaItemReguaImpostoRequest2.NumeroPagina_Specified(Index: Integer): boolean;
begin
  Result := FNumeroPagina_Specified;
end;

function BuscaItemReguaImpostoRequest2.GetIdReguaImpostos(Index: Integer): Integer;
begin
  Result := FIdReguaImpostos;
end;

procedure BuscaItemReguaImpostoRequest2.SetIdReguaImpostos(Index: Integer; const AInteger: Integer);
begin
  FIdReguaImpostos := AInteger;
  FIdReguaImpostos_Specified := True;
end;

function BuscaItemReguaImpostoRequest2.IdReguaImpostos_Specified(Index: Integer): boolean;
begin
  Result := FIdReguaImpostos_Specified;
end;

function BuscaItemReguaImpostoRequest2.GetTipoImposto(Index: Integer): Integer;
begin
  Result := FTipoImposto;
end;

procedure BuscaItemReguaImpostoRequest2.SetTipoImposto(Index: Integer; const AInteger: Integer);
begin
  FTipoImposto := AInteger;
  FTipoImposto_Specified := True;
end;

function BuscaItemReguaImpostoRequest2.TipoImposto_Specified(Index: Integer): boolean;
begin
  Result := FTipoImposto_Specified;
end;

function BuscaItemReguaImpostoRequest2.GetAnoVigencia(Index: Integer): Integer;
begin
  Result := FAnoVigencia;
end;

procedure BuscaItemReguaImpostoRequest2.SetAnoVigencia(Index: Integer; const AInteger: Integer);
begin
  FAnoVigencia := AInteger;
  FAnoVigencia_Specified := True;
end;

function BuscaItemReguaImpostoRequest2.AnoVigencia_Specified(Index: Integer): boolean;
begin
  Result := FAnoVigencia_Specified;
end;

function BuscaItemReguaImpostoRequest2.GetOrdemFaixa(Index: Integer): Integer;
begin
  Result := FOrdemFaixa;
end;

procedure BuscaItemReguaImpostoRequest2.SetOrdemFaixa(Index: Integer; const AInteger: Integer);
begin
  FOrdemFaixa := AInteger;
  FOrdemFaixa_Specified := True;
end;

function BuscaItemReguaImpostoRequest2.OrdemFaixa_Specified(Index: Integer): boolean;
begin
  Result := FOrdemFaixa_Specified;
end;

function BuscaItemReguaImpostoRequest2.GetAtivo(Index: Integer): Boolean;
begin
  Result := FAtivo;
end;

procedure BuscaItemReguaImpostoRequest2.SetAtivo(Index: Integer; const ABoolean: Boolean);
begin
  FAtivo := ABoolean;
  FAtivo_Specified := True;
end;

function BuscaItemReguaImpostoRequest2.Ativo_Specified(Index: Integer): boolean;
begin
  Result := FAtivo_Specified;
end;

function BuscaItemReguaImpostoRequest2.GetCodigoIBGEMunicipioISS(Index: Integer): Integer;
begin
  Result := FCodigoIBGEMunicipioISS;
end;

procedure BuscaItemReguaImpostoRequest2.SetCodigoIBGEMunicipioISS(Index: Integer; const AInteger: Integer);
begin
  FCodigoIBGEMunicipioISS := AInteger;
  FCodigoIBGEMunicipioISS_Specified := True;
end;

function BuscaItemReguaImpostoRequest2.CodigoIBGEMunicipioISS_Specified(Index: Integer): boolean;
begin
  Result := FCodigoIBGEMunicipioISS_Specified;
end;

function CadastroAtualizacaoDadosItemReguaImpostoResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure CadastroAtualizacaoDadosItemReguaImpostoResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function CadastroAtualizacaoDadosItemReguaImpostoResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function CadastroAtualizacaoDadosItemReguaImpostoResponse2.GetIdReguaImpostos(Index: Integer): Integer;
begin
  Result := FIdReguaImpostos;
end;

procedure CadastroAtualizacaoDadosItemReguaImpostoResponse2.SetIdReguaImpostos(Index: Integer; const AInteger: Integer);
begin
  FIdReguaImpostos := AInteger;
  FIdReguaImpostos_Specified := True;
end;

function CadastroAtualizacaoDadosItemReguaImpostoResponse2.IdReguaImpostos_Specified(Index: Integer): boolean;
begin
  Result := FIdReguaImpostos_Specified;
end;

function CadastroAtualizacaoDadosItemReguaImpostoResponse2.GetAnoVigencia(Index: Integer): Integer;
begin
  Result := FAnoVigencia;
end;

procedure CadastroAtualizacaoDadosItemReguaImpostoResponse2.SetAnoVigencia(Index: Integer; const AInteger: Integer);
begin
  FAnoVigencia := AInteger;
  FAnoVigencia_Specified := True;
end;

function CadastroAtualizacaoDadosItemReguaImpostoResponse2.AnoVigencia_Specified(Index: Integer): boolean;
begin
  Result := FAnoVigencia_Specified;
end;

function CadastroAtualizacaoDadosItemReguaImpostoResponse2.GetDataVigencia(Index: Integer): TXSDateTime;
begin
  Result := FDataVigencia;
end;

procedure CadastroAtualizacaoDadosItemReguaImpostoResponse2.SetDataVigencia(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDataVigencia := ATXSDateTime;
  FDataVigencia_Specified := True;
end;

function CadastroAtualizacaoDadosItemReguaImpostoResponse2.DataVigencia_Specified(Index: Integer): boolean;
begin
  Result := FDataVigencia_Specified;
end;

function CadastroAtualizacaoDadosItemReguaImpostoResponse2.GetTipoImposto(Index: Integer): string;
begin
  Result := FTipoImposto;
end;

procedure CadastroAtualizacaoDadosItemReguaImpostoResponse2.SetTipoImposto(Index: Integer; const Astring: string);
begin
  FTipoImposto := Astring;
  FTipoImposto_Specified := True;
end;

function CadastroAtualizacaoDadosItemReguaImpostoResponse2.TipoImposto_Specified(Index: Integer): boolean;
begin
  Result := FTipoImposto_Specified;
end;

function CadastroAtualizacaoDadosItemReguaImpostoResponse2.GetBaseCalculoMinima(Index: Integer): TXSDecimal;
begin
  Result := FBaseCalculoMinima;
end;

procedure CadastroAtualizacaoDadosItemReguaImpostoResponse2.SetBaseCalculoMinima(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FBaseCalculoMinima := ATXSDecimal;
  FBaseCalculoMinima_Specified := True;
end;

function CadastroAtualizacaoDadosItemReguaImpostoResponse2.BaseCalculoMinima_Specified(Index: Integer): boolean;
begin
  Result := FBaseCalculoMinima_Specified;
end;

function CadastroAtualizacaoDadosItemReguaImpostoResponse2.GetBaseCalculoMaxima(Index: Integer): TXSDecimal;
begin
  Result := FBaseCalculoMaxima;
end;

procedure CadastroAtualizacaoDadosItemReguaImpostoResponse2.SetBaseCalculoMaxima(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FBaseCalculoMaxima := ATXSDecimal;
  FBaseCalculoMaxima_Specified := True;
end;

function CadastroAtualizacaoDadosItemReguaImpostoResponse2.BaseCalculoMaxima_Specified(Index: Integer): boolean;
begin
  Result := FBaseCalculoMaxima_Specified;
end;

function CadastroAtualizacaoDadosItemReguaImpostoResponse2.GetAliquota(Index: Integer): TXSDecimal;
begin
  Result := FAliquota;
end;

procedure CadastroAtualizacaoDadosItemReguaImpostoResponse2.SetAliquota(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FAliquota := ATXSDecimal;
  FAliquota_Specified := True;
end;

function CadastroAtualizacaoDadosItemReguaImpostoResponse2.Aliquota_Specified(Index: Integer): boolean;
begin
  Result := FAliquota_Specified;
end;

function CadastroAtualizacaoDadosItemReguaImpostoResponse2.GetValorDeducao(Index: Integer): TXSDecimal;
begin
  Result := FValorDeducao;
end;

procedure CadastroAtualizacaoDadosItemReguaImpostoResponse2.SetValorDeducao(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorDeducao := ATXSDecimal;
  FValorDeducao_Specified := True;
end;

function CadastroAtualizacaoDadosItemReguaImpostoResponse2.ValorDeducao_Specified(Index: Integer): boolean;
begin
  Result := FValorDeducao_Specified;
end;

function CadastroAtualizacaoDadosItemReguaImpostoResponse2.GetBaseIncidencia(Index: Integer): TXSDecimal;
begin
  Result := FBaseIncidencia;
end;

procedure CadastroAtualizacaoDadosItemReguaImpostoResponse2.SetBaseIncidencia(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FBaseIncidencia := ATXSDecimal;
  FBaseIncidencia_Specified := True;
end;

function CadastroAtualizacaoDadosItemReguaImpostoResponse2.BaseIncidencia_Specified(Index: Integer): boolean;
begin
  Result := FBaseIncidencia_Specified;
end;

function CadastroAtualizacaoDadosItemReguaImpostoResponse2.GetAtivo(Index: Integer): Boolean;
begin
  Result := FAtivo;
end;

procedure CadastroAtualizacaoDadosItemReguaImpostoResponse2.SetAtivo(Index: Integer; const ABoolean: Boolean);
begin
  FAtivo := ABoolean;
  FAtivo_Specified := True;
end;

function CadastroAtualizacaoDadosItemReguaImpostoResponse2.Ativo_Specified(Index: Integer): boolean;
begin
  Result := FAtivo_Specified;
end;

function CadastroAtualizacaoDadosItemReguaImpostoResponse2.GetCodigoIBGEMunicipioISS(Index: Integer): Integer;
begin
  Result := FCodigoIBGEMunicipioISS;
end;

procedure CadastroAtualizacaoDadosItemReguaImpostoResponse2.SetCodigoIBGEMunicipioISS(Index: Integer; const AInteger: Integer);
begin
  FCodigoIBGEMunicipioISS := AInteger;
  FCodigoIBGEMunicipioISS_Specified := True;
end;

function CadastroAtualizacaoDadosItemReguaImpostoResponse2.CodigoIBGEMunicipioISS_Specified(Index: Integer): boolean;
begin
  Result := FCodigoIBGEMunicipioISS_Specified;
end;

function CadastroAtualizacaoDadosItemReguaImpostoResponse2.GetOrdemFaixa(Index: Integer): Integer;
begin
  Result := FOrdemFaixa;
end;

procedure CadastroAtualizacaoDadosItemReguaImpostoResponse2.SetOrdemFaixa(Index: Integer; const AInteger: Integer);
begin
  FOrdemFaixa := AInteger;
  FOrdemFaixa_Specified := True;
end;

function CadastroAtualizacaoDadosItemReguaImpostoResponse2.OrdemFaixa_Specified(Index: Integer): boolean;
begin
  Result := FOrdemFaixa_Specified;
end;

function CalculoImpostosFreteRequest2.GetCPFCNPJContratado(Index: Integer): string;
begin
  Result := FCPFCNPJContratado;
end;

procedure CalculoImpostosFreteRequest2.SetCPFCNPJContratado(Index: Integer; const Astring: string);
begin
  FCPFCNPJContratado := Astring;
  FCPFCNPJContratado_Specified := True;
end;

function CalculoImpostosFreteRequest2.CPFCNPJContratado_Specified(Index: Integer): boolean;
begin
  Result := FCPFCNPJContratado_Specified;
end;

function CalculoImpostosFreteRequest2.GetValorBruto(Index: Integer): TXSDecimal;
begin
  Result := FValorBruto;
end;

procedure CalculoImpostosFreteRequest2.SetValorBruto(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorBruto := ATXSDecimal;
  FValorBruto_Specified := True;
end;

function CalculoImpostosFreteRequest2.ValorBruto_Specified(Index: Integer): boolean;
begin
  Result := FValorBruto_Specified;
end;

function CalculoImpostosFreteRequest2.GetIsentarINSS(Index: Integer): Boolean;
begin
  Result := FIsentarINSS;
end;

procedure CalculoImpostosFreteRequest2.SetIsentarINSS(Index: Integer; const ABoolean: Boolean);
begin
  FIsentarINSS := ABoolean;
  FIsentarINSS_Specified := True;
end;

function CalculoImpostosFreteRequest2.IsentarINSS_Specified(Index: Integer): boolean;
begin
  Result := FIsentarINSS_Specified;
end;

function CalculoImpostosFreteRequest2.GetDataReferencia(Index: Integer): TXSDateTime;
begin
  Result := FDataReferencia;
end;

procedure CalculoImpostosFreteRequest2.SetDataReferencia(Index: Integer; const ATXSDateTime: TXSDateTime);
begin
  FDataReferencia := ATXSDateTime;
  FDataReferencia_Specified := True;
end;

function CalculoImpostosFreteRequest2.DataReferencia_Specified(Index: Integer): boolean;
begin
  Result := FDataReferencia_Specified;
end;

function CalculoImpostosFreteRequest2.GetCodigoIBGEMunicipioISS(Index: Integer): Integer;
begin
  Result := FCodigoIBGEMunicipioISS;
end;

procedure CalculoImpostosFreteRequest2.SetCodigoIBGEMunicipioISS(Index: Integer; const AInteger: Integer);
begin
  FCodigoIBGEMunicipioISS := AInteger;
  FCodigoIBGEMunicipioISS_Specified := True;
end;

function CalculoImpostosFreteRequest2.CodigoIBGEMunicipioISS_Specified(Index: Integer): boolean;
begin
  Result := FCodigoIBGEMunicipioISS_Specified;
end;

function CalculoImpostosFreteResponse2.GetErro(Index: Integer): ErroResponse2;
begin
  Result := FErro;
end;

procedure CalculoImpostosFreteResponse2.SetErro(Index: Integer; const AErroResponse2: ErroResponse2);
begin
  FErro := AErroResponse2;
  FErro_Specified := True;
end;

function CalculoImpostosFreteResponse2.Erro_Specified(Index: Integer): boolean;
begin
  Result := FErro_Specified;
end;

function CalculoImpostosFreteResponse2.GetValorCalculadoINSS(Index: Integer): TXSDecimal;
begin
  Result := FValorCalculadoINSS;
end;

procedure CalculoImpostosFreteResponse2.SetValorCalculadoINSS(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorCalculadoINSS := ATXSDecimal;
  FValorCalculadoINSS_Specified := True;
end;

function CalculoImpostosFreteResponse2.ValorCalculadoINSS_Specified(Index: Integer): boolean;
begin
  Result := FValorCalculadoINSS_Specified;
end;

function CalculoImpostosFreteResponse2.GetValorCalculadoSESTSENAT(Index: Integer): TXSDecimal;
begin
  Result := FValorCalculadoSESTSENAT;
end;

procedure CalculoImpostosFreteResponse2.SetValorCalculadoSESTSENAT(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorCalculadoSESTSENAT := ATXSDecimal;
  FValorCalculadoSESTSENAT_Specified := True;
end;

function CalculoImpostosFreteResponse2.ValorCalculadoSESTSENAT_Specified(Index: Integer): boolean;
begin
  Result := FValorCalculadoSESTSENAT_Specified;
end;

function CalculoImpostosFreteResponse2.GetValorCalculadoIRRF(Index: Integer): TXSDecimal;
begin
  Result := FValorCalculadoIRRF;
end;

procedure CalculoImpostosFreteResponse2.SetValorCalculadoIRRF(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorCalculadoIRRF := ATXSDecimal;
  FValorCalculadoIRRF_Specified := True;
end;

function CalculoImpostosFreteResponse2.ValorCalculadoIRRF_Specified(Index: Integer): boolean;
begin
  Result := FValorCalculadoIRRF_Specified;
end;

function CalculoImpostosFreteResponse2.GetValorCalculadoISS(Index: Integer): TXSDecimal;
begin
  Result := FValorCalculadoISS;
end;

procedure CalculoImpostosFreteResponse2.SetValorCalculadoISS(Index: Integer; const ATXSDecimal: TXSDecimal);
begin
  FValorCalculadoISS := ATXSDecimal;
  FValorCalculadoISS_Specified := True;
end;

function CalculoImpostosFreteResponse2.ValorCalculadoISS_Specified(Index: Integer): boolean;
begin
  Result := FValorCalculadoISS_Specified;
end;

function CalculoImpostosFreteResponse2.GetDemonstrativoCalculo(Index: Integer): string;
begin
  Result := FDemonstrativoCalculo;
end;

procedure CalculoImpostosFreteResponse2.SetDemonstrativoCalculo(Index: Integer; const Astring: string);
begin
  FDemonstrativoCalculo := Astring;
  FDemonstrativoCalculo_Specified := True;
end;

function CalculoImpostosFreteResponse2.DemonstrativoCalculo_Specified(Index: Integer): boolean;
begin
  Result := FDemonstrativoCalculo_Specified;
end;

procedure RegisterTypeProc0;
begin
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfInformacoesParcelasResponse), 'http://tmsfrete.v2.targetmp.com.br', 'ArrayOfInformacoesParcelasResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(TipoPessoaProdutoCartao), 'http://schemas.datacontract.org/2004/07/TARGET.VectioFrete.InterfaceTMS.Data', 'TipoPessoaProdutoCartao');
  RemClassRegistry.RegisterXSInfo(TypeInfo(StatusCartao), 'http://schemas.datacontract.org/2004/07/TARGET.VectioFrete.InterfaceTMS.Data', 'StatusCartao');
  RemClassRegistry.RegisterXSInfo(TypeInfo(LiberacaoCarga), 'http://schemas.datacontract.org/2004/07/TARGET.VectioFrete.InterfaceTMS.Data', 'LiberacaoCarga');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfOperacaoTransporteResponse), 'http://tmsfrete.v2.targetmp.com.br', 'ArrayOfOperacaoTransporteResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfDadosQuitacaoFreteDocumentosResponse), 'http://tmsfrete.v2.targetmp.com.br', 'ArrayOfDadosQuitacaoFreteDocumentosResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfListarRotasClienteResponse), 'http://tmsfrete.v2.targetmp.com.br', 'ArrayOfListarRotasClienteResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfRotaResponse), 'http://tmsfrete.v2.targetmp.com.br', 'ArrayOfRotaResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfDadosCompraValePedagioViaFacilPosCancelamento), 'http://tmsfrete.v2.targetmp.com.br', 'ArrayOfDadosCompraValePedagioViaFacilPosCancelamento');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfDadosCompraValePedagioPosCancelamento), 'http://tmsfrete.v2.targetmp.com.br', 'ArrayOfDadosCompraValePedagioPosCancelamento');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfItemBuscarCartoesResponse), 'http://tmsfrete.v2.targetmp.com.br', 'ArrayOfItemBuscarCartoesResponse');
  RemClassRegistry.RegisterXSClass(BuscarCartoesResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'BuscarCartoesResponse2', 'BuscarCartoesResponse');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(BuscarCartoesResponse2), 'ListaCartoesAtivos', '[ArrayItemName="ItemBuscarCartoesResponse"]');
  RemClassRegistry.RegisterXSClass(BuscarCartoesResponse, 'http://tmsfrete.v2.targetmp.com.br', 'BuscarCartoesResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfOperacaoTransporteViagemRequest), 'http://tmsfrete.v2.targetmp.com.br', 'ArrayOfOperacaoTransporteViagemRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfCentroDeCustoResponse), 'http://tmsfrete.v2.targetmp.com.br', 'ArrayOfCentroDeCustoResponse');
  RemClassRegistry.RegisterXSClass(RetificacaoEncerramentoOperacaoTransporteRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'RetificacaoEncerramentoOperacaoTransporteRequest2', 'RetificacaoEncerramentoOperacaoTransporteRequest');
  RemClassRegistry.RegisterXSClass(RetificacaoEncerramentoOperacaoTransporteRequest, 'http://tmsfrete.v2.targetmp.com.br', 'RetificacaoEncerramentoOperacaoTransporteRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfMotoristaResponse), 'http://tmsfrete.v2.targetmp.com.br', 'ArrayOfMotoristaResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(StatusServico), 'http://tmsfrete.v2.targetmp.com.br', 'StatusServico');
  RemClassRegistry.RegisterXSClass(ResultadoPaginadoMotoristaResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'ResultadoPaginadoMotoristaResponse2', 'ResultadoPaginadoMotoristaResponse');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ResultadoPaginadoMotoristaResponse2), 'Itens', '[ArrayItemName="MotoristaResponse"]');
  RemClassRegistry.RegisterXSClass(ResultadoPaginadoCentroDeCustoResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'ResultadoPaginadoCentroDeCustoResponse2', 'ResultadoPaginadoCentroDeCustoResponse');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ResultadoPaginadoCentroDeCustoResponse2), 'Itens', '[ArrayItemName="CentroDeCustoResponse"]');
  RemClassRegistry.RegisterXSClass(DadosCompraValePedagioViaFacilPosCancelamento2, 'http://tmsfrete.v2.targetmp.com.br', 'DadosCompraValePedagioViaFacilPosCancelamento2', 'DadosCompraValePedagioViaFacilPosCancelamento');
  RemClassRegistry.RegisterXSClass(DadosCompraValePedagioViaFacilPosCancelamento, 'http://tmsfrete.v2.targetmp.com.br', 'DadosCompraValePedagioViaFacilPosCancelamento');
  RemClassRegistry.RegisterXSClass(DadosCompraValePedagioPosCancelamento2, 'http://tmsfrete.v2.targetmp.com.br', 'DadosCompraValePedagioPosCancelamento2', 'DadosCompraValePedagioPosCancelamento');
  RemClassRegistry.RegisterXSClass(DadosCompraValePedagioPosCancelamento, 'http://tmsfrete.v2.targetmp.com.br', 'DadosCompraValePedagioPosCancelamento');
  RemClassRegistry.RegisterXSClass(ListarRotaClienteRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'ListarRotaClienteRequest2', 'ListarRotaClienteRequest');
  RemClassRegistry.RegisterXSClass(ListarRotaClienteRequest, 'http://tmsfrete.v2.targetmp.com.br', 'ListarRotaClienteRequest');
  RemClassRegistry.RegisterXSClass(ResultadoPaginadoListarRotasClienteResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'ResultadoPaginadoListarRotasClienteResponse2', 'ResultadoPaginadoListarRotasClienteResponse');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ResultadoPaginadoListarRotasClienteResponse2), 'Itens', '[ArrayItemName="ListarRotasClienteResponse"]');
  RemClassRegistry.RegisterXSClass(ResultadoPaginadoListarRotasClienteResponse, 'http://tmsfrete.v2.targetmp.com.br', 'ResultadoPaginadoListarRotasClienteResponse');
  RemClassRegistry.RegisterXSClass(ConfirmacaoPedagioRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'ConfirmacaoPedagioRequest2', 'ConfirmacaoPedagioRequest');
  RemClassRegistry.RegisterXSClass(ConfirmacaoPedagioRequest, 'http://tmsfrete.v2.targetmp.com.br', 'ConfirmacaoPedagioRequest');
  RemClassRegistry.RegisterXSClass(FinalizacaoOperacaoTransporteRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'FinalizacaoOperacaoTransporteRequest2', 'FinalizacaoOperacaoTransporteRequest');
  RemClassRegistry.RegisterXSClass(FinalizacaoOperacaoTransporteRequest, 'http://tmsfrete.v2.targetmp.com.br', 'FinalizacaoOperacaoTransporteRequest');
  RemClassRegistry.RegisterXSClass(RetificacaoOperacaoTransporteResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'RetificacaoOperacaoTransporteResponse2', 'RetificacaoOperacaoTransporteResponse');
  RemClassRegistry.RegisterXSClass(RetificacaoOperacaoTransporteResponse, 'http://tmsfrete.v2.targetmp.com.br', 'RetificacaoOperacaoTransporteResponse');
  RemClassRegistry.RegisterXSClass(CadastroAtualizacaoDadosQuitacaoRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'CadastroAtualizacaoDadosQuitacaoRequest2', 'CadastroAtualizacaoDadosQuitacaoRequest');
  RemClassRegistry.RegisterXSClass(CadastroAtualizacaoDadosQuitacaoRequest, 'http://tmsfrete.v2.targetmp.com.br', 'CadastroAtualizacaoDadosQuitacaoRequest');
  RemClassRegistry.RegisterXSClass(ObterDetalhesQuitacaoRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'ObterDetalhesQuitacaoRequest2', 'ObterDetalhesQuitacaoRequest');
  RemClassRegistry.RegisterXSClass(ObterDetalhesQuitacaoRequest, 'http://tmsfrete.v2.targetmp.com.br', 'ObterDetalhesQuitacaoRequest');
  RemClassRegistry.RegisterXSClass(ResultadoPaginadoOperacaoTransporteResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'ResultadoPaginadoOperacaoTransporteResponse2', 'ResultadoPaginadoOperacaoTransporteResponse');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ResultadoPaginadoOperacaoTransporteResponse2), 'Itens', '[ArrayItemName="OperacaoTransporteResponse"]');
  RemClassRegistry.RegisterXSClass(DeclaracaoOperacaoTransporteRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'DeclaracaoOperacaoTransporteRequest2', 'DeclaracaoOperacaoTransporteRequest');
  RemClassRegistry.RegisterXSClass(DeclaracaoOperacaoTransporteRequest, 'http://tmsfrete.v2.targetmp.com.br', 'DeclaracaoOperacaoTransporteRequest');
  RemClassRegistry.RegisterXSClass(PagamentoParcelaRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'PagamentoParcelaRequest2', 'PagamentoParcelaRequest');
  RemClassRegistry.RegisterXSClass(PagamentoParcelaRequest, 'http://tmsfrete.v2.targetmp.com.br', 'PagamentoParcelaRequest');
  RemClassRegistry.RegisterXSClass(AutenticacaoRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'AutenticacaoRequest2', 'AutenticacaoRequest');
  RemClassRegistry.RegisterXSClass(ErroResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'ErroResponse2', 'ErroResponse');
  RemClassRegistry.RegisterXSClass(TransportadorResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'TransportadorResponse2', 'TransportadorResponse');
  RemClassRegistry.RegisterXSClass(BuscaTransportadorRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'BuscaTransportadorRequest2', 'BuscaTransportadorRequest');
  RemClassRegistry.RegisterXSClass(OperacaoTransporteViagemRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'OperacaoTransporteViagemRequest2', 'OperacaoTransporteViagemRequest');
  RemClassRegistry.RegisterXSClass(OperacaoTransporteViagemRequest, 'http://tmsfrete.v2.targetmp.com.br', 'OperacaoTransporteViagemRequest');
  RemClassRegistry.RegisterXSClass(EncerramentoOperacaoTransporteResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'EncerramentoOperacaoTransporteResponse2', 'EncerramentoOperacaoTransporteResponse');
  RemClassRegistry.RegisterXSClass(EncerramentoOperacaoTransporteResponse, 'http://tmsfrete.v2.targetmp.com.br', 'EncerramentoOperacaoTransporteResponse');
  RemClassRegistry.RegisterXSClass(BuscaCartoesRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'BuscaCartoesRequest2', 'BuscaCartoesRequest');
  RemClassRegistry.RegisterXSClass(BuscaCartoesRequest, 'http://tmsfrete.v2.targetmp.com.br', 'BuscaCartoesRequest');
  RemClassRegistry.RegisterXSClass(EncerramentoOperacaoTransporteRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'EncerramentoOperacaoTransporteRequest2', 'EncerramentoOperacaoTransporteRequest');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(EncerramentoOperacaoTransporteRequest2), 'Viagens', '[ArrayItemName="OperacaoTransporteViagemRequest"]');
  RemClassRegistry.RegisterXSClass(EncerramentoOperacaoTransporteRequest, 'http://tmsfrete.v2.targetmp.com.br', 'EncerramentoOperacaoTransporteRequest');
  RemClassRegistry.RegisterXSClass(CancelamentoOperacaoResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'CancelamentoOperacaoResponse2', 'CancelamentoOperacaoResponse');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CancelamentoOperacaoResponse2), 'DadosCompraValePedagioRelacionadas', '[ArrayItemName="DadosCompraValePedagioPosCancelamento"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CancelamentoOperacaoResponse2), 'DadosCompraValePedagioViaFacilRelacionadas', '[ArrayItemName="DadosCompraValePedagioViaFacilPosCancelamento"]');
  RemClassRegistry.RegisterXSClass(CancelamentoOperacaoResponse, 'http://tmsfrete.v2.targetmp.com.br', 'CancelamentoOperacaoResponse');
  RemClassRegistry.RegisterXSClass(CancelamentoOperacaoRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'CancelamentoOperacaoRequest2', 'CancelamentoOperacaoRequest');
  RemClassRegistry.RegisterXSClass(CancelamentoOperacaoRequest, 'http://tmsfrete.v2.targetmp.com.br', 'CancelamentoOperacaoRequest');
  RemClassRegistry.RegisterXSClass(AssociacaoSubstituicaoCartaoResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'AssociacaoSubstituicaoCartaoResponse2', 'AssociacaoSubstituicaoCartaoResponse');
  RemClassRegistry.RegisterXSClass(AssociacaoSubstituicaoCartaoResponse, 'http://tmsfrete.v2.targetmp.com.br', 'AssociacaoSubstituicaoCartaoResponse');
  RemClassRegistry.RegisterXSClass(CancelaCompraValePedagioResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'CancelaCompraValePedagioResponse2', 'CancelaCompraValePedagioResponse');
  RemClassRegistry.RegisterXSClass(CancelaCompraValePedagioResponse, 'http://tmsfrete.v2.targetmp.com.br', 'CancelaCompraValePedagioResponse');
  RemClassRegistry.RegisterXSClass(ListarRotasClienteResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'ListarRotasClienteResponse2', 'ListarRotasClienteResponse');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ListarRotasClienteResponse2), 'Rotas', '[ArrayItemName="RotaResponse"]');
  RemClassRegistry.RegisterXSClass(ListarRotasClienteResponse, 'http://tmsfrete.v2.targetmp.com.br', 'ListarRotasClienteResponse');
  RemClassRegistry.RegisterXSClass(ConfirmarPedagioResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'ConfirmarPedagioResponse2', 'ConfirmarPedagioResponse');
  RemClassRegistry.RegisterXSClass(ConfirmarPedagioResponse, 'http://tmsfrete.v2.targetmp.com.br', 'ConfirmarPedagioResponse');
  RemClassRegistry.RegisterXSClass(DadosComplementaresCompraValePedagio2, 'http://tmsfrete.v2.targetmp.com.br', 'DadosComplementaresCompraValePedagio2', 'DadosComplementaresCompraValePedagio');
  RemClassRegistry.RegisterXSClass(DadosComplementaresCompraValePedagio, 'http://tmsfrete.v2.targetmp.com.br', 'DadosComplementaresCompraValePedagio');
  RemClassRegistry.RegisterXSClass(CompraValePedagioResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'CompraValePedagioResponse2', 'CompraValePedagioResponse');
  RemClassRegistry.RegisterXSClass(CompraValePedagioResponse, 'http://tmsfrete.v2.targetmp.com.br', 'CompraValePedagioResponse');
  RemClassRegistry.RegisterXSClass(AtualizaCompraValePedagioResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'AtualizaCompraValePedagioResponse2', 'AtualizaCompraValePedagioResponse');
  RemClassRegistry.RegisterXSClass(AtualizaCompraValePedagioResponse, 'http://tmsfrete.v2.targetmp.com.br', 'AtualizaCompraValePedagioResponse');
  RemClassRegistry.RegisterXSClass(FinalizacaoOperacaoTransporteResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'FinalizacaoOperacaoTransporteResponse2', 'FinalizacaoOperacaoTransporteResponse');
  RemClassRegistry.RegisterXSClass(FinalizacaoOperacaoTransporteResponse, 'http://tmsfrete.v2.targetmp.com.br', 'FinalizacaoOperacaoTransporteResponse');
  RemClassRegistry.RegisterXSClass(DetalhesQuitacaoResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'DetalhesQuitacaoResponse2', 'DetalhesQuitacaoResponse');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DetalhesQuitacaoResponse2), 'Parcelas', '[ArrayItemName="InformacoesParcelasResponse"]');
  RemClassRegistry.RegisterXSClass(DetalhesQuitacaoResponse, 'http://tmsfrete.v2.targetmp.com.br', 'DetalhesQuitacaoResponse');
  RemClassRegistry.RegisterXSClass(CadastroAtualizacaoDadosQuitacaoResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'CadastroAtualizacaoDadosQuitacaoResponse2', 'CadastroAtualizacaoDadosQuitacaoResponse');
  RemClassRegistry.RegisterXSClass(CadastroAtualizacaoDadosQuitacaoResponse, 'http://tmsfrete.v2.targetmp.com.br', 'CadastroAtualizacaoDadosQuitacaoResponse');
  RemClassRegistry.RegisterXSClass(OperacaoTransporteVeiculoResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'OperacaoTransporteVeiculoResponse2', 'OperacaoTransporteVeiculoResponse');
  RemClassRegistry.RegisterXSClass(BuscaOperacaoTransporteRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'BuscaOperacaoTransporteRequest2', 'BuscaOperacaoTransporteRequest');
  RemClassRegistry.RegisterXSClass(InfoPortadorResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'InfoPortadorResponse2', 'InfoPortadorResponse');
  RemClassRegistry.RegisterXSClass(InfoPortadorResponse, 'http://tmsfrete.v2.targetmp.com.br', 'InfoPortadorResponse');
  RemClassRegistry.RegisterXSClass(InformacaoCartaoRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'InformacaoCartaoRequest2', 'InformacaoCartaoRequest');
  RemClassRegistry.RegisterXSClass(InformacaoCartaoRequest, 'http://tmsfrete.v2.targetmp.com.br', 'InformacaoCartaoRequest');
  RemClassRegistry.RegisterXSClass(AssociacaoSubstituicaoCartaoRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'AssociacaoSubstituicaoCartaoRequest2', 'AssociacaoSubstituicaoCartaoRequest');
  RemClassRegistry.RegisterXSClass(AssociacaoSubstituicaoCartaoRequest, 'http://tmsfrete.v2.targetmp.com.br', 'AssociacaoSubstituicaoCartaoRequest');
  RemClassRegistry.RegisterXSClass(ParcelaAdicionalResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'ParcelaAdicionalResponse2', 'ParcelaAdicionalResponse');
  RemClassRegistry.RegisterXSClass(ParcelaAdicionalResponse, 'http://tmsfrete.v2.targetmp.com.br', 'ParcelaAdicionalResponse');
  RemClassRegistry.RegisterXSClass(InformacaoServicoResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'InformacaoServicoResponse2', 'InformacaoServicoResponse');
  RemClassRegistry.RegisterXSClass(GeraTokenParaAcessoResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'GeraTokenParaAcessoResponse2', 'GeraTokenParaAcessoResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfParticipanteResponse), 'http://tmsfrete.v2.targetmp.com.br', 'ArrayOfParticipanteResponse');
  RemClassRegistry.RegisterXSClass(ResultadoPaginadoParticipanteResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'ResultadoPaginadoParticipanteResponse2', 'ResultadoPaginadoParticipanteResponse');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ResultadoPaginadoParticipanteResponse2), 'Itens', '[ArrayItemName="ParticipanteResponse"]');
  RemClassRegistry.RegisterXSClass(ParticipanteRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'ParticipanteRequest2', 'ParticipanteRequest');
  RemClassRegistry.RegisterXSClass(BuscaParticipanteRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'BuscaParticipanteRequest2', 'BuscaParticipanteRequest');
  RemClassRegistry.RegisterXSClass(CentroDeCustoRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'CentroDeCustoRequest2', 'CentroDeCustoRequest');
  RemClassRegistry.RegisterXSClass(TransportadorRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'TransportadorRequest2', 'TransportadorRequest');
  RemClassRegistry.RegisterXSClass(PagamentoAvulsoCartaoRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'PagamentoAvulsoCartaoRequest2', 'PagamentoAvulsoCartaoRequest');
  RemClassRegistry.RegisterXSClass(BuscaCentroDeCustoRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'BuscaCentroDeCustoRequest2', 'BuscaCentroDeCustoRequest');
end;

procedure RegisterTypeProc1;
begin
  RemClassRegistry.RegisterXSClass(CentroDeCustoResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'CentroDeCustoResponse2', 'CentroDeCustoResponse');
  RemClassRegistry.RegisterXSClass(BuscaMotoristaRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'BuscaMotoristaRequest2', 'BuscaMotoristaRequest');
  RemClassRegistry.RegisterXSClass(MotoristaResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'MotoristaResponse2', 'MotoristaResponse');
  RemClassRegistry.RegisterXSClass(MotoristaRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'MotoristaRequest2', 'MotoristaRequest');
  RemClassRegistry.RegisterXSClass(OperacaoTransporteParcelasResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'OperacaoTransporteParcelasResponse2', 'OperacaoTransporteParcelasResponse');
  RemClassRegistry.RegisterXSClass(CancelaCompraValePedagioRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'CancelaCompraValePedagioRequest2', 'CancelaCompraValePedagioRequest');
  RemClassRegistry.RegisterXSClass(CancelaCompraValePedagioRequest, 'http://tmsfrete.v2.targetmp.com.br', 'CancelaCompraValePedagioRequest');
  RemClassRegistry.RegisterXSClass(CompraValePedagioRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'CompraValePedagioRequest2', 'CompraValePedagioRequest');
  RemClassRegistry.RegisterXSClass(CompraValePedagioRequest, 'http://tmsfrete.v2.targetmp.com.br', 'CompraValePedagioRequest');
  RemClassRegistry.RegisterXSClass(ItemBuscarCartoesResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'ItemBuscarCartoesResponse2', 'ItemBuscarCartoesResponse');
  RemClassRegistry.RegisterXSClass(ItemBuscarCartoesResponse, 'http://tmsfrete.v2.targetmp.com.br', 'ItemBuscarCartoesResponse');
  RemClassRegistry.RegisterXSClass(AtualizaCompraValePedagioRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'AtualizaCompraValePedagioRequest2', 'AtualizaCompraValePedagioRequest');
  RemClassRegistry.RegisterXSClass(AtualizaCompraValePedagioRequest, 'http://tmsfrete.v2.targetmp.com.br', 'AtualizaCompraValePedagioRequest');
  RemClassRegistry.RegisterXSClass(DadosQuitacaoFreteDocumentosResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'DadosQuitacaoFreteDocumentosResponse2', 'DadosQuitacaoFreteDocumentosResponse');
  RemClassRegistry.RegisterXSClass(InformacaoCartaoResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'InformacaoCartaoResponse2', 'InformacaoCartaoResponse');
  RemClassRegistry.RegisterXSClass(InformacaoCartaoResponse, 'http://tmsfrete.v2.targetmp.com.br', 'InformacaoCartaoResponse');
  RemClassRegistry.RegisterXSClass(InformacoesParcelasResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'InformacoesParcelasResponse2', 'InformacoesParcelasResponse');
  RemClassRegistry.RegisterXSClass(InformacoesParcelasResponse, 'http://tmsfrete.v2.targetmp.com.br', 'InformacoesParcelasResponse');
  RemClassRegistry.RegisterXSClass(ParcelaAdicionalRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'ParcelaAdicionalRequest2', 'ParcelaAdicionalRequest');
  RemClassRegistry.RegisterXSClass(ParcelaAdicionalRequest, 'http://tmsfrete.v2.targetmp.com.br', 'ParcelaAdicionalRequest');
  RemClassRegistry.RegisterXSClass(PagamentoParcelaIndividualResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'PagamentoParcelaIndividualResponse2', 'PagamentoParcelaIndividualResponse');
  RemClassRegistry.RegisterXSClass(PagamentoParcelaIndividualResponse, 'http://tmsfrete.v2.targetmp.com.br', 'PagamentoParcelaIndividualResponse');
  RemClassRegistry.RegisterXSClass(ParticipanteResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'ParticipanteResponse2', 'ParticipanteResponse');
  RemClassRegistry.RegisterXSClass(OperacaoTransporteParcelaRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'OperacaoTransporteParcelaRequest2', 'OperacaoTransporteParcelaRequest');
  RemClassRegistry.RegisterXSClass(OperacaoTransporteVeiculoRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'OperacaoTransporteVeiculoRequest2', 'OperacaoTransporteVeiculoRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfParticipanteDestinatarioAdicionalRequest), 'http://tmsfrete.v2.targetmp.com.br', 'ArrayOfParticipanteDestinatarioAdicionalRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfOperacaoTransporteParcelaRequest), 'http://tmsfrete.v2.targetmp.com.br', 'ArrayOfOperacaoTransporteParcelaRequest');
  RemClassRegistry.RegisterXSClass(RetificacaoValoresRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'RetificacaoValoresRequest2', 'RetificacaoValoresRequest');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(RetificacaoValoresRequest2), 'Parcelas', '[ArrayItemName="OperacaoTransporteParcelaRequest"]');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfOperacaoTransporteVeiculoRequest), 'http://tmsfrete.v2.targetmp.com.br', 'ArrayOfOperacaoTransporteVeiculoRequest');
  RemClassRegistry.RegisterXSClass(OperacaoTransporteRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'OperacaoTransporteRequest2', 'OperacaoTransporteRequest');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(OperacaoTransporteRequest2), 'Parcelas', '[ArrayItemName="OperacaoTransporteParcelaRequest"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(OperacaoTransporteRequest2), 'Veiculos', '[ArrayItemName="OperacaoTransporteVeiculoRequest"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(OperacaoTransporteRequest2), 'ListaDestinatariosAdicionais', '[ArrayItemName="ParticipanteDestinatarioAdicionalRequest"]');
  RemClassRegistry.RegisterXSClass(RetificacaoOperacaoTransporteRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'RetificacaoOperacaoTransporteRequest2', 'RetificacaoOperacaoTransporteRequest');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(RetificacaoOperacaoTransporteRequest2), 'Veiculos', '[ArrayItemName="OperacaoTransporteVeiculoRequest"]');
  RemClassRegistry.RegisterXSClass(ParticipanteDestinatarioAdicionalRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'ParticipanteDestinatarioAdicionalRequest2', 'ParticipanteDestinatarioAdicionalRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfOperacaoTransporteParcelasResponse), 'http://tmsfrete.v2.targetmp.com.br', 'ArrayOfOperacaoTransporteParcelasResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfOperacaoTransporteVeiculoResponse), 'http://tmsfrete.v2.targetmp.com.br', 'ArrayOfOperacaoTransporteVeiculoResponse');
  RemClassRegistry.RegisterXSClass(OperacaoTransporteResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'OperacaoTransporteResponse2', 'OperacaoTransporteResponse');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(OperacaoTransporteResponse2), 'Parcelas', '[ArrayItemName="OperacaoTransporteParcelasResponse"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(OperacaoTransporteResponse2), 'Veiculos', '[ArrayItemName="OperacaoTransporteVeiculoResponse"]');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfDadosQuitacaoFreteDocumentosRequest), 'http://tmsfrete.v2.targetmp.com.br', 'ArrayOfDadosQuitacaoFreteDocumentosRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfint), 'http://schemas.microsoft.com/2003/10/Serialization/Arrays', 'ArrayOfint');
  RemClassRegistry.RegisterXSClass(DadosQuitacaoFreteResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'DadosQuitacaoFreteResponse2', 'DadosQuitacaoFreteResponse');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DadosQuitacaoFreteResponse2), 'DocumentosQuitacao', '[ArrayItemName="DadosQuitacaoFreteDocumentosResponse"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DadosQuitacaoFreteResponse2), 'IdsTerminaisCarregamento', '[ArrayItemName="int"]');
  RemClassRegistry.RegisterXSClass(DadosQuitacaoFreteRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'DadosQuitacaoFreteRequest2', 'DadosQuitacaoFreteRequest');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DadosQuitacaoFreteRequest2), 'DocumentosQuitacao', '[ArrayItemName="DadosQuitacaoFreteDocumentosRequest"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DadosQuitacaoFreteRequest2), 'IdsTerminaisCarregamento', '[ArrayItemName="int"]');
  RemClassRegistry.RegisterXSClass(DeclaracaoOperacaoTransporteResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'DeclaracaoOperacaoTransporteResponse2', 'DeclaracaoOperacaoTransporteResponse');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DeclaracaoOperacaoTransporteResponse2), 'IdsParcelasOperacaoTransporte', '[ArrayItemName="int"]');
  RemClassRegistry.RegisterXSClass(DeclaracaoOperacaoTransporteResponse, 'http://tmsfrete.v2.targetmp.com.br', 'DeclaracaoOperacaoTransporteResponse');
  RemClassRegistry.RegisterXSClass(DadosQuitacaoFreteDocumentosRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'DadosQuitacaoFreteDocumentosRequest2', 'DadosQuitacaoFreteDocumentosRequest');
  RemClassRegistry.RegisterXSClass(BuscaPagamentoAvulsoCartaoResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'BuscaPagamentoAvulsoCartaoResponse2', 'BuscaPagamentoAvulsoCartaoResponse');
  RemClassRegistry.RegisterXSClass(CombustivelAvulsoCartaoRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'CombustivelAvulsoCartaoRequest2', 'CombustivelAvulsoCartaoRequest');
  RemClassRegistry.RegisterXSClass(CombustivelAvulsoCartaoResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'CombustivelAvulsoCartaoResponse2', 'CombustivelAvulsoCartaoResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfBuscaPagamentoAvulsoCartaoResponse), 'http://tmsfrete.v2.targetmp.com.br', 'ArrayOfBuscaPagamentoAvulsoCartaoResponse');
  RemClassRegistry.RegisterXSClass(PagamentoAvulsoCartaoResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'PagamentoAvulsoCartaoResponse2', 'PagamentoAvulsoCartaoResponse');
  RemClassRegistry.RegisterXSClass(BuscaPagamentoAvulsoCartaoRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'BuscaPagamentoAvulsoCartaoRequest2', 'BuscaPagamentoAvulsoCartaoRequest');
  RemClassRegistry.RegisterXSClass(ResultadoPaginadoBuscaPagamentoAvulsoCartaoResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'ResultadoPaginadoBuscaPagamentoAvulsoCartaoResponse2', 'ResultadoPaginadoBuscaPagamentoAvulsoCartaoResponse');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ResultadoPaginadoBuscaPagamentoAvulsoCartaoResponse2), 'Itens', '[ArrayItemName="BuscaPagamentoAvulsoCartaoResponse"]');
  RemClassRegistry.RegisterXSClass(BuscaCombustivelAvulsoCartaoRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'BuscaCombustivelAvulsoCartaoRequest2', 'BuscaCombustivelAvulsoCartaoRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfBuscaCompraValePedagioResponse), 'http://tmsfrete.v2.targetmp.com.br', 'ArrayOfBuscaCompraValePedagioResponse');
  RemClassRegistry.RegisterXSClass(ResultadoPaginadoBuscaCompraValePedagioResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'ResultadoPaginadoBuscaCompraValePedagioResponse2', 'ResultadoPaginadoBuscaCompraValePedagioResponse');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ResultadoPaginadoBuscaCompraValePedagioResponse2), 'Itens', '[ArrayItemName="BuscaCompraValePedagioResponse"]');
  RemClassRegistry.RegisterXSClass(BuscaCompraValePedagioResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'BuscaCompraValePedagioResponse2', 'BuscaCompraValePedagioResponse');
  RemClassRegistry.RegisterXSClass(BuscaCompraValePedagioRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'BuscaCompraValePedagioRequest2', 'BuscaCompraValePedagioRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfBuscaCombustivelAvulsoCartaoResponse), 'http://tmsfrete.v2.targetmp.com.br', 'ArrayOfBuscaCombustivelAvulsoCartaoResponse');
  RemClassRegistry.RegisterXSClass(ResultadoPaginadoBuscaCombustivelAvulsoCartaoResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'ResultadoPaginadoBuscaCombustivelAvulsoCartaoResponse2', 'ResultadoPaginadoBuscaCombustivelAvulsoCartaoResponse');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ResultadoPaginadoBuscaCombustivelAvulsoCartaoResponse2), 'Itens', '[ArrayItemName="BuscaCombustivelAvulsoCartaoResponse"]');
  RemClassRegistry.RegisterXSClass(BuscaCombustivelAvulsoCartaoResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'BuscaCombustivelAvulsoCartaoResponse2', 'BuscaCombustivelAvulsoCartaoResponse');
  RemClassRegistry.RegisterXSClass(BuscaParticipanteRequest, 'http://tmsfrete.v2.targetmp.com.br', 'BuscaParticipanteRequest');
  RemClassRegistry.RegisterXSClass(ResultadoPaginadoParticipanteResponse, 'http://tmsfrete.v2.targetmp.com.br', 'ResultadoPaginadoParticipanteResponse');
  RemClassRegistry.RegisterXSClass(CentroDeCustoRequest, 'http://tmsfrete.v2.targetmp.com.br', 'CentroDeCustoRequest');
  RemClassRegistry.RegisterXSClass(ParticipanteResponse, 'http://tmsfrete.v2.targetmp.com.br', 'ParticipanteResponse');
  RemClassRegistry.RegisterXSClass(ErroResponse, 'http://tmsfrete.v2.targetmp.com.br', 'ErroResponse');
  RemClassRegistry.RegisterXSClass(GeraTokenParaAcessoResponse, 'http://tmsfrete.v2.targetmp.com.br', 'GeraTokenParaAcessoResponse');
  RemClassRegistry.RegisterXSClass(ParticipanteRequest, 'http://tmsfrete.v2.targetmp.com.br', 'ParticipanteRequest');
  RemClassRegistry.RegisterXSClass(CentroDeCustoResponse, 'http://tmsfrete.v2.targetmp.com.br', 'CentroDeCustoResponse');
  RemClassRegistry.RegisterXSClass(BuscaMotoristaRequest, 'http://tmsfrete.v2.targetmp.com.br', 'BuscaMotoristaRequest');
  RemClassRegistry.RegisterXSClass(ResultadoPaginadoMotoristaResponse, 'http://tmsfrete.v2.targetmp.com.br', 'ResultadoPaginadoMotoristaResponse');
  RemClassRegistry.RegisterXSClass(TransportadorRequest, 'http://tmsfrete.v2.targetmp.com.br', 'TransportadorRequest');
  RemClassRegistry.RegisterXSClass(MotoristaResponse, 'http://tmsfrete.v2.targetmp.com.br', 'MotoristaResponse');
  RemClassRegistry.RegisterXSClass(BuscaCentroDeCustoRequest, 'http://tmsfrete.v2.targetmp.com.br', 'BuscaCentroDeCustoRequest');
  RemClassRegistry.RegisterXSClass(ResultadoPaginadoCentroDeCustoResponse, 'http://tmsfrete.v2.targetmp.com.br', 'ResultadoPaginadoCentroDeCustoResponse');
  RemClassRegistry.RegisterXSClass(MotoristaRequest, 'http://tmsfrete.v2.targetmp.com.br', 'MotoristaRequest');
  RemClassRegistry.RegisterXSClass(RotaDetalhadaInfoPedagio2, 'http://tmsfrete.v2.targetmp.com.br', 'RotaDetalhadaInfoPedagio2', 'RotaDetalhadaInfoPedagio');
  RemClassRegistry.RegisterXSClass(RotaDetalhadaInfoPedagio, 'http://tmsfrete.v2.targetmp.com.br', 'RotaDetalhadaInfoPedagio');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfIdentificadorPracaPedagio), 'http://tmsfrete.v2.targetmp.com.br', 'ArrayOfIdentificadorPracaPedagio');
  RemClassRegistry.RegisterXSClass(CompraValePedagioPorPracaRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'CompraValePedagioPorPracaRequest2', 'CompraValePedagioPorPracaRequest');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CompraValePedagioPorPracaRequest2), 'IdsPracasPedagio', '[ArrayItemName="IdentificadorPracaPedagio"]');
  RemClassRegistry.RegisterXSClass(CompraValePedagioPorPracaRequest, 'http://tmsfrete.v2.targetmp.com.br', 'CompraValePedagioPorPracaRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfRotaDetalhadaInfoPedagio), 'http://tmsfrete.v2.targetmp.com.br', 'ArrayOfRotaDetalhadaInfoPedagio');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfRotaDetalhadaInfoParada), 'http://tmsfrete.v2.targetmp.com.br', 'ArrayOfRotaDetalhadaInfoParada');
  RemClassRegistry.RegisterXSClass(RotaDetalhadaResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'RotaDetalhadaResponse2', 'RotaDetalhadaResponse');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(RotaDetalhadaResponse2), 'Paradas', '[ArrayItemName="RotaDetalhadaInfoParada"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(RotaDetalhadaResponse2), 'Pedagios', '[ArrayItemName="RotaDetalhadaInfoPedagio"]');
  RemClassRegistry.RegisterXSClass(RotaDetalhadaResponse, 'http://tmsfrete.v2.targetmp.com.br', 'RotaDetalhadaResponse');
  RemClassRegistry.RegisterXSClass(DadosPagamentoPedagioCartao2, 'http://tmsfrete.v2.targetmp.com.br', 'DadosPagamentoPedagioCartao2', 'DadosPagamentoPedagioCartao');
  RemClassRegistry.RegisterXSClass(DadosPagamentoPedagioCartao, 'http://tmsfrete.v2.targetmp.com.br', 'DadosPagamentoPedagioCartao');
  RemClassRegistry.RegisterXSClass(ResumoPracaPedagio2, 'http://tmsfrete.v2.targetmp.com.br', 'ResumoPracaPedagio2', 'ResumoPracaPedagio');
  RemClassRegistry.RegisterXSClass(ResumoPracaPedagio, 'http://tmsfrete.v2.targetmp.com.br', 'ResumoPracaPedagio');
  RemClassRegistry.RegisterXSClass(AutenticacaoRequest, 'http://tmsfrete.v2.targetmp.com.br', 'AutenticacaoRequest');
  RemClassRegistry.RegisterXSClass(InformacaoServicoResponse, 'http://tmsfrete.v2.targetmp.com.br', 'InformacaoServicoResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfResumoPracaPedagio), 'http://tmsfrete.v2.targetmp.com.br', 'ArrayOfResumoPracaPedagio');
  RemClassRegistry.RegisterXSClass(IdentificadorPracaPedagio2, 'http://tmsfrete.v2.targetmp.com.br', 'IdentificadorPracaPedagio2', 'IdentificadorPracaPedagio');
  RemClassRegistry.RegisterXSClass(IdentificadorPracaPedagio, 'http://tmsfrete.v2.targetmp.com.br', 'IdentificadorPracaPedagio');
  RemClassRegistry.RegisterXSClass(ObtencaoCustoRotaPorPracasRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'ObtencaoCustoRotaPorPracasRequest2', 'ObtencaoCustoRotaPorPracasRequest');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ObtencaoCustoRotaPorPracasRequest2), 'IdsPracasPedagio', '[ArrayItemName="IdentificadorPracaPedagio"]');
  RemClassRegistry.RegisterXSClass(ObtencaoCustoRotaPorPracasRequest, 'http://tmsfrete.v2.targetmp.com.br', 'ObtencaoCustoRotaPorPracasRequest');
  RemClassRegistry.RegisterXSClass(ObtencaoCustoRotaPorPracaResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'ObtencaoCustoRotaPorPracaResponse2', 'ObtencaoCustoRotaPorPracaResponse');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ObtencaoCustoRotaPorPracaResponse2), 'PracasPedagio', '[ArrayItemName="ResumoPracaPedagio"]');
  RemClassRegistry.RegisterXSClass(ObtencaoCustoRotaPorPracaResponse, 'http://tmsfrete.v2.targetmp.com.br', 'ObtencaoCustoRotaPorPracaResponse');
  RemClassRegistry.RegisterXSClass(DadosQuitacaoFreteRequest, 'http://tmsfrete.v2.targetmp.com.br', 'DadosQuitacaoFreteRequest');
  RemClassRegistry.RegisterXSClass(DadosQuitacaoFreteDocumentosRequest, 'http://tmsfrete.v2.targetmp.com.br', 'DadosQuitacaoFreteDocumentosRequest');
  RemClassRegistry.RegisterXSClass(OperacaoTransporteResponse, 'http://tmsfrete.v2.targetmp.com.br', 'OperacaoTransporteResponse');
  RemClassRegistry.RegisterXSClass(ParticipanteDestinatarioAdicionalRequest, 'http://tmsfrete.v2.targetmp.com.br', 'ParticipanteDestinatarioAdicionalRequest');
  RemClassRegistry.RegisterXSClass(OperacaoTransporteRequest, 'http://tmsfrete.v2.targetmp.com.br', 'OperacaoTransporteRequest');
  RemClassRegistry.RegisterXSClass(OperacaoTransporteParcelaRequest, 'http://tmsfrete.v2.targetmp.com.br', 'OperacaoTransporteParcelaRequest');
end;

procedure RegisterTypeProc2;
begin
  RemClassRegistry.RegisterXSClass(OperacaoTransporteVeiculoRequest, 'http://tmsfrete.v2.targetmp.com.br', 'OperacaoTransporteVeiculoRequest');
  RemClassRegistry.RegisterXSClass(OperacaoTransporteParcelasResponse, 'http://tmsfrete.v2.targetmp.com.br', 'OperacaoTransporteParcelasResponse');
  RemClassRegistry.RegisterXSClass(ResultadoPaginadoOperacaoTransporteResponse, 'http://tmsfrete.v2.targetmp.com.br', 'ResultadoPaginadoOperacaoTransporteResponse');
  RemClassRegistry.RegisterXSClass(RetificacaoOperacaoTransporteRequest, 'http://tmsfrete.v2.targetmp.com.br', 'RetificacaoOperacaoTransporteRequest');
  RemClassRegistry.RegisterXSClass(RetificacaoValoresRequest, 'http://tmsfrete.v2.targetmp.com.br', 'RetificacaoValoresRequest');
  RemClassRegistry.RegisterXSClass(BuscaOperacaoTransporteRequest, 'http://tmsfrete.v2.targetmp.com.br', 'BuscaOperacaoTransporteRequest');
  RemClassRegistry.RegisterXSClass(OperacaoTransporteVeiculoResponse, 'http://tmsfrete.v2.targetmp.com.br', 'OperacaoTransporteVeiculoResponse');
  RemClassRegistry.RegisterXSClass(DadosQuitacaoFreteResponse, 'http://tmsfrete.v2.targetmp.com.br', 'DadosQuitacaoFreteResponse');
  RemClassRegistry.RegisterXSClass(DadosQuitacaoFreteDocumentosResponse, 'http://tmsfrete.v2.targetmp.com.br', 'DadosQuitacaoFreteDocumentosResponse');
  RemClassRegistry.RegisterXSClass(BuscaPagamentoAvulsoCartaoRequest, 'http://tmsfrete.v2.targetmp.com.br', 'BuscaPagamentoAvulsoCartaoRequest');
  RemClassRegistry.RegisterXSClass(ResultadoPaginadoBuscaPagamentoAvulsoCartaoResponse, 'http://tmsfrete.v2.targetmp.com.br', 'ResultadoPaginadoBuscaPagamentoAvulsoCartaoResponse');
  RemClassRegistry.RegisterXSClass(BuscaPagamentoAvulsoCartaoResponse, 'http://tmsfrete.v2.targetmp.com.br', 'BuscaPagamentoAvulsoCartaoResponse');
  RemClassRegistry.RegisterXSClass(PagamentoAvulsoCartaoResponse, 'http://tmsfrete.v2.targetmp.com.br', 'PagamentoAvulsoCartaoResponse');
  RemClassRegistry.RegisterXSClass(TransportadorResponse, 'http://tmsfrete.v2.targetmp.com.br', 'TransportadorResponse');
  RemClassRegistry.RegisterXSClass(BuscaTransportadorRequest, 'http://tmsfrete.v2.targetmp.com.br', 'BuscaTransportadorRequest');
  RemClassRegistry.RegisterXSClass(PagamentoAvulsoCartaoRequest, 'http://tmsfrete.v2.targetmp.com.br', 'PagamentoAvulsoCartaoRequest');
  RemClassRegistry.RegisterXSClass(CombustivelAvulsoCartaoRequest, 'http://tmsfrete.v2.targetmp.com.br', 'CombustivelAvulsoCartaoRequest');
  RemClassRegistry.RegisterXSClass(BuscaCompraValePedagioRequest, 'http://tmsfrete.v2.targetmp.com.br', 'BuscaCompraValePedagioRequest');
  RemClassRegistry.RegisterXSClass(ResultadoPaginadoBuscaCompraValePedagioResponse, 'http://tmsfrete.v2.targetmp.com.br', 'ResultadoPaginadoBuscaCompraValePedagioResponse');
  RemClassRegistry.RegisterXSClass(BuscaCompraValePedagioResponse, 'http://tmsfrete.v2.targetmp.com.br', 'BuscaCompraValePedagioResponse');
  RemClassRegistry.RegisterXSClass(BuscaCombustivelAvulsoCartaoResponse, 'http://tmsfrete.v2.targetmp.com.br', 'BuscaCombustivelAvulsoCartaoResponse');
  RemClassRegistry.RegisterXSClass(CombustivelAvulsoCartaoResponse, 'http://tmsfrete.v2.targetmp.com.br', 'CombustivelAvulsoCartaoResponse');
  RemClassRegistry.RegisterXSClass(BuscaCombustivelAvulsoCartaoRequest, 'http://tmsfrete.v2.targetmp.com.br', 'BuscaCombustivelAvulsoCartaoRequest');
  RemClassRegistry.RegisterXSClass(ResultadoPaginadoBuscaCombustivelAvulsoCartaoResponse, 'http://tmsfrete.v2.targetmp.com.br', 'ResultadoPaginadoBuscaCombustivelAvulsoCartaoResponse');
  RemClassRegistry.RegisterXSClass(CondutorResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'CondutorResponse2', 'CondutorResponse');
  RemClassRegistry.RegisterXSClass(CondutorResponse, 'http://tmsfrete.v2.targetmp.com.br', 'CondutorResponse');
  RemClassRegistry.RegisterXSClass(BuscaTransacoesFinanceirasRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'BuscaTransacoesFinanceirasRequest2', 'BuscaTransacoesFinanceirasRequest');
  RemClassRegistry.RegisterXSClass(BuscaTransacoesFinanceirasRequest, 'http://tmsfrete.v2.targetmp.com.br', 'BuscaTransacoesFinanceirasRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfCondutorResponse), 'http://tmsfrete.v2.targetmp.com.br', 'ArrayOfCondutorResponse');
  RemClassRegistry.RegisterXSClass(BuscaInformacoesContratacaoRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'BuscaInformacoesContratacaoRequest2', 'BuscaInformacoesContratacaoRequest');
  RemClassRegistry.RegisterXSClass(BuscaInformacoesContratacaoRequest, 'http://tmsfrete.v2.targetmp.com.br', 'BuscaInformacoesContratacaoRequest');
  RemClassRegistry.RegisterXSClass(BuscaInformacoesContratacaoResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'BuscaInformacoesContratacaoResponse2', 'BuscaInformacoesContratacaoResponse');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(BuscaInformacoesContratacaoResponse2), 'ListaCondutorResponse', '[ArrayItemName="CondutorResponse"]');
  RemClassRegistry.RegisterXSClass(BuscaInformacoesContratacaoResponse, 'http://tmsfrete.v2.targetmp.com.br', 'BuscaInformacoesContratacaoResponse');
  RemClassRegistry.RegisterXSClass(DadosContaBancariaResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'DadosContaBancariaResponse2', 'DadosContaBancariaResponse');
  RemClassRegistry.RegisterXSClass(DadosContaBancariaResponse, 'http://tmsfrete.v2.targetmp.com.br', 'DadosContaBancariaResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfBuscaTransacoesFinanceirasResponse), 'http://tmsfrete.v2.targetmp.com.br', 'ArrayOfBuscaTransacoesFinanceirasResponse');
  RemClassRegistry.RegisterXSClass(ResultadoPaginadoBuscaTransacoesFinanceirasResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'ResultadoPaginadoBuscaTransacoesFinanceirasResponse2', 'ResultadoPaginadoBuscaTransacoesFinanceirasResponse');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ResultadoPaginadoBuscaTransacoesFinanceirasResponse2), 'Itens', '[ArrayItemName="BuscaTransacoesFinanceirasResponse"]');
  RemClassRegistry.RegisterXSClass(ResultadoPaginadoBuscaTransacoesFinanceirasResponse, 'http://tmsfrete.v2.targetmp.com.br', 'ResultadoPaginadoBuscaTransacoesFinanceirasResponse');
  RemClassRegistry.RegisterXSClass(ConsultaTaxasCalculadasResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'ConsultaTaxasCalculadasResponse2', 'ConsultaTaxasCalculadasResponse');
  RemClassRegistry.RegisterXSClass(ConsultaTaxasCalculadasResponse, 'http://tmsfrete.v2.targetmp.com.br', 'ConsultaTaxasCalculadasResponse');
  RemClassRegistry.RegisterXSClass(TrocaPlacaCompraValePedagioTAGRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'TrocaPlacaCompraValePedagioTAGRequest2', 'TrocaPlacaCompraValePedagioTAGRequest');
  RemClassRegistry.RegisterXSClass(TrocaPlacaCompraValePedagioTAGRequest, 'http://tmsfrete.v2.targetmp.com.br', 'TrocaPlacaCompraValePedagioTAGRequest');
  RemClassRegistry.RegisterXSClass(TrocaPlacaCompraValePedagioTAGResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'TrocaPlacaCompraValePedagioTAGResponse2', 'TrocaPlacaCompraValePedagioTAGResponse');
  RemClassRegistry.RegisterXSClass(TrocaPlacaCompraValePedagioTAGResponse, 'http://tmsfrete.v2.targetmp.com.br', 'TrocaPlacaCompraValePedagioTAGResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfConsultaTaxasCalculadasResponse), 'http://tmsfrete.v2.targetmp.com.br', 'ArrayOfConsultaTaxasCalculadasResponse');
  RemClassRegistry.RegisterXSClass(BuscaTransacoesFinanceirasResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'BuscaTransacoesFinanceirasResponse2', 'BuscaTransacoesFinanceirasResponse');
  RemClassRegistry.RegisterXSClass(BuscaTransacoesFinanceirasResponse, 'http://tmsfrete.v2.targetmp.com.br', 'BuscaTransacoesFinanceirasResponse');
  RemClassRegistry.RegisterXSClass(ConsultaTaxasCalculadasRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'ConsultaTaxasCalculadasRequest2', 'ConsultaTaxasCalculadasRequest');
  RemClassRegistry.RegisterXSClass(ConsultaTaxasCalculadasRequest, 'http://tmsfrete.v2.targetmp.com.br', 'ConsultaTaxasCalculadasRequest');
  RemClassRegistry.RegisterXSClass(ResultadoPaginadoConsultaTaxasCalculadasResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'ResultadoPaginadoConsultaTaxasCalculadasResponse2', 'ResultadoPaginadoConsultaTaxasCalculadasResponse');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ResultadoPaginadoConsultaTaxasCalculadasResponse2), 'Itens', '[ArrayItemName="ConsultaTaxasCalculadasResponse"]');
  RemClassRegistry.RegisterXSClass(ResultadoPaginadoConsultaTaxasCalculadasResponse, 'http://tmsfrete.v2.targetmp.com.br', 'ResultadoPaginadoConsultaTaxasCalculadasResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfConsultaRotaMapLinkPedagiosResponse), 'http://tmsfrete.v2.targetmp.com.br', 'ArrayOfConsultaRotaMapLinkPedagiosResponse');
  RemClassRegistry.RegisterXSClass(ConsultaRotaMapLinkPedagiosResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'ConsultaRotaMapLinkPedagiosResponse2', 'ConsultaRotaMapLinkPedagiosResponse');
  RemClassRegistry.RegisterXSClass(ConsultaRotaMapLinkPedagiosResponse, 'http://tmsfrete.v2.targetmp.com.br', 'ConsultaRotaMapLinkPedagiosResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfConsultaRotaMapLinkParadaResponse), 'http://tmsfrete.v2.targetmp.com.br', 'ArrayOfConsultaRotaMapLinkParadaResponse');
  RemClassRegistry.RegisterXSClass(ConsultaRotaMapLinkParadaResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'ConsultaRotaMapLinkParadaResponse2', 'ConsultaRotaMapLinkParadaResponse');
  RemClassRegistry.RegisterXSClass(ConsultaRotaMapLinkParadaResponse, 'http://tmsfrete.v2.targetmp.com.br', 'ConsultaRotaMapLinkParadaResponse');
  RemClassRegistry.RegisterXSClass(RotaDetalhadaParada2, 'http://tmsfrete.v2.targetmp.com.br', 'RotaDetalhadaParada2', 'RotaDetalhadaParada');
  RemClassRegistry.RegisterXSClass(RotaDetalhadaParada, 'http://tmsfrete.v2.targetmp.com.br', 'RotaDetalhadaParada');
  RemClassRegistry.RegisterXSClass(RotaDetalhadaInfoParada2, 'http://tmsfrete.v2.targetmp.com.br', 'RotaDetalhadaInfoParada2', 'RotaDetalhadaInfoParada');
  RemClassRegistry.RegisterXSClass(RotaDetalhadaInfoParada, 'http://tmsfrete.v2.targetmp.com.br', 'RotaDetalhadaInfoParada');
  RemClassRegistry.RegisterXSClass(RotaResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'RotaResponse2', 'RotaResponse');
  RemClassRegistry.RegisterXSClass(RotaResponse, 'http://tmsfrete.v2.targetmp.com.br', 'RotaResponse');
  RemClassRegistry.RegisterXSClass(ObtencaoCustoRotaRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'ObtencaoCustoRotaRequest2', 'ObtencaoCustoRotaRequest');
  RemClassRegistry.RegisterXSClass(ObtencaoCustoRotaRequest, 'http://tmsfrete.v2.targetmp.com.br', 'ObtencaoCustoRotaRequest');
  RemClassRegistry.RegisterXSClass(ObtencaoCustoRotaResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'ObtencaoCustoRotaResponse2', 'ObtencaoCustoRotaResponse');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ObtencaoCustoRotaResponse2), 'Paradas', '[ArrayItemName="ConsultaRotaMapLinkParadaResponse"]');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ObtencaoCustoRotaResponse2), 'Pedagios', '[ArrayItemName="ConsultaRotaMapLinkPedagiosResponse"]');
  RemClassRegistry.RegisterXSClass(ObtencaoCustoRotaResponse, 'http://tmsfrete.v2.targetmp.com.br', 'ObtencaoCustoRotaResponse');
  RemClassRegistry.RegisterXSClass(RoteiroRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'RoteiroRequest2', 'RoteiroRequest');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(RoteiroRequest2), 'CodigosIBGEMunicipioParadas', '[ArrayItemName="int"]');
  RemClassRegistry.RegisterXSClass(RoteiroRequest, 'http://tmsfrete.v2.targetmp.com.br', 'RoteiroRequest');
  RemClassRegistry.RegisterXSClass(EmissaoDocumentoRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'EmissaoDocumentoRequest2', 'EmissaoDocumentoRequest');
  RemClassRegistry.RegisterXSClass(EmissaoDocumentoRequest, 'http://tmsfrete.v2.targetmp.com.br', 'EmissaoDocumentoRequest');
  RemClassRegistry.RegisterXSClass(EmissaoDocumentoResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'EmissaoDocumentoResponse2', 'EmissaoDocumentoResponse');
  RemClassRegistry.RegisterXSClass(EmissaoDocumentoResponse, 'http://tmsfrete.v2.targetmp.com.br', 'EmissaoDocumentoResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfRoteiroResponse), 'http://tmsfrete.v2.targetmp.com.br', 'ArrayOfRoteiroResponse');
  RemClassRegistry.RegisterXSClass(RoteiroResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'RoteiroResponse2', 'RoteiroResponse');
  RemClassRegistry.RegisterXSClass(RoteiroResponse, 'http://tmsfrete.v2.targetmp.com.br', 'RoteiroResponse');
  RemClassRegistry.RegisterXSClass(BuscaRoteiroRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'BuscaRoteiroRequest2', 'BuscaRoteiroRequest');
  RemClassRegistry.RegisterXSClass(BuscaRoteiroRequest, 'http://tmsfrete.v2.targetmp.com.br', 'BuscaRoteiroRequest');
  RemClassRegistry.RegisterXSClass(ResultadoPaginadoRoteiroResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'ResultadoPaginadoRoteiroResponse2', 'ResultadoPaginadoRoteiroResponse');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ResultadoPaginadoRoteiroResponse2), 'Itens', '[ArrayItemName="RoteiroResponse"]');
  RemClassRegistry.RegisterXSClass(ResultadoPaginadoRoteiroResponse, 'http://tmsfrete.v2.targetmp.com.br', 'ResultadoPaginadoRoteiroResponse');
  RemClassRegistry.RegisterXSClass(CancelamentoSolicitacaoPagamentoAvulsoCartaoRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'CancelamentoSolicitacaoPagamentoAvulsoCartaoRequest2', 'CancelamentoSolicitacaoPagamentoAvulsoCartaoRequest');
  RemClassRegistry.RegisterXSClass(CancelamentoSolicitacaoPagamentoAvulsoCartaoRequest, 'http://tmsfrete.v2.targetmp.com.br', 'CancelamentoSolicitacaoPagamentoAvulsoCartaoRequest');
  RemClassRegistry.RegisterXSClass(CancelamentoSolicitacaoPagamentoAvulsoCartaoResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'CancelamentoSolicitacaoPagamentoAvulsoCartaoResponse2', 'CancelamentoSolicitacaoPagamentoAvulsoCartaoResponse');
  RemClassRegistry.RegisterXSClass(CancelamentoSolicitacaoPagamentoAvulsoCartaoResponse, 'http://tmsfrete.v2.targetmp.com.br', 'CancelamentoSolicitacaoPagamentoAvulsoCartaoResponse');
  RemClassRegistry.RegisterXSClass(PagamentoCombustivelAvulsoCartaoManualmenteRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'PagamentoCombustivelAvulsoCartaoManualmenteRequest2', 'PagamentoCombustivelAvulsoCartaoManualmenteRequest');
  RemClassRegistry.RegisterXSClass(PagamentoCombustivelAvulsoCartaoManualmenteRequest, 'http://tmsfrete.v2.targetmp.com.br', 'PagamentoCombustivelAvulsoCartaoManualmenteRequest');
  RemClassRegistry.RegisterXSClass(PagamentoAvulsoCartaoManualmenteResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'PagamentoAvulsoCartaoManualmenteResponse2', 'PagamentoAvulsoCartaoManualmenteResponse');
  RemClassRegistry.RegisterXSClass(PagamentoAvulsoCartaoManualmenteResponse, 'http://tmsfrete.v2.targetmp.com.br', 'PagamentoAvulsoCartaoManualmenteResponse');
  RemClassRegistry.RegisterXSClass(CalculoValoresPisCofinsRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'CalculoValoresPisCofinsRequest2', 'CalculoValoresPisCofinsRequest');
  RemClassRegistry.RegisterXSClass(CalculoValoresPisCofinsRequest, 'http://tmsfrete.v2.targetmp.com.br', 'CalculoValoresPisCofinsRequest');
  RemClassRegistry.RegisterXSClass(CalculoValoresPisCofinsResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'CalculoValoresPisCofinsResponse2', 'CalculoValoresPisCofinsResponse');
  RemClassRegistry.RegisterXSClass(CalculoValoresPisCofinsResponse, 'http://tmsfrete.v2.targetmp.com.br', 'CalculoValoresPisCofinsResponse');
  RemClassRegistry.RegisterXSClass(PagamentoAvulsoCartaoManualmenteRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'PagamentoAvulsoCartaoManualmenteRequest2', 'PagamentoAvulsoCartaoManualmenteRequest');
  RemClassRegistry.RegisterXSClass(PagamentoAvulsoCartaoManualmenteRequest, 'http://tmsfrete.v2.targetmp.com.br', 'PagamentoAvulsoCartaoManualmenteRequest');
  RemClassRegistry.RegisterXSClass(PagamentoCombustivelAvulsoCartaoManualmenteResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'PagamentoCombustivelAvulsoCartaoManualmenteResponse2', 'PagamentoCombustivelAvulsoCartaoManualmenteResponse');
  RemClassRegistry.RegisterXSClass(PagamentoCombustivelAvulsoCartaoManualmenteResponse, 'http://tmsfrete.v2.targetmp.com.br', 'PagamentoCombustivelAvulsoCartaoManualmenteResponse');
  RemClassRegistry.RegisterXSClass(TerminalCarregamentoResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'TerminalCarregamentoResponse2', 'TerminalCarregamentoResponse');
  RemClassRegistry.RegisterXSClass(TerminalCarregamentoResponse, 'http://tmsfrete.v2.targetmp.com.br', 'TerminalCarregamentoResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfRotaDetalhadaParada), 'http://tmsfrete.v2.targetmp.com.br', 'ArrayOfRotaDetalhadaParada');
  RemClassRegistry.RegisterXSClass(RotaDetalhadaRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'RotaDetalhadaRequest2', 'RotaDetalhadaRequest');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(RotaDetalhadaRequest2), 'Paradas', '[ArrayItemName="RotaDetalhadaParada"]');
end;

procedure RegisterTypeProc3;
begin
  RemClassRegistry.RegisterXSClass(RotaDetalhadaRequest, 'http://tmsfrete.v2.targetmp.com.br', 'RotaDetalhadaRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfTerminalCarregamentoResponse), 'http://tmsfrete.v2.targetmp.com.br', 'ArrayOfTerminalCarregamentoResponse');
  RemClassRegistry.RegisterXSClass(CancelamentoSolicitacaoPagamentoCombustivelAvulsoCartaoRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'CancelamentoSolicitacaoPagamentoCombustivelAvulsoCartaoRequest2', 'CancelamentoSolicitacaoPagamentoCombustivelAvulsoCartaoRequest');
  RemClassRegistry.RegisterXSClass(CancelamentoSolicitacaoPagamentoCombustivelAvulsoCartaoRequest, 'http://tmsfrete.v2.targetmp.com.br', 'CancelamentoSolicitacaoPagamentoCombustivelAvulsoCartaoRequest');
  RemClassRegistry.RegisterXSClass(CancelamentoSolicitacaoPagamentoCombustivelAvulsoCartaoResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'CancelamentoSolicitacaoPagamentoCombustivelAvulsoCartaoResponse2', 'CancelamentoSolicitacaoPagamentoCombustivelAvulsoCartaoResponse');
  RemClassRegistry.RegisterXSClass(CancelamentoSolicitacaoPagamentoCombustivelAvulsoCartaoResponse, 'http://tmsfrete.v2.targetmp.com.br', 'CancelamentoSolicitacaoPagamentoCombustivelAvulsoCartaoResponse');
  RemClassRegistry.RegisterXSClass(BuscaTerminaisCarregamentoAutorizadosResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'BuscaTerminaisCarregamentoAutorizadosResponse2', 'BuscaTerminaisCarregamentoAutorizadosResponse');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(BuscaTerminaisCarregamentoAutorizadosResponse2), 'TerminaisCarregamento', '[ArrayItemName="TerminalCarregamentoResponse"]');
  RemClassRegistry.RegisterXSClass(BuscaTerminaisCarregamentoAutorizadosResponse, 'http://tmsfrete.v2.targetmp.com.br', 'BuscaTerminaisCarregamentoAutorizadosResponse');
  RemClassRegistry.RegisterXSClass(CadastroRoteiroCustomizadoResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'CadastroRoteiroCustomizadoResponse2', 'CadastroRoteiroCustomizadoResponse');
  RemClassRegistry.RegisterXSClass(CadastroRoteiroCustomizadoResponse, 'http://tmsfrete.v2.targetmp.com.br', 'CadastroRoteiroCustomizadoResponse');
  RemClassRegistry.RegisterXSClass(ConsultaSituacaoEmpresaTransportadorAnttRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'ConsultaSituacaoEmpresaTransportadorAnttRequest2', 'ConsultaSituacaoEmpresaTransportadorAnttRequest');
  RemClassRegistry.RegisterXSClass(ConsultaSituacaoEmpresaTransportadorAnttRequest, 'http://tmsfrete.v2.targetmp.com.br', 'ConsultaSituacaoEmpresaTransportadorAnttRequest');
  RemClassRegistry.RegisterXSClass(CadastroRoteiroCustomizadoRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'CadastroRoteiroCustomizadoRequest2', 'CadastroRoteiroCustomizadoRequest');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CadastroRoteiroCustomizadoRequest2), 'IdsPracas', '[ArrayItemName="int"]');
  RemClassRegistry.RegisterXSClass(CadastroRoteiroCustomizadoRequest, 'http://tmsfrete.v2.targetmp.com.br', 'CadastroRoteiroCustomizadoRequest');
  RemClassRegistry.RegisterXSClass(ConsultaSituacaoTransportadorAnttRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'ConsultaSituacaoTransportadorAnttRequest2', 'ConsultaSituacaoTransportadorAnttRequest');
  RemClassRegistry.RegisterXSClass(ConsultaSituacaoTransportadorAnttRequest, 'http://tmsfrete.v2.targetmp.com.br', 'ConsultaSituacaoTransportadorAnttRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(TipoTransportador), 'http://schemas.datacontract.org/2004/07/TARGET.VectioFrete.InterfaceTMS.Data', 'TipoTransportador');
  RemClassRegistry.RegisterXSClass(ConsultaSituacaoTransportadorAnttResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'ConsultaSituacaoTransportadorAnttResponse2', 'ConsultaSituacaoTransportadorAnttResponse');
  RemClassRegistry.RegisterXSClass(ConsultaSituacaoTransportadorAnttResponse, 'http://tmsfrete.v2.targetmp.com.br', 'ConsultaSituacaoTransportadorAnttResponse');
  RemClassRegistry.RegisterXSClass(ConsultaSituacaoEmpresaTransportadorAnttResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'ConsultaSituacaoEmpresaTransportadorAnttResponse2', 'ConsultaSituacaoEmpresaTransportadorAnttResponse');
  RemClassRegistry.RegisterXSClass(ConsultaSituacaoEmpresaTransportadorAnttResponse, 'http://tmsfrete.v2.targetmp.com.br', 'ConsultaSituacaoEmpresaTransportadorAnttResponse');
  RemClassRegistry.RegisterXSClass(CadastroAtualizacaoDadosItemReguaImpostoRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'CadastroAtualizacaoDadosItemReguaImpostoRequest2', 'CadastroAtualizacaoDadosItemReguaImpostoRequest');
  RemClassRegistry.RegisterXSClass(CadastroAtualizacaoDadosItemReguaImpostoRequest, 'http://tmsfrete.v2.targetmp.com.br', 'CadastroAtualizacaoDadosItemReguaImpostoRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ArrayOfBuscaItemReguaImpostoResponse), 'http://tmsfrete.v2.targetmp.com.br', 'ArrayOfBuscaItemReguaImpostoResponse');
  RemClassRegistry.RegisterXSClass(ResultadoPaginadoBuscaItemReguaImpostoResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'ResultadoPaginadoBuscaItemReguaImpostoResponse2', 'ResultadoPaginadoBuscaItemReguaImpostoResponse');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ResultadoPaginadoBuscaItemReguaImpostoResponse2), 'Itens', '[ArrayItemName="BuscaItemReguaImpostoResponse"]');
  RemClassRegistry.RegisterXSClass(ResultadoPaginadoBuscaItemReguaImpostoResponse, 'http://tmsfrete.v2.targetmp.com.br', 'ResultadoPaginadoBuscaItemReguaImpostoResponse');
  RemClassRegistry.RegisterXSClass(BuscaItemReguaImpostoResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'BuscaItemReguaImpostoResponse2', 'BuscaItemReguaImpostoResponse');
  RemClassRegistry.RegisterXSClass(BuscaItemReguaImpostoResponse, 'http://tmsfrete.v2.targetmp.com.br', 'BuscaItemReguaImpostoResponse');
  RemClassRegistry.RegisterXSClass(BuscaItemReguaImpostoRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'BuscaItemReguaImpostoRequest2', 'BuscaItemReguaImpostoRequest');
  RemClassRegistry.RegisterXSClass(BuscaItemReguaImpostoRequest, 'http://tmsfrete.v2.targetmp.com.br', 'BuscaItemReguaImpostoRequest');
  RemClassRegistry.RegisterXSClass(CadastroAtualizacaoDadosItemReguaImpostoResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'CadastroAtualizacaoDadosItemReguaImpostoResponse2', 'CadastroAtualizacaoDadosItemReguaImpostoResponse');
  RemClassRegistry.RegisterXSClass(CadastroAtualizacaoDadosItemReguaImpostoResponse, 'http://tmsfrete.v2.targetmp.com.br', 'CadastroAtualizacaoDadosItemReguaImpostoResponse');
  RemClassRegistry.RegisterXSClass(CalculoImpostosFreteRequest2, 'http://tmsfrete.v2.targetmp.com.br', 'CalculoImpostosFreteRequest2', 'CalculoImpostosFreteRequest');
  RemClassRegistry.RegisterXSClass(CalculoImpostosFreteRequest, 'http://tmsfrete.v2.targetmp.com.br', 'CalculoImpostosFreteRequest');
  RemClassRegistry.RegisterXSClass(CalculoImpostosFreteResponse2, 'http://tmsfrete.v2.targetmp.com.br', 'CalculoImpostosFreteResponse2', 'CalculoImpostosFreteResponse');
  RemClassRegistry.RegisterXSClass(CalculoImpostosFreteResponse, 'http://tmsfrete.v2.targetmp.com.br', 'CalculoImpostosFreteResponse');
end;

procedure RegisterTypeProc4;
begin
end;

initialization
  { FreteTMSService }
  InvRegistry.RegisterInterface(TypeInfo(FreteTMSService), 'http://tmsfrete.v2.targetmp.com.br', 'utf-8');
  InvRegistry.RegisterDefaultSOAPAction(TypeInfo(FreteTMSService), 'http://tmsfrete.v2.targetmp.com.br/FreteTMSService/%operationName%');
  InvRegistry.RegisterInvokeOptions(TypeInfo(FreteTMSService), ioDocument);
  { FreteTMSService.ObterInformacaoServico }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSService), 'ObterInformacaoServico', '',
                                 '[ReturnName="ObterInformacaoServicoResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'ObterInformacaoServico', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'ObterInformacaoServico', 'ObterInformacaoServicoResult', '',
                                '', IS_NLBL);
  { FreteTMSService.GerarTokenParaAcesso }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSService), 'GerarTokenParaAcesso', '',
                                 '[ReturnName="GerarTokenParaAcessoResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'GerarTokenParaAcesso', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'GerarTokenParaAcesso', 'GerarTokenParaAcessoResult', '',
                                '', IS_NLBL);
  { FreteTMSService.CadastrarAtualizarParticipante }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSService), 'CadastrarAtualizarParticipante', '',
                                 '[ReturnName="CadastrarAtualizarParticipanteResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'CadastrarAtualizarParticipante', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'CadastrarAtualizarParticipante', 'participante', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'CadastrarAtualizarParticipante', 'CadastrarAtualizarParticipanteResult', '',
                                '', IS_NLBL);
  { FreteTMSService.BuscarParticipante }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSService), 'BuscarParticipante', '',
                                 '[ReturnName="BuscarParticipanteResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'BuscarParticipante', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'BuscarParticipante', 'buscaParticipante', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'BuscarParticipante', 'BuscarParticipanteResult', '',
                                '', IS_NLBL);
  { FreteTMSService.CadastrarAtualizarCentroDeCusto }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSService), 'CadastrarAtualizarCentroDeCusto', '',
                                 '[ReturnName="CadastrarAtualizarCentroDeCustoResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'CadastrarAtualizarCentroDeCusto', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'CadastrarAtualizarCentroDeCusto', 'centro', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'CadastrarAtualizarCentroDeCusto', 'CadastrarAtualizarCentroDeCustoResult', '',
                                '', IS_NLBL);
  { FreteTMSService.BuscarCentroDeCusto }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSService), 'BuscarCentroDeCusto', '',
                                 '[ReturnName="BuscarCentroDeCustoResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'BuscarCentroDeCusto', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'BuscarCentroDeCusto', 'buscaCentro', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'BuscarCentroDeCusto', 'BuscarCentroDeCustoResult', '',
                                '', IS_NLBL);
  { FreteTMSService.CadastrarAtualizarMotorista }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSService), 'CadastrarAtualizarMotorista', '',
                                 '[ReturnName="CadastrarAtualizarMotoristaResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'CadastrarAtualizarMotorista', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'CadastrarAtualizarMotorista', 'motorista', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'CadastrarAtualizarMotorista', 'CadastrarAtualizarMotoristaResult', '',
                                '', IS_NLBL);
  { FreteTMSService.BuscarMotorista }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSService), 'BuscarMotorista', '',
                                 '[ReturnName="BuscarMotoristaResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'BuscarMotorista', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'BuscarMotorista', 'buscaMotorista', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'BuscarMotorista', 'BuscarMotoristaResult', '',
                                '', IS_NLBL);
  { FreteTMSService.CadastrarAtualizarTransportador }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSService), 'CadastrarAtualizarTransportador', '',
                                 '[ReturnName="CadastrarAtualizarTransportadorResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'CadastrarAtualizarTransportador', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'CadastrarAtualizarTransportador', 'transportador', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'CadastrarAtualizarTransportador', 'CadastrarAtualizarTransportadorResult', '',
                                '', IS_NLBL);
  { FreteTMSService.BuscarTransportador }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSService), 'BuscarTransportador', '',
                                 '[ReturnName="BuscarTransportadorResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'BuscarTransportador', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'BuscarTransportador', 'buscaTransportador', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'BuscarTransportador', 'BuscarTransportadorResult', '',
                                '', IS_NLBL);
  { FreteTMSService.RealizarPagamentoAvulsoCartao }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSService), 'RealizarPagamentoAvulsoCartao', '',
                                 '[ReturnName="RealizarPagamentoAvulsoCartaoResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'RealizarPagamentoAvulsoCartao', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'RealizarPagamentoAvulsoCartao', 'pagamentoAvulso', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'RealizarPagamentoAvulsoCartao', 'RealizarPagamentoAvulsoCartaoResult', '',
                                '', IS_NLBL);
  { FreteTMSService.BuscarPagamentoAvulsoCartao }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSService), 'BuscarPagamentoAvulsoCartao', '',
                                 '[ReturnName="BuscarPagamentoAvulsoCartaoResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'BuscarPagamentoAvulsoCartao', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'BuscarPagamentoAvulsoCartao', 'buscaPagamentoAvulso', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'BuscarPagamentoAvulsoCartao', 'BuscarPagamentoAvulsoCartaoResult', '',
                                '', IS_NLBL);
  { FreteTMSService.RealizarPagamentoCombustivelAvulsoCartao }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSService), 'RealizarPagamentoCombustivelAvulsoCartao', '',
                                 '[ReturnName="RealizarPagamentoCombustivelAvulsoCartaoResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'RealizarPagamentoCombustivelAvulsoCartao', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'RealizarPagamentoCombustivelAvulsoCartao', 'combustivelAvulso', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'RealizarPagamentoCombustivelAvulsoCartao', 'RealizarPagamentoCombustivelAvulsoCartaoResult', '',
                                '', IS_NLBL);
  { FreteTMSService.BuscarCombustivelAvulsoCartao }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSService), 'BuscarCombustivelAvulsoCartao', '',
                                 '[ReturnName="BuscarCombustivelAvulsoCartaoResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'BuscarCombustivelAvulsoCartao', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'BuscarCombustivelAvulsoCartao', 'buscaCombustivelAvulso', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'BuscarCombustivelAvulsoCartao', 'BuscarCombustivelAvulsoCartaoResult', '',
                                '', IS_NLBL);
  { FreteTMSService.BuscarCompraValePedagio }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSService), 'BuscarCompraValePedagio', '',
                                 '[ReturnName="BuscarCompraValePedagioResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'BuscarCompraValePedagio', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'BuscarCompraValePedagio', 'buscaCompraValePedagio', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'BuscarCompraValePedagio', 'BuscarCompraValePedagioResult', '',
                                '', IS_NLBL);
  { FreteTMSService.CadastrarAtualizarOperacaoTransporte }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSService), 'CadastrarAtualizarOperacaoTransporte', '',
                                 '[ReturnName="CadastrarAtualizarOperacaoTransporteResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'CadastrarAtualizarOperacaoTransporte', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'CadastrarAtualizarOperacaoTransporte', 'operacao', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'CadastrarAtualizarOperacaoTransporte', 'CadastrarAtualizarOperacaoTransporteResult', '',
                                '', IS_NLBL);
  { FreteTMSService.BuscarOperacaoTransporte }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSService), 'BuscarOperacaoTransporte', '',
                                 '[ReturnName="BuscarOperacaoTransporteResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'BuscarOperacaoTransporte', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'BuscarOperacaoTransporte', 'buscaOperacao', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'BuscarOperacaoTransporte', 'BuscarOperacaoTransporteResult', '',
                                '', IS_NLBL);
  { FreteTMSService.RetificarOperacaoTransporte }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSService), 'RetificarOperacaoTransporte', '',
                                 '[ReturnName="RetificarOperacaoTransporteResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'RetificarOperacaoTransporte', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'RetificarOperacaoTransporte', 'retificacao', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'RetificarOperacaoTransporte', 'RetificarOperacaoTransporteResult', '',
                                '', IS_NLBL);
  { FreteTMSService.FinalizarOperacaoTransporte }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSService), 'FinalizarOperacaoTransporte', '',
                                 '[ReturnName="FinalizarOperacaoTransporteResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'FinalizarOperacaoTransporte', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'FinalizarOperacaoTransporte', 'finalizacaoOperacaoRequest', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'FinalizarOperacaoTransporte', 'FinalizarOperacaoTransporteResult', '',
                                '', IS_NLBL);
  { FreteTMSService.CadastrarAtualizarDadosQuitacaoOperacaoTransporte }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSService), 'CadastrarAtualizarDadosQuitacaoOperacaoTransporte', '',
                                 '[ReturnName="CadastrarAtualizarDadosQuitacaoOperacaoTransporteResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'CadastrarAtualizarDadosQuitacaoOperacaoTransporte', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'CadastrarAtualizarDadosQuitacaoOperacaoTransporte', 'dadosQuitacaoRequest', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'CadastrarAtualizarDadosQuitacaoOperacaoTransporte', 'CadastrarAtualizarDadosQuitacaoOperacaoTransporteResult', '',
                                '', IS_NLBL);
  { FreteTMSService.ObterDetalhesQuitacao }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSService), 'ObterDetalhesQuitacao', '',
                                 '[ReturnName="ObterDetalhesQuitacaoResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'ObterDetalhesQuitacao', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'ObterDetalhesQuitacao', 'detalhesQuitacao', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'ObterDetalhesQuitacao', 'ObterDetalhesQuitacaoResult', '',
                                '', IS_NLBL);
  { FreteTMSService.DeclararOperacaoTransporte }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSService), 'DeclararOperacaoTransporte', '',
                                 '[ReturnName="DeclararOperacaoTransporteResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'DeclararOperacaoTransporte', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'DeclararOperacaoTransporte', 'declaracao', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'DeclararOperacaoTransporte', 'DeclararOperacaoTransporteResult', '',
                                '', IS_NLBL);
  { FreteTMSService.PagarParcelaIndividual }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSService), 'PagarParcelaIndividual', '',
                                 '[ReturnName="PagarParcelaIndividualResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'PagarParcelaIndividual', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'PagarParcelaIndividual', 'parcelaIndividual', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'PagarParcelaIndividual', 'PagarParcelaIndividualResult', '',
                                '', IS_NLBL);
  { FreteTMSService.RegistrarParcelaAdicional }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSService), 'RegistrarParcelaAdicional', '',
                                 '[ReturnName="RegistrarParcelaAdicionalResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'RegistrarParcelaAdicional', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'RegistrarParcelaAdicional', 'parcelaAdicionalRequest', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'RegistrarParcelaAdicional', 'RegistrarParcelaAdicionalResult', '',
                                '', IS_NLBL);
  { FreteTMSService.ObterInformacaoCartao }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSService), 'ObterInformacaoCartao', '',
                                 '[ReturnName="ObterInformacaoCartaoResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'ObterInformacaoCartao', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'ObterInformacaoCartao', 'info', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'ObterInformacaoCartao', 'ObterInformacaoCartaoResult', '',
                                '', IS_NLBL);
  { FreteTMSService.AssociarSubstituirCartao }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSService), 'AssociarSubstituirCartao', '',
                                 '[ReturnName="AssociarSubstituirCartaoResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'AssociarSubstituirCartao', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'AssociarSubstituirCartao', 'associar', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'AssociarSubstituirCartao', 'AssociarSubstituirCartaoResult', '',
                                '', IS_NLBL);
  { FreteTMSService.CancelarOperacaoTransporte }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSService), 'CancelarOperacaoTransporte', '',
                                 '[ReturnName="CancelarOperacaoTransporteResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'CancelarOperacaoTransporte', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'CancelarOperacaoTransporte', 'cancelamentoOperacaoRequest', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'CancelarOperacaoTransporte', 'CancelarOperacaoTransporteResult', '',
                                '', IS_NLBL);
  { FreteTMSService.EncerrarOperacaoTransporte }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSService), 'EncerrarOperacaoTransporte', '',
                                 '[ReturnName="EncerrarOperacaoTransporteResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'EncerrarOperacaoTransporte', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'EncerrarOperacaoTransporte', 'encerramentoRequest', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'EncerrarOperacaoTransporte', 'EncerrarOperacaoTransporteResult', '',
                                '', IS_NLBL);
  { FreteTMSService.BuscarCartoesPortador }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSService), 'BuscarCartoesPortador', '',
                                 '[ReturnName="BuscarCartoesPortadorResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'BuscarCartoesPortador', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'BuscarCartoesPortador', 'buscaRequest', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'BuscarCartoesPortador', 'BuscarCartoesPortadorResult', '',
                                '', IS_NLBL);
  { FreteTMSService.ComprarPedagioAvulso }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSService), 'ComprarPedagioAvulso', '',
                                 '[ReturnName="ComprarPedagioAvulsoResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'ComprarPedagioAvulso', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'ComprarPedagioAvulso', 'compraRequest', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'ComprarPedagioAvulso', 'ComprarPedagioAvulsoResult', '',
                                '', IS_NLBL);
  { FreteTMSService.AtualizarPedagioAvulso }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSService), 'AtualizarPedagioAvulso', '',
                                 '[ReturnName="AtualizarPedagioAvulsoResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'AtualizarPedagioAvulso', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'AtualizarPedagioAvulso', 'compraRequest', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'AtualizarPedagioAvulso', 'AtualizarPedagioAvulsoResult', '',
                                '', IS_NLBL);
  { FreteTMSService.ConfirmarPedagioTAG }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSService), 'ConfirmarPedagioTAG', '',
                                 '[ReturnName="ConfirmarPedagioTAGResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'ConfirmarPedagioTAG', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'ConfirmarPedagioTAG', 'confirmacaoRequest', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'ConfirmarPedagioTAG', 'ConfirmarPedagioTAGResult', '',
                                '', IS_NLBL);
  { FreteTMSService.CancelarCompraValePedagio }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSService), 'CancelarCompraValePedagio', '',
                                 '[ReturnName="CancelarCompraValePedagioResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'CancelarCompraValePedagio', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'CancelarCompraValePedagio', 'cancelaVPRequest', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'CancelarCompraValePedagio', 'CancelarCompraValePedagioResult', '',
                                '', IS_NLBL);
  { FreteTMSService.ListarRotas }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSService), 'ListarRotas', '',
                                 '[ReturnName="ListarRotasResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'ListarRotas', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'ListarRotas', 'listarRotasRequest', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'ListarRotas', 'ListarRotasResult', '',
                                '', IS_NLBL);
  { FreteTMSService.ObterCustoRota }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSService), 'ObterCustoRota', '',
                                 '[ReturnName="ObterCustoRotaResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'ObterCustoRota', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'ObterCustoRota', 'custoRotaRequest', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'ObterCustoRota', 'ObterCustoRotaResult', '',
                                '', IS_NLBL);
  { FreteTMSService.CadastrarRoteiro }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSService), 'CadastrarRoteiro', '',
                                 '[ReturnName="CadastrarRoteiroResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'CadastrarRoteiro', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'CadastrarRoteiro', 'roteiroRequest', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'CadastrarRoteiro', 'CadastrarRoteiroResult', '',
                                '', IS_NLBL);
  { FreteTMSService.BuscarRoteiro }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSService), 'BuscarRoteiro', '',
                                 '[ReturnName="BuscarRoteiroResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'BuscarRoteiro', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'BuscarRoteiro', 'buscaRoteiro', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'BuscarRoteiro', 'BuscarRoteiroResult', '',
                                '', IS_NLBL);
  { FreteTMSService.EmitirDocumento }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSService), 'EmitirDocumento', '',
                                 '[ReturnName="EmitirDocumentoResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'EmitirDocumento', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'EmitirDocumento', 'emissaoDocumento', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'EmitirDocumento', 'EmitirDocumentoResult', '',
                                '', IS_NLBL);
  { FreteTMSService.BuscarInformacoesContratacao }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSService), 'BuscarInformacoesContratacao', '',
                                 '[ReturnName="BuscarInformacoesContratacaoResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'BuscarInformacoesContratacao', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'BuscarInformacoesContratacao', 'informacoesRequest', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'BuscarInformacoesContratacao', 'BuscarInformacoesContratacaoResult', '',
                                '', IS_NLBL);
  { FreteTMSService.BuscarTransacoesFinanceiras }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSService), 'BuscarTransacoesFinanceiras', '',
                                 '[ReturnName="BuscarTransacoesFinanceirasResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'BuscarTransacoesFinanceiras', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'BuscarTransacoesFinanceiras', 'buscaTransacoes', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'BuscarTransacoesFinanceiras', 'BuscarTransacoesFinanceirasResult', '',
                                '', IS_NLBL);
  { FreteTMSService.ConsultarTaxasCalculadas }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSService), 'ConsultarTaxasCalculadas', '',
                                 '[ReturnName="ConsultarTaxasCalculadasResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'ConsultarTaxasCalculadas', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'ConsultarTaxasCalculadas', 'consultaTaxasCalculadas', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'ConsultarTaxasCalculadas', 'ConsultarTaxasCalculadasResult', '',
                                '', IS_NLBL);
  { FreteTMSService.TrocarPlacaCompraValePedagioTAG }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSService), 'TrocarPlacaCompraValePedagioTAG', '',
                                 '[ReturnName="TrocarPlacaCompraValePedagioTAGResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'TrocarPlacaCompraValePedagioTAG', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'TrocarPlacaCompraValePedagioTAG', 'trocaPlacaCompraValePedagioTAGRequest', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'TrocarPlacaCompraValePedagioTAG', 'TrocarPlacaCompraValePedagioTAGResult', '',
                                '', IS_NLBL);
  { FreteTMSService.ConsultarSituacaoTransportadorAntt }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSService), 'ConsultarSituacaoTransportadorAntt', '',
                                 '[ReturnName="ConsultarSituacaoTransportadorAnttResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'ConsultarSituacaoTransportadorAntt', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'ConsultarSituacaoTransportadorAntt', 'dadosConsulta', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'ConsultarSituacaoTransportadorAntt', 'ConsultarSituacaoTransportadorAnttResult', '',
                                '', IS_NLBL);
  { FreteTMSService.CadastrarRoteiroCustomizado }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSService), 'CadastrarRoteiroCustomizado', '',
                                 '[ReturnName="CadastrarRoteiroCustomizadoResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'CadastrarRoteiroCustomizado', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'CadastrarRoteiroCustomizado', 'roteiroCustomizadoRequest', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'CadastrarRoteiroCustomizado', 'CadastrarRoteiroCustomizadoResult', '',
                                '', IS_NLBL);
  { FreteTMSService.ConsultarSituacaoEmpresaTransportadorAntt }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSService), 'ConsultarSituacaoEmpresaTransportadorAntt', '',
                                 '[ReturnName="ConsultarSituacaoEmpresaTransportadorAnttResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'ConsultarSituacaoEmpresaTransportadorAntt', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'ConsultarSituacaoEmpresaTransportadorAntt', 'dadosConsulta', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'ConsultarSituacaoEmpresaTransportadorAntt', 'ConsultarSituacaoEmpresaTransportadorAnttResult', '',
                                '', IS_NLBL);
  { FreteTMSService.CadastrarAtualizarItemReguaImposto }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSService), 'CadastrarAtualizarItemReguaImposto', '',
                                 '[ReturnName="CadastrarAtualizarItemReguaImpostoResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'CadastrarAtualizarItemReguaImposto', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'CadastrarAtualizarItemReguaImposto', 'itemRegua', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'CadastrarAtualizarItemReguaImposto', 'CadastrarAtualizarItemReguaImpostoResult', '',
                                '', IS_NLBL);
  { FreteTMSService.CalcularImpostosFrete }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSService), 'CalcularImpostosFrete', '',
                                 '[ReturnName="CalcularImpostosFreteResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'CalcularImpostosFrete', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'CalcularImpostosFrete', 'calcularImpostosFreteRequest', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'CalcularImpostosFrete', 'CalcularImpostosFreteResult', '',
                                '', IS_NLBL);
  { FreteTMSService.BuscarItemReguaImposto }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSService), 'BuscarItemReguaImposto', '',
                                 '[ReturnName="BuscarItemReguaImpostoResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'BuscarItemReguaImposto', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'BuscarItemReguaImposto', 'buscaItemReguaImposto', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'BuscarItemReguaImposto', 'BuscarItemReguaImpostoResult', '',
                                '', IS_NLBL);
  { FreteTMSService.CalcularValoresPisCofins }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSService), 'CalcularValoresPisCofins', '',
                                 '[ReturnName="CalcularValoresPisCofinsResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'CalcularValoresPisCofins', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'CalcularValoresPisCofins', 'calcularValoresPisCofinsRequest', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'CalcularValoresPisCofins', 'CalcularValoresPisCofinsResult', '',
                                '', IS_NLBL);
  { FreteTMSService.RealizarPagamentoAvulsoCartaoManualmente }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSService), 'RealizarPagamentoAvulsoCartaoManualmente', '',
                                 '[ReturnName="RealizarPagamentoAvulsoCartaoManualmenteResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'RealizarPagamentoAvulsoCartaoManualmente', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'RealizarPagamentoAvulsoCartaoManualmente', 'pagamentoAvulsoRequest', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'RealizarPagamentoAvulsoCartaoManualmente', 'RealizarPagamentoAvulsoCartaoManualmenteResult', '',
                                '', IS_NLBL);
  { FreteTMSService.CancelarSolicitacaoPagamentoAvulsoCartao }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSService), 'CancelarSolicitacaoPagamentoAvulsoCartao', '',
                                 '[ReturnName="CancelarSolicitacaoPagamentoAvulsoCartaoResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'CancelarSolicitacaoPagamentoAvulsoCartao', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'CancelarSolicitacaoPagamentoAvulsoCartao', 'cancelamentoRequest', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'CancelarSolicitacaoPagamentoAvulsoCartao', 'CancelarSolicitacaoPagamentoAvulsoCartaoResult', '',
                                '', IS_NLBL);
  { FreteTMSService.RealizarPagamentoCombustivelAvulsoCartaoManualmente }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSService), 'RealizarPagamentoCombustivelAvulsoCartaoManualmente', '',
                                 '[ReturnName="RealizarPagamentoCombustivelAvulsoCartaoManualmenteResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'RealizarPagamentoCombustivelAvulsoCartaoManualmente', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'RealizarPagamentoCombustivelAvulsoCartaoManualmente', 'combustivelAvulsoRequest', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'RealizarPagamentoCombustivelAvulsoCartaoManualmente', 'RealizarPagamentoCombustivelAvulsoCartaoManualmenteResult', '',
                                '', IS_NLBL);
  { FreteTMSService.CancelarSolicitacaoPagamentoCombustivelAvulsoCartao }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSService), 'CancelarSolicitacaoPagamentoCombustivelAvulsoCartao', '',
                                 '[ReturnName="CancelarSolicitacaoPagamentoCombustivelAvulsoCartaoResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'CancelarSolicitacaoPagamentoCombustivelAvulsoCartao', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'CancelarSolicitacaoPagamentoCombustivelAvulsoCartao', 'cancelamentoRequest', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'CancelarSolicitacaoPagamentoCombustivelAvulsoCartao', 'CancelarSolicitacaoPagamentoCombustivelAvulsoCartaoResult', '',
                                '', IS_NLBL);
  { FreteTMSService.BuscarTerminaisCarregamentoAutorizados }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSService), 'BuscarTerminaisCarregamentoAutorizados', '',
                                 '[ReturnName="BuscarTerminaisCarregamentoAutorizadosResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'BuscarTerminaisCarregamentoAutorizados', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSService), 'BuscarTerminaisCarregamentoAutorizados', 'BuscarTerminaisCarregamentoAutorizadosResult', '',
                                '', IS_NLBL);
  { FreteTMSServiceExtended }
  InvRegistry.RegisterInterface(TypeInfo(FreteTMSServiceExtended), 'http://tmsfrete.v2.targetmp.com.br', 'utf-8');
  InvRegistry.RegisterAllSOAPActions(TypeInfo(FreteTMSServiceExtended), '|http://tmsfrete.v2.targetmp.com.br/FreteTMSService/ObterInformacaoServico'
                                                                       +'|http://tmsfrete.v2.targetmp.com.br/FreteTMSService/GerarTokenParaAcesso'
                                                                       +'|http://tmsfrete.v2.targetmp.com.br/FreteTMSService/CadastrarAtualizarParticipante'
                                                                       +'|http://tmsfrete.v2.targetmp.com.br/FreteTMSService/BuscarParticipante'
                                                                       +'|http://tmsfrete.v2.targetmp.com.br/FreteTMSService/CadastrarAtualizarCentroDeCusto'
                                                                       +'|http://tmsfrete.v2.targetmp.com.br/FreteTMSService/BuscarCentroDeCusto'
                                                                       +'|http://tmsfrete.v2.targetmp.com.br/FreteTMSService/CadastrarAtualizarMotorista'
                                                                       +'|http://tmsfrete.v2.targetmp.com.br/FreteTMSService/BuscarMotorista'
                                                                       +'|http://tmsfrete.v2.targetmp.com.br/FreteTMSService/CadastrarAtualizarTransportador'
                                                                       +'|http://tmsfrete.v2.targetmp.com.br/FreteTMSService/BuscarTransportador'
                                                                       +'|http://tmsfrete.v2.targetmp.com.br/FreteTMSService/RealizarPagamentoAvulsoCartao'
                                                                       +'|http://tmsfrete.v2.targetmp.com.br/FreteTMSService/BuscarPagamentoAvulsoCartao'
                                                                       +'|http://tmsfrete.v2.targetmp.com.br/FreteTMSService/RealizarPagamentoCombustivelAvulsoCartao'
                                                                       +'|http://tmsfrete.v2.targetmp.com.br/FreteTMSService/BuscarCombustivelAvulsoCartao'
                                                                       +'|http://tmsfrete.v2.targetmp.com.br/FreteTMSService/BuscarCompraValePedagio'
                                                                       +'|http://tmsfrete.v2.targetmp.com.br/FreteTMSService/CadastrarAtualizarOperacaoTransporte'
                                                                       +'|http://tmsfrete.v2.targetmp.com.br/FreteTMSService/BuscarOperacaoTransporte'
                                                                       +'|http://tmsfrete.v2.targetmp.com.br/FreteTMSService/RetificarOperacaoTransporte'
                                                                       +'|http://tmsfrete.v2.targetmp.com.br/FreteTMSService/FinalizarOperacaoTransporte'
                                                                       +'|http://tmsfrete.v2.targetmp.com.br/FreteTMSService/CadastrarAtualizarDadosQuitacaoOperacaoTransporte'
                                                                       +'|http://tmsfrete.v2.targetmp.com.br/FreteTMSService/ObterDetalhesQuitacao'
                                                                       +'|http://tmsfrete.v2.targetmp.com.br/FreteTMSService/DeclararOperacaoTransporte'
                                                                       +'|http://tmsfrete.v2.targetmp.com.br/FreteTMSService/PagarParcelaIndividual'
                                                                       +'|http://tmsfrete.v2.targetmp.com.br/FreteTMSService/RegistrarParcelaAdicional'
                                                                       +'|http://tmsfrete.v2.targetmp.com.br/FreteTMSService/ObterInformacaoCartao'
                                                                       +'|http://tmsfrete.v2.targetmp.com.br/FreteTMSService/AssociarSubstituirCartao'
                                                                       +'|http://tmsfrete.v2.targetmp.com.br/FreteTMSService/CancelarOperacaoTransporte'
                                                                       +'|http://tmsfrete.v2.targetmp.com.br/FreteTMSService/EncerrarOperacaoTransporte'
                                                                       +'|http://tmsfrete.v2.targetmp.com.br/FreteTMSService/BuscarCartoesPortador'
                                                                       +'|http://tmsfrete.v2.targetmp.com.br/FreteTMSService/ComprarPedagioAvulso'
                                                                       +'|http://tmsfrete.v2.targetmp.com.br/FreteTMSService/AtualizarPedagioAvulso'
                                                                       +'|http://tmsfrete.v2.targetmp.com.br/FreteTMSService/ConfirmarPedagioTAG'
                                                                       +'|http://tmsfrete.v2.targetmp.com.br/FreteTMSService/CancelarCompraValePedagio'
                                                                       +'|http://tmsfrete.v2.targetmp.com.br/FreteTMSService/ListarRotas'
                                                                       +'|http://tmsfrete.v2.targetmp.com.br/FreteTMSService/ObterCustoRota'
                                                                       +'|http://tmsfrete.v2.targetmp.com.br/FreteTMSService/CadastrarRoteiro'
                                                                       +'|http://tmsfrete.v2.targetmp.com.br/FreteTMSService/BuscarRoteiro'
                                                                       +'|http://tmsfrete.v2.targetmp.com.br/FreteTMSService/EmitirDocumento'
                                                                       +'|http://tmsfrete.v2.targetmp.com.br/FreteTMSService/BuscarInformacoesContratacao'
                                                                       +'|http://tmsfrete.v2.targetmp.com.br/FreteTMSService/BuscarTransacoesFinanceiras'
                                                                       +'|http://tmsfrete.v2.targetmp.com.br/FreteTMSService/ConsultarTaxasCalculadas'
                                                                       +'|http://tmsfrete.v2.targetmp.com.br/FreteTMSService/TrocarPlacaCompraValePedagioTAG'
                                                                       +'|http://tmsfrete.v2.targetmp.com.br/FreteTMSService/ConsultarSituacaoTransportadorAntt'
                                                                       +'|http://tmsfrete.v2.targetmp.com.br/FreteTMSService/CadastrarRoteiroCustomizado'
                                                                       +'|http://tmsfrete.v2.targetmp.com.br/FreteTMSService/ConsultarSituacaoEmpresaTransportadorAntt'
                                                                       +'|http://tmsfrete.v2.targetmp.com.br/FreteTMSService/CadastrarAtualizarItemReguaImposto'
                                                                       +'|http://tmsfrete.v2.targetmp.com.br/FreteTMSService/CalcularImpostosFrete'
                                                                       +'|http://tmsfrete.v2.targetmp.com.br/FreteTMSService/BuscarItemReguaImposto'
                                                                       +'|http://tmsfrete.v2.targetmp.com.br/FreteTMSService/CalcularValoresPisCofins'
                                                                       +'|http://tmsfrete.v2.targetmp.com.br/FreteTMSService/RealizarPagamentoAvulsoCartaoManualmente'
                                                                       +'|http://tmsfrete.v2.targetmp.com.br/FreteTMSService/CancelarSolicitacaoPagamentoAvulsoCartao'
                                                                       +'|http://tmsfrete.v2.targetmp.com.br/FreteTMSService/RealizarPagamentoCombustivelAvulsoCartaoManualmente'
                                                                       +'|http://tmsfrete.v2.targetmp.com.br/FreteTMSService/CancelarSolicitacaoPagamentoCombustivelAvulsoCartao'
                                                                       +'|http://tmsfrete.v2.targetmp.com.br/FreteTMSService/BuscarTerminaisCarregamentoAutorizados'
                                                                       +'|http://tmsfrete.v2.targetmp.com.br/FreteTMSServiceExtended/CadastrarRoteiroDetalhado'
                                                                       +'|http://tmsfrete.v2.targetmp.com.br/FreteTMSServiceExtended/ComprarPedagioPorPracas'
                                                                       +'|http://tmsfrete.v2.targetmp.com.br/FreteTMSServiceExtended/ObterCustoRotaPorPracas'
                                                                       );
  InvRegistry.RegisterInvokeOptions(TypeInfo(FreteTMSServiceExtended), ioDocument);
  { FreteTMSServiceExtended.ObterInformacaoServico }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSServiceExtended), 'ObterInformacaoServico', '',
                                 '[ReturnName="ObterInformacaoServicoResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'ObterInformacaoServico', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'ObterInformacaoServico', 'ObterInformacaoServicoResult', '',
                                '', IS_NLBL);
  { FreteTMSServiceExtended.GerarTokenParaAcesso }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSServiceExtended), 'GerarTokenParaAcesso', '',
                                 '[ReturnName="GerarTokenParaAcessoResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'GerarTokenParaAcesso', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'GerarTokenParaAcesso', 'GerarTokenParaAcessoResult', '',
                                '', IS_NLBL);
  { FreteTMSServiceExtended.CadastrarAtualizarParticipante }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSServiceExtended), 'CadastrarAtualizarParticipante', '',
                                 '[ReturnName="CadastrarAtualizarParticipanteResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'CadastrarAtualizarParticipante', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'CadastrarAtualizarParticipante', 'participante', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'CadastrarAtualizarParticipante', 'CadastrarAtualizarParticipanteResult', '',
                                '', IS_NLBL);
  { FreteTMSServiceExtended.BuscarParticipante }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSServiceExtended), 'BuscarParticipante', '',
                                 '[ReturnName="BuscarParticipanteResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'BuscarParticipante', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'BuscarParticipante', 'buscaParticipante', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'BuscarParticipante', 'BuscarParticipanteResult', '',
                                '', IS_NLBL);
  { FreteTMSServiceExtended.CadastrarAtualizarCentroDeCusto }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSServiceExtended), 'CadastrarAtualizarCentroDeCusto', '',
                                 '[ReturnName="CadastrarAtualizarCentroDeCustoResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'CadastrarAtualizarCentroDeCusto', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'CadastrarAtualizarCentroDeCusto', 'centro', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'CadastrarAtualizarCentroDeCusto', 'CadastrarAtualizarCentroDeCustoResult', '',
                                '', IS_NLBL);
  { FreteTMSServiceExtended.BuscarCentroDeCusto }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSServiceExtended), 'BuscarCentroDeCusto', '',
                                 '[ReturnName="BuscarCentroDeCustoResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'BuscarCentroDeCusto', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'BuscarCentroDeCusto', 'buscaCentro', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'BuscarCentroDeCusto', 'BuscarCentroDeCustoResult', '',
                                '', IS_NLBL);
  { FreteTMSServiceExtended.CadastrarAtualizarMotorista }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSServiceExtended), 'CadastrarAtualizarMotorista', '',
                                 '[ReturnName="CadastrarAtualizarMotoristaResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'CadastrarAtualizarMotorista', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'CadastrarAtualizarMotorista', 'motorista', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'CadastrarAtualizarMotorista', 'CadastrarAtualizarMotoristaResult', '',
                                '', IS_NLBL);
  { FreteTMSServiceExtended.BuscarMotorista }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSServiceExtended), 'BuscarMotorista', '',
                                 '[ReturnName="BuscarMotoristaResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'BuscarMotorista', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'BuscarMotorista', 'buscaMotorista', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'BuscarMotorista', 'BuscarMotoristaResult', '',
                                '', IS_NLBL);
  { FreteTMSServiceExtended.CadastrarAtualizarTransportador }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSServiceExtended), 'CadastrarAtualizarTransportador', '',
                                 '[ReturnName="CadastrarAtualizarTransportadorResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'CadastrarAtualizarTransportador', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'CadastrarAtualizarTransportador', 'transportador', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'CadastrarAtualizarTransportador', 'CadastrarAtualizarTransportadorResult', '',
                                '', IS_NLBL);
  { FreteTMSServiceExtended.BuscarTransportador }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSServiceExtended), 'BuscarTransportador', '',
                                 '[ReturnName="BuscarTransportadorResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'BuscarTransportador', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'BuscarTransportador', 'buscaTransportador', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'BuscarTransportador', 'BuscarTransportadorResult', '',
                                '', IS_NLBL);
  { FreteTMSServiceExtended.RealizarPagamentoAvulsoCartao }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSServiceExtended), 'RealizarPagamentoAvulsoCartao', '',
                                 '[ReturnName="RealizarPagamentoAvulsoCartaoResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'RealizarPagamentoAvulsoCartao', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'RealizarPagamentoAvulsoCartao', 'pagamentoAvulso', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'RealizarPagamentoAvulsoCartao', 'RealizarPagamentoAvulsoCartaoResult', '',
                                '', IS_NLBL);
  { FreteTMSServiceExtended.BuscarPagamentoAvulsoCartao }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSServiceExtended), 'BuscarPagamentoAvulsoCartao', '',
                                 '[ReturnName="BuscarPagamentoAvulsoCartaoResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'BuscarPagamentoAvulsoCartao', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'BuscarPagamentoAvulsoCartao', 'buscaPagamentoAvulso', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'BuscarPagamentoAvulsoCartao', 'BuscarPagamentoAvulsoCartaoResult', '',
                                '', IS_NLBL);
  { FreteTMSServiceExtended.RealizarPagamentoCombustivelAvulsoCartao }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSServiceExtended), 'RealizarPagamentoCombustivelAvulsoCartao', '',
                                 '[ReturnName="RealizarPagamentoCombustivelAvulsoCartaoResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'RealizarPagamentoCombustivelAvulsoCartao', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'RealizarPagamentoCombustivelAvulsoCartao', 'combustivelAvulso', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'RealizarPagamentoCombustivelAvulsoCartao', 'RealizarPagamentoCombustivelAvulsoCartaoResult', '',
                                '', IS_NLBL);
  { FreteTMSServiceExtended.BuscarCombustivelAvulsoCartao }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSServiceExtended), 'BuscarCombustivelAvulsoCartao', '',
                                 '[ReturnName="BuscarCombustivelAvulsoCartaoResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'BuscarCombustivelAvulsoCartao', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'BuscarCombustivelAvulsoCartao', 'buscaCombustivelAvulso', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'BuscarCombustivelAvulsoCartao', 'BuscarCombustivelAvulsoCartaoResult', '',
                                '', IS_NLBL);
  { FreteTMSServiceExtended.BuscarCompraValePedagio }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSServiceExtended), 'BuscarCompraValePedagio', '',
                                 '[ReturnName="BuscarCompraValePedagioResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'BuscarCompraValePedagio', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'BuscarCompraValePedagio', 'buscaCompraValePedagio', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'BuscarCompraValePedagio', 'BuscarCompraValePedagioResult', '',
                                '', IS_NLBL);
  { FreteTMSServiceExtended.CadastrarAtualizarOperacaoTransporte }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSServiceExtended), 'CadastrarAtualizarOperacaoTransporte', '',
                                 '[ReturnName="CadastrarAtualizarOperacaoTransporteResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'CadastrarAtualizarOperacaoTransporte', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'CadastrarAtualizarOperacaoTransporte', 'operacao', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'CadastrarAtualizarOperacaoTransporte', 'CadastrarAtualizarOperacaoTransporteResult', '',
                                '', IS_NLBL);
  { FreteTMSServiceExtended.BuscarOperacaoTransporte }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSServiceExtended), 'BuscarOperacaoTransporte', '',
                                 '[ReturnName="BuscarOperacaoTransporteResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'BuscarOperacaoTransporte', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'BuscarOperacaoTransporte', 'buscaOperacao', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'BuscarOperacaoTransporte', 'BuscarOperacaoTransporteResult', '',
                                '', IS_NLBL);
  { FreteTMSServiceExtended.RetificarOperacaoTransporte }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSServiceExtended), 'RetificarOperacaoTransporte', '',
                                 '[ReturnName="RetificarOperacaoTransporteResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'RetificarOperacaoTransporte', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'RetificarOperacaoTransporte', 'retificacao', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'RetificarOperacaoTransporte', 'RetificarOperacaoTransporteResult', '',
                                '', IS_NLBL);
  { FreteTMSServiceExtended.FinalizarOperacaoTransporte }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSServiceExtended), 'FinalizarOperacaoTransporte', '',
                                 '[ReturnName="FinalizarOperacaoTransporteResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'FinalizarOperacaoTransporte', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'FinalizarOperacaoTransporte', 'finalizacaoOperacaoRequest', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'FinalizarOperacaoTransporte', 'FinalizarOperacaoTransporteResult', '',
                                '', IS_NLBL);
  { FreteTMSServiceExtended.CadastrarAtualizarDadosQuitacaoOperacaoTransporte }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSServiceExtended), 'CadastrarAtualizarDadosQuitacaoOperacaoTransporte', '',
                                 '[ReturnName="CadastrarAtualizarDadosQuitacaoOperacaoTransporteResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'CadastrarAtualizarDadosQuitacaoOperacaoTransporte', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'CadastrarAtualizarDadosQuitacaoOperacaoTransporte', 'dadosQuitacaoRequest', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'CadastrarAtualizarDadosQuitacaoOperacaoTransporte', 'CadastrarAtualizarDadosQuitacaoOperacaoTransporteResult', '',
                                '', IS_NLBL);
  { FreteTMSServiceExtended.ObterDetalhesQuitacao }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSServiceExtended), 'ObterDetalhesQuitacao', '',
                                 '[ReturnName="ObterDetalhesQuitacaoResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'ObterDetalhesQuitacao', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'ObterDetalhesQuitacao', 'detalhesQuitacao', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'ObterDetalhesQuitacao', 'ObterDetalhesQuitacaoResult', '',
                                '', IS_NLBL);
  { FreteTMSServiceExtended.DeclararOperacaoTransporte }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSServiceExtended), 'DeclararOperacaoTransporte', '',
                                 '[ReturnName="DeclararOperacaoTransporteResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'DeclararOperacaoTransporte', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'DeclararOperacaoTransporte', 'declaracao', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'DeclararOperacaoTransporte', 'DeclararOperacaoTransporteResult', '',
                                '', IS_NLBL);
  { FreteTMSServiceExtended.PagarParcelaIndividual }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSServiceExtended), 'PagarParcelaIndividual', '',
                                 '[ReturnName="PagarParcelaIndividualResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'PagarParcelaIndividual', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'PagarParcelaIndividual', 'parcelaIndividual', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'PagarParcelaIndividual', 'PagarParcelaIndividualResult', '',
                                '', IS_NLBL);
  { FreteTMSServiceExtended.RegistrarParcelaAdicional }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSServiceExtended), 'RegistrarParcelaAdicional', '',
                                 '[ReturnName="RegistrarParcelaAdicionalResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'RegistrarParcelaAdicional', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'RegistrarParcelaAdicional', 'parcelaAdicionalRequest', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'RegistrarParcelaAdicional', 'RegistrarParcelaAdicionalResult', '',
                                '', IS_NLBL);
  { FreteTMSServiceExtended.ObterInformacaoCartao }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSServiceExtended), 'ObterInformacaoCartao', '',
                                 '[ReturnName="ObterInformacaoCartaoResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'ObterInformacaoCartao', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'ObterInformacaoCartao', 'info', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'ObterInformacaoCartao', 'ObterInformacaoCartaoResult', '',
                                '', IS_NLBL);
  { FreteTMSServiceExtended.AssociarSubstituirCartao }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSServiceExtended), 'AssociarSubstituirCartao', '',
                                 '[ReturnName="AssociarSubstituirCartaoResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'AssociarSubstituirCartao', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'AssociarSubstituirCartao', 'associar', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'AssociarSubstituirCartao', 'AssociarSubstituirCartaoResult', '',
                                '', IS_NLBL);
  { FreteTMSServiceExtended.CancelarOperacaoTransporte }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSServiceExtended), 'CancelarOperacaoTransporte', '',
                                 '[ReturnName="CancelarOperacaoTransporteResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'CancelarOperacaoTransporte', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'CancelarOperacaoTransporte', 'cancelamentoOperacaoRequest', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'CancelarOperacaoTransporte', 'CancelarOperacaoTransporteResult', '',
                                '', IS_NLBL);
  { FreteTMSServiceExtended.EncerrarOperacaoTransporte }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSServiceExtended), 'EncerrarOperacaoTransporte', '',
                                 '[ReturnName="EncerrarOperacaoTransporteResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'EncerrarOperacaoTransporte', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'EncerrarOperacaoTransporte', 'encerramentoRequest', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'EncerrarOperacaoTransporte', 'EncerrarOperacaoTransporteResult', '',
                                '', IS_NLBL);
  { FreteTMSServiceExtended.BuscarCartoesPortador }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSServiceExtended), 'BuscarCartoesPortador', '',
                                 '[ReturnName="BuscarCartoesPortadorResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'BuscarCartoesPortador', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'BuscarCartoesPortador', 'buscaRequest', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'BuscarCartoesPortador', 'BuscarCartoesPortadorResult', '',
                                '', IS_NLBL);
  { FreteTMSServiceExtended.ComprarPedagioAvulso }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSServiceExtended), 'ComprarPedagioAvulso', '',
                                 '[ReturnName="ComprarPedagioAvulsoResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'ComprarPedagioAvulso', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'ComprarPedagioAvulso', 'compraRequest', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'ComprarPedagioAvulso', 'ComprarPedagioAvulsoResult', '',
                                '', IS_NLBL);
  { FreteTMSServiceExtended.AtualizarPedagioAvulso }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSServiceExtended), 'AtualizarPedagioAvulso', '',
                                 '[ReturnName="AtualizarPedagioAvulsoResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'AtualizarPedagioAvulso', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'AtualizarPedagioAvulso', 'compraRequest', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'AtualizarPedagioAvulso', 'AtualizarPedagioAvulsoResult', '',
                                '', IS_NLBL);
  { FreteTMSServiceExtended.ConfirmarPedagioTAG }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSServiceExtended), 'ConfirmarPedagioTAG', '',
                                 '[ReturnName="ConfirmarPedagioTAGResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'ConfirmarPedagioTAG', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'ConfirmarPedagioTAG', 'confirmacaoRequest', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'ConfirmarPedagioTAG', 'ConfirmarPedagioTAGResult', '',
                                '', IS_NLBL);
  { FreteTMSServiceExtended.CancelarCompraValePedagio }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSServiceExtended), 'CancelarCompraValePedagio', '',
                                 '[ReturnName="CancelarCompraValePedagioResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'CancelarCompraValePedagio', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'CancelarCompraValePedagio', 'cancelaVPRequest', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'CancelarCompraValePedagio', 'CancelarCompraValePedagioResult', '',
                                '', IS_NLBL);
  { FreteTMSServiceExtended.ListarRotas }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSServiceExtended), 'ListarRotas', '',
                                 '[ReturnName="ListarRotasResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'ListarRotas', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'ListarRotas', 'listarRotasRequest', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'ListarRotas', 'ListarRotasResult', '',
                                '', IS_NLBL);
  { FreteTMSServiceExtended.ObterCustoRota }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSServiceExtended), 'ObterCustoRota', '',
                                 '[ReturnName="ObterCustoRotaResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'ObterCustoRota', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'ObterCustoRota', 'custoRotaRequest', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'ObterCustoRota', 'ObterCustoRotaResult', '',
                                '', IS_NLBL);
  { FreteTMSServiceExtended.CadastrarRoteiro }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSServiceExtended), 'CadastrarRoteiro', '',
                                 '[ReturnName="CadastrarRoteiroResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'CadastrarRoteiro', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'CadastrarRoteiro', 'roteiroRequest', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'CadastrarRoteiro', 'CadastrarRoteiroResult', '',
                                '', IS_NLBL);
  { FreteTMSServiceExtended.BuscarRoteiro }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSServiceExtended), 'BuscarRoteiro', '',
                                 '[ReturnName="BuscarRoteiroResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'BuscarRoteiro', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'BuscarRoteiro', 'buscaRoteiro', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'BuscarRoteiro', 'BuscarRoteiroResult', '',
                                '', IS_NLBL);
  { FreteTMSServiceExtended.EmitirDocumento }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSServiceExtended), 'EmitirDocumento', '',
                                 '[ReturnName="EmitirDocumentoResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'EmitirDocumento', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'EmitirDocumento', 'emissaoDocumento', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'EmitirDocumento', 'EmitirDocumentoResult', '',
                                '', IS_NLBL);
  { FreteTMSServiceExtended.BuscarInformacoesContratacao }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSServiceExtended), 'BuscarInformacoesContratacao', '',
                                 '[ReturnName="BuscarInformacoesContratacaoResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'BuscarInformacoesContratacao', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'BuscarInformacoesContratacao', 'informacoesRequest', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'BuscarInformacoesContratacao', 'BuscarInformacoesContratacaoResult', '',
                                '', IS_NLBL);
  { FreteTMSServiceExtended.BuscarTransacoesFinanceiras }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSServiceExtended), 'BuscarTransacoesFinanceiras', '',
                                 '[ReturnName="BuscarTransacoesFinanceirasResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'BuscarTransacoesFinanceiras', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'BuscarTransacoesFinanceiras', 'buscaTransacoes', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'BuscarTransacoesFinanceiras', 'BuscarTransacoesFinanceirasResult', '',
                                '', IS_NLBL);
  { FreteTMSServiceExtended.ConsultarTaxasCalculadas }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSServiceExtended), 'ConsultarTaxasCalculadas', '',
                                 '[ReturnName="ConsultarTaxasCalculadasResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'ConsultarTaxasCalculadas', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'ConsultarTaxasCalculadas', 'consultaTaxasCalculadas', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'ConsultarTaxasCalculadas', 'ConsultarTaxasCalculadasResult', '',
                                '', IS_NLBL);
  { FreteTMSServiceExtended.TrocarPlacaCompraValePedagioTAG }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSServiceExtended), 'TrocarPlacaCompraValePedagioTAG', '',
                                 '[ReturnName="TrocarPlacaCompraValePedagioTAGResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'TrocarPlacaCompraValePedagioTAG', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'TrocarPlacaCompraValePedagioTAG', 'trocaPlacaCompraValePedagioTAGRequest', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'TrocarPlacaCompraValePedagioTAG', 'TrocarPlacaCompraValePedagioTAGResult', '',
                                '', IS_NLBL);
  { FreteTMSServiceExtended.ConsultarSituacaoTransportadorAntt }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSServiceExtended), 'ConsultarSituacaoTransportadorAntt', '',
                                 '[ReturnName="ConsultarSituacaoTransportadorAnttResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'ConsultarSituacaoTransportadorAntt', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'ConsultarSituacaoTransportadorAntt', 'dadosConsulta', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'ConsultarSituacaoTransportadorAntt', 'ConsultarSituacaoTransportadorAnttResult', '',
                                '', IS_NLBL);
  { FreteTMSServiceExtended.CadastrarRoteiroCustomizado }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSServiceExtended), 'CadastrarRoteiroCustomizado', '',
                                 '[ReturnName="CadastrarRoteiroCustomizadoResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'CadastrarRoteiroCustomizado', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'CadastrarRoteiroCustomizado', 'roteiroCustomizadoRequest', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'CadastrarRoteiroCustomizado', 'CadastrarRoteiroCustomizadoResult', '',
                                '', IS_NLBL);
  { FreteTMSServiceExtended.ConsultarSituacaoEmpresaTransportadorAntt }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSServiceExtended), 'ConsultarSituacaoEmpresaTransportadorAntt', '',
                                 '[ReturnName="ConsultarSituacaoEmpresaTransportadorAnttResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'ConsultarSituacaoEmpresaTransportadorAntt', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'ConsultarSituacaoEmpresaTransportadorAntt', 'dadosConsulta', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'ConsultarSituacaoEmpresaTransportadorAntt', 'ConsultarSituacaoEmpresaTransportadorAnttResult', '',
                                '', IS_NLBL);
  { FreteTMSServiceExtended.CadastrarAtualizarItemReguaImposto }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSServiceExtended), 'CadastrarAtualizarItemReguaImposto', '',
                                 '[ReturnName="CadastrarAtualizarItemReguaImpostoResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'CadastrarAtualizarItemReguaImposto', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'CadastrarAtualizarItemReguaImposto', 'itemRegua', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'CadastrarAtualizarItemReguaImposto', 'CadastrarAtualizarItemReguaImpostoResult', '',
                                '', IS_NLBL);
  { FreteTMSServiceExtended.CalcularImpostosFrete }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSServiceExtended), 'CalcularImpostosFrete', '',
                                 '[ReturnName="CalcularImpostosFreteResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'CalcularImpostosFrete', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'CalcularImpostosFrete', 'calcularImpostosFreteRequest', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'CalcularImpostosFrete', 'CalcularImpostosFreteResult', '',
                                '', IS_NLBL);
  { FreteTMSServiceExtended.BuscarItemReguaImposto }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSServiceExtended), 'BuscarItemReguaImposto', '',
                                 '[ReturnName="BuscarItemReguaImpostoResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'BuscarItemReguaImposto', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'BuscarItemReguaImposto', 'buscaItemReguaImposto', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'BuscarItemReguaImposto', 'BuscarItemReguaImpostoResult', '',
                                '', IS_NLBL);
  { FreteTMSServiceExtended.CalcularValoresPisCofins }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSServiceExtended), 'CalcularValoresPisCofins', '',
                                 '[ReturnName="CalcularValoresPisCofinsResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'CalcularValoresPisCofins', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'CalcularValoresPisCofins', 'calcularValoresPisCofinsRequest', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'CalcularValoresPisCofins', 'CalcularValoresPisCofinsResult', '',
                                '', IS_NLBL);
  { FreteTMSServiceExtended.RealizarPagamentoAvulsoCartaoManualmente }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSServiceExtended), 'RealizarPagamentoAvulsoCartaoManualmente', '',
                                 '[ReturnName="RealizarPagamentoAvulsoCartaoManualmenteResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'RealizarPagamentoAvulsoCartaoManualmente', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'RealizarPagamentoAvulsoCartaoManualmente', 'pagamentoAvulsoRequest', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'RealizarPagamentoAvulsoCartaoManualmente', 'RealizarPagamentoAvulsoCartaoManualmenteResult', '',
                                '', IS_NLBL);
  { FreteTMSServiceExtended.CancelarSolicitacaoPagamentoAvulsoCartao }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSServiceExtended), 'CancelarSolicitacaoPagamentoAvulsoCartao', '',
                                 '[ReturnName="CancelarSolicitacaoPagamentoAvulsoCartaoResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'CancelarSolicitacaoPagamentoAvulsoCartao', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'CancelarSolicitacaoPagamentoAvulsoCartao', 'cancelamentoRequest', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'CancelarSolicitacaoPagamentoAvulsoCartao', 'CancelarSolicitacaoPagamentoAvulsoCartaoResult', '',
                                '', IS_NLBL);
  { FreteTMSServiceExtended.RealizarPagamentoCombustivelAvulsoCartaoManualmente }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSServiceExtended), 'RealizarPagamentoCombustivelAvulsoCartaoManualmente', '',
                                 '[ReturnName="RealizarPagamentoCombustivelAvulsoCartaoManualmenteResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'RealizarPagamentoCombustivelAvulsoCartaoManualmente', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'RealizarPagamentoCombustivelAvulsoCartaoManualmente', 'combustivelAvulsoRequest', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'RealizarPagamentoCombustivelAvulsoCartaoManualmente', 'RealizarPagamentoCombustivelAvulsoCartaoManualmenteResult', '',
                                '', IS_NLBL);
  { FreteTMSServiceExtended.CancelarSolicitacaoPagamentoCombustivelAvulsoCartao }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSServiceExtended), 'CancelarSolicitacaoPagamentoCombustivelAvulsoCartao', '',
                                 '[ReturnName="CancelarSolicitacaoPagamentoCombustivelAvulsoCartaoResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'CancelarSolicitacaoPagamentoCombustivelAvulsoCartao', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'CancelarSolicitacaoPagamentoCombustivelAvulsoCartao', 'cancelamentoRequest', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'CancelarSolicitacaoPagamentoCombustivelAvulsoCartao', 'CancelarSolicitacaoPagamentoCombustivelAvulsoCartaoResult', '',
                                '', IS_NLBL);
  { FreteTMSServiceExtended.BuscarTerminaisCarregamentoAutorizados }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSServiceExtended), 'BuscarTerminaisCarregamentoAutorizados', '',
                                 '[ReturnName="BuscarTerminaisCarregamentoAutorizadosResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'BuscarTerminaisCarregamentoAutorizados', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'BuscarTerminaisCarregamentoAutorizados', 'BuscarTerminaisCarregamentoAutorizadosResult', '',
                                '', IS_NLBL);
  { FreteTMSServiceExtended.CadastrarRoteiroDetalhado }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSServiceExtended), 'CadastrarRoteiroDetalhado', '',
                                 '[ReturnName="CadastrarRoteiroDetalhadoResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'CadastrarRoteiroDetalhado', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'CadastrarRoteiroDetalhado', 'rotaDetalhada', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'CadastrarRoteiroDetalhado', 'CadastrarRoteiroDetalhadoResult', '',
                                '', IS_NLBL);
  { FreteTMSServiceExtended.ComprarPedagioPorPracas }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSServiceExtended), 'ComprarPedagioPorPracas', '',
                                 '[ReturnName="ComprarPedagioPorPracasResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'ComprarPedagioPorPracas', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'ComprarPedagioPorPracas', 'compraPorPracaRequest', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'ComprarPedagioPorPracas', 'ComprarPedagioPorPracasResult', '',
                                '', IS_NLBL);
  { FreteTMSServiceExtended.ObterCustoRotaPorPracas }
  InvRegistry.RegisterMethodInfo(TypeInfo(FreteTMSServiceExtended), 'ObterCustoRotaPorPracas', '',
                                 '[ReturnName="ObterCustoRotaPorPracasResult"]', IS_OPTN or IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'ObterCustoRotaPorPracas', 'auth', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'ObterCustoRotaPorPracas', 'custoPorPracaRequest', '',
                                '', IS_NLBL);
  InvRegistry.RegisterParamInfo(TypeInfo(FreteTMSServiceExtended), 'ObterCustoRotaPorPracas', 'ObterCustoRotaPorPracasResult', '',
                                '', IS_NLBL);
  RegisterTypeProc0;
  RegisterTypeProc1;
  RegisterTypeProc2;
  RegisterTypeProc3;

end.